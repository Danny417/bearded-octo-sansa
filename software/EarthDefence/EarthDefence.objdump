
EarthDefence.elf:     file format elf32-littlenios2
EarthDefence.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00029144 memsz 0x00029144 flags r-x
    LOAD off    0x0002a164 vaddr 0x00829164 paddr 0x008301a4 align 2**12
         filesz 0x00007040 memsz 0x00007040 flags rw-
    LOAD off    0x000311e4 vaddr 0x008371e4 paddr 0x008371e4 align 2**12
         filesz 0x00000000 memsz 0x00000964 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00028110  008001b8  008001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000e9c  008282c8  008282c8  000292c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00007040  00829164  008301a4  0002a164  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000964  008371e4  008371e4  000311e4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000311a4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000013d8  00000000  00000000  000311d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00003f02  00000000  00000000  000325a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0004d2fd  00000000  00000000  000364aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cbd9  00000000  00000000  000837a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00028770  00000000  00000000  00090380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00004708  00000000  00000000  000b8af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000036be  00000000  00000000  000bd1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00010a79  00000000  00000000  000c08b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000d1330  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000af0  00000000  00000000  000d1390  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000d8f65  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  000d8f68  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000d8f77  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000d8f78  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000d8f79  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000d8f82  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000d8f8b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000d8f94  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  000d8f9f  2**0
                  CONTENTS, READONLY
 26 .jdi          00005a6e  00000000  00000000  000d8fda  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000afe83  00000000  00000000  000dea48  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b8 l    d  .text	00000000 .text
008282c8 l    d  .rodata	00000000 .rodata
00829164 l    d  .rwdata	00000000 .rwdata
008371e4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Alien.c
00000000 l    df *ABS*	00000000 AudioController.c
00000000 l    df *ABS*	00000000 BitOperations.c
00000000 l    df *ABS*	00000000 Box3D.c
00000000 l    df *ABS*	00000000 Bullet.c
00000000 l    df *ABS*	00000000 BulletCollection.c
00000000 l    df *ABS*	00000000 Button.c
00000000 l    df *ABS*	00000000 Collidable.c
00000000 l    df *ABS*	00000000 Cursor.c
00000000 l    df *ABS*	00000000 CursorController.c
00000000 l    df *ABS*	00000000 Env.c
00000000 l    df *ABS*	00000000 Frame.c
00000000 l    df *ABS*	00000000 Game.c
00828808 l     O .rodata	00000010 segs.5933
00000000 l    df *ABS*	00000000 GameInfo.c
00000000 l    df *ABS*	00000000 HighScoreScreen.c
00000000 l    df *ABS*	00000000 Interface.c
00000000 l    df *ABS*	00000000 KeyController.c
00000000 l    df *ABS*	00000000 Node.c
00000000 l    df *ABS*	00000000 Object.c
00000000 l    df *ABS*	00000000 QuardTree.c
00000000 l    df *ABS*	00000000 Sound.c
00000000 l    df *ABS*	00000000 SpaceShip.c
00000000 l    df *ABS*	00000000 SwitchController.c
00000000 l    df *ABS*	00000000 TowerPlacer.c
00000000 l    df *ABS*	00000000 UnitTest.c
00000000 l    df *ABS*	00000000 animation.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 hardCode.c
00000000 l    df *ABS*	00000000 fp-bit.c
00812db8 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
008137e4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00814580 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00815f24 l     F .text	00000058 __sprint_r
00828c6e l     O .rodata	00000010 blanks.3452
00828c5e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
00828d7f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00817f88 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00819984 l     F .text	00000058 std
00819a90 l     F .text	00000008 __fp_lock
00819a98 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0082e9bc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00830178 l     O .rwdata	00000004 charset
00828f24 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0082906c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0081db28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0081db88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0081dc88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0081df68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0081e048 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0081e1a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0081e3d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00830198 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0081e840 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0082ef70 l     O .rwdata	00001060 jtag_uart
0082ffd0 l     O .rwdata	00000030 audio_and_video_config_0
00830000 l     O .rwdata	00000030 audio
00830030 l     O .rwdata	0000002c character_lcd_0
0083005c l     O .rwdata	00000038 ps2_0
00830094 l     O .rwdata	00000048 char_drawer
008300dc l     O .rwdata	00000054 pixel_buffer_dma_0
00830130 l     O .rwdata	0000002c SD_Card
0081ec60 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0081ee98 l     F .text	0000022c altera_avalon_jtag_uart_irq
0081f0c4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081f740 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008275dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008277c8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00827904 l     F .text	000000dc alt_file_locked
00827b68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00828044 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
008281f8 l     F .text	00000040 alt_sim_halt
008372d0 g     O .bss	00000028 info
00820304 g     F .text	00000038 alt_up_av_config_reset
0083727c g     O .bss	00000004 aux_status_register
00802518 g     F .text	0000029c rotateBox3DX
0081af60 g     F .text	00000094 _mprec_log10
008207a8 g     F .text	00000064 alt_up_av_config_read_D5M_cfg_register
0081b04c g     F .text	00000088 __any_on
0081c6e8 g     F .text	00000070 _isatty_r
00829044 g     O .rodata	00000028 __mprec_tinytens
00820374 g     F .text	00000030 alt_up_av_config_disable_interrupt
0081e204 g     F .text	0000006c alt_main
00815a50 g     F .text	0000008c strcpy
008224d8 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0080af50 g     F .text	00000488 my_alarm_callback
008157c4 g     F .text	000000a0 _puts_r
008210b4 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
008378b8 g     O .bss	00000100 alt_irq
008075ac g     F .text	0000009c checkGoal
0081c758 g     F .text	00000078 _lseek_r
0080707c g     F .text	000000a4 addObjToCollide
0080eb44 g     F .text	000001e4 write_high_scores
008301a4 g       *ABS*	00000000 __flash_rwdata_start
008209b4 g     F .text	00000034 alt_up_character_lcd_send_cmd
0081d3d4 g     F .text	00000088 __eqdf2
008371e8 g     O .bss	00000001 byte2
00823188 g     F .text	000001b0 Check_for_Master_Boot_Record
00807ce4 g     F .text	0000012c dragOverlap
00810cbc g     F .text	00000100 getSoundFilenameFromId
0081fc1c g     F .text	00000070 alt_up_audio_read_fifo_avail
00820444 g     F .text	000000ac alt_up_av_config_write_audio_cfg_register
00837b48 g       *ABS*	00000000 __alt_heap_start
00827040 g     F .text	000001cc alt_up_sd_card_fclose
00805e28 g     F .text	00000088 setBulletVelocity
0081574c g     F .text	00000044 printf
0081fc8c g     F .text	00000070 alt_up_audio_record_r
008371e9 g     O .bss	00000001 byte3
0081c1b4 g     F .text	00000068 __sseek
008199ec g     F .text	000000a4 __sinit
008216fc g     F .text	00000114 alt_up_char_buffer_string
00820ecc g     F .text	00000034 read_CE_bit
00801524 g     F .text	00000054 stop_background_loop
0081a6c4 g     F .text	00000084 _setlocale_r
00819aec g     F .text	00000068 __sfmoreglue
00804920 g     F .text	0000011c launchMainBullet
0081e290 g     F .text	00000020 __malloc_unlock
0080af08 g     F .text	00000048 safefree
00821260 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
00811e48 g     F .text	0000002c imageInDisk
00813250 g     F .text	00000174 __divsf3
008372a0 g     O .bss	00000004 current_sector_modified
00806fa4 g     F .text	00000074 changePage
0082162c g     F .text	000000d0 alt_up_char_buffer_draw
0080f198 g     F .text	0000025c start_high_score_screen
0081fb94 g     F .text	00000088 alt_up_audio_reset_audio_core
00827308 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
00837270 g     O .bss	00000004 altera_avalon_timer_ts_freq
00812978 g     F .text	000002e0 backgroundAnimation
0081a9dc g     F .text	000000e0 memmove
008060d4 g     F .text	00000024 dummyRedraw
008371ea g     O .bss	00000001 byte1
00806c98 g     F .text	000000f4 updateStatsPage
00819adc g     F .text	00000010 _cleanup
0081b0d4 g     F .text	000000bc _Balloc
0080b470 g     F .text	00000094 loadSDCard
0081363c g     F .text	00000094 __fixsfsi
00825c04 g     F .text	000000c8 alt_up_sd_card_is_Present
00812614 g     F .text	000001fc cleanDrawing
0080050c g     F .text	0000045c alienAction
00822ea0 g     F .text	00000050 Save_Modified_Sector
008058f4 g     F .text	00000424 fire_tower4_level2
00809964 g     F .text	00000060 initScoreBoard
008218ac g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
008123c8 g     F .text	0000024c draw_nontransparent
0081d4e4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00820938 g     F .text	0000007c get_DDRAM_addr
00811648 g     F .text	0000005c setWeapon
0082186c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00829614 g     O .rwdata	00000190 explode02
00812230 g     F .text	00000198 drawBox
00807294 g     F .text	00000074 distance_
00800000 g     F .entry	0000001c __reset
00837298 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00811d1c g     F .text	00000060 updateTowerPosition
0081047c g     F .text	00000074 initRange
00810380 g     F .text	00000028 dummyCollide
00811adc g     F .text	0000003c removeSwitchListener
008371ec g     O .bss	00000004 lock
00800020 g       *ABS*	00000000 __flash_exceptions_start
0081c674 g     F .text	00000074 _fstat_r
00837244 g     O .bss	00000004 errno
008144d4 g     F .text	00000038 __make_dp
0083015c g     O .rwdata	00000004 star
008010c8 g     F .text	000001a4 addToAudioBuffer
00808964 g     F .text	0000007c initEnv
0080e314 g     F .text	00000090 initGameInfo
00829de4 g     O .rwdata	00000190 explode14
0080fe78 g     F .text	000001c0 initObject
0080661c g     F .text	0000067c pageButtonCollide
0081fb58 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00814ab4 g     F .text	0000002c __make_fp
008371e4 g     O .bss	00000004 char_buffer
00808ee8 g     F .text	00000640 initMainMenu
0083725c g     O .bss	00000004 alt_argv
0083815c g       *ABS*	00000000 _gp
0081e6f0 g     F .text	00000030 usleep
008261c4 g     F .text	000003a8 alt_up_sd_card_fopen
00812f9c g     F .text	00000070 __subsf3
00825d40 g     F .text	000000d4 alt_up_sd_card_find_first
0083728c g     O .bss	00000004 command_argument_register
00821a4c g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00811794 g     F .text	0000025c upgrade
0080174c g     F .text	00000038 isBitSet
0082edf0 g     O .rwdata	00000180 alt_fd_list
00802ff0 g     F .text	0000003c killBullet
00806e28 g     F .text	00000068 endGameButtonCollide
008371f0 g     O .bss	00000004 weapon1_lvl2
0080abc0 g     F .text	000000b8 redrawSBoard
00802004 g     F .text	000000d0 killBox
00825434 g     F .text	0000012c find_first_empty_record_in_root_directory
00827704 g     F .text	00000094 alt_find_dev
008156ac g     F .text	000000a0 memcpy
00820b4c g     F .text	0000004c alt_up_character_lcd_write_fd
00805d18 g     F .text	00000058 fire_tower5_level1
0080ac78 g     F .text	000000a4 redrawCPanel
00821810 g     F .text	0000005c alt_up_char_buffer_clear
00819ad0 g     F .text	0000000c _cleanup_r
00814304 g     F .text	000000f8 __floatsidf
008116a4 g     F .text	0000007c spaceShipCollide
0082788c g     F .text	00000078 alt_io_redirect
0081d5f4 g     F .text	00000088 __ltdf2
008282c8 g       *ABS*	00000000 __DTOR_END__
00815864 g     F .text	00000014 puts
00811248 g     F .text	00000030 stopSound
008371f4 g     O .bss	00000004 swap
0080e48c g     F .text	000000d8 initHighScore
00800ea8 g     F .text	00000110 updateAudioController
00825044 g     F .text	000001a4 find_first_empty_cluster
00800468 g     F .text	000000a4 killAlien
00806f68 g     F .text	0000003c updateView
0081aeb0 g     F .text	000000b0 __ratio
00825b40 g     F .text	000000c4 alt_up_sd_card_open_dev
00800e34 g     F .text	00000034 enableAudioController
008200f0 g     F .text	00000060 alt_up_audio_read_fifo_head
00821afc g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0081f2dc g     F .text	00000224 altera_avalon_jtag_uart_read
00814f58 g     F .text	00000014 malloc
00815790 g     F .text	00000034 _printf_r
0080f7e8 g     F .text	00000190 initNode2D
008146bc g     F .text	00000008 __udivsi3
0081dea8 g     F .text	000000c0 isatty
0080a0a4 g     F .text	000000b4 updateScoreFrame
008371f8 g     O .bss	00000004 weapon4_lvl1
00828f54 g     O .rodata	000000c8 __mprec_tens
00822188 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00805260 g     F .text	00000080 fire_tower2_level2
0080fc20 g     F .text	00000050 updatePos
0081a6a0 g     F .text	00000008 __locale_charset
008371fc g     O .bss	00000004 weapon2_lvl2
0081352c g     F .text	00000078 __lesf2
008073c0 g     F .text	000001ec checkCollision
00809528 g     F .text	000000bc removeFrame
00827dc0 g     F .text	00000090 alt_icache_flush
00837238 g     O .bss	00000004 __malloc_top_pad
0080f478 g     F .text	00000080 initKeyController
008020d4 g     F .text	000001a8 updateBox3D
0082a5b4 g     O .rwdata	00004000 earth
00820278 g     F .text	0000008c alt_up_av_config_read_data
0080f5a8 g     F .text	00000088 key_ISR
00830174 g     O .rwdata	00000004 __mb_cur_max
0081a6a8 g     F .text	0000000c _localeconv_r
0081b7cc g     F .text	0000003c __i2b
0081a084 g     F .text	0000049c __sfvwrite_r
00824320 g     F .text	000000c0 get_dir_divider_location
008031c8 g     F .text	000000e0 blackHoleAction
0081590c g     F .text	00000070 _sbrk_r
00802bac g     F .text	00000170 animateBox1
0082296c g     F .text	000000d0 helper_plot_pixel
008015d8 g     F .text	000000a4 playSoundById
00823fc0 g     F .text	000000d0 filename_to_upper_case
0080ed28 g     F .text	0000011c show_high_scores
00807018 g     F .text	00000064 initCollidable
0082656c g     F .text	00000090 alt_up_sd_card_set_attributes
00806d8c g     F .text	0000009c upgradeButtonCollide
00823338 g     F .text	00000284 Read_File_Record_At_Offset
0081c7d0 g     F .text	00000078 _read_r
00805db8 g     F .text	00000070 setBulletAcceleration
00811c48 g     F .text	00000038 stopTowerPlacement
0082edbc g     O .rwdata	0000000c __lc_ctype
0080e564 g     F .text	00000048 high_score_to_string
0083018c g     O .rwdata	00000004 alt_max_fd
00820150 g     F .text	00000060 alt_up_audio_write_fifo_head
00814df4 g     F .text	00000138 __unpack_d
00824be0 g     F .text	00000464 find_file_in_directory
0081c550 g     F .text	00000110 _fclose_r
00803ce0 g     F .text	00000114 bulletCollide
00820f00 g     F .text	00000034 read_num_bytes_available
008027b4 g     F .text	00000294 rotateBox3DZ
00819950 g     F .text	00000034 fflush
0083723c g     O .bss	00000004 __malloc_max_sbrked_mem
00811cd0 g     F .text	0000004c selectTower
0081dce8 g     F .text	000001c0 alt_irq_register
00803fa8 g     F .text	000000f8 fireCollide
00804234 g     F .text	0000002c laserAnimate
00820e68 g     F .text	00000034 read_RI_bit
008136d0 g     F .text	00000054 __extendsfdf2
00810dbc g     F .text	00000120 readInt
0080bc48 g     F .text	0000004c displayString
00825ccc g     F .text	00000074 alt_up_sd_card_is_FAT16
00813c74 g     F .text	00000074 __adddf3
0081ad90 g     F .text	00000120 __b2d
00821b30 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0081ce24 g     F .text	000005b0 __umoddi3
0081e0b4 g     F .text	000000f0 lseek
00801578 g     F .text	00000060 playSound
008088f4 g     F .text	00000070 leftMousePressed
00830170 g     O .rwdata	00000004 _global_impure_ptr
008246cc g     F .text	00000514 get_home_directory_cluster_for_file
0081bb48 g     F .text	000005f4 _realloc_r
00837b48 g       *ABS*	00000000 __bss_end
00810edc g     F .text	00000030 update_buffer_index
00821c94 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
0081e5e4 g     F .text	0000010c alt_tick
00837200 g     O .bss	00000004 audioController
00837204 g     O .bss	00000004 weapon2_lvl1
0081c848 g     F .text	000005dc __udivdi3
0082901c g     O .rodata	00000028 __mprec_bigtens
0081ba28 g     F .text	00000120 __s2b
0081d67c g     F .text	00000194 __floatunsidf
00800204 g     F .text	0000013c initAlien
0081acb0 g     F .text	00000060 __mcmp
008372a4 g     O .bss	00000004 current_sector_index
0081f9a4 g     F .text	00000040 alt_up_audio_open_dev
00820f68 g     F .text	0000002c read_data_byte
00830168 g     O .rwdata	00000004 __ctype_ptr
00819ab8 g     F .text	00000018 __fp_lock_all
008100ac g     F .text	00000048 setStats
008372f8 g     O .bss	00000018 alarm
008042cc g     F .text	0000012c initBulletToWeapon1
0081fde0 g     F .text	00000070 alt_up_audio_play_r
0081e54c g     F .text	00000098 alt_alarm_stop
0080dbe0 g     F .text	00000104 gameSetup
00815f00 g     F .text	00000024 strtol
008104f0 g     F .text	000000d4 inBoundary
00820e9c g     F .text	00000030 read_RE_bit
008230a4 g     F .text	000000e4 mark_cluster
0080a664 g     F .text	0000007c clearMBoard
00837254 g     O .bss	00000004 alt_irq_active
0080606c g     F .text	00000068 killButton
008030c0 g     F .text	00000108 bulletAction
008000ec g     F .exceptions	000000cc alt_irq_handler
0082edc8 g     O .rwdata	00000028 alt_dev_null
008292f4 g     O .rwdata	00000190 explode04
00837208 g     O .bss	00000004 char_lcd_dev
00803df4 g     F .text	0000018c blackHoleCollide
00825560 g     F .text	000001b8 convert_filename_to_name_extension
00808a54 g     F .text	00000078 addToEnvNR
00814944 g     F .text	000000c8 __unpack_f
00820e34 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00807e10 g     F .text	000000d0 collideCursor
00810bac g     F .text	00000110 clearTree
0082110c g     F .text	00000078 alt_up_ps2_write_data_byte
00807120 g     F .text	00000174 removeFromCollide
0080dce4 g     F .text	00000208 endGame
008274e4 g     F .text	00000044 alt_dcache_flush_all
0081ab7c g     F .text	00000070 __hi0bits
00808240 g     F .text	0000011c setPanelToCursor
00837278 g     O .bss	00000004 is_sd_card_formated_as_FAT16
008228a8 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
008143fc g     F .text	000000d8 __fixdfsi
008115d4 g     F .text	0000003c killSpaceShip
008251e8 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
00811c80 g     F .text	00000034 attemptPlaceTower
008301a4 g       *ABS*	00000000 __ram_rwdata_end
00800d64 g     F .text	00000044 av_config_setup
00830184 g     O .rwdata	00000008 alt_dev_list
0081e720 g     F .text	00000120 write
00829934 g     O .rwdata	00000190 explode11
0083729c g     O .bss	00000004 device_pointer
0080f56c g     F .text	0000003c removeKeyListener
0081f97c g     F .text	00000028 alt_timestamp_freq
008133c4 g     F .text	00000078 __gtsf2
00822a3c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
008089e0 g     F .text	00000030 setCursor
00829164 g       *ABS*	00000000 __ram_rodata_end
0081dbb4 g     F .text	000000d4 fstat
0083720c g     O .bss	00000004 weapon3_lvl1
00804514 g     F .text	00000150 initBulletToWeapon3
0080a030 g     F .text	00000074 initMsgBoard
0081b908 g     F .text	00000120 __pow5mult
00837248 g     O .bss	00000004 __nlocale_changed
008146c4 g     F .text	00000008 __umodsi3
00829c54 g     O .rwdata	00000190 explode13
00808de8 g     F .text	00000030 addCollisionToEnv
00829f74 g     O .rwdata	00000190 pacman01
0082a104 g     O .rwdata	00000190 pacman02
00811a68 g     F .text	00000074 addSwitchListener
00804260 g     F .text	0000006c initBulletCollection
00837b48 g       *ABS*	00000000 end
00821480 g     F .text	000000a8 alt_up_ps2_write_fd
008147e4 g     F .text	00000160 __pack_f
00811d7c g     F .text	000000cc initAnimation
0080a6e0 g     F .text	00000354 redraw
008088c4 g     F .text	00000030 leftMouseReleased
00821568 g     F .text	00000084 alt_up_char_buffer_init
00814f2c g     F .text	0000000c _atoi_r
0081ede0 g     F .text	000000b8 altera_avalon_jtag_uart_init
00802e8c g     F .text	00000100 initBullet
008282c4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0081f7b4 g     F .text	00000088 alt_avalon_timer_sc_init
00837210 g     O .bss	00000004 cameraX
00814764 g     F .text	00000080 __clzsi2
0081f500 g     F .text	00000240 altera_avalon_jtag_uart_write
00808c34 g     F .text	000001b4 removeFromEnvOnly
008199dc g     F .text	00000004 __sfp_lock_acquire
0081a8f8 g     F .text	000000e4 memchr
00805eb0 g     F .text	000000c8 reloadBullet
00820a5c g     F .text	00000078 alt_up_character_lcd_write
00815f7c g     F .text	00001eac ___vfprintf_internal_r
00809f10 g     F .text	00000120 initMenuPanel
008159f0 g     F .text	00000060 _sprintf_r
00810038 g     F .text	00000074 killObject
00819d70 g     F .text	00000314 _free_r
00800968 g     F .text	000001c4 alienCollide
00804c2c g     F .text	00000084 fire_tower1_level1
00811cb4 g     F .text	0000001c killTowerPlacer
00807308 g     F .text	000000b8 checkCollide
0080843c g     F .text	000000a8 initCursorController
008040a0 g     F .text	00000194 freezeCollide
008060f8 g     F .text	0000009c setBuyButton
00828048 g     F .text	000001b0 __call_exitprocs
008103a8 g     F .text	00000020 dummyAction
0080a304 g     F .text	00000360 updateMSG
0083724c g     O .bss	00000004 __mlocale_changed
00830164 g     O .rwdata	00000004 __malloc_sbrk_base
008001b8 g     F .text	0000004c _start
00837264 g     O .bss	00000004 _alt_tick_rate
00803580 g     F .text	000001bc fireAction
00801060 g     F .text	00000068 clearAudioBuffer
0081ffc4 g     F .text	0000012c alt_up_audio_write_fifo
00815894 g     F .text	00000078 rand
0081b498 g     F .text	0000014c __lshift
00800da8 g     F .text	0000008c initAudioController
00820214 g     F .text	00000064 alt_up_av_config_write_data
0080302c g     F .text	00000094 resetBullet
00837268 g     O .bss	00000004 _alt_nticks
0081e2b0 g     F .text	00000120 read
0081e8d4 g     F .text	0000038c alt_sys_init
00820cc0 g     F .text	000000b0 alt_up_character_lcd_shift_display
008135a4 g     F .text	00000098 __floatsisf
0081fec0 g     F .text	00000104 alt_up_audio_read_fifo
0080e3c4 g     F .text	000000c8 updateScoreMoney
00827f10 g     F .text	00000134 __register_exitproc
008208d4 g     F .text	00000064 alt_up_av_config_write_LTM_cfg_register
00837214 g     O .bss	00000004 weapon4_lvl2
00805f78 g     F .text	000000f4 initButton
0081facc g     F .text	00000050 alt_up_audio_disable_write_interrupt
0082138c g     F .text	00000058 alt_up_ps2_clear_fifo
00837218 g     O .bss	00000004 weapon5_lvl2
0080f978 g     F .text	000002a8 relativePosition
008047b8 g     F .text	0000011c initBulletToWeapon5
0081b5e4 g     F .text	000001e8 __multiply
00820d70 g     F .text	00000090 alt_up_character_lcd_erase_pos
0081f174 g     F .text	00000074 altera_avalon_jtag_uart_close
00829164 g       *ABS*	00000000 __ram_rwdata_start
008282c8 g       *ABS*	00000000 __ram_rodata_start
00815c00 g     F .text	000000bc strncpy
008372a8 g     O .bss	00000028 __malloc_current_mallinfo
0081b190 g     F .text	0000017c __d2b
00805364 g     F .text	00000538 fire_tower3_level2
00837274 g     O .bss	00000004 initialized
008113a0 g     F .text	00000234 setShipProperty
00808770 g     F .text	000000ec mouse_movement_listener
0081ec98 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00827d08 g     F .text	000000b8 alt_get_fd
00837350 g     O .bss	00000014 search_data
00827398 g     F .text	0000014c alt_busy_sleep
0081d810 g     F .text	000000c8 __fpcmp_parts_d
0081c4e0 g     F .text	00000070 _close_r
008297a4 g     O .rwdata	00000190 explode01
0081fa80 g     F .text	0000004c alt_up_audio_enable_write_interrupt
0080390c g     F .text	00000130 setBulletInitPosition
00812810 g     F .text	00000168 animated
0080d4f4 g     F .text	000006ec mainMenu
0083721c g     O .bss	00000004 weapon5_lvl1
00827e9c g     F .text	00000074 memcmp
0081ed48 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008084e4 g     F .text	0000028c updateCursorController
00837b48 g       *ABS*	00000000 __alt_stack_base
0081ed90 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0080bc94 g     F .text	000001ac promptSDcard
0080e788 g     F .text	00000100 clear_high_scores
008095e4 g     F .text	00000380 initGamePanel
00817e4c g     F .text	0000013c __swsetup_r
00811720 g     F .text	00000074 spaceShipShoot
00811b18 g     F .text	00000074 switch_ISR
008140ac g     F .text	00000258 __divdf3
0081fa30 g     F .text	00000050 alt_up_audio_disable_read_interrupt
00819b54 g     F .text	000000f0 __sfp
00837364 g     O .bss	00000054 boot_sector_data
00815b50 g     F .text	000000b0 strncat
0081aff4 g     F .text	00000058 __copybits
00806f08 g     F .text	00000060 createShip
008099c4 g     F .text	00000424 initCtrlPanel
0080b874 g     F .text	0000036c loadSDImageSeq
0082e5b4 g     O .rwdata	00000408 __malloc_av_
008199e8 g     F .text	00000004 __sinit_lock_release
0080f3f4 g     F .text	00000084 waveLEDR
00813ce8 g     F .text	000003c4 __muldf3
0081c298 g     F .text	00000060 __sread
00828ad8 g     O .rodata	00000010 __thenan_sf
0080373c g     F .text	000001d0 freezeAction
00802d1c g     F .text	00000170 animateBox2
00827be8 g     F .text	00000120 alt_find_file
0080a19c g     F .text	00000168 strsep_
00827528 g     F .text	000000b4 alt_dev_llist_insert
0081e270 g     F .text	00000020 __malloc_lock
0081e490 g     F .text	000000bc sbrk
0080bbe0 g     F .text	00000068 backgroundImage
00800c0c g     F .text	00000158 followPath
00819754 g     F .text	000001fc _fflush_r
0081c42c g     F .text	000000b4 _calloc_r
00837310 g     O .bss	00000040 gamePanel
00804664 g     F .text	00000154 initBulletToWeapon4
00811c0c g     F .text	0000003c initTowerPlacer
008371e4 g       *ABS*	00000000 __bss_start
0081aabc g     F .text	00000098 memset
0080be40 g     F .text	0000096c main
0081fd6c g     F .text	00000074 alt_up_audio_write_fifo_space
00829484 g     O .rwdata	00000190 explode03
00837260 g     O .bss	00000004 alt_envp
0080deec g     F .text	000002e0 initWeapon
00837240 g     O .bss	00000004 __malloc_max_total_mem
008102d0 g     F .text	000000b0 setXY_noBound
00821aa4 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0080efd0 g     F .text	000001c8 get_name_input
008215ec g     F .text	00000040 alt_up_char_buffer_open_dev
0081ecf0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080c834 g     F .text	00000cc0 checkStages
00815878 g     F .text	0000001c srand
0081016c g     F .text	00000164 setXY
008134b4 g     F .text	00000078 __ltsf2
008265fc g     F .text	0000008c alt_up_sd_card_get_attributes
00837220 g     O .bss	00000004 ps2
008100f4 g     F .text	00000078 addStats
00837224 g     O .bss	00000004 cameraZ
00802f8c g     F .text	00000064 setupBullet
00822dd8 g     F .text	000000c8 Write_Sector_Data
00826a1c g     F .text	00000624 alt_up_sd_card_write
00820c10 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0081c1ac g     F .text	00000008 __sclose
00801db8 g     F .text	0000024c drawBox3D
01000000 g       *ABS*	00000000 __alt_heap_limit
0081c660 g     F .text	00000014 fclose
00821310 g     F .text	0000007c alt_up_ps2_read_data_byte
00815cbc g     F .text	00000244 _strtol_r
0081450c g     F .text	00000074 __truncdfsf2
0080167c g     F .text	000000d0 getSoundById
0081f83c g     F .text	000000a4 alt_timestamp_start
008379b8 g     O .bss	00000190 _atexit0
008181a0 g     F .text	000015b4 _dtoa_r
00814f6c g     F .text	00000740 _malloc_r
00811278 g     F .text	00000040 unloadSound
00830190 g     O .rwdata	00000004 alt_errno
0080126c g     F .text	000000c4 clear_dirty_buffer
0080c7ac g     F .text	00000088 starAction
00812c58 g     F .text	00000050 getColor
00803f80 g     F .text	00000028 laserCollide
0081a5e8 g     F .text	000000b8 _fwalk
00821528 g     F .text	00000040 alt_up_ps2_open_dev
008145fc g     F .text	00000060 __divsi3
0080fe34 g     F .text	00000044 killEdge
00807ee0 g     F .text	00000330 checkButtonCollision
00828ae8 g     O .rodata	00000014 __thenan_df
00820a1c g     F .text	00000040 alt_up_character_lcd_open_dev
00819c44 g     F .text	0000012c _malloc_trim_r
00821060 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
008282c8 g       *ABS*	00000000 __CTOR_END__
00813070 g     F .text	000001e0 __mulsf3
00837280 g     O .bss	00000004 status_register
008209e8 g     F .text	00000034 alt_up_character_lcd_init
0081c2f8 g     F .text	000000bc strcmp
00837288 g     O .bss	00000004 command_register
008282c8 g       *ABS*	00000000 __flash_rodata_start
0080f630 g     F .text	0000008c wasKeyJustPressed
008282c8 g       *ABS*	00000000 __DTOR_LIST__
00811e74 g     F .text	000000a4 killAnimation
00810904 g     F .text	000001bc query
00808acc g     F .text	00000168 removeFromEnv
008062ac g     F .text	00000200 drawTxtButton
0081d45c g     F .text	00000088 __nedf2
008201b0 g     F .text	00000064 alt_up_av_config_open_dev
0080fc70 g     F .text	00000170 updateNode
0081e8a0 g     F .text	00000034 alt_irq_init
0080b3d8 g     F .text	00000098 initVGA
0081e430 g     F .text	00000060 alt_release_fd
00822fec g     F .text	000000b8 get_cluster_flag
008112b8 g     F .text	000000e8 initSpaceShip
0080f79c g     F .text	0000004c isKeyUp
00820f34 g     F .text	00000034 read_data_valid
0081597c g     F .text	00000074 sprintf
00820e00 g     F .text	00000034 alt_up_character_lcd_cursor_off
00828afc g     O .rodata	00000100 __clz_tab
008235bc g     F .text	000002b8 Write_File_Record_At_Offset
00837250 g     O .bss	00000004 _PathLocale
008119f0 g     F .text	00000078 initSwitchController
0080e1cc g     F .text	00000148 printhex
00837228 g     O .bss	00000004 pixel_buffer
008211f4 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00827e50 g     F .text	00000014 atexit
0081343c g     F .text	00000078 __gesf2
0081c3b4 g     F .text	00000078 _write_r
0080589c g     F .text	00000058 fire_tower4_level1
00806e90 g     F .text	00000078 startGameButtonCollide
0082040c g     F .text	00000038 alt_up_av_config_read_ready
0081a748 g     F .text	0000001c setlocale
00801784 g     F .text	00000634 initBox3D
00800b84 g     F .text	00000088 setAlienDirection
00823874 g     F .text	00000648 Check_for_DOS_FAT
00825718 g     F .text	000002d4 create_file
0083016c g     O .rwdata	00000004 _impure_ptr
00837284 g     O .bss	00000004 CSD_register_w0
00837258 g     O .bss	00000004 alt_argc
00804cb0 g     F .text	00000534 fire_tower1_level2
00800340 g     F .text	00000128 resetAlien
0083726c g     O .bss	00000004 altera_avalon_timer_ts_base
008032a8 g     F .text	000002d8 laserAction
008276a0 g     F .text	00000064 _do_dtors
0083722c g     O .bss	00000004 weapon3_lvl2
00811b8c g     F .text	00000040 isSwitchOff
00800020 g       .exceptions	00000000 alt_irq_entry
0081ad10 g     F .text	00000080 __ulp
0081c13c g     F .text	00000040 __isinfd
00819aa0 g     F .text	00000018 __fp_unlock_all
0082a294 g     O .rwdata	00000190 pacman03
0080b504 g     F .text	00000370 loadSDImage
0080aa34 g     F .text	0000018c redraw_
0083017c g     O .rwdata	00000008 alt_fs_list
00824090 g     F .text	00000290 check_file_name_for_FAT16_compliance
00837290 g     O .bss	00000004 buffer_memory
0081fcfc g     F .text	00000070 alt_up_audio_record_l
00829ac4 g     O .rwdata	00000190 explode12
00800b2c g     F .text	00000058 alienPath
0080e3a4 g     F .text	00000020 loadGameInfo
00800020 g       *ABS*	00000000 __ram_exceptions_start
00810f0c g     F .text	0000033c loadWavSound
0081a6b4 g     F .text	00000010 localeconv
0081f8e0 g     F .text	0000009c alt_timestamp
00807a64 g     F .text	00000154 cursorAnimate
00806194 g     F .text	000000ac setTxtButton
0082033c g     F .text	00000038 alt_up_av_config_enable_interrupt
00800fb8 g     F .text	000000a8 loadSound
008052e0 g     F .text	00000084 fire_tower3_level1
00811f18 g     F .text	00000080 addImage
00837294 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
008203a4 g     F .text	00000068 alt_up_av_config_read_acknowledge
0080e888 g     F .text	000002bc read_high_scores
00820744 g     F .text	00000064 alt_up_av_config_write_DC2_cfg_register
008301a4 g       *ABS*	00000000 _edata
00806240 g     F .text	0000006c drawBuyButton
00837b48 g       *ABS*	00000000 _end
008373b8 g     O .bss	00000500 active_files
0080e660 g     F .text	00000128 sort_high_scores
00810678 g     F .text	0000028c insertObj
008001b8 g       *ABS*	00000000 __ram_exceptions_end
008259ec g     F .text	00000154 copy_file_record_name_to_string
0081f1e8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00812cf0 g     F .text	000000c8 audio_ISR
00829164 g     O .rwdata	00000190 explode05
008103c8 g     F .text	000000b4 initQuardTree
00823ebc g     F .text	00000104 Look_for_FAT16
0080fde0 g     F .text	00000054 initEdge
0081fe50 g     F .text	00000070 alt_up_audio_play_l
0080885c g     F .text	00000068 mouse_click_listener
00837230 g     O .bss	00000004 weapon1_lvl1
0081c21c g     F .text	0000007c __swrite
00811bcc g     F .text	00000040 isSwitchOn
0080f748 g     F .text	00000054 isKeyDown
00807bb8 g     F .text	0000012c memOverlap
00830160 g     O .rwdata	00000004 __malloc_trim_threshold
00827bc8 g     F .text	00000020 altera_nios2_qsys_irq_init
0080ee44 g     F .text	0000018c update_input_name
00827e64 g     F .text	00000038 exit
00825e14 g     F .text	000003b0 alt_up_sd_card_find_next
00811610 g     F .text	00000038 shipAction
0081a520 g     F .text	000000c8 _fwalk_reent
00813724 g     F .text	000000c0 __floatunsisf
00808210 g     F .text	00000030 setFrameToCursor
00820f94 g     F .text	000000cc alt_up_ps2_init
0081b30c g     F .text	0000018c __mdiff
00820870 g     F .text	00000064 alt_up_av_config_read_LTM_cfg_register
00809de8 g     F .text	00000128 initStatsPanel
0081465c g     F .text	00000060 __modsi3
00810ac0 g     F .text	000000ec isCollide
00807648 g     F .text	000001a8 initCursor
0080835c g     F .text	000000e0 clearPanelFromCursor
008048d4 g     F .text	0000004c killBulletCollection
008043f8 g     F .text	0000011c initBulletToWeapon2
00822ef0 g     F .text	000000fc Read_Sector_Data
0082a424 g     O .rwdata	00000190 pacman04
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008199e0 g     F .text	00000004 __sfp_lock_release
0080adc0 g     F .text	000000a4 redrawMPanel
008064ac g     F .text	00000170 buyButtonCollide
00800000 g       *ABS*	00000000 __alt_mem_sdram
00803a3c g     F .text	000002a4 shootEnemy
00820ad4 g     F .text	00000078 alt_up_character_lcd_string
00814f38 g     F .text	0000000c atoi
00804a3c g     F .text	000001a0 launchSecondaryBullet
00828c7e g     O .rodata	00000101 _ctype_
008077f0 g     F .text	00000274 update
00802a48 g     F .text	00000164 animateBox0
00811f98 g     F .text	0000014c draw
00808a10 g     F .text	00000044 addToEnv
00814a0c g     F .text	000000a8 __fpcmp_parts_f
00828238 g     F .text	00000020 _exit
0081c17c g     F .text	00000030 __isnand
0081d8d8 g     F .text	00000154 alt_alarm_start
008051e4 g     F .text	0000007c fire_tower2_level1
008146cc g     F .text	00000098 __muldi3
0082720c g     F .text	000000fc Read_Sector_Data_CRC
00826688 g     F .text	00000394 alt_up_sd_card_read
0081a764 g     F .text	00000194 __smakebuf_r
00821184 g     F .text	00000070 alt_up_ps2_wait_for_ack
00815adc g     F .text	00000074 strlen
0080227c g     F .text	0000029c rotateBox3DY
008279e0 g     F .text	00000188 open
0081d56c g     F .text	00000088 __gedf2
0080e5ac g     F .text	000000b4 add_high_score
0080ae64 g     F .text	000000a4 redrawMBoard
008120e4 g     F .text	0000014c drawRec
008204f0 g     F .text	000000f8 alt_up_av_config_read_video_cfg_register
00800e68 g     F .text	00000040 disableAudioController
00827798 g     F .text	00000030 alt_icache_flush_all
0080143c g     F .text	000000e8 play_background_loop
00820b98 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00804bdc g     F .text	00000050 nextBullet
00830194 g     O .rwdata	00000004 alt_priority_mask
0080ad1c g     F .text	000000a4 redrawSPanel
00817e28 g     F .text	00000024 __vfprintf_internal
0082080c g     F .text	00000064 alt_up_av_config_write_D5M_cfg_register
008213e4 g     F .text	0000009c alt_up_ps2_read_fd
00813bf4 g     F .text	00000080 __subdf3
00801330 g     F .text	0000010c unloadSoundById
00837234 g     O .bss	00000004 cameraY
00808e18 g     F .text	000000d0 initFrame
0081abec g     F .text	000000c4 __lo0bits
0083019c g     O .rwdata	00000008 alt_alarm_list
0082763c g     F .text	00000064 _do_ctors
00805d70 g     F .text	00000048 fire_tower5_level2
008105c4 g     F .text	000000b4 isContain
0080f4f8 g     F .text	00000074 addKeyListener
0081da2c g     F .text	000000fc close
0081300c g     F .text	00000064 __addsf3
0081dfc8 g     F .text	00000080 alt_load
0081f9e4 g     F .text	0000004c alt_up_audio_enable_read_interrupt
008205e8 g     F .text	000000f8 alt_up_av_config_write_video_cfg_register
00814ae0 g     F .text	00000314 __pack_d
0080f6bc g     F .text	0000008c wasKeyJustReleased
008243e0 g     F .text	000002ec match_file_record_to_name_ext
00812ca8 g     F .text	00000048 getColor555
0080a158 g     F .text	00000044 writeMSG
00814f44 g     F .text	00000014 free
008199e4 g     F .text	00000004 __sinit_lock_acquire
0081b808 g     F .text	00000100 __multadd
0081ab54 g     F .text	00000028 _Bfree
008206e0 g     F .text	00000064 alt_up_av_config_read_DC2_cfg_register
0081fb1c g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406e14 	ori	at,at,440
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000171e 	bne	r2,zero,800188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020f4 	movhi	r3,131
  800134:	18de2e04 	addi	r3,r3,30904
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11800017 	ldw	r6,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020f4 	movhi	r3,131
  80014c:	18de2e04 	addi	r3,r3,30904
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	e17ffd17 	ldw	r5,-12(fp)
  800164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800168:	0005313a 	rdctl	r2,ipending
  80016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  800170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800178:	e0bfff17 	ldw	r2,-4(fp)
  80017c:	1004c03a 	cmpne	r2,r2,zero
  800180:	103fe21e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800184:	00000706 	br	8001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800188:	e0bffe17 	ldw	r2,-8(fp)
  80018c:	1085883a 	add	r2,r2,r2
  800190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800194:	e0bffd17 	ldw	r2,-12(fp)
  800198:	10800044 	addi	r2,r2,1
  80019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a0:	003fdd06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a4:	e037883a 	mov	sp,fp
  8001a8:	dfc00117 	ldw	ra,4(sp)
  8001ac:	df000017 	ldw	fp,0(sp)
  8001b0:	dec00204 	addi	sp,sp,8
  8001b4:	f800283a 	ret

Disassembly of section .text:

008001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b8:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
  8001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c4:	00bffd16 	blt	zero,r2,8001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001d0:	068020f4 	movhi	gp,131
    ori gp, gp, %lo(_gp)
  8001d4:	d6a05714 	ori	gp,gp,33116
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d8:	008020f4 	movhi	r2,131
    ori r2, r2, %lo(__bss_start)
  8001dc:	109c7914 	ori	r2,r2,29156

    movhi r3, %hi(__bss_end)
  8001e0:	00c020f4 	movhi	r3,131
    ori r3, r3, %lo(__bss_end)
  8001e4:	18ded214 	ori	r3,r3,31560

    beq r2, r3, 1f
  8001e8:	10c00326 	beq	r2,r3,8001f8 <_start+0x40>

0:
    stw zero, (r2)
  8001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f4:	10fffd36 	bltu	r2,r3,8001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f8:	081dfc80 	call	81dfc8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001fc:	081e2040 	call	81e204 <alt_main>

00800200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800200:	003fff06 	br	800200 <alt_after_alt_main>

00800204 <initAlien>:

// Constructor
struct Alien* initAlien( int pos_x, int pos_y, int size, struct animation* anim, struct animation* dead,
						char* new_name, float speed,
						float max_life, int money_val, struct Collidable* col )
{
  800204:	defff804 	addi	sp,sp,-32
  800208:	dfc00715 	stw	ra,28(sp)
  80020c:	df000615 	stw	fp,24(sp)
  800210:	df000604 	addi	fp,sp,24
  800214:	e13ffc15 	stw	r4,-16(fp)
  800218:	e17ffd15 	stw	r5,-12(fp)
  80021c:	e1bffe15 	stw	r6,-8(fp)
  800220:	e1ffff15 	stw	r7,-4(fp)
	struct Alien* a = (struct Alien*) malloc (sizeof(struct Alien));
  800224:	01001204 	movi	r4,72
  800228:	0814f580 	call	814f58 <malloc>
  80022c:	e0bffb15 	stw	r2,-20(fp)
	a->super = initObject(pos_x, pos_y, size, anim, (void*)a);
  800230:	e0bffb17 	ldw	r2,-20(fp)
  800234:	d8800015 	stw	r2,0(sp)
  800238:	e13ffc17 	ldw	r4,-16(fp)
  80023c:	e17ffd17 	ldw	r5,-12(fp)
  800240:	e1bffe17 	ldw	r6,-8(fp)
  800244:	e1ffff17 	ldw	r7,-4(fp)
  800248:	080fe780 	call	80fe78 <initObject>
  80024c:	1007883a 	mov	r3,r2
  800250:	e0bffb17 	ldw	r2,-20(fp)
  800254:	10c00015 	stw	r3,0(r2)
	addStats(a->super,dead);
  800258:	e0bffb17 	ldw	r2,-20(fp)
  80025c:	11000017 	ldw	r4,0(r2)
  800260:	e1400217 	ldw	r5,8(fp)
  800264:	08100f40 	call	8100f4 <addStats>
	a->super->action = alienAction;
  800268:	e0bffb17 	ldw	r2,-20(fp)
  80026c:	10c00017 	ldw	r3,0(r2)
  800270:	00802034 	movhi	r2,128
  800274:	10814304 	addi	r2,r2,1292
  800278:	18801b15 	stw	r2,108(r3)
	a->super->collide = alienCollide;
  80027c:	e0bffb17 	ldw	r2,-20(fp)
  800280:	10c00017 	ldw	r3,0(r2)
  800284:	00802034 	movhi	r2,128
  800288:	10825a04 	addi	r2,r2,2408
  80028c:	18801a15 	stw	r2,104(r3)
	// Speeds
	/*
	a->x_speed = a->init_x_speed = x_speed_new;
	a->y_speed = a->init_y_speed = y_speed_new;
*/
	a->speed = a->init_speed = speed;
  800290:	e0fffb17 	ldw	r3,-20(fp)
  800294:	e0800417 	ldw	r2,16(fp)
  800298:	18800715 	stw	r2,28(r3)
  80029c:	e0bffb17 	ldw	r2,-20(fp)
  8002a0:	10c00717 	ldw	r3,28(r2)
  8002a4:	e0bffb17 	ldw	r2,-20(fp)
  8002a8:	10c00615 	stw	r3,24(r2)
	// Life
	a->max_life = max_life;
  8002ac:	e0fffb17 	ldw	r3,-20(fp)
  8002b0:	e0800517 	ldw	r2,20(fp)
  8002b4:	18800315 	stw	r2,12(r3)
	a->scale = size;
  8002b8:	e0fffb17 	ldw	r3,-20(fp)
  8002bc:	e0bffe17 	ldw	r2,-8(fp)
  8002c0:	18800e15 	stw	r2,56(r3)

	resetAlien(a, pos_x, pos_y);
  8002c4:	e13ffb17 	ldw	r4,-20(fp)
  8002c8:	e17ffc17 	ldw	r5,-16(fp)
  8002cc:	e1bffd17 	ldw	r6,-12(fp)
  8002d0:	08003400 	call	800340 <resetAlien>

	// Name
	a->name = new_name;
  8002d4:	e0fffb17 	ldw	r3,-20(fp)
  8002d8:	e0800317 	ldw	r2,12(fp)
  8002dc:	18800115 	stw	r2,4(r3)
	a->bounty = money_val;
  8002e0:	e0fffb17 	ldw	r3,-20(fp)
  8002e4:	e0800617 	ldw	r2,24(fp)
  8002e8:	18800815 	stw	r2,32(r3)
	a->score = 1;
  8002ec:	e0fffb17 	ldw	r3,-20(fp)
  8002f0:	00800044 	movi	r2,1
  8002f4:	18800915 	stw	r2,36(r3)

	a->super->class = alien;
  8002f8:	e0bffb17 	ldw	r2,-20(fp)
  8002fc:	10c00017 	ldw	r3,0(r2)
  800300:	00800084 	movi	r2,2
  800304:	18801115 	stw	r2,68(r3)
	a->super->action = alienAction;
  800308:	e0bffb17 	ldw	r2,-20(fp)
  80030c:	10c00017 	ldw	r3,0(r2)
  800310:	00802034 	movhi	r2,128
  800314:	10814304 	addi	r2,r2,1292
  800318:	18801b15 	stw	r2,108(r3)

	a->col = col;
  80031c:	e0fffb17 	ldw	r3,-20(fp)
  800320:	e0800717 	ldw	r2,28(fp)
  800324:	18801115 	stw	r2,68(r3)
	return a;
  800328:	e0bffb17 	ldw	r2,-20(fp)
}
  80032c:	e037883a 	mov	sp,fp
  800330:	dfc00117 	ldw	ra,4(sp)
  800334:	df000017 	ldw	fp,0(sp)
  800338:	dec00204 	addi	sp,sp,8
  80033c:	f800283a 	ret

00800340 <resetAlien>:
void resetAlien(struct Alien* this, int x, int y) {
  800340:	defffa04 	addi	sp,sp,-24
  800344:	dfc00515 	stw	ra,20(sp)
  800348:	df000415 	stw	fp,16(sp)
  80034c:	df000404 	addi	fp,sp,16
  800350:	e13ffd15 	stw	r4,-12(fp)
  800354:	e17ffe15 	stw	r5,-8(fp)
  800358:	e1bfff15 	stw	r6,-4(fp)

	setXY(this->super, x, y);
  80035c:	e0bffd17 	ldw	r2,-12(fp)
  800360:	11000017 	ldw	r4,0(r2)
  800364:	e17ffe17 	ldw	r5,-8(fp)
  800368:	e1bfff17 	ldw	r6,-4(fp)
  80036c:	081016c0 	call	81016c <setXY>
	this->speed = this->init_speed;
  800370:	e0bffd17 	ldw	r2,-12(fp)
  800374:	10c00717 	ldw	r3,28(r2)
  800378:	e0bffd17 	ldw	r2,-12(fp)
  80037c:	10c00615 	stw	r3,24(r2)
	this->x_speed = 0;
  800380:	e0bffd17 	ldw	r2,-12(fp)
  800384:	10000415 	stw	zero,16(r2)
	this->y_speed = 0;
  800388:	e0bffd17 	ldw	r2,-12(fp)
  80038c:	10000515 	stw	zero,20(r2)
	this->current_life = this->max_life;
  800390:	e0bffd17 	ldw	r2,-12(fp)
  800394:	10c00317 	ldw	r3,12(r2)
  800398:	e0bffd17 	ldw	r2,-12(fp)
  80039c:	10c00215 	stw	r3,8(r2)
	this->super->scale = this->scale;
  8003a0:	e0bffd17 	ldw	r2,-12(fp)
  8003a4:	10c00017 	ldw	r3,0(r2)
  8003a8:	e0bffd17 	ldw	r2,-12(fp)
  8003ac:	10800e17 	ldw	r2,56(r2)
  8003b0:	18800215 	stw	r2,8(r3)
	// Active/inactive flag
	this->isHit = false;
  8003b4:	e0bffd17 	ldw	r2,-12(fp)
  8003b8:	10000a45 	stb	zero,41(r2)
	this->dead = false;
  8003bc:	e0bffd17 	ldw	r2,-12(fp)
  8003c0:	10000a05 	stb	zero,40(r2)
	this->frame = 0;
  8003c4:	e0bffd17 	ldw	r2,-12(fp)
  8003c8:	10000d15 	stw	zero,52(r2)
	this->path_found = false;
  8003cc:	e0bffd17 	ldw	r2,-12(fp)
  8003d0:	10000f05 	stb	zero,60(r2)
	this->path = 0;
  8003d4:	e0bffd17 	ldw	r2,-12(fp)
  8003d8:	10001015 	stw	zero,64(r2)
	this->super->scale = this->scale;
  8003dc:	e0bffd17 	ldw	r2,-12(fp)
  8003e0:	10c00017 	ldw	r3,0(r2)
  8003e4:	e0bffd17 	ldw	r2,-12(fp)
  8003e8:	10800e17 	ldw	r2,56(r2)
  8003ec:	18800215 	stw	r2,8(r3)
	// towerBlocked is for determining if alien is colliding with Tower
	this->towerBlock = false;
  8003f0:	e0bffd17 	ldw	r2,-12(fp)
  8003f4:	10000a85 	stb	zero,42(r2)
	this->towerBlock_move_x = false;
  8003f8:	e0bffd17 	ldw	r2,-12(fp)
  8003fc:	10000ac5 	stb	zero,43(r2)
	this->towerBlock_move_y = false;
  800400:	e0bffd17 	ldw	r2,-12(fp)
  800404:	10000b05 	stb	zero,44(r2)

	int i;
	for(i = 0; i < 4; i++ )
  800408:	e03ffc15 	stw	zero,-16(fp)
  80040c:	00000806 	br	800430 <resetAlien+0xf0>
		this->borderBlocked[i] = false;  // border collisions : 0 = left, 1 = top, 2 = right, 3 = bottom
  800410:	e0fffc17 	ldw	r3,-16(fp)
  800414:	e0bffd17 	ldw	r2,-12(fp)
  800418:	1885883a 	add	r2,r3,r2
  80041c:	10800b04 	addi	r2,r2,44
  800420:	10000085 	stb	zero,2(r2)
	this->towerBlock = false;
	this->towerBlock_move_x = false;
	this->towerBlock_move_y = false;

	int i;
	for(i = 0; i < 4; i++ )
  800424:	e0bffc17 	ldw	r2,-16(fp)
  800428:	10800044 	addi	r2,r2,1
  80042c:	e0bffc15 	stw	r2,-16(fp)
  800430:	e0bffc17 	ldw	r2,-16(fp)
  800434:	10800110 	cmplti	r2,r2,4
  800438:	103ff51e 	bne	r2,zero,800410 <resetAlien+0xd0>
		this->borderBlocked[i] = false;  // border collisions : 0 = left, 1 = top, 2 = right, 3 = bottom

	this->team_collide = false; // colliding with teammates (other aliens)
  80043c:	e0bffd17 	ldw	r2,-12(fp)
  800440:	10000b45 	stb	zero,45(r2)

	setStats(this->super, 0);
  800444:	e0bffd17 	ldw	r2,-12(fp)
  800448:	11000017 	ldw	r4,0(r2)
  80044c:	000b883a 	mov	r5,zero
  800450:	08100ac0 	call	8100ac <setStats>
}
  800454:	e037883a 	mov	sp,fp
  800458:	dfc00117 	ldw	ra,4(sp)
  80045c:	df000017 	ldw	fp,0(sp)
  800460:	dec00204 	addi	sp,sp,8
  800464:	f800283a 	ret

00800468 <killAlien>:

// Destructor

void killAlien(void* a){
  800468:	defffd04 	addi	sp,sp,-12
  80046c:	dfc00215 	stw	ra,8(sp)
  800470:	df000115 	stw	fp,4(sp)
  800474:	df000104 	addi	fp,sp,4
  800478:	e13fff15 	stw	r4,-4(fp)
	((struct Alien*)a)->dead = true;
  80047c:	e0ffff17 	ldw	r3,-4(fp)
  800480:	00800044 	movi	r2,1
  800484:	18800a05 	stb	r2,40(r3)
	((struct Alien*)a)->speed = 0;
  800488:	e0bfff17 	ldw	r2,-4(fp)
  80048c:	10000615 	stw	zero,24(r2)
	((struct Alien*)a)->x_speed = 0;
  800490:	e0bfff17 	ldw	r2,-4(fp)
  800494:	10000415 	stw	zero,16(r2)
	((struct Alien*)a)->y_speed = 0;
  800498:	e0bfff17 	ldw	r2,-4(fp)
  80049c:	10000515 	stw	zero,20(r2)
	((struct Alien*)a)->super->isShowing = 0;
  8004a0:	e0bfff17 	ldw	r2,-4(fp)
  8004a4:	10800017 	ldw	r2,0(r2)
  8004a8:	10001515 	stw	zero,84(r2)
	((struct Alien*)a)->super->scale = 10;
  8004ac:	e0bfff17 	ldw	r2,-4(fp)
  8004b0:	10c00017 	ldw	r3,0(r2)
  8004b4:	00800284 	movi	r2,10
  8004b8:	18800215 	stw	r2,8(r3)
	setStats(((struct Alien*)a)->super, 1);
  8004bc:	e0bfff17 	ldw	r2,-4(fp)
  8004c0:	11000017 	ldw	r4,0(r2)
  8004c4:	01400044 	movi	r5,1
  8004c8:	08100ac0 	call	8100ac <setStats>
	((struct Alien*)a)->super->end_frame = ((struct Alien*)a)->super->curr_frame + 10;
  8004cc:	e0bfff17 	ldw	r2,-4(fp)
  8004d0:	10c00017 	ldw	r3,0(r2)
  8004d4:	e0bfff17 	ldw	r2,-4(fp)
  8004d8:	10800017 	ldw	r2,0(r2)
  8004dc:	10801617 	ldw	r2,88(r2)
  8004e0:	10800284 	addi	r2,r2,10
  8004e4:	18801315 	stw	r2,76(r3)
	((struct Alien*)a)->super->isShowing = 1;
  8004e8:	e0bfff17 	ldw	r2,-4(fp)
  8004ec:	10c00017 	ldw	r3,0(r2)
  8004f0:	00800044 	movi	r2,1
  8004f4:	18801515 	stw	r2,84(r3)
}
  8004f8:	e037883a 	mov	sp,fp
  8004fc:	dfc00117 	ldw	ra,4(sp)
  800500:	df000017 	ldw	fp,0(sp)
  800504:	dec00204 	addi	sp,sp,8
  800508:	f800283a 	ret

0080050c <alienAction>:
		removeFromCollide(c, (struct Object*)o);
		killAlien( (struct Alien*)(((struct Object*)o)->subObject) );
}*/


void alienAction(void* a) {
  80050c:	defffb04 	addi	sp,sp,-20
  800510:	dfc00415 	stw	ra,16(sp)
  800514:	df000315 	stw	fp,12(sp)
  800518:	df000304 	addi	fp,sp,12
  80051c:	e13fff15 	stw	r4,-4(fp)

	// Stop alien from moving (prevents synchronization issue)
	if( ((struct Alien*)(((struct Object*)a)->subObject))->dead )
  800520:	e0bfff17 	ldw	r2,-4(fp)
  800524:	10801817 	ldw	r2,96(r2)
  800528:	10800a03 	ldbu	r2,40(r2)
  80052c:	10803fcc 	andi	r2,r2,255
  800530:	1004c03a 	cmpne	r2,r2,zero
  800534:	1001071e 	bne	r2,zero,800954 <alienAction+0x448>
		return;

	//added 10 frames delay for alien to get damage from next bullet
	if(((struct Alien*)(((struct Object*)a)->subObject))->isHit) {
  800538:	e0bfff17 	ldw	r2,-4(fp)
  80053c:	10801817 	ldw	r2,96(r2)
  800540:	10800a43 	ldbu	r2,41(r2)
  800544:	10803fcc 	andi	r2,r2,255
  800548:	1005003a 	cmpeq	r2,r2,zero
  80054c:	1000111e 	bne	r2,zero,800594 <alienAction+0x88>
		((struct Alien*)(((struct Object*)a)->subObject))->frame++;
  800550:	e0bfff17 	ldw	r2,-4(fp)
  800554:	10801817 	ldw	r2,96(r2)
  800558:	1007883a 	mov	r3,r2
  80055c:	18800d17 	ldw	r2,52(r3)
  800560:	10800044 	addi	r2,r2,1
  800564:	18800d15 	stw	r2,52(r3)
		if(((struct Alien*)(((struct Object*)a)->subObject))->frame == 5) {
  800568:	e0bfff17 	ldw	r2,-4(fp)
  80056c:	10801817 	ldw	r2,96(r2)
  800570:	10800d17 	ldw	r2,52(r2)
  800574:	10800158 	cmpnei	r2,r2,5
  800578:	1000061e 	bne	r2,zero,800594 <alienAction+0x88>
			((struct Alien*)(((struct Object*)a)->subObject))->isHit = false;
  80057c:	e0bfff17 	ldw	r2,-4(fp)
  800580:	10801817 	ldw	r2,96(r2)
  800584:	10000a45 	stb	zero,41(r2)
			((struct Alien*)(((struct Object*)a)->subObject))->frame = 0;
  800588:	e0bfff17 	ldw	r2,-4(fp)
  80058c:	10801817 	ldw	r2,96(r2)
  800590:	10000d15 	stw	zero,52(r2)
		}
	}

	if( ((struct Alien*)(((struct Object*)a)->subObject))->path_found == false )
  800594:	e0bfff17 	ldw	r2,-4(fp)
  800598:	10801817 	ldw	r2,96(r2)
  80059c:	10800f03 	ldbu	r2,60(r2)
  8005a0:	10803fcc 	andi	r2,r2,255
  8005a4:	1004c03a 	cmpne	r2,r2,zero
  8005a8:	1000051e 	bne	r2,zero,8005c0 <alienAction+0xb4>
		alienPath( (struct Alien*)(((struct Object*)a)->subObject) ); // pick a path at random
  8005ac:	e0bfff17 	ldw	r2,-4(fp)
  8005b0:	10801817 	ldw	r2,96(r2)
  8005b4:	1009883a 	mov	r4,r2
  8005b8:	0800b2c0 	call	800b2c <alienPath>
  8005bc:	00000406 	br	8005d0 <alienAction+0xc4>
	else
		followPath( (struct Alien*)(((struct Object*)a)->subObject) ); 	// Check predefined path
  8005c0:	e0bfff17 	ldw	r2,-4(fp)
  8005c4:	10801817 	ldw	r2,96(r2)
  8005c8:	1009883a 	mov	r4,r2
  8005cc:	0800c0c0 	call	800c0c <followPath>
	int new_y;



	// colliding with towers
	if( ((struct Alien*)(((struct Object*)a)->subObject))->towerBlock ) {
  8005d0:	e0bfff17 	ldw	r2,-4(fp)
  8005d4:	10801817 	ldw	r2,96(r2)
  8005d8:	10800a83 	ldbu	r2,42(r2)
  8005dc:	10803fcc 	andi	r2,r2,255
  8005e0:	1005003a 	cmpeq	r2,r2,zero
  8005e4:	1000211e 	bne	r2,zero,80066c <alienAction+0x160>
		// check if the collision with the tower results in a move in x
		if( ((struct Alien*)(((struct Object*)a)->subObject))->towerBlock_move_x == true ) {
  8005e8:	e0bfff17 	ldw	r2,-4(fp)
  8005ec:	10801817 	ldw	r2,96(r2)
  8005f0:	10800ac3 	ldbu	r2,43(r2)
  8005f4:	10803fcc 	andi	r2,r2,255
  8005f8:	1005003a 	cmpeq	r2,r2,zero
  8005fc:	1000061e 	bne	r2,zero,800618 <alienAction+0x10c>
		//	setXY((struct Object*)a, ((struct Object*)a)->prev_x, ((struct Object*)a)->prev_y  ); // step backwards
			setAlienDirection(((struct Alien*)(((struct Object*)a)->subObject)), 1, 0); // move in +x
  800600:	e0bfff17 	ldw	r2,-4(fp)
  800604:	10801817 	ldw	r2,96(r2)
  800608:	1009883a 	mov	r4,r2
  80060c:	01400044 	movi	r5,1
  800610:	000d883a 	mov	r6,zero
  800614:	0800b840 	call	800b84 <setAlienDirection>
		}
		// move in y
		if ( ((struct Alien*)(((struct Object*)a)->subObject))->towerBlock_move_y == true) {
  800618:	e0bfff17 	ldw	r2,-4(fp)
  80061c:	10801817 	ldw	r2,96(r2)
  800620:	10800b03 	ldbu	r2,44(r2)
  800624:	10803fcc 	andi	r2,r2,255
  800628:	1005003a 	cmpeq	r2,r2,zero
  80062c:	1000061e 	bne	r2,zero,800648 <alienAction+0x13c>
		//	setXY((struct Object*)a, ((struct Object*)a)->prev_x, ((struct Object*)a)->prev_y  ); // step backwards
			setAlienDirection(((struct Alien*)(((struct Object*)a)->subObject)), 0, 1); // move in +y
  800630:	e0bfff17 	ldw	r2,-4(fp)
  800634:	10801817 	ldw	r2,96(r2)
  800638:	1009883a 	mov	r4,r2
  80063c:	000b883a 	mov	r5,zero
  800640:	01800044 	movi	r6,1
  800644:	0800b840 	call	800b84 <setAlienDirection>
		}

		((struct Alien*)(((struct Object*)a)->subObject))->towerBlock_move_x = false;
  800648:	e0bfff17 	ldw	r2,-4(fp)
  80064c:	10801817 	ldw	r2,96(r2)
  800650:	10000ac5 	stb	zero,43(r2)
		((struct Alien*)(((struct Object*)a)->subObject))->towerBlock_move_y = false;
  800654:	e0bfff17 	ldw	r2,-4(fp)
  800658:	10801817 	ldw	r2,96(r2)
  80065c:	10000b05 	stb	zero,44(r2)
		((struct Alien*)(((struct Object*)a)->subObject))->towerBlock = false; // reset tower blocking
  800660:	e0bfff17 	ldw	r2,-4(fp)
  800664:	10801817 	ldw	r2,96(r2)
  800668:	10000a85 	stb	zero,42(r2)
	}

	//TODO: Make sure following conditions do not apply when alien is killed but still in explosion effect

		// Check collisions with the left border
		if( (((struct Object*)a)->x ) <= 1 ) {
  80066c:	e0bfff17 	ldw	r2,-4(fp)
  800670:	10800017 	ldw	r2,0(r2)
  800674:	10800088 	cmpgei	r2,r2,2
  800678:	1000151e 	bne	r2,zero,8006d0 <alienAction+0x1c4>
			setAlienDirection(((struct Alien*)(((struct Object*)a)->subObject)), 0, 1);
  80067c:	e0bfff17 	ldw	r2,-4(fp)
  800680:	10801817 	ldw	r2,96(r2)
  800684:	1009883a 	mov	r4,r2
  800688:	000b883a 	mov	r5,zero
  80068c:	01800044 	movi	r6,1
  800690:	0800b840 	call	800b84 <setAlienDirection>
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[0] = true;
  800694:	e0bfff17 	ldw	r2,-4(fp)
  800698:	10801817 	ldw	r2,96(r2)
  80069c:	1007883a 	mov	r3,r2
  8006a0:	00800044 	movi	r2,1
  8006a4:	18800b85 	stb	r2,46(r3)

			// set all other border collision to false
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[1] = false;
  8006a8:	e0bfff17 	ldw	r2,-4(fp)
  8006ac:	10801817 	ldw	r2,96(r2)
  8006b0:	10000bc5 	stb	zero,47(r2)
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[2] = false;
  8006b4:	e0bfff17 	ldw	r2,-4(fp)
  8006b8:	10801817 	ldw	r2,96(r2)
  8006bc:	10000c05 	stb	zero,48(r2)
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[3] = false;
  8006c0:	e0bfff17 	ldw	r2,-4(fp)
  8006c4:	10801817 	ldw	r2,96(r2)
  8006c8:	10000c45 	stb	zero,49(r2)
  8006cc:	00000306 	br	8006dc <alienAction+0x1d0>
		}
		else
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[0] = false;
  8006d0:	e0bfff17 	ldw	r2,-4(fp)
  8006d4:	10801817 	ldw	r2,96(r2)
  8006d8:	10000b85 	stb	zero,46(r2)

		// Check collisions with the top border
		if( ((struct Object*)a)->y <= 5 ) {
  8006dc:	e0bfff17 	ldw	r2,-4(fp)
  8006e0:	10800117 	ldw	r2,4(r2)
  8006e4:	10800188 	cmpgei	r2,r2,6
  8006e8:	1000151e 	bne	r2,zero,800740 <alienAction+0x234>
			setAlienDirection(((struct Alien*)(((struct Object*)a)->subObject)), 1, 0);
  8006ec:	e0bfff17 	ldw	r2,-4(fp)
  8006f0:	10801817 	ldw	r2,96(r2)
  8006f4:	1009883a 	mov	r4,r2
  8006f8:	01400044 	movi	r5,1
  8006fc:	000d883a 	mov	r6,zero
  800700:	0800b840 	call	800b84 <setAlienDirection>
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[1] = true;
  800704:	e0bfff17 	ldw	r2,-4(fp)
  800708:	10801817 	ldw	r2,96(r2)
  80070c:	1007883a 	mov	r3,r2
  800710:	00800044 	movi	r2,1
  800714:	18800bc5 	stb	r2,47(r3)

			// set all other border collision to false
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[0] = false;
  800718:	e0bfff17 	ldw	r2,-4(fp)
  80071c:	10801817 	ldw	r2,96(r2)
  800720:	10000b85 	stb	zero,46(r2)
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[2] = false;
  800724:	e0bfff17 	ldw	r2,-4(fp)
  800728:	10801817 	ldw	r2,96(r2)
  80072c:	10000c05 	stb	zero,48(r2)
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[3] = false;
  800730:	e0bfff17 	ldw	r2,-4(fp)
  800734:	10801817 	ldw	r2,96(r2)
  800738:	10000c45 	stb	zero,49(r2)
  80073c:	00000306 	br	80074c <alienAction+0x240>

		}
		else
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[1] = false;
  800740:	e0bfff17 	ldw	r2,-4(fp)
  800744:	10801817 	ldw	r2,96(r2)
  800748:	10000bc5 	stb	zero,47(r2)

		// Check collisions with the bottom border
		if( ((struct Object*)a)->center_y +((struct Object*)a)->scale >= BOUND_Y-5) {
  80074c:	e0bfff17 	ldw	r2,-4(fp)
  800750:	10c00617 	ldw	r3,24(r2)
  800754:	e0bfff17 	ldw	r2,-4(fp)
  800758:	10800217 	ldw	r2,8(r2)
  80075c:	1885883a 	add	r2,r3,r2
  800760:	10803ad0 	cmplti	r2,r2,235
  800764:	1000151e 	bne	r2,zero,8007bc <alienAction+0x2b0>
			setAlienDirection(((struct Alien*)(((struct Object*)a)->subObject)), 1, 0);
  800768:	e0bfff17 	ldw	r2,-4(fp)
  80076c:	10801817 	ldw	r2,96(r2)
  800770:	1009883a 	mov	r4,r2
  800774:	01400044 	movi	r5,1
  800778:	000d883a 	mov	r6,zero
  80077c:	0800b840 	call	800b84 <setAlienDirection>
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[3] = true;
  800780:	e0bfff17 	ldw	r2,-4(fp)
  800784:	10801817 	ldw	r2,96(r2)
  800788:	1007883a 	mov	r3,r2
  80078c:	00800044 	movi	r2,1
  800790:	18800c45 	stb	r2,49(r3)

			// set all other border collision to false
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[1] = false;
  800794:	e0bfff17 	ldw	r2,-4(fp)
  800798:	10801817 	ldw	r2,96(r2)
  80079c:	10000bc5 	stb	zero,47(r2)
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[2] = false;
  8007a0:	e0bfff17 	ldw	r2,-4(fp)
  8007a4:	10801817 	ldw	r2,96(r2)
  8007a8:	10000c05 	stb	zero,48(r2)
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[0] = false;
  8007ac:	e0bfff17 	ldw	r2,-4(fp)
  8007b0:	10801817 	ldw	r2,96(r2)
  8007b4:	10000b85 	stb	zero,46(r2)
  8007b8:	00000306 	br	8007c8 <alienAction+0x2bc>
		}
		else
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[3] = false;
  8007bc:	e0bfff17 	ldw	r2,-4(fp)
  8007c0:	10801817 	ldw	r2,96(r2)
  8007c4:	10000c45 	stb	zero,49(r2)

		// Check collisions with the right border
		if( ((struct Object*)a)->center_x + ((struct Object*)a)->scale >= BOUND_X-10 ) {
  8007c8:	e0bfff17 	ldw	r2,-4(fp)
  8007cc:	10c00517 	ldw	r3,20(r2)
  8007d0:	e0bfff17 	ldw	r2,-4(fp)
  8007d4:	10800217 	ldw	r2,8(r2)
  8007d8:	1885883a 	add	r2,r3,r2
  8007dc:	10803c10 	cmplti	r2,r2,240
  8007e0:	1000151e 	bne	r2,zero,800838 <alienAction+0x32c>
				setAlienDirection(((struct Alien*)(((struct Object*)a)->subObject)), 0, 1);
  8007e4:	e0bfff17 	ldw	r2,-4(fp)
  8007e8:	10801817 	ldw	r2,96(r2)
  8007ec:	1009883a 	mov	r4,r2
  8007f0:	000b883a 	mov	r5,zero
  8007f4:	01800044 	movi	r6,1
  8007f8:	0800b840 	call	800b84 <setAlienDirection>
				((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[2] = true;
  8007fc:	e0bfff17 	ldw	r2,-4(fp)
  800800:	10801817 	ldw	r2,96(r2)
  800804:	1007883a 	mov	r3,r2
  800808:	00800044 	movi	r2,1
  80080c:	18800c05 	stb	r2,48(r3)

				// set all other border collision to false
				((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[1] = false;
  800810:	e0bfff17 	ldw	r2,-4(fp)
  800814:	10801817 	ldw	r2,96(r2)
  800818:	10000bc5 	stb	zero,47(r2)
				((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[0] = false;
  80081c:	e0bfff17 	ldw	r2,-4(fp)
  800820:	10801817 	ldw	r2,96(r2)
  800824:	10000b85 	stb	zero,46(r2)
				((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[3] = false;
  800828:	e0bfff17 	ldw	r2,-4(fp)
  80082c:	10801817 	ldw	r2,96(r2)
  800830:	10000c45 	stb	zero,49(r2)
  800834:	00000306 	br	800844 <alienAction+0x338>
		}
		else
			((struct Alien*)(((struct Object*)a)->subObject))->borderBlocked[2] = false;
  800838:	e0bfff17 	ldw	r2,-4(fp)
  80083c:	10801817 	ldw	r2,96(r2)
  800840:	10000c05 	stb	zero,48(r2)
		setAlienDirection((struct Alien*)(((struct Object*)a)->subObject), x_, y_);
	}

	*/
	// Make the alien go forward
	new_x = ((struct Object*)a)->x
  800844:	e0bfff17 	ldw	r2,-4(fp)
  800848:	11000017 	ldw	r4,0(r2)
  80084c:	08135a40 	call	8135a4 <__floatsisf>
  800850:	1007883a 	mov	r3,r2
  800854:	e0bfff17 	ldw	r2,-4(fp)
  800858:	10801817 	ldw	r2,96(r2)
  80085c:	10800417 	ldw	r2,16(r2)
  800860:	1809883a 	mov	r4,r3
  800864:	100b883a 	mov	r5,r2
  800868:	081300c0 	call	81300c <__addsf3>
  80086c:	1009883a 	mov	r4,r2
  800870:	081363c0 	call	81363c <__fixsfsi>
  800874:	e0bffe15 	stw	r2,-8(fp)
			+ ((struct Alien*)(((struct Object*)a)->subObject))->x_speed;

	new_y =  ((struct Object*)a)->y
  800878:	e0bfff17 	ldw	r2,-4(fp)
  80087c:	11000117 	ldw	r4,4(r2)
  800880:	08135a40 	call	8135a4 <__floatsisf>
  800884:	1007883a 	mov	r3,r2
  800888:	e0bfff17 	ldw	r2,-4(fp)
  80088c:	10801817 	ldw	r2,96(r2)
  800890:	10800517 	ldw	r2,20(r2)
  800894:	1809883a 	mov	r4,r3
  800898:	100b883a 	mov	r5,r2
  80089c:	081300c0 	call	81300c <__addsf3>
  8008a0:	1009883a 	mov	r4,r2
  8008a4:	081363c0 	call	81363c <__fixsfsi>
  8008a8:	e0bffd15 	stw	r2,-12(fp)
			+ ((struct Alien*)(((struct Object*)a)->subObject))->y_speed;

	if( (new_x+5) > GOALX && (new_y+5) > GOALY -20 ) {
  8008ac:	e0bffe17 	ldw	r2,-8(fp)
  8008b0:	10803090 	cmplti	r2,r2,194
  8008b4:	10001d1e 	bne	r2,zero,80092c <alienAction+0x420>
  8008b8:	e0bffd17 	ldw	r2,-12(fp)
  8008bc:	10802710 	cmplti	r2,r2,156
  8008c0:	10001a1e 	bne	r2,zero,80092c <alienAction+0x420>
		info.invadedAlien++;
  8008c4:	008020f4 	movhi	r2,131
  8008c8:	109cb404 	addi	r2,r2,29392
  8008cc:	10800317 	ldw	r2,12(r2)
  8008d0:	10c00044 	addi	r3,r2,1
  8008d4:	008020f4 	movhi	r2,131
  8008d8:	109cb404 	addi	r2,r2,29392
  8008dc:	10c00315 	stw	r3,12(r2)
		if(info.invadedAlien > 50)
  8008e0:	008020f4 	movhi	r2,131
  8008e4:	109cb404 	addi	r2,r2,29392
  8008e8:	10800317 	ldw	r2,12(r2)
  8008ec:	10800cf0 	cmpltui	r2,r2,51
  8008f0:	1000041e 	bne	r2,zero,800904 <alienAction+0x3f8>
			info.isEnd = true;
  8008f4:	00c020f4 	movhi	r3,131
  8008f8:	18dcb404 	addi	r3,r3,29392
  8008fc:	00800044 	movi	r2,1
  800900:	18800715 	stw	r2,28(r3)
		updateScoreFrame();
  800904:	080a0a40 	call	80a0a4 <updateScoreFrame>
		removeFromCollide(((struct Alien*)(((struct Object*)a)->subObject))->col, (struct Object*)a);
  800908:	e0bfff17 	ldw	r2,-4(fp)
  80090c:	10801817 	ldw	r2,96(r2)
  800910:	11001117 	ldw	r4,68(r2)
  800914:	e17fff17 	ldw	r5,-4(fp)
  800918:	08071200 	call	807120 <removeFromCollide>
		killAlien( (void*)(struct Alien*)(((struct Object*)a)->subObject));
  80091c:	e0bfff17 	ldw	r2,-4(fp)
  800920:	11001817 	ldw	r4,96(r2)
  800924:	08004680 	call	800468 <killAlien>
			+ ((struct Alien*)(((struct Object*)a)->subObject))->x_speed;

	new_y =  ((struct Object*)a)->y
			+ ((struct Alien*)(((struct Object*)a)->subObject))->y_speed;

	if( (new_x+5) > GOALX && (new_y+5) > GOALY -20 ) {
  800928:	00000406 	br	80093c <alienAction+0x430>
		updateScoreFrame();
		removeFromCollide(((struct Alien*)(((struct Object*)a)->subObject))->col, (struct Object*)a);
		killAlien( (void*)(struct Alien*)(((struct Object*)a)->subObject));
	} else {
			// Apply it to the object
			setXY( 	((struct Object*)a) , new_x, new_y );
  80092c:	e13fff17 	ldw	r4,-4(fp)
  800930:	e17ffe17 	ldw	r5,-8(fp)
  800934:	e1bffd17 	ldw	r6,-12(fp)
  800938:	081016c0 	call	81016c <setXY>
	}

	// toggle tower-collision boolean

		((struct Alien*)(((struct Object*)a)->subObject))->team_collide = false;
  80093c:	e0bfff17 	ldw	r2,-4(fp)
  800940:	10801817 	ldw	r2,96(r2)
  800944:	10000b45 	stb	zero,45(r2)
		((struct Alien*)(((struct Object*)a)->subObject))->towerBlock = false;
  800948:	e0bfff17 	ldw	r2,-4(fp)
  80094c:	10801817 	ldw	r2,96(r2)
  800950:	10000a85 	stb	zero,42(r2)
}
  800954:	e037883a 	mov	sp,fp
  800958:	dfc00117 	ldw	ra,4(sp)
  80095c:	df000017 	ldw	fp,0(sp)
  800960:	dec00204 	addi	sp,sp,8
  800964:	f800283a 	ret

00800968 <alienCollide>:


void alienCollide (void* this, void* obj, struct Collidable* c){
  800968:	defff404 	addi	sp,sp,-48
  80096c:	dfc00b15 	stw	ra,44(sp)
  800970:	df000a15 	stw	fp,40(sp)
  800974:	dc000915 	stw	r16,36(sp)
  800978:	df000904 	addi	fp,sp,36
  80097c:	e13ffd15 	stw	r4,-12(fp)
  800980:	e17ffe15 	stw	r5,-8(fp)
  800984:	e1bfff15 	stw	r6,-4(fp)

	int a_yMid = ((struct Object*)this)->center_x; // center
  800988:	e0bffd17 	ldw	r2,-12(fp)
  80098c:	10800517 	ldw	r2,20(r2)
  800990:	e0bffc15 	stw	r2,-16(fp)
	int a_xMid = ((struct Object*)this)->center_y; // center
  800994:	e0bffd17 	ldw	r2,-12(fp)
  800998:	10800617 	ldw	r2,24(r2)
  80099c:	e0bffb15 	stw	r2,-20(fp)
	int distx, disty;

if(((struct Object*)obj)->class == ship  ) {
  8009a0:	e0bffe17 	ldw	r2,-8(fp)
  8009a4:	10801117 	ldw	r2,68(r2)
  8009a8:	10800198 	cmpnei	r2,r2,6
  8009ac:	1000211e 	bne	r2,zero,800a34 <alienCollide+0xcc>
	// midpoint of the tower
	int t_xMid = ((struct Object*)obj)->center_x;
  8009b0:	e0bffe17 	ldw	r2,-8(fp)
  8009b4:	10800517 	ldw	r2,20(r2)
  8009b8:	e0bff815 	stw	r2,-32(fp)
	int t_yMid = ((struct Object*)obj)->center_y;
  8009bc:	e0bffe17 	ldw	r2,-8(fp)
  8009c0:	10800617 	ldw	r2,24(r2)
  8009c4:	e0bff715 	stw	r2,-36(fp)

	//printf("collide\n");

	distx = t_xMid - a_xMid;
  8009c8:	e0fff817 	ldw	r3,-32(fp)
  8009cc:	e0bffb17 	ldw	r2,-20(fp)
  8009d0:	1885c83a 	sub	r2,r3,r2
  8009d4:	e0bffa15 	stw	r2,-24(fp)
	disty = t_yMid - a_yMid;
  8009d8:	e0fff717 	ldw	r3,-36(fp)
  8009dc:	e0bffc17 	ldw	r2,-16(fp)
  8009e0:	1885c83a 	sub	r2,r3,r2
  8009e4:	e0bff915 	stw	r2,-28(fp)

	if(distx < disty){
  8009e8:	e0fffa17 	ldw	r3,-24(fp)
  8009ec:	e0bff917 	ldw	r2,-28(fp)
  8009f0:	1880060e 	bge	r3,r2,800a0c <alienCollide+0xa4>
		((struct Alien*)(((struct Object*)this)->subObject))->towerBlock_move_x = true; // move in x
  8009f4:	e0bffd17 	ldw	r2,-12(fp)
  8009f8:	10801817 	ldw	r2,96(r2)
  8009fc:	1007883a 	mov	r3,r2
  800a00:	00800044 	movi	r2,1
  800a04:	18800ac5 	stb	r2,43(r3)
  800a08:	00000506 	br	800a20 <alienCollide+0xb8>
		//((struct Alien*)(((struct Object*)this)->subObject))->towerBlock_move_y = false;
	}
	else {
		//((struct Alien*)(((struct Object*)this)->subObject))->towerBlock_move_x = false;
		((struct Alien*)(((struct Object*)this)->subObject))->towerBlock_move_y = true; // move in y
  800a0c:	e0bffd17 	ldw	r2,-12(fp)
  800a10:	10801817 	ldw	r2,96(r2)
  800a14:	1007883a 	mov	r3,r2
  800a18:	00800044 	movi	r2,1
  800a1c:	18800b05 	stb	r2,44(r3)
	}

	((struct Alien*)(((struct Object*)this)->subObject))->towerBlock = true;
  800a20:	e0bffd17 	ldw	r2,-12(fp)
  800a24:	10801817 	ldw	r2,96(r2)
  800a28:	1007883a 	mov	r3,r2
  800a2c:	00800044 	movi	r2,1
  800a30:	18800a85 	stb	r2,42(r3)
}

	// Collide with bullets
	if(((struct Object*)obj)->class == bullet  && ((struct Alien*)(((struct Object*)this)->subObject))->dead == false
  800a34:	e0bffe17 	ldw	r2,-8(fp)
  800a38:	10801117 	ldw	r2,68(r2)
  800a3c:	10800058 	cmpnei	r2,r2,1
  800a40:	1000341e 	bne	r2,zero,800b14 <alienCollide+0x1ac>
  800a44:	e0bffd17 	ldw	r2,-12(fp)
  800a48:	10801817 	ldw	r2,96(r2)
  800a4c:	10800a03 	ldbu	r2,40(r2)
  800a50:	10803fcc 	andi	r2,r2,255
  800a54:	1004c03a 	cmpne	r2,r2,zero
  800a58:	10002e1e 	bne	r2,zero,800b14 <alienCollide+0x1ac>
  800a5c:	e0bffd17 	ldw	r2,-12(fp)
  800a60:	10801817 	ldw	r2,96(r2)
  800a64:	10800a43 	ldbu	r2,41(r2)
  800a68:	10803fcc 	andi	r2,r2,255
  800a6c:	1004c03a 	cmpne	r2,r2,zero
  800a70:	1000281e 	bne	r2,zero,800b14 <alienCollide+0x1ac>
			&& ((struct Alien*)(((struct Object*)this)->subObject))->isHit == false) {
		// decrease the alien's life
		// TODO: Added time delay or response time for alien to get damage;
		//preventing alien get damage twice or more from the same bullet
		((struct Alien*)(((struct Object*)this)->subObject))->isHit = true;
  800a74:	e0bffd17 	ldw	r2,-12(fp)
  800a78:	10801817 	ldw	r2,96(r2)
  800a7c:	1007883a 	mov	r3,r2
  800a80:	00800044 	movi	r2,1
  800a84:	18800a45 	stb	r2,41(r3)
		((struct Alien*)(((struct Object*)this)->subObject))->current_life -= ((struct Bullet*)((struct Object*)obj)->subObject)->damage;
  800a88:	e0bffd17 	ldw	r2,-12(fp)
  800a8c:	10801817 	ldw	r2,96(r2)
  800a90:	1021883a 	mov	r16,r2
  800a94:	e0bffd17 	ldw	r2,-12(fp)
  800a98:	10801817 	ldw	r2,96(r2)
  800a9c:	10c00217 	ldw	r3,8(r2)
  800aa0:	e0bffe17 	ldw	r2,-8(fp)
  800aa4:	10801817 	ldw	r2,96(r2)
  800aa8:	10800517 	ldw	r2,20(r2)
  800aac:	1809883a 	mov	r4,r3
  800ab0:	100b883a 	mov	r5,r2
  800ab4:	0812f9c0 	call	812f9c <__subsf3>
  800ab8:	80800215 	stw	r2,8(r16)
		if(((struct Alien*)(((struct Object*)this)->subObject))->current_life <= 0) {
  800abc:	e0bffd17 	ldw	r2,-12(fp)
  800ac0:	10801817 	ldw	r2,96(r2)
  800ac4:	10800217 	ldw	r2,8(r2)
  800ac8:	1009883a 	mov	r4,r2
  800acc:	000b883a 	mov	r5,zero
  800ad0:	081352c0 	call	81352c <__lesf2>
  800ad4:	10800050 	cmplti	r2,r2,1
  800ad8:	1000011e 	bne	r2,zero,800ae0 <alienCollide+0x178>
  800adc:	00000d06 	br	800b14 <alienCollide+0x1ac>
			updateScoreMoney(((struct Alien*)(((struct Object*)this)->subObject))->score,((struct Alien*)(((struct Object*)this)->subObject))->bounty);
  800ae0:	e0bffd17 	ldw	r2,-12(fp)
  800ae4:	10801817 	ldw	r2,96(r2)
  800ae8:	11000917 	ldw	r4,36(r2)
  800aec:	e0bffd17 	ldw	r2,-12(fp)
  800af0:	10801817 	ldw	r2,96(r2)
  800af4:	11400817 	ldw	r5,32(r2)
  800af8:	080e3c40 	call	80e3c4 <updateScoreMoney>
			removeFromCollide(c, (struct Object*)this);
  800afc:	e17ffd17 	ldw	r5,-12(fp)
  800b00:	e13fff17 	ldw	r4,-4(fp)
  800b04:	08071200 	call	807120 <removeFromCollide>
			killAlien((void*)((struct Alien*)(((struct Object*)this)->subObject)));
  800b08:	e0bffd17 	ldw	r2,-12(fp)
  800b0c:	11001817 	ldw	r4,96(r2)
  800b10:	08004680 	call	800468 <killAlien>
	if(((struct Object*)obj)->class == alien ) {
		((struct Alien*)(((struct Object*)this)->subObject))->team_collide = true;
	}
	*/

}
  800b14:	e037883a 	mov	sp,fp
  800b18:	dfc00217 	ldw	ra,8(sp)
  800b1c:	df000117 	ldw	fp,4(sp)
  800b20:	dc000017 	ldw	r16,0(sp)
  800b24:	dec00304 	addi	sp,sp,12
  800b28:	f800283a 	ret

00800b2c <alienPath>:

void alienPath(struct Alien* a){
  800b2c:	defffc04 	addi	sp,sp,-16
  800b30:	dfc00315 	stw	ra,12(sp)
  800b34:	df000215 	stw	fp,8(sp)
  800b38:	df000204 	addi	fp,sp,8
  800b3c:	e13fff15 	stw	r4,-4(fp)
// Simple predefined paths
	int newpath = ( (rand() %5) )+ 1; // 5 different paths
  800b40:	08158940 	call	815894 <rand>
  800b44:	1009883a 	mov	r4,r2
  800b48:	01400144 	movi	r5,5
  800b4c:	081465c0 	call	81465c <__modsi3>
  800b50:	10800044 	addi	r2,r2,1
  800b54:	e0bffe15 	stw	r2,-8(fp)
	a->path_found = true;
  800b58:	e0ffff17 	ldw	r3,-4(fp)
  800b5c:	00800044 	movi	r2,1
  800b60:	18800f05 	stb	r2,60(r3)
	a->path = newpath;
  800b64:	e0ffff17 	ldw	r3,-4(fp)
  800b68:	e0bffe17 	ldw	r2,-8(fp)
  800b6c:	18801015 	stw	r2,64(r3)
//	printf("path %d\n", newpath);
}
  800b70:	e037883a 	mov	sp,fp
  800b74:	dfc00117 	ldw	ra,4(sp)
  800b78:	df000017 	ldw	fp,0(sp)
  800b7c:	dec00204 	addi	sp,sp,8
  800b80:	f800283a 	ret

00800b84 <setAlienDirection>:

void setAlienDirection(struct Alien* this, int x_dir, int y_dir) {
  800b84:	defffb04 	addi	sp,sp,-20
  800b88:	dfc00415 	stw	ra,16(sp)
  800b8c:	df000315 	stw	fp,12(sp)
  800b90:	df000304 	addi	fp,sp,12
  800b94:	e13ffd15 	stw	r4,-12(fp)
  800b98:	e17ffe15 	stw	r5,-8(fp)
  800b9c:	e1bfff15 	stw	r6,-4(fp)
	this->x_speed = x_dir*this->speed;
  800ba0:	e13ffe17 	ldw	r4,-8(fp)
  800ba4:	08135a40 	call	8135a4 <__floatsisf>
  800ba8:	1007883a 	mov	r3,r2
  800bac:	e0bffd17 	ldw	r2,-12(fp)
  800bb0:	10800617 	ldw	r2,24(r2)
  800bb4:	1809883a 	mov	r4,r3
  800bb8:	100b883a 	mov	r5,r2
  800bbc:	08130700 	call	813070 <__mulsf3>
  800bc0:	1007883a 	mov	r3,r2
  800bc4:	e0bffd17 	ldw	r2,-12(fp)
  800bc8:	10c00415 	stw	r3,16(r2)
	this->y_speed = y_dir*this->speed;
  800bcc:	e13fff17 	ldw	r4,-4(fp)
  800bd0:	08135a40 	call	8135a4 <__floatsisf>
  800bd4:	1007883a 	mov	r3,r2
  800bd8:	e0bffd17 	ldw	r2,-12(fp)
  800bdc:	10800617 	ldw	r2,24(r2)
  800be0:	1809883a 	mov	r4,r3
  800be4:	100b883a 	mov	r5,r2
  800be8:	08130700 	call	813070 <__mulsf3>
  800bec:	1007883a 	mov	r3,r2
  800bf0:	e0bffd17 	ldw	r2,-12(fp)
  800bf4:	10c00515 	stw	r3,20(r2)
}
  800bf8:	e037883a 	mov	sp,fp
  800bfc:	dfc00117 	ldw	ra,4(sp)
  800c00:	df000017 	ldw	fp,0(sp)
  800c04:	dec00204 	addi	sp,sp,8
  800c08:	f800283a 	ret

00800c0c <followPath>:

void followPath(struct Alien* a) {
  800c0c:	defffb04 	addi	sp,sp,-20
  800c10:	dfc00415 	stw	ra,16(sp)
  800c14:	df000315 	stw	fp,12(sp)
  800c18:	df000304 	addi	fp,sp,12
  800c1c:	e13fff15 	stw	r4,-4(fp)

	int xdir, ydir;

	if(	a->path == 1) {
  800c20:	e0bfff17 	ldw	r2,-4(fp)
  800c24:	10801017 	ldw	r2,64(r2)
  800c28:	10800058 	cmpnei	r2,r2,1
  800c2c:	1000051e 	bne	r2,zero,800c44 <followPath+0x38>
		// Force alien to go diagonally
		setAlienDirection(a, 1, 1);
  800c30:	e13fff17 	ldw	r4,-4(fp)
  800c34:	01400044 	movi	r5,1
  800c38:	01800044 	movi	r6,1
  800c3c:	0800b840 	call	800b84 <setAlienDirection>
  800c40:	00004306 	br	800d50 <followPath+0x144>

	}

	else if( a->path == 2) {
  800c44:	e0bfff17 	ldw	r2,-4(fp)
  800c48:	10801017 	ldw	r2,64(r2)
  800c4c:	10800098 	cmpnei	r2,r2,2
  800c50:	1000051e 	bne	r2,zero,800c68 <followPath+0x5c>
		// Force alien to follow top border then right border
		setAlienDirection(a, 1, 0);
  800c54:	e13fff17 	ldw	r4,-4(fp)
  800c58:	01400044 	movi	r5,1
  800c5c:	000d883a 	mov	r6,zero
  800c60:	0800b840 	call	800b84 <setAlienDirection>
  800c64:	00003a06 	br	800d50 <followPath+0x144>
	}

	else if( a->path == 3) {
  800c68:	e0bfff17 	ldw	r2,-4(fp)
  800c6c:	10801017 	ldw	r2,64(r2)
  800c70:	108000d8 	cmpnei	r2,r2,3
  800c74:	1000051e 	bne	r2,zero,800c8c <followPath+0x80>
		// Force alien to follow left border then bottom border
		setAlienDirection(a, 0, 1);
  800c78:	e13fff17 	ldw	r4,-4(fp)
  800c7c:	000b883a 	mov	r5,zero
  800c80:	01800044 	movi	r6,1
  800c84:	0800b840 	call	800b84 <setAlienDirection>
  800c88:	00003106 	br	800d50 <followPath+0x144>
	}

	else if(a->path == 4) {
  800c8c:	e0bfff17 	ldw	r2,-4(fp)
  800c90:	10801017 	ldw	r2,64(r2)
  800c94:	10800118 	cmpnei	r2,r2,4
  800c98:	1000151e 	bne	r2,zero,800cf0 <followPath+0xe4>
		// go right 120, down 120, right 120, down 120

		if(a->super->x < 120) {
  800c9c:	e0bfff17 	ldw	r2,-4(fp)
  800ca0:	10800017 	ldw	r2,0(r2)
  800ca4:	10800017 	ldw	r2,0(r2)
  800ca8:	10801e08 	cmpgei	r2,r2,120
  800cac:	1000031e 	bne	r2,zero,800cbc <followPath+0xb0>
			xdir = 1;
  800cb0:	00800044 	movi	r2,1
  800cb4:	e0bffe15 	stw	r2,-8(fp)
			ydir = 0;
  800cb8:	e03ffd15 	stw	zero,-12(fp)
		}
		if(a->super->x >= 120 ){
  800cbc:	e0bfff17 	ldw	r2,-4(fp)
  800cc0:	10800017 	ldw	r2,0(r2)
  800cc4:	10800017 	ldw	r2,0(r2)
  800cc8:	10801e10 	cmplti	r2,r2,120
  800ccc:	1000031e 	bne	r2,zero,800cdc <followPath+0xd0>
			xdir = 0;
  800cd0:	e03ffe15 	stw	zero,-8(fp)
			ydir = 1;
  800cd4:	00800044 	movi	r2,1
  800cd8:	e0bffd15 	stw	r2,-12(fp)
		}

		setAlienDirection(a, xdir, ydir);
  800cdc:	e13fff17 	ldw	r4,-4(fp)
  800ce0:	e17ffe17 	ldw	r5,-8(fp)
  800ce4:	e1bffd17 	ldw	r6,-12(fp)
  800ce8:	0800b840 	call	800b84 <setAlienDirection>
  800cec:	00001806 	br	800d50 <followPath+0x144>

	}

	else if(a->path == 5) {
  800cf0:	e0bfff17 	ldw	r2,-4(fp)
  800cf4:	10801017 	ldw	r2,64(r2)
  800cf8:	10800158 	cmpnei	r2,r2,5
  800cfc:	1000141e 	bne	r2,zero,800d50 <followPath+0x144>
		// go down 120, right 120, down 120, right 120

		if(a->super->x < 120) {
  800d00:	e0bfff17 	ldw	r2,-4(fp)
  800d04:	10800017 	ldw	r2,0(r2)
  800d08:	10800017 	ldw	r2,0(r2)
  800d0c:	10801e08 	cmpgei	r2,r2,120
  800d10:	1000031e 	bne	r2,zero,800d20 <followPath+0x114>
			xdir = 0;
  800d14:	e03ffe15 	stw	zero,-8(fp)
			ydir = 1;
  800d18:	00800044 	movi	r2,1
  800d1c:	e0bffd15 	stw	r2,-12(fp)
		}
		if(a->super->x >= 120 ){
  800d20:	e0bfff17 	ldw	r2,-4(fp)
  800d24:	10800017 	ldw	r2,0(r2)
  800d28:	10800017 	ldw	r2,0(r2)
  800d2c:	10801e10 	cmplti	r2,r2,120
  800d30:	1000031e 	bne	r2,zero,800d40 <followPath+0x134>
			xdir = 1;
  800d34:	00800044 	movi	r2,1
  800d38:	e0bffe15 	stw	r2,-8(fp)
			ydir = 0;
  800d3c:	e03ffd15 	stw	zero,-12(fp)
		}

		setAlienDirection(a, xdir, ydir);
  800d40:	e13fff17 	ldw	r4,-4(fp)
  800d44:	e17ffe17 	ldw	r5,-8(fp)
  800d48:	e1bffd17 	ldw	r6,-12(fp)
  800d4c:	0800b840 	call	800b84 <setAlienDirection>
	}
}
  800d50:	e037883a 	mov	sp,fp
  800d54:	dfc00117 	ldw	ra,4(sp)
  800d58:	df000017 	ldw	fp,0(sp)
  800d5c:	dec00204 	addi	sp,sp,8
  800d60:	f800283a 	ret

00800d64 <av_config_setup>:

/**
 * Mandatory setup function in order for audio to function
 */
void av_config_setup()
{
  800d64:	defffd04 	addi	sp,sp,-12
  800d68:	dfc00215 	stw	ra,8(sp)
  800d6c:	df000115 	stw	fp,4(sp)
  800d70:	df000104 	addi	fp,sp,4
	alt_up_av_config_dev * av_config =
	alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
  800d74:	010020f4 	movhi	r4,131
  800d78:	2120b204 	addi	r4,r4,-32056
  800d7c:	08201b00 	call	8201b0 <alt_up_av_config_open_dev>
  800d80:	e0bfff15 	stw	r2,-4(fp)
	while (!alt_up_av_config_read_ready(av_config));
  800d84:	e13fff17 	ldw	r4,-4(fp)
  800d88:	082040c0 	call	82040c <alt_up_av_config_read_ready>
  800d8c:	1005003a 	cmpeq	r2,r2,zero
  800d90:	103ffc1e 	bne	r2,zero,800d84 <av_config_setup+0x20>
}
  800d94:	e037883a 	mov	sp,fp
  800d98:	dfc00117 	ldw	ra,4(sp)
  800d9c:	df000017 	ldw	fp,0(sp)
  800da0:	dec00204 	addi	sp,sp,8
  800da4:	f800283a 	ret

00800da8 <initAudioController>:

/**
 * Initializes the AudioController
 */
struct AudioController* initAudioController() {
  800da8:	defffd04 	addi	sp,sp,-12
  800dac:	dfc00215 	stw	ra,8(sp)
  800db0:	df000115 	stw	fp,4(sp)
  800db4:	df000104 	addi	fp,sp,4
	av_config_setup();
  800db8:	0800d640 	call	800d64 <av_config_setup>

	struct AudioController* this = (struct AudioController*)malloc(sizeof(struct AudioController));
  800dbc:	01001004 	movi	r4,64
  800dc0:	0814f580 	call	814f58 <malloc>
  800dc4:	e0bfff15 	stw	r2,-4(fp)

	this->buffer_length = 0;
  800dc8:	e0bfff17 	ldw	r2,-4(fp)
  800dcc:	10000c15 	stw	zero,48(r2)
	this->num_sounds = 0;
  800dd0:	e0bfff17 	ldw	r2,-4(fp)
  800dd4:	10000215 	stw	zero,8(r2)
	this->audio = alt_up_audio_open_dev(AUDIO_NAME);
  800dd8:	010020f4 	movhi	r4,131
  800ddc:	2120ba04 	addi	r4,r4,-32024
  800de0:	081f9a40 	call	81f9a4 <alt_up_audio_open_dev>
  800de4:	1007883a 	mov	r3,r2
  800de8:	e0bfff17 	ldw	r2,-4(fp)
  800dec:	10c00015 	stw	r3,0(r2)
	this->clear_required = false;
  800df0:	e0bfff17 	ldw	r2,-4(fp)
  800df4:	10000f15 	stw	zero,60(r2)
	this->start_dirty_index = 0;
  800df8:	e0bfff17 	ldw	r2,-4(fp)
  800dfc:	10000d15 	stw	zero,52(r2)
	this->end_dirty_index = 0;
  800e00:	e0bfff17 	ldw	r2,-4(fp)
  800e04:	10000e15 	stw	zero,56(r2)
	this->buffer = NULL;
  800e08:	e0bfff17 	ldw	r2,-4(fp)
  800e0c:	10000b15 	stw	zero,44(r2)
//	alt_irq_register(AUDIO_IRQ, this, (void*) audio_ISR);
//	alt_irq_enable(AUDIO_IRQ);
	alt_up_audio_reset_audio_core(this->audio);
  800e10:	e0bfff17 	ldw	r2,-4(fp)
  800e14:	11000017 	ldw	r4,0(r2)
  800e18:	081fb940 	call	81fb94 <alt_up_audio_reset_audio_core>

	return this;
  800e1c:	e0bfff17 	ldw	r2,-4(fp)
}
  800e20:	e037883a 	mov	sp,fp
  800e24:	dfc00117 	ldw	ra,4(sp)
  800e28:	df000017 	ldw	fp,0(sp)
  800e2c:	dec00204 	addi	sp,sp,8
  800e30:	f800283a 	ret

00800e34 <enableAudioController>:

/**
 * Enables the audio ISR so that sounds can be played
 */
void enableAudioController(struct AudioController* this)
{
  800e34:	defffd04 	addi	sp,sp,-12
  800e38:	dfc00215 	stw	ra,8(sp)
  800e3c:	df000115 	stw	fp,4(sp)
  800e40:	df000104 	addi	fp,sp,4
  800e44:	e13fff15 	stw	r4,-4(fp)
	alt_up_audio_enable_write_interrupt(this->audio);
  800e48:	e0bfff17 	ldw	r2,-4(fp)
  800e4c:	11000017 	ldw	r4,0(r2)
  800e50:	081fa800 	call	81fa80 <alt_up_audio_enable_write_interrupt>
}
  800e54:	e037883a 	mov	sp,fp
  800e58:	dfc00117 	ldw	ra,4(sp)
  800e5c:	df000017 	ldw	fp,0(sp)
  800e60:	dec00204 	addi	sp,sp,8
  800e64:	f800283a 	ret

00800e68 <disableAudioController>:
/**
 * Disables the audio ISR to prevent sounds from playing
 * Call this whenever sound isn't needed
 */
void disableAudioController(struct AudioController* this)
{
  800e68:	defffd04 	addi	sp,sp,-12
  800e6c:	dfc00215 	stw	ra,8(sp)
  800e70:	df000115 	stw	fp,4(sp)
  800e74:	df000104 	addi	fp,sp,4
  800e78:	e13fff15 	stw	r4,-4(fp)
	alt_up_audio_reset_audio_core(this->audio);
  800e7c:	e0bfff17 	ldw	r2,-4(fp)
  800e80:	11000017 	ldw	r4,0(r2)
  800e84:	081fb940 	call	81fb94 <alt_up_audio_reset_audio_core>
	alt_up_audio_disable_write_interrupt(this->audio);
  800e88:	e0bfff17 	ldw	r2,-4(fp)
  800e8c:	11000017 	ldw	r4,0(r2)
  800e90:	081facc0 	call	81facc <alt_up_audio_disable_write_interrupt>
}
  800e94:	e037883a 	mov	sp,fp
  800e98:	dfc00117 	ldw	ra,4(sp)
  800e9c:	df000017 	ldw	fp,0(sp)
  800ea0:	dec00204 	addi	sp,sp,8
  800ea4:	f800283a 	ret

00800ea8 <updateAudioController>:

void updateAudioController(struct AudioController* this, int num_written)
{
  800ea8:	defffb04 	addi	sp,sp,-20
  800eac:	dfc00415 	stw	ra,16(sp)
  800eb0:	df000315 	stw	fp,12(sp)
  800eb4:	df000304 	addi	fp,sp,12
  800eb8:	e13ffe15 	stw	r4,-8(fp)
  800ebc:	e17fff15 	stw	r5,-4(fp)
	int i;
	this->buf_index_play += num_written;
  800ec0:	e0bffe17 	ldw	r2,-8(fp)
  800ec4:	10c00117 	ldw	r3,4(r2)
  800ec8:	e0bfff17 	ldw	r2,-4(fp)
  800ecc:	1887883a 	add	r3,r3,r2
  800ed0:	e0bffe17 	ldw	r2,-8(fp)
  800ed4:	10c00115 	stw	r3,4(r2)

	if(this->buf_index_play >= this->buffer_length)
  800ed8:	e0bffe17 	ldw	r2,-8(fp)
  800edc:	10c00117 	ldw	r3,4(r2)
  800ee0:	e0bffe17 	ldw	r2,-8(fp)
  800ee4:	10800c17 	ldw	r2,48(r2)
  800ee8:	18802e16 	blt	r3,r2,800fa4 <updateAudioController+0xfc>
	{
		this->buf_index_play = 0;
  800eec:	e0bffe17 	ldw	r2,-8(fp)
  800ef0:	10000115 	stw	zero,4(r2)

		if( !this->clear_required )
  800ef4:	e0bffe17 	ldw	r2,-8(fp)
  800ef8:	10800f17 	ldw	r2,60(r2)
  800efc:	1005003a 	cmpeq	r2,r2,zero
  800f00:	1000281e 	bne	r2,zero,800fa4 <updateAudioController+0xfc>
			return;
		else
			clear_dirty_buffer(this);
  800f04:	e13ffe17 	ldw	r4,-8(fp)
  800f08:	080126c0 	call	80126c <clear_dirty_buffer>

		for( i = 0; i < this->num_sounds; i++ )
  800f0c:	e03ffd15 	stw	zero,-12(fp)
  800f10:	00002006 	br	800f94 <updateAudioController+0xec>
		{
			if(this->sounds[ i ]->playing)
  800f14:	e0bffd17 	ldw	r2,-12(fp)
  800f18:	e0fffe17 	ldw	r3,-8(fp)
  800f1c:	1085883a 	add	r2,r2,r2
  800f20:	1085883a 	add	r2,r2,r2
  800f24:	10c5883a 	add	r2,r2,r3
  800f28:	10800304 	addi	r2,r2,12
  800f2c:	10800017 	ldw	r2,0(r2)
  800f30:	10800503 	ldbu	r2,20(r2)
  800f34:	10803fcc 	andi	r2,r2,255
  800f38:	1005003a 	cmpeq	r2,r2,zero
  800f3c:	1000121e 	bne	r2,zero,800f88 <updateAudioController+0xe0>
			{
				addToAudioBuffer( this, this->sounds[ i ], this->sounds[ i ]->buffer_index );
  800f40:	e0bffd17 	ldw	r2,-12(fp)
  800f44:	e0fffe17 	ldw	r3,-8(fp)
  800f48:	1085883a 	add	r2,r2,r2
  800f4c:	1085883a 	add	r2,r2,r2
  800f50:	10c5883a 	add	r2,r2,r3
  800f54:	10800304 	addi	r2,r2,12
  800f58:	11400017 	ldw	r5,0(r2)
  800f5c:	e0bffd17 	ldw	r2,-12(fp)
  800f60:	e0fffe17 	ldw	r3,-8(fp)
  800f64:	1085883a 	add	r2,r2,r2
  800f68:	1085883a 	add	r2,r2,r2
  800f6c:	10c5883a 	add	r2,r2,r3
  800f70:	10800304 	addi	r2,r2,12
  800f74:	10800017 	ldw	r2,0(r2)
  800f78:	10800117 	ldw	r2,4(r2)
  800f7c:	100d883a 	mov	r6,r2
  800f80:	e13ffe17 	ldw	r4,-8(fp)
  800f84:	08010c80 	call	8010c8 <addToAudioBuffer>
		if( !this->clear_required )
			return;
		else
			clear_dirty_buffer(this);

		for( i = 0; i < this->num_sounds; i++ )
  800f88:	e0bffd17 	ldw	r2,-12(fp)
  800f8c:	10800044 	addi	r2,r2,1
  800f90:	e0bffd15 	stw	r2,-12(fp)
  800f94:	e0bffe17 	ldw	r2,-8(fp)
  800f98:	10c00217 	ldw	r3,8(r2)
  800f9c:	e0bffd17 	ldw	r2,-12(fp)
  800fa0:	10ffdc16 	blt	r2,r3,800f14 <updateAudioController+0x6c>
			{
				addToAudioBuffer( this, this->sounds[ i ], this->sounds[ i ]->buffer_index );
			}
		}
	}
}
  800fa4:	e037883a 	mov	sp,fp
  800fa8:	dfc00117 	ldw	ra,4(sp)
  800fac:	df000017 	ldw	fp,0(sp)
  800fb0:	dec00204 	addi	sp,sp,8
  800fb4:	f800283a 	ret

00800fb8 <loadSound>:

/**
 * Loads the sound for the specified id
 */
void loadSound( struct AudioController* this, int id )
{
  800fb8:	defffb04 	addi	sp,sp,-20
  800fbc:	dfc00415 	stw	ra,16(sp)
  800fc0:	df000315 	stw	fp,12(sp)
  800fc4:	dc000215 	stw	r16,8(sp)
  800fc8:	df000204 	addi	fp,sp,8
  800fcc:	e13ffe15 	stw	r4,-8(fp)
  800fd0:	e17fff15 	stw	r5,-4(fp)
	while((this->sounds[ this->num_sounds ] = loadWavSound(id))==NULL) {
  800fd4:	00000406 	br	800fe8 <loadSound+0x30>
		printf("load sound id %d error\n", id);
  800fd8:	010020f4 	movhi	r4,131
  800fdc:	2120bd04 	addi	r4,r4,-32012
  800fe0:	e17fff17 	ldw	r5,-4(fp)
  800fe4:	081574c0 	call	81574c <printf>
/**
 * Loads the sound for the specified id
 */
void loadSound( struct AudioController* this, int id )
{
	while((this->sounds[ this->num_sounds ] = loadWavSound(id))==NULL) {
  800fe8:	e0bffe17 	ldw	r2,-8(fp)
  800fec:	14000217 	ldw	r16,8(r2)
  800ff0:	e13fff17 	ldw	r4,-4(fp)
  800ff4:	0810f0c0 	call	810f0c <loadWavSound>
  800ff8:	1009883a 	mov	r4,r2
  800ffc:	e0fffe17 	ldw	r3,-8(fp)
  801000:	8405883a 	add	r2,r16,r16
  801004:	1085883a 	add	r2,r2,r2
  801008:	10c5883a 	add	r2,r2,r3
  80100c:	10800304 	addi	r2,r2,12
  801010:	11000015 	stw	r4,0(r2)
  801014:	e0fffe17 	ldw	r3,-8(fp)
  801018:	8405883a 	add	r2,r16,r16
  80101c:	1085883a 	add	r2,r2,r2
  801020:	10c5883a 	add	r2,r2,r3
  801024:	10800304 	addi	r2,r2,12
  801028:	10800017 	ldw	r2,0(r2)
  80102c:	1005003a 	cmpeq	r2,r2,zero
  801030:	103fe91e 	bne	r2,zero,800fd8 <loadSound+0x20>
		printf("load sound id %d error\n", id);
	}

	this->num_sounds++;
  801034:	e0bffe17 	ldw	r2,-8(fp)
  801038:	10800217 	ldw	r2,8(r2)
  80103c:	10c00044 	addi	r3,r2,1
  801040:	e0bffe17 	ldw	r2,-8(fp)
  801044:	10c00215 	stw	r3,8(r2)
}
  801048:	e037883a 	mov	sp,fp
  80104c:	dfc00217 	ldw	ra,8(sp)
  801050:	df000117 	ldw	fp,4(sp)
  801054:	dc000017 	ldw	r16,0(sp)
  801058:	dec00304 	addi	sp,sp,12
  80105c:	f800283a 	ret

00801060 <clearAudioBuffer>:

/**
 * Clears the audio buffer so that there is no sound output
 */
void clearAudioBuffer( struct AudioController* this )
{
  801060:	defffd04 	addi	sp,sp,-12
  801064:	df000215 	stw	fp,8(sp)
  801068:	df000204 	addi	fp,sp,8
  80106c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for( i = 0; i < this->buffer_length; i++ )
  801070:	e03ffe15 	stw	zero,-8(fp)
  801074:	00000a06 	br	8010a0 <clearAudioBuffer+0x40>
	{
		this->buffer[ i ] = 0;
  801078:	e0bfff17 	ldw	r2,-4(fp)
  80107c:	10c00b17 	ldw	r3,44(r2)
  801080:	e0bffe17 	ldw	r2,-8(fp)
  801084:	1085883a 	add	r2,r2,r2
  801088:	1085883a 	add	r2,r2,r2
  80108c:	1885883a 	add	r2,r3,r2
  801090:	10000015 	stw	zero,0(r2)
 * Clears the audio buffer so that there is no sound output
 */
void clearAudioBuffer( struct AudioController* this )
{
	int i;
	for( i = 0; i < this->buffer_length; i++ )
  801094:	e0bffe17 	ldw	r2,-8(fp)
  801098:	10800044 	addi	r2,r2,1
  80109c:	e0bffe15 	stw	r2,-8(fp)
  8010a0:	e0bfff17 	ldw	r2,-4(fp)
  8010a4:	10c00c17 	ldw	r3,48(r2)
  8010a8:	e0bffe17 	ldw	r2,-8(fp)
  8010ac:	10fff216 	blt	r2,r3,801078 <clearAudioBuffer+0x18>
	{
		this->buffer[ i ] = 0;
	}
	this->buf_index_play = 0;
  8010b0:	e0bfff17 	ldw	r2,-4(fp)
  8010b4:	10000115 	stw	zero,4(r2)
}
  8010b8:	e037883a 	mov	sp,fp
  8010bc:	df000017 	ldw	fp,0(sp)
  8010c0:	dec00104 	addi	sp,sp,4
  8010c4:	f800283a 	ret

008010c8 <addToAudioBuffer>:
 *
 * @param buffer - array of values to add to the buffer that will be played
 * @param length - number of values to add to the buffer
 */
void addToAudioBuffer( struct AudioController* this, struct Sound* sound, int startIndex )
{
  8010c8:	defff904 	addi	sp,sp,-28
  8010cc:	dfc00615 	stw	ra,24(sp)
  8010d0:	df000515 	stw	fp,20(sp)
  8010d4:	df000504 	addi	fp,sp,20
  8010d8:	e13ffd15 	stw	r4,-12(fp)
  8010dc:	e17ffe15 	stw	r5,-8(fp)
  8010e0:	e1bfff15 	stw	r6,-4(fp)
	if( !this->clear_required )
  8010e4:	e0bffd17 	ldw	r2,-12(fp)
  8010e8:	10800f17 	ldw	r2,60(r2)
  8010ec:	1004c03a 	cmpne	r2,r2,zero
  8010f0:	1000071e 	bne	r2,zero,801110 <addToAudioBuffer+0x48>
	{
		this->clear_required = true;
  8010f4:	e0fffd17 	ldw	r3,-12(fp)
  8010f8:	00800044 	movi	r2,1
  8010fc:	18800f15 	stw	r2,60(r3)
		this->start_dirty_index = this->buf_index_play;
  801100:	e0bffd17 	ldw	r2,-12(fp)
  801104:	10c00117 	ldw	r3,4(r2)
  801108:	e0bffd17 	ldw	r2,-12(fp)
  80110c:	10c00d15 	stw	r3,52(r2)
	}
	int index_to_write = this->buf_index_play;
  801110:	e0bffd17 	ldw	r2,-12(fp)
  801114:	10800117 	ldw	r2,4(r2)
  801118:	e0bffc15 	stw	r2,-16(fp)
	int sound_index = startIndex;
  80111c:	e0bfff17 	ldw	r2,-4(fp)
  801120:	e0bffb15 	stw	r2,-20(fp)
	do
	{
		while( sound_index < sound->length )
  801124:	00003106 	br	8011ec <addToAudioBuffer+0x124>
		{
			if( index_to_write > this->buffer_length )
  801128:	e0bffd17 	ldw	r2,-12(fp)
  80112c:	10c00c17 	ldw	r3,48(r2)
  801130:	e0bffc17 	ldw	r2,-16(fp)
  801134:	1880080e 	bge	r3,r2,801158 <addToAudioBuffer+0x90>
			{
				update_buffer_index(sound, sound_index );
  801138:	e13ffe17 	ldw	r4,-8(fp)
  80113c:	e17ffb17 	ldw	r5,-20(fp)
  801140:	0810edc0 	call	810edc <update_buffer_index>
				this->end_dirty_index = this->buffer_length;
  801144:	e0bffd17 	ldw	r2,-12(fp)
  801148:	10c00c17 	ldw	r3,48(r2)
  80114c:	e0bffd17 	ldw	r2,-12(fp)
  801150:	10c00e15 	stw	r3,56(r2)
				return;
  801154:	00004006 	br	801258 <addToAudioBuffer+0x190>
			}
			if(this->buffer == NULL || sound->buffer == NULL) return;
  801158:	e0bffd17 	ldw	r2,-12(fp)
  80115c:	10800b17 	ldw	r2,44(r2)
  801160:	1005003a 	cmpeq	r2,r2,zero
  801164:	10003c1e 	bne	r2,zero,801258 <addToAudioBuffer+0x190>
  801168:	e0bffe17 	ldw	r2,-8(fp)
  80116c:	10800417 	ldw	r2,16(r2)
  801170:	1004c03a 	cmpne	r2,r2,zero
  801174:	1000011e 	bne	r2,zero,80117c <addToAudioBuffer+0xb4>
  801178:	00003706 	br	801258 <addToAudioBuffer+0x190>
			this->buffer[ index_to_write ] += sound->buffer[ sound_index ];
  80117c:	e0bffd17 	ldw	r2,-12(fp)
  801180:	10c00b17 	ldw	r3,44(r2)
  801184:	e0bffc17 	ldw	r2,-16(fp)
  801188:	1085883a 	add	r2,r2,r2
  80118c:	1085883a 	add	r2,r2,r2
  801190:	188b883a 	add	r5,r3,r2
  801194:	e0bffd17 	ldw	r2,-12(fp)
  801198:	10c00b17 	ldw	r3,44(r2)
  80119c:	e0bffc17 	ldw	r2,-16(fp)
  8011a0:	1085883a 	add	r2,r2,r2
  8011a4:	1085883a 	add	r2,r2,r2
  8011a8:	1885883a 	add	r2,r3,r2
  8011ac:	10c00017 	ldw	r3,0(r2)
  8011b0:	e0bffe17 	ldw	r2,-8(fp)
  8011b4:	11000417 	ldw	r4,16(r2)
  8011b8:	e0bffb17 	ldw	r2,-20(fp)
  8011bc:	1085883a 	add	r2,r2,r2
  8011c0:	1085883a 	add	r2,r2,r2
  8011c4:	2085883a 	add	r2,r4,r2
  8011c8:	10800017 	ldw	r2,0(r2)
  8011cc:	1885883a 	add	r2,r3,r2
  8011d0:	28800015 	stw	r2,0(r5)

			index_to_write++;
  8011d4:	e0bffc17 	ldw	r2,-16(fp)
  8011d8:	10800044 	addi	r2,r2,1
  8011dc:	e0bffc15 	stw	r2,-16(fp)
			sound_index++;
  8011e0:	e0bffb17 	ldw	r2,-20(fp)
  8011e4:	10800044 	addi	r2,r2,1
  8011e8:	e0bffb15 	stw	r2,-20(fp)
	}
	int index_to_write = this->buf_index_play;
	int sound_index = startIndex;
	do
	{
		while( sound_index < sound->length )
  8011ec:	e0bffb17 	ldw	r2,-20(fp)
  8011f0:	e0fffe17 	ldw	r3,-8(fp)
  8011f4:	18c00217 	ldw	r3,8(r3)
  8011f8:	10ffcb36 	bltu	r2,r3,801128 <addToAudioBuffer+0x60>
			this->buffer[ index_to_write ] += sound->buffer[ sound_index ];

			index_to_write++;
			sound_index++;
		}
		if( sound->loops > 0 )
  8011fc:	e0bffe17 	ldw	r2,-8(fp)
  801200:	10800317 	ldw	r2,12(r2)
  801204:	1005003a 	cmpeq	r2,r2,zero
  801208:	1000061e 	bne	r2,zero,801224 <addToAudioBuffer+0x15c>
		{
			sound->loops--;
  80120c:	e0bffe17 	ldw	r2,-8(fp)
  801210:	10800317 	ldw	r2,12(r2)
  801214:	10ffffc4 	addi	r3,r2,-1
  801218:	e0bffe17 	ldw	r2,-8(fp)
  80121c:	10c00315 	stw	r3,12(r2)
			sound_index = 0;
  801220:	e03ffb15 	stw	zero,-20(fp)
		}
	} while( sound->loops > 0 );
  801224:	e0bffe17 	ldw	r2,-8(fp)
  801228:	10800317 	ldw	r2,12(r2)
  80122c:	1004c03a 	cmpne	r2,r2,zero
  801230:	103fee1e 	bne	r2,zero,8011ec <addToAudioBuffer+0x124>
	stopSound(sound);
  801234:	e13ffe17 	ldw	r4,-8(fp)
  801238:	08112480 	call	811248 <stopSound>
	if( this->end_dirty_index < index_to_write )
  80123c:	e0bffd17 	ldw	r2,-12(fp)
  801240:	10c00e17 	ldw	r3,56(r2)
  801244:	e0bffc17 	ldw	r2,-16(fp)
  801248:	1880030e 	bge	r3,r2,801258 <addToAudioBuffer+0x190>
		this->end_dirty_index = index_to_write;
  80124c:	e0fffd17 	ldw	r3,-12(fp)
  801250:	e0bffc17 	ldw	r2,-16(fp)
  801254:	18800e15 	stw	r2,56(r3)
}
  801258:	e037883a 	mov	sp,fp
  80125c:	dfc00117 	ldw	ra,4(sp)
  801260:	df000017 	ldw	fp,0(sp)
  801264:	dec00204 	addi	sp,sp,8
  801268:	f800283a 	ret

0080126c <clear_dirty_buffer>:

void clear_dirty_buffer(struct AudioController* this)
{
  80126c:	defffd04 	addi	sp,sp,-12
  801270:	df000215 	stw	fp,8(sp)
  801274:	df000204 	addi	fp,sp,8
  801278:	e13fff15 	stw	r4,-4(fp)
	int index_to_clear = this->start_dirty_index;
  80127c:	e0bfff17 	ldw	r2,-4(fp)
  801280:	10800d17 	ldw	r2,52(r2)
  801284:	e0bffe15 	stw	r2,-8(fp)
	if(this->buffer == NULL || this->background_loop->buffer == NULL) return;
  801288:	e0bfff17 	ldw	r2,-4(fp)
  80128c:	10800b17 	ldw	r2,44(r2)
  801290:	1005003a 	cmpeq	r2,r2,zero
  801294:	1000221e 	bne	r2,zero,801320 <clear_dirty_buffer+0xb4>
  801298:	e0bfff17 	ldw	r2,-4(fp)
  80129c:	10800a17 	ldw	r2,40(r2)
  8012a0:	10800417 	ldw	r2,16(r2)
  8012a4:	1004c03a 	cmpne	r2,r2,zero
  8012a8:	1000131e 	bne	r2,zero,8012f8 <clear_dirty_buffer+0x8c>
  8012ac:	00001c06 	br	801320 <clear_dirty_buffer+0xb4>
	while( index_to_clear < this->end_dirty_index )
	{
		this->buffer[ index_to_clear ] = this->background_loop->buffer[ index_to_clear ];
  8012b0:	e0bfff17 	ldw	r2,-4(fp)
  8012b4:	10c00b17 	ldw	r3,44(r2)
  8012b8:	e0bffe17 	ldw	r2,-8(fp)
  8012bc:	1085883a 	add	r2,r2,r2
  8012c0:	1085883a 	add	r2,r2,r2
  8012c4:	1889883a 	add	r4,r3,r2
  8012c8:	e0bfff17 	ldw	r2,-4(fp)
  8012cc:	10800a17 	ldw	r2,40(r2)
  8012d0:	10c00417 	ldw	r3,16(r2)
  8012d4:	e0bffe17 	ldw	r2,-8(fp)
  8012d8:	1085883a 	add	r2,r2,r2
  8012dc:	1085883a 	add	r2,r2,r2
  8012e0:	1885883a 	add	r2,r3,r2
  8012e4:	10800017 	ldw	r2,0(r2)
  8012e8:	20800015 	stw	r2,0(r4)
		index_to_clear++;
  8012ec:	e0bffe17 	ldw	r2,-8(fp)
  8012f0:	10800044 	addi	r2,r2,1
  8012f4:	e0bffe15 	stw	r2,-8(fp)

void clear_dirty_buffer(struct AudioController* this)
{
	int index_to_clear = this->start_dirty_index;
	if(this->buffer == NULL || this->background_loop->buffer == NULL) return;
	while( index_to_clear < this->end_dirty_index )
  8012f8:	e0bfff17 	ldw	r2,-4(fp)
  8012fc:	10c00e17 	ldw	r3,56(r2)
  801300:	e0bffe17 	ldw	r2,-8(fp)
  801304:	10ffea16 	blt	r2,r3,8012b0 <clear_dirty_buffer+0x44>
	{
		this->buffer[ index_to_clear ] = this->background_loop->buffer[ index_to_clear ];
		index_to_clear++;
	}
	this->clear_required = false;
  801308:	e0bfff17 	ldw	r2,-4(fp)
  80130c:	10000f15 	stw	zero,60(r2)
	this->start_dirty_index = 0;
  801310:	e0bfff17 	ldw	r2,-4(fp)
  801314:	10000d15 	stw	zero,52(r2)
	this->end_dirty_index = 0;
  801318:	e0bfff17 	ldw	r2,-4(fp)
  80131c:	10000e15 	stw	zero,56(r2)
}
  801320:	e037883a 	mov	sp,fp
  801324:	df000017 	ldw	fp,0(sp)
  801328:	dec00104 	addi	sp,sp,4
  80132c:	f800283a 	ret

00801330 <unloadSoundById>:

/**
 * Frees up memory used by sound
 */
void unloadSoundById(struct AudioController* this, int id)
{
  801330:	defff904 	addi	sp,sp,-28
  801334:	dfc00615 	stw	ra,24(sp)
  801338:	df000515 	stw	fp,20(sp)
  80133c:	df000504 	addi	fp,sp,20
  801340:	e13ffe15 	stw	r4,-8(fp)
  801344:	e17fff15 	stw	r5,-4(fp)
	int i, found = 0;
  801348:	e03ffc15 	stw	zero,-16(fp)
	int size = this->num_sounds;
  80134c:	e0bffe17 	ldw	r2,-8(fp)
  801350:	10800217 	ldw	r2,8(r2)
  801354:	e0bffb15 	stw	r2,-20(fp)
	for( i = 0; i < size; i++ )
  801358:	e03ffd15 	stw	zero,-12(fp)
  80135c:	00002f06 	br	80141c <unloadSoundById+0xec>
	{
		if(found == 1) {
  801360:	e0bffc17 	ldw	r2,-16(fp)
  801364:	10800058 	cmpnei	r2,r2,1
  801368:	1000101e 	bne	r2,zero,8013ac <unloadSoundById+0x7c>
			this->sounds[i-1] = this->sounds[i];
  80136c:	e0bffd17 	ldw	r2,-12(fp)
  801370:	113fffc4 	addi	r4,r2,-1
  801374:	e0bffd17 	ldw	r2,-12(fp)
  801378:	e0fffe17 	ldw	r3,-8(fp)
  80137c:	1085883a 	add	r2,r2,r2
  801380:	1085883a 	add	r2,r2,r2
  801384:	10c5883a 	add	r2,r2,r3
  801388:	10800304 	addi	r2,r2,12
  80138c:	11400017 	ldw	r5,0(r2)
  801390:	e0fffe17 	ldw	r3,-8(fp)
  801394:	2105883a 	add	r2,r4,r4
  801398:	1085883a 	add	r2,r2,r2
  80139c:	10c5883a 	add	r2,r2,r3
  8013a0:	10800304 	addi	r2,r2,12
  8013a4:	11400015 	stw	r5,0(r2)
  8013a8:	00001906 	br	801410 <unloadSoundById+0xe0>
		} else if( this->sounds[ i ]->id == id )
  8013ac:	e0bffd17 	ldw	r2,-12(fp)
  8013b0:	e0fffe17 	ldw	r3,-8(fp)
  8013b4:	1085883a 	add	r2,r2,r2
  8013b8:	1085883a 	add	r2,r2,r2
  8013bc:	10c5883a 	add	r2,r2,r3
  8013c0:	10800304 	addi	r2,r2,12
  8013c4:	10800017 	ldw	r2,0(r2)
  8013c8:	10c00017 	ldw	r3,0(r2)
  8013cc:	e0bfff17 	ldw	r2,-4(fp)
  8013d0:	18800f1e 	bne	r3,r2,801410 <unloadSoundById+0xe0>
		{
			found = 1;
  8013d4:	00800044 	movi	r2,1
  8013d8:	e0bffc15 	stw	r2,-16(fp)
			unloadSound(this->sounds[ i ]);
  8013dc:	e0bffd17 	ldw	r2,-12(fp)
  8013e0:	e0fffe17 	ldw	r3,-8(fp)
  8013e4:	1085883a 	add	r2,r2,r2
  8013e8:	1085883a 	add	r2,r2,r2
  8013ec:	10c5883a 	add	r2,r2,r3
  8013f0:	10800304 	addi	r2,r2,12
  8013f4:	11000017 	ldw	r4,0(r2)
  8013f8:	08112780 	call	811278 <unloadSound>
			this->num_sounds--;
  8013fc:	e0bffe17 	ldw	r2,-8(fp)
  801400:	10800217 	ldw	r2,8(r2)
  801404:	10ffffc4 	addi	r3,r2,-1
  801408:	e0bffe17 	ldw	r2,-8(fp)
  80140c:	10c00215 	stw	r3,8(r2)
 */
void unloadSoundById(struct AudioController* this, int id)
{
	int i, found = 0;
	int size = this->num_sounds;
	for( i = 0; i < size; i++ )
  801410:	e0bffd17 	ldw	r2,-12(fp)
  801414:	10800044 	addi	r2,r2,1
  801418:	e0bffd15 	stw	r2,-12(fp)
  80141c:	e0fffd17 	ldw	r3,-12(fp)
  801420:	e0bffb17 	ldw	r2,-20(fp)
  801424:	18bfce16 	blt	r3,r2,801360 <unloadSoundById+0x30>
			found = 1;
			unloadSound(this->sounds[ i ]);
			this->num_sounds--;
		}
	}
}
  801428:	e037883a 	mov	sp,fp
  80142c:	dfc00117 	ldw	ra,4(sp)
  801430:	df000017 	ldw	fp,0(sp)
  801434:	dec00204 	addi	sp,sp,8
  801438:	f800283a 	ret

0080143c <play_background_loop>:

void play_background_loop(struct AudioController* this, int id )
{
  80143c:	defffb04 	addi	sp,sp,-20
  801440:	dfc00415 	stw	ra,16(sp)
  801444:	df000315 	stw	fp,12(sp)
  801448:	df000304 	addi	fp,sp,12
  80144c:	e13ffe15 	stw	r4,-8(fp)
  801450:	e17fff15 	stw	r5,-4(fp)
	int i;
	this->background_loop = getSoundById( this, id );
  801454:	e13ffe17 	ldw	r4,-8(fp)
  801458:	e17fff17 	ldw	r5,-4(fp)
  80145c:	080167c0 	call	80167c <getSoundById>
  801460:	1007883a 	mov	r3,r2
  801464:	e0bffe17 	ldw	r2,-8(fp)
  801468:	10c00a15 	stw	r3,40(r2)
	this->buffer_length = this->background_loop->length;
  80146c:	e0bffe17 	ldw	r2,-8(fp)
  801470:	10800a17 	ldw	r2,40(r2)
  801474:	10800217 	ldw	r2,8(r2)
  801478:	1007883a 	mov	r3,r2
  80147c:	e0bffe17 	ldw	r2,-8(fp)
  801480:	10c00c15 	stw	r3,48(r2)
	this->buffer = (int *)malloc(sizeof(int) * this->buffer_length);
  801484:	e0bffe17 	ldw	r2,-8(fp)
  801488:	10800c17 	ldw	r2,48(r2)
  80148c:	1085883a 	add	r2,r2,r2
  801490:	1085883a 	add	r2,r2,r2
  801494:	1009883a 	mov	r4,r2
  801498:	0814f580 	call	814f58 <malloc>
  80149c:	1007883a 	mov	r3,r2
  8014a0:	e0bffe17 	ldw	r2,-8(fp)
  8014a4:	10c00b15 	stw	r3,44(r2)
	for( i = 0; i < this->buffer_length; i++)
  8014a8:	e03ffd15 	stw	zero,-12(fp)
  8014ac:	00001206 	br	8014f8 <play_background_loop+0xbc>
	{
		this->buffer[ i ] = this->background_loop->buffer[ i ];
  8014b0:	e0bffe17 	ldw	r2,-8(fp)
  8014b4:	10c00b17 	ldw	r3,44(r2)
  8014b8:	e0bffd17 	ldw	r2,-12(fp)
  8014bc:	1085883a 	add	r2,r2,r2
  8014c0:	1085883a 	add	r2,r2,r2
  8014c4:	1889883a 	add	r4,r3,r2
  8014c8:	e0bffe17 	ldw	r2,-8(fp)
  8014cc:	10800a17 	ldw	r2,40(r2)
  8014d0:	10c00417 	ldw	r3,16(r2)
  8014d4:	e0bffd17 	ldw	r2,-12(fp)
  8014d8:	1085883a 	add	r2,r2,r2
  8014dc:	1085883a 	add	r2,r2,r2
  8014e0:	1885883a 	add	r2,r3,r2
  8014e4:	10800017 	ldw	r2,0(r2)
  8014e8:	20800015 	stw	r2,0(r4)
{
	int i;
	this->background_loop = getSoundById( this, id );
	this->buffer_length = this->background_loop->length;
	this->buffer = (int *)malloc(sizeof(int) * this->buffer_length);
	for( i = 0; i < this->buffer_length; i++)
  8014ec:	e0bffd17 	ldw	r2,-12(fp)
  8014f0:	10800044 	addi	r2,r2,1
  8014f4:	e0bffd15 	stw	r2,-12(fp)
  8014f8:	e0bffe17 	ldw	r2,-8(fp)
  8014fc:	10c00c17 	ldw	r3,48(r2)
  801500:	e0bffd17 	ldw	r2,-12(fp)
  801504:	10ffea16 	blt	r2,r3,8014b0 <play_background_loop+0x74>
	{
		this->buffer[ i ] = this->background_loop->buffer[ i ];
	}
	this->clear_required = false;
  801508:	e0bffe17 	ldw	r2,-8(fp)
  80150c:	10000f15 	stw	zero,60(r2)
}
  801510:	e037883a 	mov	sp,fp
  801514:	dfc00117 	ldw	ra,4(sp)
  801518:	df000017 	ldw	fp,0(sp)
  80151c:	dec00204 	addi	sp,sp,8
  801520:	f800283a 	ret

00801524 <stop_background_loop>:

void stop_background_loop(struct AudioController* this )
{
  801524:	defffd04 	addi	sp,sp,-12
  801528:	dfc00215 	stw	ra,8(sp)
  80152c:	df000115 	stw	fp,4(sp)
  801530:	df000104 	addi	fp,sp,4
  801534:	e13fff15 	stw	r4,-4(fp)
	if( this->buffer != NULL)
  801538:	e0bfff17 	ldw	r2,-4(fp)
  80153c:	10800b17 	ldw	r2,44(r2)
  801540:	1005003a 	cmpeq	r2,r2,zero
  801544:	1000071e 	bne	r2,zero,801564 <stop_background_loop+0x40>
	{
		free( this->buffer );
  801548:	e0bfff17 	ldw	r2,-4(fp)
  80154c:	11000b17 	ldw	r4,44(r2)
  801550:	0814f440 	call	814f44 <free>
		this->buffer = NULL;
  801554:	e0bfff17 	ldw	r2,-4(fp)
  801558:	10000b15 	stw	zero,44(r2)
		this->buffer_length = 0;
  80155c:	e0bfff17 	ldw	r2,-4(fp)
  801560:	10000c15 	stw	zero,48(r2)
	}
}
  801564:	e037883a 	mov	sp,fp
  801568:	dfc00117 	ldw	ra,4(sp)
  80156c:	df000017 	ldw	fp,0(sp)
  801570:	dec00204 	addi	sp,sp,8
  801574:	f800283a 	ret

00801578 <playSound>:
 * Starts playing a sound
 * @param sound - sound struct to be played
 * @param loops - number of times this sound should be looped
 */
void playSound(struct AudioController* this, struct Sound* sound, int loops)
{
  801578:	defffb04 	addi	sp,sp,-20
  80157c:	dfc00415 	stw	ra,16(sp)
  801580:	df000315 	stw	fp,12(sp)
  801584:	df000304 	addi	fp,sp,12
  801588:	e13ffd15 	stw	r4,-12(fp)
  80158c:	e17ffe15 	stw	r5,-8(fp)
  801590:	e1bfff15 	stw	r6,-4(fp)
	sound->loops = loops;
  801594:	e0ffff17 	ldw	r3,-4(fp)
  801598:	e0bffe17 	ldw	r2,-8(fp)
  80159c:	10c00315 	stw	r3,12(r2)
	sound->buffer_index = 0;
  8015a0:	e0bffe17 	ldw	r2,-8(fp)
  8015a4:	10000115 	stw	zero,4(r2)
	sound->playing = true;
  8015a8:	e0fffe17 	ldw	r3,-8(fp)
  8015ac:	00800044 	movi	r2,1
  8015b0:	18800505 	stb	r2,20(r3)
	addToAudioBuffer( this, sound, 0 );
  8015b4:	e13ffd17 	ldw	r4,-12(fp)
  8015b8:	e17ffe17 	ldw	r5,-8(fp)
  8015bc:	000d883a 	mov	r6,zero
  8015c0:	08010c80 	call	8010c8 <addToAudioBuffer>
}
  8015c4:	e037883a 	mov	sp,fp
  8015c8:	dfc00117 	ldw	ra,4(sp)
  8015cc:	df000017 	ldw	fp,0(sp)
  8015d0:	dec00204 	addi	sp,sp,8
  8015d4:	f800283a 	ret

008015d8 <playSoundById>:
 *
 * @param id - id of the sound
 * @param loops - number of times this sound should be looped
 */
void playSoundById( struct AudioController* this, int id, int loops )
{
  8015d8:	defffa04 	addi	sp,sp,-24
  8015dc:	dfc00515 	stw	ra,20(sp)
  8015e0:	df000415 	stw	fp,16(sp)
  8015e4:	df000404 	addi	fp,sp,16
  8015e8:	e13ffd15 	stw	r4,-12(fp)
  8015ec:	e17ffe15 	stw	r5,-8(fp)
  8015f0:	e1bfff15 	stw	r6,-4(fp)
	int i;
	for( i = 0; i < this->num_sounds; i++ )
  8015f4:	e03ffc15 	stw	zero,-16(fp)
  8015f8:	00001706 	br	801658 <playSoundById+0x80>
	{
		if( this->sounds[ i ]->id == id )
  8015fc:	e0bffc17 	ldw	r2,-16(fp)
  801600:	e0fffd17 	ldw	r3,-12(fp)
  801604:	1085883a 	add	r2,r2,r2
  801608:	1085883a 	add	r2,r2,r2
  80160c:	10c5883a 	add	r2,r2,r3
  801610:	10800304 	addi	r2,r2,12
  801614:	10800017 	ldw	r2,0(r2)
  801618:	10c00017 	ldw	r3,0(r2)
  80161c:	e0bffe17 	ldw	r2,-8(fp)
  801620:	18800a1e 	bne	r3,r2,80164c <playSoundById+0x74>
		{
			playSound( this, this->sounds[ i ], loops );
  801624:	e0bffc17 	ldw	r2,-16(fp)
  801628:	e0fffd17 	ldw	r3,-12(fp)
  80162c:	1085883a 	add	r2,r2,r2
  801630:	1085883a 	add	r2,r2,r2
  801634:	10c5883a 	add	r2,r2,r3
  801638:	10800304 	addi	r2,r2,12
  80163c:	11400017 	ldw	r5,0(r2)
  801640:	e13ffd17 	ldw	r4,-12(fp)
  801644:	e1bfff17 	ldw	r6,-4(fp)
  801648:	08015780 	call	801578 <playSound>
 * @param loops - number of times this sound should be looped
 */
void playSoundById( struct AudioController* this, int id, int loops )
{
	int i;
	for( i = 0; i < this->num_sounds; i++ )
  80164c:	e0bffc17 	ldw	r2,-16(fp)
  801650:	10800044 	addi	r2,r2,1
  801654:	e0bffc15 	stw	r2,-16(fp)
  801658:	e0bffd17 	ldw	r2,-12(fp)
  80165c:	10c00217 	ldw	r3,8(r2)
  801660:	e0bffc17 	ldw	r2,-16(fp)
  801664:	10ffe516 	blt	r2,r3,8015fc <playSoundById+0x24>
		{
			playSound( this, this->sounds[ i ], loops );
		}
	}

}
  801668:	e037883a 	mov	sp,fp
  80166c:	dfc00117 	ldw	ra,4(sp)
  801670:	df000017 	ldw	fp,0(sp)
  801674:	dec00204 	addi	sp,sp,8
  801678:	f800283a 	ret

0080167c <getSoundById>:

struct Sound* getSoundById(struct AudioController* this, int id)
{
  80167c:	defffa04 	addi	sp,sp,-24
  801680:	df000515 	stw	fp,20(sp)
  801684:	df000504 	addi	fp,sp,20
  801688:	e13ffc15 	stw	r4,-16(fp)
  80168c:	e17ffd15 	stw	r5,-12(fp)
	int i;
	for( i = 0; i < this->num_sounds; i++ )
  801690:	e03ffb15 	stw	zero,-20(fp)
  801694:	00002106 	br	80171c <getSoundById+0xa0>
	{
		if(this->sounds[i] == NULL) return NULL;
  801698:	e0bffb17 	ldw	r2,-20(fp)
  80169c:	e0fffc17 	ldw	r3,-16(fp)
  8016a0:	1085883a 	add	r2,r2,r2
  8016a4:	1085883a 	add	r2,r2,r2
  8016a8:	10c5883a 	add	r2,r2,r3
  8016ac:	10800304 	addi	r2,r2,12
  8016b0:	10800017 	ldw	r2,0(r2)
  8016b4:	1004c03a 	cmpne	r2,r2,zero
  8016b8:	1000021e 	bne	r2,zero,8016c4 <getSoundById+0x48>
  8016bc:	e03ffe15 	stw	zero,-8(fp)
  8016c0:	00001b06 	br	801730 <getSoundById+0xb4>
		if( this->sounds[ i ]->id == id )
  8016c4:	e0bffb17 	ldw	r2,-20(fp)
  8016c8:	e0fffc17 	ldw	r3,-16(fp)
  8016cc:	1085883a 	add	r2,r2,r2
  8016d0:	1085883a 	add	r2,r2,r2
  8016d4:	10c5883a 	add	r2,r2,r3
  8016d8:	10800304 	addi	r2,r2,12
  8016dc:	10800017 	ldw	r2,0(r2)
  8016e0:	10c00017 	ldw	r3,0(r2)
  8016e4:	e0bffd17 	ldw	r2,-12(fp)
  8016e8:	1880091e 	bne	r3,r2,801710 <getSoundById+0x94>
		{
			return this->sounds[ i ];
  8016ec:	e0bffb17 	ldw	r2,-20(fp)
  8016f0:	e0fffc17 	ldw	r3,-16(fp)
  8016f4:	1085883a 	add	r2,r2,r2
  8016f8:	1085883a 	add	r2,r2,r2
  8016fc:	10c5883a 	add	r2,r2,r3
  801700:	10800304 	addi	r2,r2,12
  801704:	10800017 	ldw	r2,0(r2)
  801708:	e0bffe15 	stw	r2,-8(fp)
  80170c:	00000806 	br	801730 <getSoundById+0xb4>
}

struct Sound* getSoundById(struct AudioController* this, int id)
{
	int i;
	for( i = 0; i < this->num_sounds; i++ )
  801710:	e0bffb17 	ldw	r2,-20(fp)
  801714:	10800044 	addi	r2,r2,1
  801718:	e0bffb15 	stw	r2,-20(fp)
  80171c:	e0bffc17 	ldw	r2,-16(fp)
  801720:	10c00217 	ldw	r3,8(r2)
  801724:	e0bffb17 	ldw	r2,-20(fp)
  801728:	10ffdb16 	blt	r2,r3,801698 <getSoundById+0x1c>
		if( this->sounds[ i ]->id == id )
		{
			return this->sounds[ i ];
		}
	}
}
  80172c:	00000206 	br	801738 <getSoundById+0xbc>
  801730:	e0bffe17 	ldw	r2,-8(fp)
  801734:	e0bfff15 	stw	r2,-4(fp)
  801738:	e0bfff17 	ldw	r2,-4(fp)
  80173c:	e037883a 	mov	sp,fp
  801740:	df000017 	ldw	fp,0(sp)
  801744:	dec00104 	addi	sp,sp,4
  801748:	f800283a 	ret

0080174c <isBitSet>:
 *      Author: Adam
 */

#import "BitOperations.h"

bool isBitSet( char num, int bit ) {
  80174c:	defffd04 	addi	sp,sp,-12
  801750:	df000215 	stw	fp,8(sp)
  801754:	df000204 	addi	fp,sp,8
  801758:	e17fff15 	stw	r5,-4(fp)
  80175c:	e13ffe05 	stb	r4,-8(fp)
	return num & 1 << bit;
  801760:	e0fffe07 	ldb	r3,-8(fp)
  801764:	e0bfff17 	ldw	r2,-4(fp)
  801768:	1885d83a 	sra	r2,r3,r2
  80176c:	1080004c 	andi	r2,r2,1
  801770:	10803fcc 	andi	r2,r2,255
}
  801774:	e037883a 	mov	sp,fp
  801778:	df000017 	ldw	fp,0(sp)
  80177c:	dec00104 	addi	sp,sp,4
  801780:	f800283a 	ret

00801784 <initBox3D>:
 *
 *  Created on: 2013-02-07
 *      Author: Danny
 */
#include "Box3D.h"
struct Box3D* initBox3D(int x, int y, int z, int size, int color) {
  801784:	defff304 	addi	sp,sp,-52
  801788:	dfc00c15 	stw	ra,48(sp)
  80178c:	df000b15 	stw	fp,44(sp)
  801790:	dc400a15 	stw	r17,40(sp)
  801794:	dc000915 	stw	r16,36(sp)
  801798:	df000904 	addi	fp,sp,36
  80179c:	e13ffc15 	stw	r4,-16(fp)
  8017a0:	e17ffd15 	stw	r5,-12(fp)
  8017a4:	e1bffe15 	stw	r6,-8(fp)
  8017a8:	e1ffff15 	stw	r7,-4(fp)
	struct Box3D* box = (struct Box3D*)malloc(sizeof(struct Box3D));
  8017ac:	01002004 	movi	r4,128
  8017b0:	0814f580 	call	814f58 <malloc>
  8017b4:	e0bffb15 	stw	r2,-20(fp)
	box->x = x; box->y = y; box->z = z; box->scale = size;
  8017b8:	e13ffc17 	ldw	r4,-16(fp)
  8017bc:	08135a40 	call	8135a4 <__floatsisf>
  8017c0:	1007883a 	mov	r3,r2
  8017c4:	e0bffb17 	ldw	r2,-20(fp)
  8017c8:	10c00015 	stw	r3,0(r2)
  8017cc:	e13ffd17 	ldw	r4,-12(fp)
  8017d0:	08135a40 	call	8135a4 <__floatsisf>
  8017d4:	1007883a 	mov	r3,r2
  8017d8:	e0bffb17 	ldw	r2,-20(fp)
  8017dc:	10c00115 	stw	r3,4(r2)
  8017e0:	e13ffe17 	ldw	r4,-8(fp)
  8017e4:	08135a40 	call	8135a4 <__floatsisf>
  8017e8:	1007883a 	mov	r3,r2
  8017ec:	e0bffb17 	ldw	r2,-20(fp)
  8017f0:	10c00215 	stw	r3,8(r2)
  8017f4:	e13fff17 	ldw	r4,-4(fp)
  8017f8:	08135a40 	call	8135a4 <__floatsisf>
  8017fc:	1007883a 	mov	r3,r2
  801800:	e0bffb17 	ldw	r2,-20(fp)
  801804:	10c00315 	stw	r3,12(r2)
	int offset = size/2;
  801808:	e0ffff17 	ldw	r3,-4(fp)
  80180c:	1804d7fa 	srli	r2,r3,31
  801810:	10c5883a 	add	r2,r2,r3
  801814:	1005d07a 	srai	r2,r2,1
  801818:	e0bffa15 	stw	r2,-24(fp)
	float cord_x = x - cameraX;
  80181c:	008020f4 	movhi	r2,131
  801820:	109c8404 	addi	r2,r2,29200
  801824:	10c00017 	ldw	r3,0(r2)
  801828:	e0bffc17 	ldw	r2,-16(fp)
  80182c:	10c9c83a 	sub	r4,r2,r3
  801830:	08135a40 	call	8135a4 <__floatsisf>
  801834:	e0bff915 	stw	r2,-28(fp)
	float cord_y = cameraY - y;
  801838:	008020f4 	movhi	r2,131
  80183c:	109c8d04 	addi	r2,r2,29236
  801840:	10c00017 	ldw	r3,0(r2)
  801844:	e0bffd17 	ldw	r2,-12(fp)
  801848:	1889c83a 	sub	r4,r3,r2
  80184c:	08135a40 	call	8135a4 <__floatsisf>
  801850:	e0bff815 	stw	r2,-32(fp)
	box->nodes[0] = initNode2D(cord_x - offset, cord_y + offset, z+offset, 0, offset);
  801854:	e13ffa17 	ldw	r4,-24(fp)
  801858:	08135a40 	call	8135a4 <__floatsisf>
  80185c:	e13ff917 	ldw	r4,-28(fp)
  801860:	100b883a 	mov	r5,r2
  801864:	0812f9c0 	call	812f9c <__subsf3>
  801868:	1023883a 	mov	r17,r2
  80186c:	e13ffa17 	ldw	r4,-24(fp)
  801870:	08135a40 	call	8135a4 <__floatsisf>
  801874:	1009883a 	mov	r4,r2
  801878:	e17ff817 	ldw	r5,-32(fp)
  80187c:	081300c0 	call	81300c <__addsf3>
  801880:	1021883a 	mov	r16,r2
  801884:	e0fffe17 	ldw	r3,-8(fp)
  801888:	e0bffa17 	ldw	r2,-24(fp)
  80188c:	1889883a 	add	r4,r3,r2
  801890:	08135a40 	call	8135a4 <__floatsisf>
  801894:	1007883a 	mov	r3,r2
  801898:	e0bffa17 	ldw	r2,-24(fp)
  80189c:	d8800015 	stw	r2,0(sp)
  8018a0:	8809883a 	mov	r4,r17
  8018a4:	800b883a 	mov	r5,r16
  8018a8:	180d883a 	mov	r6,r3
  8018ac:	000f883a 	mov	r7,zero
  8018b0:	080f7e80 	call	80f7e8 <initNode2D>
  8018b4:	1007883a 	mov	r3,r2
  8018b8:	e0bffb17 	ldw	r2,-20(fp)
  8018bc:	10c00a15 	stw	r3,40(r2)
	box->nodes[1] = initNode2D(cord_x - offset, cord_y - offset, z+offset, 1, offset);
  8018c0:	e13ffa17 	ldw	r4,-24(fp)
  8018c4:	08135a40 	call	8135a4 <__floatsisf>
  8018c8:	e13ff917 	ldw	r4,-28(fp)
  8018cc:	100b883a 	mov	r5,r2
  8018d0:	0812f9c0 	call	812f9c <__subsf3>
  8018d4:	1023883a 	mov	r17,r2
  8018d8:	e13ffa17 	ldw	r4,-24(fp)
  8018dc:	08135a40 	call	8135a4 <__floatsisf>
  8018e0:	e13ff817 	ldw	r4,-32(fp)
  8018e4:	100b883a 	mov	r5,r2
  8018e8:	0812f9c0 	call	812f9c <__subsf3>
  8018ec:	1021883a 	mov	r16,r2
  8018f0:	e0fffe17 	ldw	r3,-8(fp)
  8018f4:	e0bffa17 	ldw	r2,-24(fp)
  8018f8:	1889883a 	add	r4,r3,r2
  8018fc:	08135a40 	call	8135a4 <__floatsisf>
  801900:	1007883a 	mov	r3,r2
  801904:	e0bffa17 	ldw	r2,-24(fp)
  801908:	d8800015 	stw	r2,0(sp)
  80190c:	8809883a 	mov	r4,r17
  801910:	800b883a 	mov	r5,r16
  801914:	180d883a 	mov	r6,r3
  801918:	01c00044 	movi	r7,1
  80191c:	080f7e80 	call	80f7e8 <initNode2D>
  801920:	1007883a 	mov	r3,r2
  801924:	e0bffb17 	ldw	r2,-20(fp)
  801928:	10c00b15 	stw	r3,44(r2)
	box->nodes[2] = initNode2D(cord_x + offset, cord_y + offset, z+offset, 2, offset);
  80192c:	e13ffa17 	ldw	r4,-24(fp)
  801930:	08135a40 	call	8135a4 <__floatsisf>
  801934:	1009883a 	mov	r4,r2
  801938:	e17ff917 	ldw	r5,-28(fp)
  80193c:	081300c0 	call	81300c <__addsf3>
  801940:	1023883a 	mov	r17,r2
  801944:	e13ffa17 	ldw	r4,-24(fp)
  801948:	08135a40 	call	8135a4 <__floatsisf>
  80194c:	1009883a 	mov	r4,r2
  801950:	e17ff817 	ldw	r5,-32(fp)
  801954:	081300c0 	call	81300c <__addsf3>
  801958:	1021883a 	mov	r16,r2
  80195c:	e0fffe17 	ldw	r3,-8(fp)
  801960:	e0bffa17 	ldw	r2,-24(fp)
  801964:	1889883a 	add	r4,r3,r2
  801968:	08135a40 	call	8135a4 <__floatsisf>
  80196c:	1007883a 	mov	r3,r2
  801970:	e0bffa17 	ldw	r2,-24(fp)
  801974:	d8800015 	stw	r2,0(sp)
  801978:	8809883a 	mov	r4,r17
  80197c:	800b883a 	mov	r5,r16
  801980:	180d883a 	mov	r6,r3
  801984:	01c00084 	movi	r7,2
  801988:	080f7e80 	call	80f7e8 <initNode2D>
  80198c:	1007883a 	mov	r3,r2
  801990:	e0bffb17 	ldw	r2,-20(fp)
  801994:	10c00c15 	stw	r3,48(r2)
	box->nodes[3] = initNode2D(cord_x + offset, cord_y - offset, z+offset, 3, offset);
  801998:	e13ffa17 	ldw	r4,-24(fp)
  80199c:	08135a40 	call	8135a4 <__floatsisf>
  8019a0:	1009883a 	mov	r4,r2
  8019a4:	e17ff917 	ldw	r5,-28(fp)
  8019a8:	081300c0 	call	81300c <__addsf3>
  8019ac:	1023883a 	mov	r17,r2
  8019b0:	e13ffa17 	ldw	r4,-24(fp)
  8019b4:	08135a40 	call	8135a4 <__floatsisf>
  8019b8:	e13ff817 	ldw	r4,-32(fp)
  8019bc:	100b883a 	mov	r5,r2
  8019c0:	0812f9c0 	call	812f9c <__subsf3>
  8019c4:	1021883a 	mov	r16,r2
  8019c8:	e0fffe17 	ldw	r3,-8(fp)
  8019cc:	e0bffa17 	ldw	r2,-24(fp)
  8019d0:	1889883a 	add	r4,r3,r2
  8019d4:	08135a40 	call	8135a4 <__floatsisf>
  8019d8:	1007883a 	mov	r3,r2
  8019dc:	e0bffa17 	ldw	r2,-24(fp)
  8019e0:	d8800015 	stw	r2,0(sp)
  8019e4:	8809883a 	mov	r4,r17
  8019e8:	800b883a 	mov	r5,r16
  8019ec:	180d883a 	mov	r6,r3
  8019f0:	01c000c4 	movi	r7,3
  8019f4:	080f7e80 	call	80f7e8 <initNode2D>
  8019f8:	1007883a 	mov	r3,r2
  8019fc:	e0bffb17 	ldw	r2,-20(fp)
  801a00:	10c00d15 	stw	r3,52(r2)
	box->nodes[4] = initNode2D(cord_x - offset, cord_y + offset, z-offset, 4, offset);
  801a04:	e13ffa17 	ldw	r4,-24(fp)
  801a08:	08135a40 	call	8135a4 <__floatsisf>
  801a0c:	e13ff917 	ldw	r4,-28(fp)
  801a10:	100b883a 	mov	r5,r2
  801a14:	0812f9c0 	call	812f9c <__subsf3>
  801a18:	1023883a 	mov	r17,r2
  801a1c:	e13ffa17 	ldw	r4,-24(fp)
  801a20:	08135a40 	call	8135a4 <__floatsisf>
  801a24:	1009883a 	mov	r4,r2
  801a28:	e17ff817 	ldw	r5,-32(fp)
  801a2c:	081300c0 	call	81300c <__addsf3>
  801a30:	1021883a 	mov	r16,r2
  801a34:	e0fffe17 	ldw	r3,-8(fp)
  801a38:	e0bffa17 	ldw	r2,-24(fp)
  801a3c:	1889c83a 	sub	r4,r3,r2
  801a40:	08135a40 	call	8135a4 <__floatsisf>
  801a44:	1007883a 	mov	r3,r2
  801a48:	e0bffa17 	ldw	r2,-24(fp)
  801a4c:	d8800015 	stw	r2,0(sp)
  801a50:	8809883a 	mov	r4,r17
  801a54:	800b883a 	mov	r5,r16
  801a58:	180d883a 	mov	r6,r3
  801a5c:	01c00104 	movi	r7,4
  801a60:	080f7e80 	call	80f7e8 <initNode2D>
  801a64:	1007883a 	mov	r3,r2
  801a68:	e0bffb17 	ldw	r2,-20(fp)
  801a6c:	10c00e15 	stw	r3,56(r2)
	box->nodes[5] = initNode2D(cord_x - offset, cord_y - offset, z-offset, 5, offset);
  801a70:	e13ffa17 	ldw	r4,-24(fp)
  801a74:	08135a40 	call	8135a4 <__floatsisf>
  801a78:	e13ff917 	ldw	r4,-28(fp)
  801a7c:	100b883a 	mov	r5,r2
  801a80:	0812f9c0 	call	812f9c <__subsf3>
  801a84:	1023883a 	mov	r17,r2
  801a88:	e13ffa17 	ldw	r4,-24(fp)
  801a8c:	08135a40 	call	8135a4 <__floatsisf>
  801a90:	e13ff817 	ldw	r4,-32(fp)
  801a94:	100b883a 	mov	r5,r2
  801a98:	0812f9c0 	call	812f9c <__subsf3>
  801a9c:	1021883a 	mov	r16,r2
  801aa0:	e0fffe17 	ldw	r3,-8(fp)
  801aa4:	e0bffa17 	ldw	r2,-24(fp)
  801aa8:	1889c83a 	sub	r4,r3,r2
  801aac:	08135a40 	call	8135a4 <__floatsisf>
  801ab0:	1007883a 	mov	r3,r2
  801ab4:	e0bffa17 	ldw	r2,-24(fp)
  801ab8:	d8800015 	stw	r2,0(sp)
  801abc:	8809883a 	mov	r4,r17
  801ac0:	800b883a 	mov	r5,r16
  801ac4:	180d883a 	mov	r6,r3
  801ac8:	01c00144 	movi	r7,5
  801acc:	080f7e80 	call	80f7e8 <initNode2D>
  801ad0:	1007883a 	mov	r3,r2
  801ad4:	e0bffb17 	ldw	r2,-20(fp)
  801ad8:	10c00f15 	stw	r3,60(r2)
	box->nodes[6] = initNode2D(cord_x + offset, cord_y + offset, z-offset, 6, offset);
  801adc:	e13ffa17 	ldw	r4,-24(fp)
  801ae0:	08135a40 	call	8135a4 <__floatsisf>
  801ae4:	1009883a 	mov	r4,r2
  801ae8:	e17ff917 	ldw	r5,-28(fp)
  801aec:	081300c0 	call	81300c <__addsf3>
  801af0:	1023883a 	mov	r17,r2
  801af4:	e13ffa17 	ldw	r4,-24(fp)
  801af8:	08135a40 	call	8135a4 <__floatsisf>
  801afc:	1009883a 	mov	r4,r2
  801b00:	e17ff817 	ldw	r5,-32(fp)
  801b04:	081300c0 	call	81300c <__addsf3>
  801b08:	1021883a 	mov	r16,r2
  801b0c:	e0fffe17 	ldw	r3,-8(fp)
  801b10:	e0bffa17 	ldw	r2,-24(fp)
  801b14:	1889c83a 	sub	r4,r3,r2
  801b18:	08135a40 	call	8135a4 <__floatsisf>
  801b1c:	1007883a 	mov	r3,r2
  801b20:	e0bffa17 	ldw	r2,-24(fp)
  801b24:	d8800015 	stw	r2,0(sp)
  801b28:	8809883a 	mov	r4,r17
  801b2c:	800b883a 	mov	r5,r16
  801b30:	180d883a 	mov	r6,r3
  801b34:	01c00184 	movi	r7,6
  801b38:	080f7e80 	call	80f7e8 <initNode2D>
  801b3c:	1007883a 	mov	r3,r2
  801b40:	e0bffb17 	ldw	r2,-20(fp)
  801b44:	10c01015 	stw	r3,64(r2)
	box->nodes[7] = initNode2D(cord_x + offset, cord_y - offset, z-offset, 7, offset);
  801b48:	e13ffa17 	ldw	r4,-24(fp)
  801b4c:	08135a40 	call	8135a4 <__floatsisf>
  801b50:	1009883a 	mov	r4,r2
  801b54:	e17ff917 	ldw	r5,-28(fp)
  801b58:	081300c0 	call	81300c <__addsf3>
  801b5c:	1023883a 	mov	r17,r2
  801b60:	e13ffa17 	ldw	r4,-24(fp)
  801b64:	08135a40 	call	8135a4 <__floatsisf>
  801b68:	e13ff817 	ldw	r4,-32(fp)
  801b6c:	100b883a 	mov	r5,r2
  801b70:	0812f9c0 	call	812f9c <__subsf3>
  801b74:	1021883a 	mov	r16,r2
  801b78:	e0fffe17 	ldw	r3,-8(fp)
  801b7c:	e0bffa17 	ldw	r2,-24(fp)
  801b80:	1889c83a 	sub	r4,r3,r2
  801b84:	08135a40 	call	8135a4 <__floatsisf>
  801b88:	1007883a 	mov	r3,r2
  801b8c:	e0bffa17 	ldw	r2,-24(fp)
  801b90:	d8800015 	stw	r2,0(sp)
  801b94:	8809883a 	mov	r4,r17
  801b98:	800b883a 	mov	r5,r16
  801b9c:	180d883a 	mov	r6,r3
  801ba0:	01c001c4 	movi	r7,7
  801ba4:	080f7e80 	call	80f7e8 <initNode2D>
  801ba8:	1007883a 	mov	r3,r2
  801bac:	e0bffb17 	ldw	r2,-20(fp)
  801bb0:	10c01115 	stw	r3,68(r2)
	box->edges[0] = initEdge(box->nodes[0], box->nodes[1]);
  801bb4:	e0bffb17 	ldw	r2,-20(fp)
  801bb8:	11000a17 	ldw	r4,40(r2)
  801bbc:	e0bffb17 	ldw	r2,-20(fp)
  801bc0:	11400b17 	ldw	r5,44(r2)
  801bc4:	080fde00 	call	80fde0 <initEdge>
  801bc8:	1007883a 	mov	r3,r2
  801bcc:	e0bffb17 	ldw	r2,-20(fp)
  801bd0:	10c01215 	stw	r3,72(r2)
	box->edges[1] = initEdge(box->nodes[0], box->nodes[2]);
  801bd4:	e0bffb17 	ldw	r2,-20(fp)
  801bd8:	11000a17 	ldw	r4,40(r2)
  801bdc:	e0bffb17 	ldw	r2,-20(fp)
  801be0:	11400c17 	ldw	r5,48(r2)
  801be4:	080fde00 	call	80fde0 <initEdge>
  801be8:	1007883a 	mov	r3,r2
  801bec:	e0bffb17 	ldw	r2,-20(fp)
  801bf0:	10c01315 	stw	r3,76(r2)
	box->edges[2] = initEdge(box->nodes[2], box->nodes[3]);
  801bf4:	e0bffb17 	ldw	r2,-20(fp)
  801bf8:	11000c17 	ldw	r4,48(r2)
  801bfc:	e0bffb17 	ldw	r2,-20(fp)
  801c00:	11400d17 	ldw	r5,52(r2)
  801c04:	080fde00 	call	80fde0 <initEdge>
  801c08:	1007883a 	mov	r3,r2
  801c0c:	e0bffb17 	ldw	r2,-20(fp)
  801c10:	10c01415 	stw	r3,80(r2)
	box->edges[3] = initEdge(box->nodes[1], box->nodes[3]);
  801c14:	e0bffb17 	ldw	r2,-20(fp)
  801c18:	11000b17 	ldw	r4,44(r2)
  801c1c:	e0bffb17 	ldw	r2,-20(fp)
  801c20:	11400d17 	ldw	r5,52(r2)
  801c24:	080fde00 	call	80fde0 <initEdge>
  801c28:	1007883a 	mov	r3,r2
  801c2c:	e0bffb17 	ldw	r2,-20(fp)
  801c30:	10c01515 	stw	r3,84(r2)
	box->edges[4] = initEdge(box->nodes[4], box->nodes[5]);
  801c34:	e0bffb17 	ldw	r2,-20(fp)
  801c38:	11000e17 	ldw	r4,56(r2)
  801c3c:	e0bffb17 	ldw	r2,-20(fp)
  801c40:	11400f17 	ldw	r5,60(r2)
  801c44:	080fde00 	call	80fde0 <initEdge>
  801c48:	1007883a 	mov	r3,r2
  801c4c:	e0bffb17 	ldw	r2,-20(fp)
  801c50:	10c01615 	stw	r3,88(r2)
	box->edges[5] = initEdge(box->nodes[4], box->nodes[6]);
  801c54:	e0bffb17 	ldw	r2,-20(fp)
  801c58:	11000e17 	ldw	r4,56(r2)
  801c5c:	e0bffb17 	ldw	r2,-20(fp)
  801c60:	11401017 	ldw	r5,64(r2)
  801c64:	080fde00 	call	80fde0 <initEdge>
  801c68:	1007883a 	mov	r3,r2
  801c6c:	e0bffb17 	ldw	r2,-20(fp)
  801c70:	10c01715 	stw	r3,92(r2)
	box->edges[6] = initEdge(box->nodes[5], box->nodes[7]);
  801c74:	e0bffb17 	ldw	r2,-20(fp)
  801c78:	11000f17 	ldw	r4,60(r2)
  801c7c:	e0bffb17 	ldw	r2,-20(fp)
  801c80:	11401117 	ldw	r5,68(r2)
  801c84:	080fde00 	call	80fde0 <initEdge>
  801c88:	1007883a 	mov	r3,r2
  801c8c:	e0bffb17 	ldw	r2,-20(fp)
  801c90:	10c01815 	stw	r3,96(r2)
	box->edges[7] = initEdge(box->nodes[6], box->nodes[7]);
  801c94:	e0bffb17 	ldw	r2,-20(fp)
  801c98:	11001017 	ldw	r4,64(r2)
  801c9c:	e0bffb17 	ldw	r2,-20(fp)
  801ca0:	11401117 	ldw	r5,68(r2)
  801ca4:	080fde00 	call	80fde0 <initEdge>
  801ca8:	1007883a 	mov	r3,r2
  801cac:	e0bffb17 	ldw	r2,-20(fp)
  801cb0:	10c01915 	stw	r3,100(r2)
	box->edges[8] = initEdge(box->nodes[0], box->nodes[4]);
  801cb4:	e0bffb17 	ldw	r2,-20(fp)
  801cb8:	11000a17 	ldw	r4,40(r2)
  801cbc:	e0bffb17 	ldw	r2,-20(fp)
  801cc0:	11400e17 	ldw	r5,56(r2)
  801cc4:	080fde00 	call	80fde0 <initEdge>
  801cc8:	1007883a 	mov	r3,r2
  801ccc:	e0bffb17 	ldw	r2,-20(fp)
  801cd0:	10c01a15 	stw	r3,104(r2)
	box->edges[9] = initEdge(box->nodes[1], box->nodes[5]);
  801cd4:	e0bffb17 	ldw	r2,-20(fp)
  801cd8:	11000b17 	ldw	r4,44(r2)
  801cdc:	e0bffb17 	ldw	r2,-20(fp)
  801ce0:	11400f17 	ldw	r5,60(r2)
  801ce4:	080fde00 	call	80fde0 <initEdge>
  801ce8:	1007883a 	mov	r3,r2
  801cec:	e0bffb17 	ldw	r2,-20(fp)
  801cf0:	10c01b15 	stw	r3,108(r2)
	box->edges[10] = initEdge(box->nodes[2], box->nodes[6]);
  801cf4:	e0bffb17 	ldw	r2,-20(fp)
  801cf8:	11000c17 	ldw	r4,48(r2)
  801cfc:	e0bffb17 	ldw	r2,-20(fp)
  801d00:	11401017 	ldw	r5,64(r2)
  801d04:	080fde00 	call	80fde0 <initEdge>
  801d08:	1007883a 	mov	r3,r2
  801d0c:	e0bffb17 	ldw	r2,-20(fp)
  801d10:	10c01c15 	stw	r3,112(r2)
	box->edges[11] = initEdge(box->nodes[3], box->nodes[7]);
  801d14:	e0bffb17 	ldw	r2,-20(fp)
  801d18:	11000d17 	ldw	r4,52(r2)
  801d1c:	e0bffb17 	ldw	r2,-20(fp)
  801d20:	11401117 	ldw	r5,68(r2)
  801d24:	080fde00 	call	80fde0 <initEdge>
  801d28:	1007883a 	mov	r3,r2
  801d2c:	e0bffb17 	ldw	r2,-20(fp)
  801d30:	10c01d15 	stw	r3,116(r2)
	box->startAnimate = false;
  801d34:	e0bffb17 	ldw	r2,-20(fp)
  801d38:	10001e05 	stb	zero,120(r2)
	box->endAnimate = false;
  801d3c:	e0bffb17 	ldw	r2,-20(fp)
  801d40:	10001e45 	stb	zero,121(r2)
	box->acc_y = 0.01862;
  801d44:	e0fffb17 	ldw	r3,-20(fp)
  801d48:	008f2674 	movhi	r2,15513
  801d4c:	10a23e04 	addi	r2,r2,-30472
  801d50:	18800515 	stw	r2,20(r3)
	box->acc_z = box->acc_x = 0.02;
  801d54:	e0fffb17 	ldw	r3,-20(fp)
  801d58:	008f2934 	movhi	r2,15524
  801d5c:	10b5c284 	addi	r2,r2,-10486
  801d60:	18800415 	stw	r2,16(r3)
  801d64:	e0bffb17 	ldw	r2,-20(fp)
  801d68:	10c00417 	ldw	r3,16(r2)
  801d6c:	e0bffb17 	ldw	r2,-20(fp)
  801d70:	10c00615 	stw	r3,24(r2)
	box->vx =box->vz = 0;
  801d74:	e0bffb17 	ldw	r2,-20(fp)
  801d78:	10000915 	stw	zero,36(r2)
  801d7c:	e0bffb17 	ldw	r2,-20(fp)
  801d80:	10c00917 	ldw	r3,36(r2)
  801d84:	e0bffb17 	ldw	r2,-20(fp)
  801d88:	10c00715 	stw	r3,28(r2)
	 box->vy = -1;
  801d8c:	e0fffb17 	ldw	r3,-20(fp)
  801d90:	00afe034 	movhi	r2,49024
  801d94:	18800815 	stw	r2,32(r3)
	return box;
  801d98:	e0bffb17 	ldw	r2,-20(fp)
}
  801d9c:	e037883a 	mov	sp,fp
  801da0:	dfc00317 	ldw	ra,12(sp)
  801da4:	df000217 	ldw	fp,8(sp)
  801da8:	dc400117 	ldw	r17,4(sp)
  801dac:	dc000017 	ldw	r16,0(sp)
  801db0:	dec00404 	addi	sp,sp,16
  801db4:	f800283a 	ret

00801db8 <drawBox3D>:

void drawBox3D(struct Box3D* this, int background, int color) {
  801db8:	defff304 	addi	sp,sp,-52
  801dbc:	dfc00c15 	stw	ra,48(sp)
  801dc0:	df000b15 	stw	fp,44(sp)
  801dc4:	dcc00a15 	stw	r19,40(sp)
  801dc8:	dc800915 	stw	r18,36(sp)
  801dcc:	dc400815 	stw	r17,32(sp)
  801dd0:	dc000715 	stw	r16,28(sp)
  801dd4:	df000704 	addi	fp,sp,28
  801dd8:	e13ffd15 	stw	r4,-12(fp)
  801ddc:	e17ffe15 	stw	r5,-8(fp)
  801de0:	e1bfff15 	stw	r6,-4(fp)
	int i;
	for(i = 0; i < 12; i ++) {
  801de4:	e03ffc15 	stw	zero,-16(fp)
  801de8:	00007a06 	br	801fd4 <drawBox3D+0x21c>
		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, (int)this->edges[i]->n1->prev_x, (int)this->edges[i]->n1->prev_y, this->edges[i]->n2->prev_x, this->edges[i]->n2->prev_y, 0,background);
  801dec:	008020f4 	movhi	r2,131
  801df0:	109c8a04 	addi	r2,r2,29224
  801df4:	14000017 	ldw	r16,0(r2)
  801df8:	e0bffc17 	ldw	r2,-16(fp)
  801dfc:	e0fffd17 	ldw	r3,-12(fp)
  801e00:	1085883a 	add	r2,r2,r2
  801e04:	1085883a 	add	r2,r2,r2
  801e08:	10c5883a 	add	r2,r2,r3
  801e0c:	10801204 	addi	r2,r2,72
  801e10:	10800017 	ldw	r2,0(r2)
  801e14:	10800017 	ldw	r2,0(r2)
  801e18:	10800817 	ldw	r2,32(r2)
  801e1c:	1009883a 	mov	r4,r2
  801e20:	081363c0 	call	81363c <__fixsfsi>
  801e24:	1023883a 	mov	r17,r2
  801e28:	e0bffc17 	ldw	r2,-16(fp)
  801e2c:	e0fffd17 	ldw	r3,-12(fp)
  801e30:	1085883a 	add	r2,r2,r2
  801e34:	1085883a 	add	r2,r2,r2
  801e38:	10c5883a 	add	r2,r2,r3
  801e3c:	10801204 	addi	r2,r2,72
  801e40:	10800017 	ldw	r2,0(r2)
  801e44:	10800017 	ldw	r2,0(r2)
  801e48:	10800917 	ldw	r2,36(r2)
  801e4c:	1009883a 	mov	r4,r2
  801e50:	081363c0 	call	81363c <__fixsfsi>
  801e54:	1025883a 	mov	r18,r2
  801e58:	e0bffc17 	ldw	r2,-16(fp)
  801e5c:	e0fffd17 	ldw	r3,-12(fp)
  801e60:	1085883a 	add	r2,r2,r2
  801e64:	1085883a 	add	r2,r2,r2
  801e68:	10c5883a 	add	r2,r2,r3
  801e6c:	10801204 	addi	r2,r2,72
  801e70:	10800017 	ldw	r2,0(r2)
  801e74:	10800117 	ldw	r2,4(r2)
  801e78:	10800817 	ldw	r2,32(r2)
  801e7c:	1009883a 	mov	r4,r2
  801e80:	081363c0 	call	81363c <__fixsfsi>
  801e84:	1027883a 	mov	r19,r2
  801e88:	e0bffc17 	ldw	r2,-16(fp)
  801e8c:	e0fffd17 	ldw	r3,-12(fp)
  801e90:	1085883a 	add	r2,r2,r2
  801e94:	1085883a 	add	r2,r2,r2
  801e98:	10c5883a 	add	r2,r2,r3
  801e9c:	10801204 	addi	r2,r2,72
  801ea0:	10800017 	ldw	r2,0(r2)
  801ea4:	10800117 	ldw	r2,4(r2)
  801ea8:	10800917 	ldw	r2,36(r2)
  801eac:	1009883a 	mov	r4,r2
  801eb0:	081363c0 	call	81363c <__fixsfsi>
  801eb4:	d8800015 	stw	r2,0(sp)
  801eb8:	d8000115 	stw	zero,4(sp)
  801ebc:	e0bffe17 	ldw	r2,-8(fp)
  801ec0:	d8800215 	stw	r2,8(sp)
  801ec4:	8009883a 	mov	r4,r16
  801ec8:	880b883a 	mov	r5,r17
  801ecc:	900d883a 	mov	r6,r18
  801ed0:	980f883a 	mov	r7,r19
  801ed4:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, (int)this->edges[i]->n1->x, (int)this->edges[i]->n1->y, this->edges[i]->n2->x, this->edges[i]->n2->y, color,background);
  801ed8:	008020f4 	movhi	r2,131
  801edc:	109c8a04 	addi	r2,r2,29224
  801ee0:	14000017 	ldw	r16,0(r2)
  801ee4:	e0bffc17 	ldw	r2,-16(fp)
  801ee8:	e0fffd17 	ldw	r3,-12(fp)
  801eec:	1085883a 	add	r2,r2,r2
  801ef0:	1085883a 	add	r2,r2,r2
  801ef4:	10c5883a 	add	r2,r2,r3
  801ef8:	10801204 	addi	r2,r2,72
  801efc:	10800017 	ldw	r2,0(r2)
  801f00:	10800017 	ldw	r2,0(r2)
  801f04:	10800017 	ldw	r2,0(r2)
  801f08:	1009883a 	mov	r4,r2
  801f0c:	081363c0 	call	81363c <__fixsfsi>
  801f10:	1023883a 	mov	r17,r2
  801f14:	e0bffc17 	ldw	r2,-16(fp)
  801f18:	e0fffd17 	ldw	r3,-12(fp)
  801f1c:	1085883a 	add	r2,r2,r2
  801f20:	1085883a 	add	r2,r2,r2
  801f24:	10c5883a 	add	r2,r2,r3
  801f28:	10801204 	addi	r2,r2,72
  801f2c:	10800017 	ldw	r2,0(r2)
  801f30:	10800017 	ldw	r2,0(r2)
  801f34:	10800117 	ldw	r2,4(r2)
  801f38:	1009883a 	mov	r4,r2
  801f3c:	081363c0 	call	81363c <__fixsfsi>
  801f40:	1025883a 	mov	r18,r2
  801f44:	e0bffc17 	ldw	r2,-16(fp)
  801f48:	e0fffd17 	ldw	r3,-12(fp)
  801f4c:	1085883a 	add	r2,r2,r2
  801f50:	1085883a 	add	r2,r2,r2
  801f54:	10c5883a 	add	r2,r2,r3
  801f58:	10801204 	addi	r2,r2,72
  801f5c:	10800017 	ldw	r2,0(r2)
  801f60:	10800117 	ldw	r2,4(r2)
  801f64:	10800017 	ldw	r2,0(r2)
  801f68:	1009883a 	mov	r4,r2
  801f6c:	081363c0 	call	81363c <__fixsfsi>
  801f70:	1027883a 	mov	r19,r2
  801f74:	e0bffc17 	ldw	r2,-16(fp)
  801f78:	e0fffd17 	ldw	r3,-12(fp)
  801f7c:	1085883a 	add	r2,r2,r2
  801f80:	1085883a 	add	r2,r2,r2
  801f84:	10c5883a 	add	r2,r2,r3
  801f88:	10801204 	addi	r2,r2,72
  801f8c:	10800017 	ldw	r2,0(r2)
  801f90:	10800117 	ldw	r2,4(r2)
  801f94:	10800117 	ldw	r2,4(r2)
  801f98:	1009883a 	mov	r4,r2
  801f9c:	081363c0 	call	81363c <__fixsfsi>
  801fa0:	d8800015 	stw	r2,0(sp)
  801fa4:	e0bfff17 	ldw	r2,-4(fp)
  801fa8:	d8800115 	stw	r2,4(sp)
  801fac:	e0bffe17 	ldw	r2,-8(fp)
  801fb0:	d8800215 	stw	r2,8(sp)
  801fb4:	8009883a 	mov	r4,r16
  801fb8:	880b883a 	mov	r5,r17
  801fbc:	900d883a 	mov	r6,r18
  801fc0:	980f883a 	mov	r7,r19
  801fc4:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
	return box;
}

void drawBox3D(struct Box3D* this, int background, int color) {
	int i;
	for(i = 0; i < 12; i ++) {
  801fc8:	e0bffc17 	ldw	r2,-16(fp)
  801fcc:	10800044 	addi	r2,r2,1
  801fd0:	e0bffc15 	stw	r2,-16(fp)
  801fd4:	e0bffc17 	ldw	r2,-16(fp)
  801fd8:	10800310 	cmplti	r2,r2,12
  801fdc:	103f831e 	bne	r2,zero,801dec <drawBox3D+0x34>
		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, (int)this->edges[i]->n1->prev_x, (int)this->edges[i]->n1->prev_y, this->edges[i]->n2->prev_x, this->edges[i]->n2->prev_y, 0,background);
		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, (int)this->edges[i]->n1->x, (int)this->edges[i]->n1->y, this->edges[i]->n2->x, this->edges[i]->n2->y, color,background);
	}
}
  801fe0:	e037883a 	mov	sp,fp
  801fe4:	dfc00517 	ldw	ra,20(sp)
  801fe8:	df000417 	ldw	fp,16(sp)
  801fec:	dcc00317 	ldw	r19,12(sp)
  801ff0:	dc800217 	ldw	r18,8(sp)
  801ff4:	dc400117 	ldw	r17,4(sp)
  801ff8:	dc000017 	ldw	r16,0(sp)
  801ffc:	dec00604 	addi	sp,sp,24
  802000:	f800283a 	ret

00802004 <killBox>:

void killBox(struct Box3D* this) {
  802004:	defffc04 	addi	sp,sp,-16
  802008:	dfc00315 	stw	ra,12(sp)
  80200c:	df000215 	stw	fp,8(sp)
  802010:	df000204 	addi	fp,sp,8
  802014:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 0; i < 12; i++) {
  802018:	e03ffe15 	stw	zero,-8(fp)
  80201c:	00000b06 	br	80204c <killBox+0x48>
		killEdge(this->edges[i]);
  802020:	e0bffe17 	ldw	r2,-8(fp)
  802024:	e0ffff17 	ldw	r3,-4(fp)
  802028:	1085883a 	add	r2,r2,r2
  80202c:	1085883a 	add	r2,r2,r2
  802030:	10c5883a 	add	r2,r2,r3
  802034:	10801204 	addi	r2,r2,72
  802038:	11000017 	ldw	r4,0(r2)
  80203c:	080fe340 	call	80fe34 <killEdge>
	}
}

void killBox(struct Box3D* this) {
	int i;
	for(i = 0; i < 12; i++) {
  802040:	e0bffe17 	ldw	r2,-8(fp)
  802044:	10800044 	addi	r2,r2,1
  802048:	e0bffe15 	stw	r2,-8(fp)
  80204c:	e0bffe17 	ldw	r2,-8(fp)
  802050:	10800310 	cmplti	r2,r2,12
  802054:	103ff21e 	bne	r2,zero,802020 <killBox+0x1c>
		killEdge(this->edges[i]);
	}
	for(i = 0; i < 8; i++) {
  802058:	e03ffe15 	stw	zero,-8(fp)
  80205c:	00001206 	br	8020a8 <killBox+0xa4>
		free(this->nodes[i]);
  802060:	e0bffe17 	ldw	r2,-8(fp)
  802064:	e0ffff17 	ldw	r3,-4(fp)
  802068:	1085883a 	add	r2,r2,r2
  80206c:	1085883a 	add	r2,r2,r2
  802070:	10c5883a 	add	r2,r2,r3
  802074:	10800a04 	addi	r2,r2,40
  802078:	11000017 	ldw	r4,0(r2)
  80207c:	0814f440 	call	814f44 <free>
		this->nodes[i] = NULL;
  802080:	e0bffe17 	ldw	r2,-8(fp)
  802084:	e0ffff17 	ldw	r3,-4(fp)
  802088:	1085883a 	add	r2,r2,r2
  80208c:	1085883a 	add	r2,r2,r2
  802090:	10c5883a 	add	r2,r2,r3
  802094:	10800a04 	addi	r2,r2,40
  802098:	10000015 	stw	zero,0(r2)
void killBox(struct Box3D* this) {
	int i;
	for(i = 0; i < 12; i++) {
		killEdge(this->edges[i]);
	}
	for(i = 0; i < 8; i++) {
  80209c:	e0bffe17 	ldw	r2,-8(fp)
  8020a0:	10800044 	addi	r2,r2,1
  8020a4:	e0bffe15 	stw	r2,-8(fp)
  8020a8:	e0bffe17 	ldw	r2,-8(fp)
  8020ac:	10800210 	cmplti	r2,r2,8
  8020b0:	103feb1e 	bne	r2,zero,802060 <killBox+0x5c>
		free(this->nodes[i]);
		this->nodes[i] = NULL;
	} free(this);
  8020b4:	e13fff17 	ldw	r4,-4(fp)
  8020b8:	0814f440 	call	814f44 <free>
	this = NULL;
  8020bc:	e03fff15 	stw	zero,-4(fp)
}
  8020c0:	e037883a 	mov	sp,fp
  8020c4:	dfc00117 	ldw	ra,4(sp)
  8020c8:	df000017 	ldw	fp,0(sp)
  8020cc:	dec00204 	addi	sp,sp,8
  8020d0:	f800283a 	ret

008020d4 <updateBox3D>:
void updateBox3D(struct Box3D* this) {
  8020d4:	defff604 	addi	sp,sp,-40
  8020d8:	dfc00915 	stw	ra,36(sp)
  8020dc:	df000815 	stw	fp,32(sp)
  8020e0:	dcc00715 	stw	r19,28(sp)
  8020e4:	dc800615 	stw	r18,24(sp)
  8020e8:	dc400515 	stw	r17,20(sp)
  8020ec:	dc000415 	stw	r16,16(sp)
  8020f0:	df000404 	addi	fp,sp,16
  8020f4:	e13fff15 	stw	r4,-4(fp)
	float cord_x = this->x - cameraX;
  8020f8:	e0bfff17 	ldw	r2,-4(fp)
  8020fc:	14000017 	ldw	r16,0(r2)
  802100:	008020f4 	movhi	r2,131
  802104:	109c8404 	addi	r2,r2,29200
  802108:	11000017 	ldw	r4,0(r2)
  80210c:	08135a40 	call	8135a4 <__floatsisf>
  802110:	8009883a 	mov	r4,r16
  802114:	100b883a 	mov	r5,r2
  802118:	0812f9c0 	call	812f9c <__subsf3>
  80211c:	e0bffe15 	stw	r2,-8(fp)
	float cord_y = cameraY - this->y;
  802120:	008020f4 	movhi	r2,131
  802124:	109c8d04 	addi	r2,r2,29236
  802128:	11000017 	ldw	r4,0(r2)
  80212c:	08135a40 	call	8135a4 <__floatsisf>
  802130:	1007883a 	mov	r3,r2
  802134:	e0bfff17 	ldw	r2,-4(fp)
  802138:	10800117 	ldw	r2,4(r2)
  80213c:	1809883a 	mov	r4,r3
  802140:	100b883a 	mov	r5,r2
  802144:	0812f9c0 	call	812f9c <__subsf3>
  802148:	e0bffd15 	stw	r2,-12(fp)
	int i;
	for(i = 0; i < 8; i++) {
  80214c:	e03ffc15 	stw	zero,-16(fp)
  802150:	00003e06 	br	80224c <updateBox3D+0x178>
		updateNode(this->nodes[i], cord_x + this->nodes[i]->relative_x, cord_y + this->nodes[i]->relative_y, this->z+this->nodes[i]->relative_z-320+cameraZ);
  802154:	e0bffc17 	ldw	r2,-16(fp)
  802158:	e0ffff17 	ldw	r3,-4(fp)
  80215c:	1085883a 	add	r2,r2,r2
  802160:	1085883a 	add	r2,r2,r2
  802164:	10c5883a 	add	r2,r2,r3
  802168:	10800a04 	addi	r2,r2,40
  80216c:	14400017 	ldw	r17,0(r2)
  802170:	e0bffc17 	ldw	r2,-16(fp)
  802174:	e0ffff17 	ldw	r3,-4(fp)
  802178:	1085883a 	add	r2,r2,r2
  80217c:	1085883a 	add	r2,r2,r2
  802180:	10c5883a 	add	r2,r2,r3
  802184:	10800a04 	addi	r2,r2,40
  802188:	10800017 	ldw	r2,0(r2)
  80218c:	10800517 	ldw	r2,20(r2)
  802190:	1009883a 	mov	r4,r2
  802194:	e17ffe17 	ldw	r5,-8(fp)
  802198:	081300c0 	call	81300c <__addsf3>
  80219c:	1025883a 	mov	r18,r2
  8021a0:	e0bffc17 	ldw	r2,-16(fp)
  8021a4:	e0ffff17 	ldw	r3,-4(fp)
  8021a8:	1085883a 	add	r2,r2,r2
  8021ac:	1085883a 	add	r2,r2,r2
  8021b0:	10c5883a 	add	r2,r2,r3
  8021b4:	10800a04 	addi	r2,r2,40
  8021b8:	10800017 	ldw	r2,0(r2)
  8021bc:	10800617 	ldw	r2,24(r2)
  8021c0:	1009883a 	mov	r4,r2
  8021c4:	e17ffd17 	ldw	r5,-12(fp)
  8021c8:	081300c0 	call	81300c <__addsf3>
  8021cc:	1027883a 	mov	r19,r2
  8021d0:	e0bfff17 	ldw	r2,-4(fp)
  8021d4:	11000217 	ldw	r4,8(r2)
  8021d8:	e0bffc17 	ldw	r2,-16(fp)
  8021dc:	e0ffff17 	ldw	r3,-4(fp)
  8021e0:	1085883a 	add	r2,r2,r2
  8021e4:	1085883a 	add	r2,r2,r2
  8021e8:	10c5883a 	add	r2,r2,r3
  8021ec:	10800a04 	addi	r2,r2,40
  8021f0:	10800017 	ldw	r2,0(r2)
  8021f4:	10800717 	ldw	r2,28(r2)
  8021f8:	100b883a 	mov	r5,r2
  8021fc:	081300c0 	call	81300c <__addsf3>
  802200:	1009883a 	mov	r4,r2
  802204:	0150e834 	movhi	r5,17312
  802208:	0812f9c0 	call	812f9c <__subsf3>
  80220c:	1021883a 	mov	r16,r2
  802210:	008020f4 	movhi	r2,131
  802214:	109c8904 	addi	r2,r2,29220
  802218:	11000017 	ldw	r4,0(r2)
  80221c:	08135a40 	call	8135a4 <__floatsisf>
  802220:	8009883a 	mov	r4,r16
  802224:	100b883a 	mov	r5,r2
  802228:	081300c0 	call	81300c <__addsf3>
  80222c:	8809883a 	mov	r4,r17
  802230:	900b883a 	mov	r5,r18
  802234:	980d883a 	mov	r6,r19
  802238:	100f883a 	mov	r7,r2
  80223c:	080fc700 	call	80fc70 <updateNode>
}
void updateBox3D(struct Box3D* this) {
	float cord_x = this->x - cameraX;
	float cord_y = cameraY - this->y;
	int i;
	for(i = 0; i < 8; i++) {
  802240:	e0bffc17 	ldw	r2,-16(fp)
  802244:	10800044 	addi	r2,r2,1
  802248:	e0bffc15 	stw	r2,-16(fp)
  80224c:	e0bffc17 	ldw	r2,-16(fp)
  802250:	10800210 	cmplti	r2,r2,8
  802254:	103fbf1e 	bne	r2,zero,802154 <updateBox3D+0x80>
		updateNode(this->nodes[i], cord_x + this->nodes[i]->relative_x, cord_y + this->nodes[i]->relative_y, this->z+this->nodes[i]->relative_z-320+cameraZ);
	}
}
  802258:	e037883a 	mov	sp,fp
  80225c:	dfc00517 	ldw	ra,20(sp)
  802260:	df000417 	ldw	fp,16(sp)
  802264:	dcc00317 	ldw	r19,12(sp)
  802268:	dc800217 	ldw	r18,8(sp)
  80226c:	dc400117 	ldw	r17,4(sp)
  802270:	dc000017 	ldw	r16,0(sp)
  802274:	dec00604 	addi	sp,sp,24
  802278:	f800283a 	ret

0080227c <rotateBox3DY>:

void rotateBox3DY(struct Box3D* this) {
  80227c:	defff704 	addi	sp,sp,-36
  802280:	dfc00815 	stw	ra,32(sp)
  802284:	df000715 	stw	fp,28(sp)
  802288:	dd000615 	stw	r20,24(sp)
  80228c:	dcc00515 	stw	r19,20(sp)
  802290:	dc800415 	stw	r18,16(sp)
  802294:	dc400315 	stw	r17,12(sp)
  802298:	dc000215 	stw	r16,8(sp)
  80229c:	df000204 	addi	fp,sp,8
  8022a0:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 0; i < 8; i++) {
  8022a4:	e03ffe15 	stw	zero,-8(fp)
  8022a8:	00008c06 	br	8024dc <rotateBox3DY+0x260>
		updatePos(this->nodes[i], this->nodes[i]->relative_x*0.9962+this->nodes[i]->relative_z*0.08716, this->nodes[i]->relative_y, this->nodes[i]->relative_z*0.9962-this->nodes[i]->relative_x*0.08716);
  8022ac:	e0bffe17 	ldw	r2,-8(fp)
  8022b0:	e0ffff17 	ldw	r3,-4(fp)
  8022b4:	1085883a 	add	r2,r2,r2
  8022b8:	1085883a 	add	r2,r2,r2
  8022bc:	10c5883a 	add	r2,r2,r3
  8022c0:	10800a04 	addi	r2,r2,40
  8022c4:	14800017 	ldw	r18,0(r2)
  8022c8:	e0bffe17 	ldw	r2,-8(fp)
  8022cc:	e0ffff17 	ldw	r3,-4(fp)
  8022d0:	1085883a 	add	r2,r2,r2
  8022d4:	1085883a 	add	r2,r2,r2
  8022d8:	10c5883a 	add	r2,r2,r3
  8022dc:	10800a04 	addi	r2,r2,40
  8022e0:	10800017 	ldw	r2,0(r2)
  8022e4:	10800517 	ldw	r2,20(r2)
  8022e8:	1009883a 	mov	r4,r2
  8022ec:	08136d00 	call	8136d0 <__extendsfdf2>
  8022f0:	100b883a 	mov	r5,r2
  8022f4:	180d883a 	mov	r6,r3
  8022f8:	2809883a 	mov	r4,r5
  8022fc:	300b883a 	mov	r5,r6
  802300:	01b4a274 	movhi	r6,53897
  802304:	31b39c04 	addi	r6,r6,-12688
  802308:	01cffc34 	movhi	r7,16368
  80230c:	39f83784 	addi	r7,r7,-7970
  802310:	0813ce80 	call	813ce8 <__muldf3>
  802314:	1009883a 	mov	r4,r2
  802318:	180b883a 	mov	r5,r3
  80231c:	2021883a 	mov	r16,r4
  802320:	2823883a 	mov	r17,r5
  802324:	e0bffe17 	ldw	r2,-8(fp)
  802328:	e0ffff17 	ldw	r3,-4(fp)
  80232c:	1085883a 	add	r2,r2,r2
  802330:	1085883a 	add	r2,r2,r2
  802334:	10c5883a 	add	r2,r2,r3
  802338:	10800a04 	addi	r2,r2,40
  80233c:	10800017 	ldw	r2,0(r2)
  802340:	10800717 	ldw	r2,28(r2)
  802344:	1009883a 	mov	r4,r2
  802348:	08136d00 	call	8136d0 <__extendsfdf2>
  80234c:	100b883a 	mov	r5,r2
  802350:	180d883a 	mov	r6,r3
  802354:	2809883a 	mov	r4,r5
  802358:	300b883a 	mov	r5,r6
  80235c:	01896174 	movhi	r6,9605
  802360:	31bd31c4 	addi	r6,r6,-2873
  802364:	01cfedb4 	movhi	r7,16310
  802368:	39d40784 	addi	r7,r7,20510
  80236c:	0813ce80 	call	813ce8 <__muldf3>
  802370:	1009883a 	mov	r4,r2
  802374:	180b883a 	mov	r5,r3
  802378:	2005883a 	mov	r2,r4
  80237c:	2807883a 	mov	r3,r5
  802380:	8009883a 	mov	r4,r16
  802384:	880b883a 	mov	r5,r17
  802388:	100d883a 	mov	r6,r2
  80238c:	180f883a 	mov	r7,r3
  802390:	0813c740 	call	813c74 <__adddf3>
  802394:	1009883a 	mov	r4,r2
  802398:	180b883a 	mov	r5,r3
  80239c:	2005883a 	mov	r2,r4
  8023a0:	2807883a 	mov	r3,r5
  8023a4:	1009883a 	mov	r4,r2
  8023a8:	180b883a 	mov	r5,r3
  8023ac:	081450c0 	call	81450c <__truncdfsf2>
  8023b0:	1027883a 	mov	r19,r2
  8023b4:	e0bffe17 	ldw	r2,-8(fp)
  8023b8:	e0ffff17 	ldw	r3,-4(fp)
  8023bc:	1085883a 	add	r2,r2,r2
  8023c0:	1085883a 	add	r2,r2,r2
  8023c4:	10c5883a 	add	r2,r2,r3
  8023c8:	10800a04 	addi	r2,r2,40
  8023cc:	10800017 	ldw	r2,0(r2)
  8023d0:	15000617 	ldw	r20,24(r2)
  8023d4:	e0bffe17 	ldw	r2,-8(fp)
  8023d8:	e0ffff17 	ldw	r3,-4(fp)
  8023dc:	1085883a 	add	r2,r2,r2
  8023e0:	1085883a 	add	r2,r2,r2
  8023e4:	10c5883a 	add	r2,r2,r3
  8023e8:	10800a04 	addi	r2,r2,40
  8023ec:	10800017 	ldw	r2,0(r2)
  8023f0:	10800717 	ldw	r2,28(r2)
  8023f4:	1009883a 	mov	r4,r2
  8023f8:	08136d00 	call	8136d0 <__extendsfdf2>
  8023fc:	100b883a 	mov	r5,r2
  802400:	180d883a 	mov	r6,r3
  802404:	2809883a 	mov	r4,r5
  802408:	300b883a 	mov	r5,r6
  80240c:	01b4a274 	movhi	r6,53897
  802410:	31b39c04 	addi	r6,r6,-12688
  802414:	01cffc34 	movhi	r7,16368
  802418:	39f83784 	addi	r7,r7,-7970
  80241c:	0813ce80 	call	813ce8 <__muldf3>
  802420:	1009883a 	mov	r4,r2
  802424:	180b883a 	mov	r5,r3
  802428:	2021883a 	mov	r16,r4
  80242c:	2823883a 	mov	r17,r5
  802430:	e0bffe17 	ldw	r2,-8(fp)
  802434:	e0ffff17 	ldw	r3,-4(fp)
  802438:	1085883a 	add	r2,r2,r2
  80243c:	1085883a 	add	r2,r2,r2
  802440:	10c5883a 	add	r2,r2,r3
  802444:	10800a04 	addi	r2,r2,40
  802448:	10800017 	ldw	r2,0(r2)
  80244c:	10800517 	ldw	r2,20(r2)
  802450:	1009883a 	mov	r4,r2
  802454:	08136d00 	call	8136d0 <__extendsfdf2>
  802458:	100b883a 	mov	r5,r2
  80245c:	180d883a 	mov	r6,r3
  802460:	2809883a 	mov	r4,r5
  802464:	300b883a 	mov	r5,r6
  802468:	01896174 	movhi	r6,9605
  80246c:	31bd31c4 	addi	r6,r6,-2873
  802470:	01efedb4 	movhi	r7,49078
  802474:	39d40784 	addi	r7,r7,20510
  802478:	0813ce80 	call	813ce8 <__muldf3>
  80247c:	1009883a 	mov	r4,r2
  802480:	180b883a 	mov	r5,r3
  802484:	2005883a 	mov	r2,r4
  802488:	2807883a 	mov	r3,r5
  80248c:	8009883a 	mov	r4,r16
  802490:	880b883a 	mov	r5,r17
  802494:	100d883a 	mov	r6,r2
  802498:	180f883a 	mov	r7,r3
  80249c:	0813c740 	call	813c74 <__adddf3>
  8024a0:	1009883a 	mov	r4,r2
  8024a4:	180b883a 	mov	r5,r3
  8024a8:	2005883a 	mov	r2,r4
  8024ac:	2807883a 	mov	r3,r5
  8024b0:	1009883a 	mov	r4,r2
  8024b4:	180b883a 	mov	r5,r3
  8024b8:	081450c0 	call	81450c <__truncdfsf2>
  8024bc:	9009883a 	mov	r4,r18
  8024c0:	980b883a 	mov	r5,r19
  8024c4:	a00d883a 	mov	r6,r20
  8024c8:	100f883a 	mov	r7,r2
  8024cc:	080fc200 	call	80fc20 <updatePos>
	}
}

void rotateBox3DY(struct Box3D* this) {
	int i;
	for(i = 0; i < 8; i++) {
  8024d0:	e0bffe17 	ldw	r2,-8(fp)
  8024d4:	10800044 	addi	r2,r2,1
  8024d8:	e0bffe15 	stw	r2,-8(fp)
  8024dc:	e0bffe17 	ldw	r2,-8(fp)
  8024e0:	10800210 	cmplti	r2,r2,8
  8024e4:	103f711e 	bne	r2,zero,8022ac <rotateBox3DY+0x30>
		updatePos(this->nodes[i], this->nodes[i]->relative_x*0.9962+this->nodes[i]->relative_z*0.08716, this->nodes[i]->relative_y, this->nodes[i]->relative_z*0.9962-this->nodes[i]->relative_x*0.08716);
	} //usleep(50000);
	updateBox3D(this);
  8024e8:	e13fff17 	ldw	r4,-4(fp)
  8024ec:	08020d40 	call	8020d4 <updateBox3D>
}
  8024f0:	e037883a 	mov	sp,fp
  8024f4:	dfc00617 	ldw	ra,24(sp)
  8024f8:	df000517 	ldw	fp,20(sp)
  8024fc:	dd000417 	ldw	r20,16(sp)
  802500:	dcc00317 	ldw	r19,12(sp)
  802504:	dc800217 	ldw	r18,8(sp)
  802508:	dc400117 	ldw	r17,4(sp)
  80250c:	dc000017 	ldw	r16,0(sp)
  802510:	dec00704 	addi	sp,sp,28
  802514:	f800283a 	ret

00802518 <rotateBox3DX>:
void rotateBox3DX(struct Box3D* this) {
  802518:	defff704 	addi	sp,sp,-36
  80251c:	dfc00815 	stw	ra,32(sp)
  802520:	df000715 	stw	fp,28(sp)
  802524:	dd000615 	stw	r20,24(sp)
  802528:	dcc00515 	stw	r19,20(sp)
  80252c:	dc800415 	stw	r18,16(sp)
  802530:	dc400315 	stw	r17,12(sp)
  802534:	dc000215 	stw	r16,8(sp)
  802538:	df000204 	addi	fp,sp,8
  80253c:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 0; i < 8; i++) {
  802540:	e03ffe15 	stw	zero,-8(fp)
  802544:	00008c06 	br	802778 <rotateBox3DX+0x260>
		updatePos(this->nodes[i], this->nodes[i]->relative_x, this->nodes[i]->relative_y*0.9962-this->nodes[i]->relative_z*0.08716, this->nodes[i]->relative_z*0.9962+this->nodes[i]->relative_y*0.08716);
  802548:	e0bffe17 	ldw	r2,-8(fp)
  80254c:	e0ffff17 	ldw	r3,-4(fp)
  802550:	1085883a 	add	r2,r2,r2
  802554:	1085883a 	add	r2,r2,r2
  802558:	10c5883a 	add	r2,r2,r3
  80255c:	10800a04 	addi	r2,r2,40
  802560:	14800017 	ldw	r18,0(r2)
  802564:	e0bffe17 	ldw	r2,-8(fp)
  802568:	e0ffff17 	ldw	r3,-4(fp)
  80256c:	1085883a 	add	r2,r2,r2
  802570:	1085883a 	add	r2,r2,r2
  802574:	10c5883a 	add	r2,r2,r3
  802578:	10800a04 	addi	r2,r2,40
  80257c:	10800017 	ldw	r2,0(r2)
  802580:	14c00517 	ldw	r19,20(r2)
  802584:	e0bffe17 	ldw	r2,-8(fp)
  802588:	e0ffff17 	ldw	r3,-4(fp)
  80258c:	1085883a 	add	r2,r2,r2
  802590:	1085883a 	add	r2,r2,r2
  802594:	10c5883a 	add	r2,r2,r3
  802598:	10800a04 	addi	r2,r2,40
  80259c:	10800017 	ldw	r2,0(r2)
  8025a0:	10800617 	ldw	r2,24(r2)
  8025a4:	1009883a 	mov	r4,r2
  8025a8:	08136d00 	call	8136d0 <__extendsfdf2>
  8025ac:	100b883a 	mov	r5,r2
  8025b0:	180d883a 	mov	r6,r3
  8025b4:	2809883a 	mov	r4,r5
  8025b8:	300b883a 	mov	r5,r6
  8025bc:	01b4a274 	movhi	r6,53897
  8025c0:	31b39c04 	addi	r6,r6,-12688
  8025c4:	01cffc34 	movhi	r7,16368
  8025c8:	39f83784 	addi	r7,r7,-7970
  8025cc:	0813ce80 	call	813ce8 <__muldf3>
  8025d0:	1009883a 	mov	r4,r2
  8025d4:	180b883a 	mov	r5,r3
  8025d8:	2021883a 	mov	r16,r4
  8025dc:	2823883a 	mov	r17,r5
  8025e0:	e0bffe17 	ldw	r2,-8(fp)
  8025e4:	e0ffff17 	ldw	r3,-4(fp)
  8025e8:	1085883a 	add	r2,r2,r2
  8025ec:	1085883a 	add	r2,r2,r2
  8025f0:	10c5883a 	add	r2,r2,r3
  8025f4:	10800a04 	addi	r2,r2,40
  8025f8:	10800017 	ldw	r2,0(r2)
  8025fc:	10800717 	ldw	r2,28(r2)
  802600:	1009883a 	mov	r4,r2
  802604:	08136d00 	call	8136d0 <__extendsfdf2>
  802608:	100b883a 	mov	r5,r2
  80260c:	180d883a 	mov	r6,r3
  802610:	2809883a 	mov	r4,r5
  802614:	300b883a 	mov	r5,r6
  802618:	01896174 	movhi	r6,9605
  80261c:	31bd31c4 	addi	r6,r6,-2873
  802620:	01efedb4 	movhi	r7,49078
  802624:	39d40784 	addi	r7,r7,20510
  802628:	0813ce80 	call	813ce8 <__muldf3>
  80262c:	1009883a 	mov	r4,r2
  802630:	180b883a 	mov	r5,r3
  802634:	2005883a 	mov	r2,r4
  802638:	2807883a 	mov	r3,r5
  80263c:	8009883a 	mov	r4,r16
  802640:	880b883a 	mov	r5,r17
  802644:	100d883a 	mov	r6,r2
  802648:	180f883a 	mov	r7,r3
  80264c:	0813c740 	call	813c74 <__adddf3>
  802650:	1009883a 	mov	r4,r2
  802654:	180b883a 	mov	r5,r3
  802658:	2005883a 	mov	r2,r4
  80265c:	2807883a 	mov	r3,r5
  802660:	1009883a 	mov	r4,r2
  802664:	180b883a 	mov	r5,r3
  802668:	081450c0 	call	81450c <__truncdfsf2>
  80266c:	1029883a 	mov	r20,r2
  802670:	e0bffe17 	ldw	r2,-8(fp)
  802674:	e0ffff17 	ldw	r3,-4(fp)
  802678:	1085883a 	add	r2,r2,r2
  80267c:	1085883a 	add	r2,r2,r2
  802680:	10c5883a 	add	r2,r2,r3
  802684:	10800a04 	addi	r2,r2,40
  802688:	10800017 	ldw	r2,0(r2)
  80268c:	10800717 	ldw	r2,28(r2)
  802690:	1009883a 	mov	r4,r2
  802694:	08136d00 	call	8136d0 <__extendsfdf2>
  802698:	100b883a 	mov	r5,r2
  80269c:	180d883a 	mov	r6,r3
  8026a0:	2809883a 	mov	r4,r5
  8026a4:	300b883a 	mov	r5,r6
  8026a8:	01b4a274 	movhi	r6,53897
  8026ac:	31b39c04 	addi	r6,r6,-12688
  8026b0:	01cffc34 	movhi	r7,16368
  8026b4:	39f83784 	addi	r7,r7,-7970
  8026b8:	0813ce80 	call	813ce8 <__muldf3>
  8026bc:	1009883a 	mov	r4,r2
  8026c0:	180b883a 	mov	r5,r3
  8026c4:	2021883a 	mov	r16,r4
  8026c8:	2823883a 	mov	r17,r5
  8026cc:	e0bffe17 	ldw	r2,-8(fp)
  8026d0:	e0ffff17 	ldw	r3,-4(fp)
  8026d4:	1085883a 	add	r2,r2,r2
  8026d8:	1085883a 	add	r2,r2,r2
  8026dc:	10c5883a 	add	r2,r2,r3
  8026e0:	10800a04 	addi	r2,r2,40
  8026e4:	10800017 	ldw	r2,0(r2)
  8026e8:	10800617 	ldw	r2,24(r2)
  8026ec:	1009883a 	mov	r4,r2
  8026f0:	08136d00 	call	8136d0 <__extendsfdf2>
  8026f4:	100b883a 	mov	r5,r2
  8026f8:	180d883a 	mov	r6,r3
  8026fc:	2809883a 	mov	r4,r5
  802700:	300b883a 	mov	r5,r6
  802704:	01896174 	movhi	r6,9605
  802708:	31bd31c4 	addi	r6,r6,-2873
  80270c:	01cfedb4 	movhi	r7,16310
  802710:	39d40784 	addi	r7,r7,20510
  802714:	0813ce80 	call	813ce8 <__muldf3>
  802718:	1009883a 	mov	r4,r2
  80271c:	180b883a 	mov	r5,r3
  802720:	2005883a 	mov	r2,r4
  802724:	2807883a 	mov	r3,r5
  802728:	8009883a 	mov	r4,r16
  80272c:	880b883a 	mov	r5,r17
  802730:	100d883a 	mov	r6,r2
  802734:	180f883a 	mov	r7,r3
  802738:	0813c740 	call	813c74 <__adddf3>
  80273c:	1009883a 	mov	r4,r2
  802740:	180b883a 	mov	r5,r3
  802744:	2005883a 	mov	r2,r4
  802748:	2807883a 	mov	r3,r5
  80274c:	1009883a 	mov	r4,r2
  802750:	180b883a 	mov	r5,r3
  802754:	081450c0 	call	81450c <__truncdfsf2>
  802758:	9009883a 	mov	r4,r18
  80275c:	980b883a 	mov	r5,r19
  802760:	a00d883a 	mov	r6,r20
  802764:	100f883a 	mov	r7,r2
  802768:	080fc200 	call	80fc20 <updatePos>
	} //usleep(50000);
	updateBox3D(this);
}
void rotateBox3DX(struct Box3D* this) {
	int i;
	for(i = 0; i < 8; i++) {
  80276c:	e0bffe17 	ldw	r2,-8(fp)
  802770:	10800044 	addi	r2,r2,1
  802774:	e0bffe15 	stw	r2,-8(fp)
  802778:	e0bffe17 	ldw	r2,-8(fp)
  80277c:	10800210 	cmplti	r2,r2,8
  802780:	103f711e 	bne	r2,zero,802548 <rotateBox3DX+0x30>
		updatePos(this->nodes[i], this->nodes[i]->relative_x, this->nodes[i]->relative_y*0.9962-this->nodes[i]->relative_z*0.08716, this->nodes[i]->relative_z*0.9962+this->nodes[i]->relative_y*0.08716);
	} //usleep(50000);
	updateBox3D(this);
  802784:	e13fff17 	ldw	r4,-4(fp)
  802788:	08020d40 	call	8020d4 <updateBox3D>
}
  80278c:	e037883a 	mov	sp,fp
  802790:	dfc00617 	ldw	ra,24(sp)
  802794:	df000517 	ldw	fp,20(sp)
  802798:	dd000417 	ldw	r20,16(sp)
  80279c:	dcc00317 	ldw	r19,12(sp)
  8027a0:	dc800217 	ldw	r18,8(sp)
  8027a4:	dc400117 	ldw	r17,4(sp)
  8027a8:	dc000017 	ldw	r16,0(sp)
  8027ac:	dec00704 	addi	sp,sp,28
  8027b0:	f800283a 	ret

008027b4 <rotateBox3DZ>:
void rotateBox3DZ(struct Box3D* this) {
  8027b4:	defff804 	addi	sp,sp,-32
  8027b8:	dfc00715 	stw	ra,28(sp)
  8027bc:	df000615 	stw	fp,24(sp)
  8027c0:	dcc00515 	stw	r19,20(sp)
  8027c4:	dc800415 	stw	r18,16(sp)
  8027c8:	dc400315 	stw	r17,12(sp)
  8027cc:	dc000215 	stw	r16,8(sp)
  8027d0:	df000204 	addi	fp,sp,8
  8027d4:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 0; i < 8; i++) {
  8027d8:	e03ffe15 	stw	zero,-8(fp)
  8027dc:	00008c06 	br	802a10 <rotateBox3DZ+0x25c>
		updatePos(this->nodes[i], this->nodes[i]->relative_x*0.9962-this->nodes[i]->relative_y*0.08716, this->nodes[i]->relative_y*0.9962+this->nodes[i]->relative_x*0.08716, this->nodes[i]->relative_z);
  8027e0:	e0bffe17 	ldw	r2,-8(fp)
  8027e4:	e0ffff17 	ldw	r3,-4(fp)
  8027e8:	1085883a 	add	r2,r2,r2
  8027ec:	1085883a 	add	r2,r2,r2
  8027f0:	10c5883a 	add	r2,r2,r3
  8027f4:	10800a04 	addi	r2,r2,40
  8027f8:	14800017 	ldw	r18,0(r2)
  8027fc:	e0bffe17 	ldw	r2,-8(fp)
  802800:	e0ffff17 	ldw	r3,-4(fp)
  802804:	1085883a 	add	r2,r2,r2
  802808:	1085883a 	add	r2,r2,r2
  80280c:	10c5883a 	add	r2,r2,r3
  802810:	10800a04 	addi	r2,r2,40
  802814:	10800017 	ldw	r2,0(r2)
  802818:	10800517 	ldw	r2,20(r2)
  80281c:	1009883a 	mov	r4,r2
  802820:	08136d00 	call	8136d0 <__extendsfdf2>
  802824:	100b883a 	mov	r5,r2
  802828:	180d883a 	mov	r6,r3
  80282c:	2809883a 	mov	r4,r5
  802830:	300b883a 	mov	r5,r6
  802834:	01b4a274 	movhi	r6,53897
  802838:	31b39c04 	addi	r6,r6,-12688
  80283c:	01cffc34 	movhi	r7,16368
  802840:	39f83784 	addi	r7,r7,-7970
  802844:	0813ce80 	call	813ce8 <__muldf3>
  802848:	1009883a 	mov	r4,r2
  80284c:	180b883a 	mov	r5,r3
  802850:	2021883a 	mov	r16,r4
  802854:	2823883a 	mov	r17,r5
  802858:	e0bffe17 	ldw	r2,-8(fp)
  80285c:	e0ffff17 	ldw	r3,-4(fp)
  802860:	1085883a 	add	r2,r2,r2
  802864:	1085883a 	add	r2,r2,r2
  802868:	10c5883a 	add	r2,r2,r3
  80286c:	10800a04 	addi	r2,r2,40
  802870:	10800017 	ldw	r2,0(r2)
  802874:	10800617 	ldw	r2,24(r2)
  802878:	1009883a 	mov	r4,r2
  80287c:	08136d00 	call	8136d0 <__extendsfdf2>
  802880:	100b883a 	mov	r5,r2
  802884:	180d883a 	mov	r6,r3
  802888:	2809883a 	mov	r4,r5
  80288c:	300b883a 	mov	r5,r6
  802890:	01896174 	movhi	r6,9605
  802894:	31bd31c4 	addi	r6,r6,-2873
  802898:	01efedb4 	movhi	r7,49078
  80289c:	39d40784 	addi	r7,r7,20510
  8028a0:	0813ce80 	call	813ce8 <__muldf3>
  8028a4:	1009883a 	mov	r4,r2
  8028a8:	180b883a 	mov	r5,r3
  8028ac:	2005883a 	mov	r2,r4
  8028b0:	2807883a 	mov	r3,r5
  8028b4:	8009883a 	mov	r4,r16
  8028b8:	880b883a 	mov	r5,r17
  8028bc:	100d883a 	mov	r6,r2
  8028c0:	180f883a 	mov	r7,r3
  8028c4:	0813c740 	call	813c74 <__adddf3>
  8028c8:	1009883a 	mov	r4,r2
  8028cc:	180b883a 	mov	r5,r3
  8028d0:	2005883a 	mov	r2,r4
  8028d4:	2807883a 	mov	r3,r5
  8028d8:	1009883a 	mov	r4,r2
  8028dc:	180b883a 	mov	r5,r3
  8028e0:	081450c0 	call	81450c <__truncdfsf2>
  8028e4:	1027883a 	mov	r19,r2
  8028e8:	e0bffe17 	ldw	r2,-8(fp)
  8028ec:	e0ffff17 	ldw	r3,-4(fp)
  8028f0:	1085883a 	add	r2,r2,r2
  8028f4:	1085883a 	add	r2,r2,r2
  8028f8:	10c5883a 	add	r2,r2,r3
  8028fc:	10800a04 	addi	r2,r2,40
  802900:	10800017 	ldw	r2,0(r2)
  802904:	10800617 	ldw	r2,24(r2)
  802908:	1009883a 	mov	r4,r2
  80290c:	08136d00 	call	8136d0 <__extendsfdf2>
  802910:	100b883a 	mov	r5,r2
  802914:	180d883a 	mov	r6,r3
  802918:	2809883a 	mov	r4,r5
  80291c:	300b883a 	mov	r5,r6
  802920:	01b4a274 	movhi	r6,53897
  802924:	31b39c04 	addi	r6,r6,-12688
  802928:	01cffc34 	movhi	r7,16368
  80292c:	39f83784 	addi	r7,r7,-7970
  802930:	0813ce80 	call	813ce8 <__muldf3>
  802934:	1009883a 	mov	r4,r2
  802938:	180b883a 	mov	r5,r3
  80293c:	2021883a 	mov	r16,r4
  802940:	2823883a 	mov	r17,r5
  802944:	e0bffe17 	ldw	r2,-8(fp)
  802948:	e0ffff17 	ldw	r3,-4(fp)
  80294c:	1085883a 	add	r2,r2,r2
  802950:	1085883a 	add	r2,r2,r2
  802954:	10c5883a 	add	r2,r2,r3
  802958:	10800a04 	addi	r2,r2,40
  80295c:	10800017 	ldw	r2,0(r2)
  802960:	10800517 	ldw	r2,20(r2)
  802964:	1009883a 	mov	r4,r2
  802968:	08136d00 	call	8136d0 <__extendsfdf2>
  80296c:	100b883a 	mov	r5,r2
  802970:	180d883a 	mov	r6,r3
  802974:	2809883a 	mov	r4,r5
  802978:	300b883a 	mov	r5,r6
  80297c:	01896174 	movhi	r6,9605
  802980:	31bd31c4 	addi	r6,r6,-2873
  802984:	01cfedb4 	movhi	r7,16310
  802988:	39d40784 	addi	r7,r7,20510
  80298c:	0813ce80 	call	813ce8 <__muldf3>
  802990:	1009883a 	mov	r4,r2
  802994:	180b883a 	mov	r5,r3
  802998:	2005883a 	mov	r2,r4
  80299c:	2807883a 	mov	r3,r5
  8029a0:	8009883a 	mov	r4,r16
  8029a4:	880b883a 	mov	r5,r17
  8029a8:	100d883a 	mov	r6,r2
  8029ac:	180f883a 	mov	r7,r3
  8029b0:	0813c740 	call	813c74 <__adddf3>
  8029b4:	1009883a 	mov	r4,r2
  8029b8:	180b883a 	mov	r5,r3
  8029bc:	2005883a 	mov	r2,r4
  8029c0:	2807883a 	mov	r3,r5
  8029c4:	1009883a 	mov	r4,r2
  8029c8:	180b883a 	mov	r5,r3
  8029cc:	081450c0 	call	81450c <__truncdfsf2>
  8029d0:	100d883a 	mov	r6,r2
  8029d4:	e0bffe17 	ldw	r2,-8(fp)
  8029d8:	e0ffff17 	ldw	r3,-4(fp)
  8029dc:	1085883a 	add	r2,r2,r2
  8029e0:	1085883a 	add	r2,r2,r2
  8029e4:	10c5883a 	add	r2,r2,r3
  8029e8:	10800a04 	addi	r2,r2,40
  8029ec:	10800017 	ldw	r2,0(r2)
  8029f0:	10800717 	ldw	r2,28(r2)
  8029f4:	9009883a 	mov	r4,r18
  8029f8:	980b883a 	mov	r5,r19
  8029fc:	100f883a 	mov	r7,r2
  802a00:	080fc200 	call	80fc20 <updatePos>
	} //usleep(50000);
	updateBox3D(this);
}
void rotateBox3DZ(struct Box3D* this) {
	int i;
	for(i = 0; i < 8; i++) {
  802a04:	e0bffe17 	ldw	r2,-8(fp)
  802a08:	10800044 	addi	r2,r2,1
  802a0c:	e0bffe15 	stw	r2,-8(fp)
  802a10:	e0bffe17 	ldw	r2,-8(fp)
  802a14:	10800210 	cmplti	r2,r2,8
  802a18:	103f711e 	bne	r2,zero,8027e0 <rotateBox3DZ+0x2c>
		updatePos(this->nodes[i], this->nodes[i]->relative_x*0.9962-this->nodes[i]->relative_y*0.08716, this->nodes[i]->relative_y*0.9962+this->nodes[i]->relative_x*0.08716, this->nodes[i]->relative_z);
	} //usleep(50000);
	updateBox3D(this);
  802a1c:	e13fff17 	ldw	r4,-4(fp)
  802a20:	08020d40 	call	8020d4 <updateBox3D>
}
  802a24:	e037883a 	mov	sp,fp
  802a28:	dfc00517 	ldw	ra,20(sp)
  802a2c:	df000417 	ldw	fp,16(sp)
  802a30:	dcc00317 	ldw	r19,12(sp)
  802a34:	dc800217 	ldw	r18,8(sp)
  802a38:	dc400117 	ldw	r17,4(sp)
  802a3c:	dc000017 	ldw	r16,0(sp)
  802a40:	dec00604 	addi	sp,sp,24
  802a44:	f800283a 	ret

00802a48 <animateBox0>:

void animateBox0(struct Box3D* this) {
  802a48:	defffd04 	addi	sp,sp,-12
  802a4c:	dfc00215 	stw	ra,8(sp)
  802a50:	df000115 	stw	fp,4(sp)
  802a54:	df000104 	addi	fp,sp,4
  802a58:	e13fff15 	stw	r4,-4(fp)

	if(this->endAnimate) {
  802a5c:	e0bfff17 	ldw	r2,-4(fp)
  802a60:	10801e43 	ldbu	r2,121(r2)
  802a64:	10803fcc 	andi	r2,r2,255
  802a68:	1005003a 	cmpeq	r2,r2,zero
  802a6c:	1000431e 	bne	r2,zero,802b7c <animateBox0+0x134>
		this->startAnimate = false;
  802a70:	e0bfff17 	ldw	r2,-4(fp)
  802a74:	10001e05 	stb	zero,120(r2)
		this->vy += this->acc_y;
  802a78:	e0bfff17 	ldw	r2,-4(fp)
  802a7c:	10c00817 	ldw	r3,32(r2)
  802a80:	e0bfff17 	ldw	r2,-4(fp)
  802a84:	10800517 	ldw	r2,20(r2)
  802a88:	1809883a 	mov	r4,r3
  802a8c:	100b883a 	mov	r5,r2
  802a90:	081300c0 	call	81300c <__addsf3>
  802a94:	1007883a 	mov	r3,r2
  802a98:	e0bfff17 	ldw	r2,-4(fp)
  802a9c:	10c00815 	stw	r3,32(r2)
		this->vz += this->acc_z;
  802aa0:	e0bfff17 	ldw	r2,-4(fp)
  802aa4:	10c00917 	ldw	r3,36(r2)
  802aa8:	e0bfff17 	ldw	r2,-4(fp)
  802aac:	10800617 	ldw	r2,24(r2)
  802ab0:	1809883a 	mov	r4,r3
  802ab4:	100b883a 	mov	r5,r2
  802ab8:	081300c0 	call	81300c <__addsf3>
  802abc:	1007883a 	mov	r3,r2
  802ac0:	e0bfff17 	ldw	r2,-4(fp)
  802ac4:	10c00915 	stw	r3,36(r2)
	  	this->y+=this->vy;
  802ac8:	e0bfff17 	ldw	r2,-4(fp)
  802acc:	10c00117 	ldw	r3,4(r2)
  802ad0:	e0bfff17 	ldw	r2,-4(fp)
  802ad4:	10800817 	ldw	r2,32(r2)
  802ad8:	1809883a 	mov	r4,r3
  802adc:	100b883a 	mov	r5,r2
  802ae0:	081300c0 	call	81300c <__addsf3>
  802ae4:	1007883a 	mov	r3,r2
  802ae8:	e0bfff17 	ldw	r2,-4(fp)
  802aec:	10c00115 	stw	r3,4(r2)
	  	this->z+=this->vz;
  802af0:	e0bfff17 	ldw	r2,-4(fp)
  802af4:	10c00217 	ldw	r3,8(r2)
  802af8:	e0bfff17 	ldw	r2,-4(fp)
  802afc:	10800917 	ldw	r2,36(r2)
  802b00:	1809883a 	mov	r4,r3
  802b04:	100b883a 	mov	r5,r2
  802b08:	081300c0 	call	81300c <__addsf3>
  802b0c:	1007883a 	mov	r3,r2
  802b10:	e0bfff17 	ldw	r2,-4(fp)
  802b14:	10c00215 	stw	r3,8(r2)
	  	if(this->z > 2000)
  802b18:	e0bfff17 	ldw	r2,-4(fp)
  802b1c:	10800217 	ldw	r2,8(r2)
  802b20:	1009883a 	mov	r4,r2
  802b24:	01513eb4 	movhi	r5,17658
  802b28:	08133c40 	call	8133c4 <__gtsf2>
  802b2c:	10800048 	cmpgei	r2,r2,1
  802b30:	1000011e 	bne	r2,zero,802b38 <animateBox0+0xf0>
  802b34:	00000306 	br	802b44 <animateBox0+0xfc>
	  		info.start = 0;
  802b38:	008020f4 	movhi	r2,131
  802b3c:	109cb404 	addi	r2,r2,29392
  802b40:	10000615 	stw	zero,24(r2)
	  	if(this->y > 260)
  802b44:	e0bfff17 	ldw	r2,-4(fp)
  802b48:	10800117 	ldw	r2,4(r2)
  802b4c:	1009883a 	mov	r4,r2
  802b50:	0150e0b4 	movhi	r5,17282
  802b54:	08133c40 	call	8133c4 <__gtsf2>
  802b58:	10800048 	cmpgei	r2,r2,1
  802b5c:	1000011e 	bne	r2,zero,802b64 <animateBox0+0x11c>
  802b60:	00000306 	br	802b70 <animateBox0+0x128>
	  		this->vy = -1.5;
  802b64:	e0ffff17 	ldw	r3,-4(fp)
  802b68:	00aff034 	movhi	r2,49088
  802b6c:	18800815 	stw	r2,32(r3)
		rotateBox3DX(this);
  802b70:	e13fff17 	ldw	r4,-4(fp)
  802b74:	08025180 	call	802518 <rotateBox3DX>
  802b78:	00000706 	br	802b98 <animateBox0+0x150>
	} else if(this->startAnimate) {
  802b7c:	e0bfff17 	ldw	r2,-4(fp)
  802b80:	10801e03 	ldbu	r2,120(r2)
  802b84:	10803fcc 	andi	r2,r2,255
  802b88:	1005003a 	cmpeq	r2,r2,zero
  802b8c:	1000021e 	bne	r2,zero,802b98 <animateBox0+0x150>
	  	rotateBox3DZ(this);
  802b90:	e13fff17 	ldw	r4,-4(fp)
  802b94:	08027b40 	call	8027b4 <rotateBox3DZ>
	}
}
  802b98:	e037883a 	mov	sp,fp
  802b9c:	dfc00117 	ldw	ra,4(sp)
  802ba0:	df000017 	ldw	fp,0(sp)
  802ba4:	dec00204 	addi	sp,sp,8
  802ba8:	f800283a 	ret

00802bac <animateBox1>:
bool animateBox1(struct Box3D* this) {
  802bac:	defffc04 	addi	sp,sp,-16
  802bb0:	dfc00315 	stw	ra,12(sp)
  802bb4:	df000215 	stw	fp,8(sp)
  802bb8:	df000204 	addi	fp,sp,8
  802bbc:	e13ffe15 	stw	r4,-8(fp)
	if(this->endAnimate) {
  802bc0:	e0bffe17 	ldw	r2,-8(fp)
  802bc4:	10801e43 	ldbu	r2,121(r2)
  802bc8:	10803fcc 	andi	r2,r2,255
  802bcc:	1005003a 	cmpeq	r2,r2,zero
  802bd0:	1000441e 	bne	r2,zero,802ce4 <animateBox1+0x138>
			this->startAnimate = false;
  802bd4:	e0bffe17 	ldw	r2,-8(fp)
  802bd8:	10001e05 	stb	zero,120(r2)
			this->vy += this->acc_y;
  802bdc:	e0bffe17 	ldw	r2,-8(fp)
  802be0:	10c00817 	ldw	r3,32(r2)
  802be4:	e0bffe17 	ldw	r2,-8(fp)
  802be8:	10800517 	ldw	r2,20(r2)
  802bec:	1809883a 	mov	r4,r3
  802bf0:	100b883a 	mov	r5,r2
  802bf4:	081300c0 	call	81300c <__addsf3>
  802bf8:	1007883a 	mov	r3,r2
  802bfc:	e0bffe17 	ldw	r2,-8(fp)
  802c00:	10c00815 	stw	r3,32(r2)
			this->vz += this->acc_z;
  802c04:	e0bffe17 	ldw	r2,-8(fp)
  802c08:	10c00917 	ldw	r3,36(r2)
  802c0c:	e0bffe17 	ldw	r2,-8(fp)
  802c10:	10800617 	ldw	r2,24(r2)
  802c14:	1809883a 	mov	r4,r3
  802c18:	100b883a 	mov	r5,r2
  802c1c:	081300c0 	call	81300c <__addsf3>
  802c20:	1007883a 	mov	r3,r2
  802c24:	e0bffe17 	ldw	r2,-8(fp)
  802c28:	10c00915 	stw	r3,36(r2)
		  	this->y+=this->vy;
  802c2c:	e0bffe17 	ldw	r2,-8(fp)
  802c30:	10c00117 	ldw	r3,4(r2)
  802c34:	e0bffe17 	ldw	r2,-8(fp)
  802c38:	10800817 	ldw	r2,32(r2)
  802c3c:	1809883a 	mov	r4,r3
  802c40:	100b883a 	mov	r5,r2
  802c44:	081300c0 	call	81300c <__addsf3>
  802c48:	1007883a 	mov	r3,r2
  802c4c:	e0bffe17 	ldw	r2,-8(fp)
  802c50:	10c00115 	stw	r3,4(r2)
		  	this->z+=this->vz;
  802c54:	e0bffe17 	ldw	r2,-8(fp)
  802c58:	10c00217 	ldw	r3,8(r2)
  802c5c:	e0bffe17 	ldw	r2,-8(fp)
  802c60:	10800917 	ldw	r2,36(r2)
  802c64:	1809883a 	mov	r4,r3
  802c68:	100b883a 	mov	r5,r2
  802c6c:	081300c0 	call	81300c <__addsf3>
  802c70:	1007883a 	mov	r3,r2
  802c74:	e0bffe17 	ldw	r2,-8(fp)
  802c78:	10c00215 	stw	r3,8(r2)
		  	if(this->z > 1500) {
  802c7c:	e0bffe17 	ldw	r2,-8(fp)
  802c80:	10800217 	ldw	r2,8(r2)
  802c84:	1009883a 	mov	r4,r2
  802c88:	01512f34 	movhi	r5,17596
  802c8c:	29600004 	addi	r5,r5,-32768
  802c90:	08133c40 	call	8133c4 <__gtsf2>
  802c94:	10800048 	cmpgei	r2,r2,1
  802c98:	1000011e 	bne	r2,zero,802ca0 <animateBox1+0xf4>
  802c9c:	00000306 	br	802cac <animateBox1+0x100>
		  		return true;
  802ca0:	00800044 	movi	r2,1
  802ca4:	e0bfff15 	stw	r2,-4(fp)
  802ca8:	00001606 	br	802d04 <animateBox1+0x158>
		  	}
		  	if(this->y > 260)
  802cac:	e0bffe17 	ldw	r2,-8(fp)
  802cb0:	10800117 	ldw	r2,4(r2)
  802cb4:	1009883a 	mov	r4,r2
  802cb8:	0150e0b4 	movhi	r5,17282
  802cbc:	08133c40 	call	8133c4 <__gtsf2>
  802cc0:	10800048 	cmpgei	r2,r2,1
  802cc4:	1000011e 	bne	r2,zero,802ccc <animateBox1+0x120>
  802cc8:	00000306 	br	802cd8 <animateBox1+0x12c>
		  		this->vy = -1.5;
  802ccc:	e0fffe17 	ldw	r3,-8(fp)
  802cd0:	00aff034 	movhi	r2,49088
  802cd4:	18800815 	stw	r2,32(r3)
			rotateBox3DX(this);
  802cd8:	e13ffe17 	ldw	r4,-8(fp)
  802cdc:	08025180 	call	802518 <rotateBox3DX>
  802ce0:	00000706 	br	802d00 <animateBox1+0x154>
		} else if(this->startAnimate) {
  802ce4:	e0bffe17 	ldw	r2,-8(fp)
  802ce8:	10801e03 	ldbu	r2,120(r2)
  802cec:	10803fcc 	andi	r2,r2,255
  802cf0:	1005003a 	cmpeq	r2,r2,zero
  802cf4:	1000021e 	bne	r2,zero,802d00 <animateBox1+0x154>

	  	rotateBox3DY(this);
  802cf8:	e13ffe17 	ldw	r4,-8(fp)
  802cfc:	080227c0 	call	80227c <rotateBox3DY>
	}
  	return false;
  802d00:	e03fff15 	stw	zero,-4(fp)
  802d04:	e0bfff17 	ldw	r2,-4(fp)
}
  802d08:	e037883a 	mov	sp,fp
  802d0c:	dfc00117 	ldw	ra,4(sp)
  802d10:	df000017 	ldw	fp,0(sp)
  802d14:	dec00204 	addi	sp,sp,8
  802d18:	f800283a 	ret

00802d1c <animateBox2>:
bool animateBox2(struct Box3D* this) {
  802d1c:	defffc04 	addi	sp,sp,-16
  802d20:	dfc00315 	stw	ra,12(sp)
  802d24:	df000215 	stw	fp,8(sp)
  802d28:	df000204 	addi	fp,sp,8
  802d2c:	e13ffe15 	stw	r4,-8(fp)
	if(this->endAnimate) {
  802d30:	e0bffe17 	ldw	r2,-8(fp)
  802d34:	10801e43 	ldbu	r2,121(r2)
  802d38:	10803fcc 	andi	r2,r2,255
  802d3c:	1005003a 	cmpeq	r2,r2,zero
  802d40:	1000441e 	bne	r2,zero,802e54 <animateBox2+0x138>
			this->startAnimate = false;
  802d44:	e0bffe17 	ldw	r2,-8(fp)
  802d48:	10001e05 	stb	zero,120(r2)
			this->vy += this->acc_y;
  802d4c:	e0bffe17 	ldw	r2,-8(fp)
  802d50:	10c00817 	ldw	r3,32(r2)
  802d54:	e0bffe17 	ldw	r2,-8(fp)
  802d58:	10800517 	ldw	r2,20(r2)
  802d5c:	1809883a 	mov	r4,r3
  802d60:	100b883a 	mov	r5,r2
  802d64:	081300c0 	call	81300c <__addsf3>
  802d68:	1007883a 	mov	r3,r2
  802d6c:	e0bffe17 	ldw	r2,-8(fp)
  802d70:	10c00815 	stw	r3,32(r2)
			this->vz += this->acc_z;
  802d74:	e0bffe17 	ldw	r2,-8(fp)
  802d78:	10c00917 	ldw	r3,36(r2)
  802d7c:	e0bffe17 	ldw	r2,-8(fp)
  802d80:	10800617 	ldw	r2,24(r2)
  802d84:	1809883a 	mov	r4,r3
  802d88:	100b883a 	mov	r5,r2
  802d8c:	081300c0 	call	81300c <__addsf3>
  802d90:	1007883a 	mov	r3,r2
  802d94:	e0bffe17 	ldw	r2,-8(fp)
  802d98:	10c00915 	stw	r3,36(r2)
		  	this->y+=this->vy;
  802d9c:	e0bffe17 	ldw	r2,-8(fp)
  802da0:	10c00117 	ldw	r3,4(r2)
  802da4:	e0bffe17 	ldw	r2,-8(fp)
  802da8:	10800817 	ldw	r2,32(r2)
  802dac:	1809883a 	mov	r4,r3
  802db0:	100b883a 	mov	r5,r2
  802db4:	081300c0 	call	81300c <__addsf3>
  802db8:	1007883a 	mov	r3,r2
  802dbc:	e0bffe17 	ldw	r2,-8(fp)
  802dc0:	10c00115 	stw	r3,4(r2)
		  	this->z+=this->vz;
  802dc4:	e0bffe17 	ldw	r2,-8(fp)
  802dc8:	10c00217 	ldw	r3,8(r2)
  802dcc:	e0bffe17 	ldw	r2,-8(fp)
  802dd0:	10800917 	ldw	r2,36(r2)
  802dd4:	1809883a 	mov	r4,r3
  802dd8:	100b883a 	mov	r5,r2
  802ddc:	081300c0 	call	81300c <__addsf3>
  802de0:	1007883a 	mov	r3,r2
  802de4:	e0bffe17 	ldw	r2,-8(fp)
  802de8:	10c00215 	stw	r3,8(r2)
		  	if(this->z > 1500) {
  802dec:	e0bffe17 	ldw	r2,-8(fp)
  802df0:	10800217 	ldw	r2,8(r2)
  802df4:	1009883a 	mov	r4,r2
  802df8:	01512f34 	movhi	r5,17596
  802dfc:	29600004 	addi	r5,r5,-32768
  802e00:	08133c40 	call	8133c4 <__gtsf2>
  802e04:	10800048 	cmpgei	r2,r2,1
  802e08:	1000011e 	bne	r2,zero,802e10 <animateBox2+0xf4>
  802e0c:	00000306 	br	802e1c <animateBox2+0x100>
		  		return true;
  802e10:	00800044 	movi	r2,1
  802e14:	e0bfff15 	stw	r2,-4(fp)
  802e18:	00001606 	br	802e74 <animateBox2+0x158>
		  	}
		  	if(this->y > 260)
  802e1c:	e0bffe17 	ldw	r2,-8(fp)
  802e20:	10800117 	ldw	r2,4(r2)
  802e24:	1009883a 	mov	r4,r2
  802e28:	0150e0b4 	movhi	r5,17282
  802e2c:	08133c40 	call	8133c4 <__gtsf2>
  802e30:	10800048 	cmpgei	r2,r2,1
  802e34:	1000011e 	bne	r2,zero,802e3c <animateBox2+0x120>
  802e38:	00000306 	br	802e48 <animateBox2+0x12c>
		  		this->vy = -1.5;
  802e3c:	e0fffe17 	ldw	r3,-8(fp)
  802e40:	00aff034 	movhi	r2,49088
  802e44:	18800815 	stw	r2,32(r3)
			rotateBox3DX(this);
  802e48:	e13ffe17 	ldw	r4,-8(fp)
  802e4c:	08025180 	call	802518 <rotateBox3DX>
  802e50:	00000706 	br	802e70 <animateBox2+0x154>
		} else if(this->startAnimate) {
  802e54:	e0bffe17 	ldw	r2,-8(fp)
  802e58:	10801e03 	ldbu	r2,120(r2)
  802e5c:	10803fcc 	andi	r2,r2,255
  802e60:	1005003a 	cmpeq	r2,r2,zero
  802e64:	1000021e 	bne	r2,zero,802e70 <animateBox2+0x154>

	  	rotateBox3DX(this);
  802e68:	e13ffe17 	ldw	r4,-8(fp)
  802e6c:	08025180 	call	802518 <rotateBox3DX>
	} return false;
  802e70:	e03fff15 	stw	zero,-4(fp)
  802e74:	e0bfff17 	ldw	r2,-4(fp)
}
  802e78:	e037883a 	mov	sp,fp
  802e7c:	dfc00117 	ldw	ra,4(sp)
  802e80:	df000017 	ldw	fp,0(sp)
  802e84:	dec00204 	addi	sp,sp,8
  802e88:	f800283a 	ret

00802e8c <initBullet>:
#include "Bullet.h"

/*
 *  Constructor of Bullet object
 */
struct Bullet* initBullet(int x, int y, int size, float damage_, struct animation* a, struct BulletCollection* bc){
  802e8c:	defff804 	addi	sp,sp,-32
  802e90:	dfc00715 	stw	ra,28(sp)
  802e94:	df000615 	stw	fp,24(sp)
  802e98:	df000604 	addi	fp,sp,24
  802e9c:	e13ffc15 	stw	r4,-16(fp)
  802ea0:	e17ffd15 	stw	r5,-12(fp)
  802ea4:	e1bffe15 	stw	r6,-8(fp)
  802ea8:	e1ffff15 	stw	r7,-4(fp)
	struct Bullet* b;
	b = (struct Bullet*)malloc(sizeof(struct Bullet));
  802eac:	01001304 	movi	r4,76
  802eb0:	0814f580 	call	814f58 <malloc>
  802eb4:	e0bffb15 	stw	r2,-20(fp)
	b->super = initObject((int)x, (int)y, size, a, (void*)b);
  802eb8:	e0bffb17 	ldw	r2,-20(fp)
  802ebc:	d8800015 	stw	r2,0(sp)
  802ec0:	e13ffc17 	ldw	r4,-16(fp)
  802ec4:	e17ffd17 	ldw	r5,-12(fp)
  802ec8:	e1bffe17 	ldw	r6,-8(fp)
  802ecc:	e1c00217 	ldw	r7,8(fp)
  802ed0:	080fe780 	call	80fe78 <initObject>
  802ed4:	1007883a 	mov	r3,r2
  802ed8:	e0bffb17 	ldw	r2,-20(fp)
  802edc:	10c00015 	stw	r3,0(r2)
	b->super->collideRange = size;
  802ee0:	e0bffb17 	ldw	r2,-20(fp)
  802ee4:	10c00017 	ldw	r3,0(r2)
  802ee8:	e0bffe17 	ldw	r2,-8(fp)
  802eec:	18800815 	stw	r2,32(r3)
	b->acc_x = 0;
  802ef0:	e0bffb17 	ldw	r2,-20(fp)
  802ef4:	10000315 	stw	zero,12(r2)
	b->acc_y = 0;
  802ef8:	e0bffb17 	ldw	r2,-20(fp)
  802efc:	10000415 	stw	zero,16(r2)
	b->v_x = 0;
  802f00:	e0bffb17 	ldw	r2,-20(fp)
  802f04:	10000115 	stw	zero,4(r2)
	b->v_y = 0;
  802f08:	e0bffb17 	ldw	r2,-20(fp)
  802f0c:	10000215 	stw	zero,8(r2)
	b->damage = damage_;
  802f10:	e0fffb17 	ldw	r3,-20(fp)
  802f14:	e0bfff17 	ldw	r2,-4(fp)
  802f18:	18800515 	stw	r2,20(r3)
	b->next_x = x;
  802f1c:	e13ffc17 	ldw	r4,-16(fp)
  802f20:	08135a40 	call	8135a4 <__floatsisf>
  802f24:	1007883a 	mov	r3,r2
  802f28:	e0bffb17 	ldw	r2,-20(fp)
  802f2c:	10c00615 	stw	r3,24(r2)
	b->next_y = y;
  802f30:	e13ffd17 	ldw	r4,-12(fp)
  802f34:	08135a40 	call	8135a4 <__floatsisf>
  802f38:	1007883a 	mov	r3,r2
  802f3c:	e0bffb17 	ldw	r2,-20(fp)
  802f40:	10c00715 	stw	r3,28(r2)
	b->frame = -1;
  802f44:	e0fffb17 	ldw	r3,-20(fp)
  802f48:	00bfffc4 	movi	r2,-1
  802f4c:	18800f15 	stw	r2,60(r3)
	b->image_changed_flag = 0;
  802f50:	e0bffb17 	ldw	r2,-20(fp)
  802f54:	10001015 	stw	zero,64(r2)
	b->pBulCollection = bc;
  802f58:	e0fffb17 	ldw	r3,-20(fp)
  802f5c:	e0800317 	ldw	r2,12(fp)
  802f60:	18801115 	stw	r2,68(r3)
	b->super->class = bullet;
  802f64:	e0bffb17 	ldw	r2,-20(fp)
  802f68:	10c00017 	ldw	r3,0(r2)
  802f6c:	00800044 	movi	r2,1
  802f70:	18801115 	stw	r2,68(r3)

	return b;
  802f74:	e0bffb17 	ldw	r2,-20(fp)
}
  802f78:	e037883a 	mov	sp,fp
  802f7c:	dfc00117 	ldw	ra,4(sp)
  802f80:	df000017 	ldw	fp,0(sp)
  802f84:	dec00204 	addi	sp,sp,8
  802f88:	f800283a 	ret

00802f8c <setupBullet>:

void setupBullet(struct Bullet* this, struct animation* explode, void* action, void* collide) {
  802f8c:	defffa04 	addi	sp,sp,-24
  802f90:	dfc00515 	stw	ra,20(sp)
  802f94:	df000415 	stw	fp,16(sp)
  802f98:	df000404 	addi	fp,sp,16
  802f9c:	e13ffc15 	stw	r4,-16(fp)
  802fa0:	e17ffd15 	stw	r5,-12(fp)
  802fa4:	e1bffe15 	stw	r6,-8(fp)
  802fa8:	e1ffff15 	stw	r7,-4(fp)
	this->super->action = action;
  802fac:	e0bffc17 	ldw	r2,-16(fp)
  802fb0:	10c00017 	ldw	r3,0(r2)
  802fb4:	e0bffe17 	ldw	r2,-8(fp)
  802fb8:	18801b15 	stw	r2,108(r3)
	this->super->collide = collide;
  802fbc:	e0bffc17 	ldw	r2,-16(fp)
  802fc0:	10c00017 	ldw	r3,0(r2)
  802fc4:	e0bfff17 	ldw	r2,-4(fp)
  802fc8:	18801a15 	stw	r2,104(r3)
	addStats(this->super, explode);
  802fcc:	e0bffc17 	ldw	r2,-16(fp)
  802fd0:	11000017 	ldw	r4,0(r2)
  802fd4:	e17ffd17 	ldw	r5,-12(fp)
  802fd8:	08100f40 	call	8100f4 <addStats>
}
  802fdc:	e037883a 	mov	sp,fp
  802fe0:	dfc00117 	ldw	ra,4(sp)
  802fe4:	df000017 	ldw	fp,0(sp)
  802fe8:	dec00204 	addi	sp,sp,8
  802fec:	f800283a 	ret

00802ff0 <killBullet>:
void killBullet(void* b)
{
  802ff0:	defffe04 	addi	sp,sp,-8
  802ff4:	df000115 	stw	fp,4(sp)
  802ff8:	df000104 	addi	fp,sp,4
  802ffc:	e13fff15 	stw	r4,-4(fp)
	((struct Bullet*)b)->super->end_frame = ((struct Bullet*)b)->super->curr_frame + 5;
  803000:	e0bfff17 	ldw	r2,-4(fp)
  803004:	10c00017 	ldw	r3,0(r2)
  803008:	e0bfff17 	ldw	r2,-4(fp)
  80300c:	10800017 	ldw	r2,0(r2)
  803010:	10801617 	ldw	r2,88(r2)
  803014:	10800144 	addi	r2,r2,5
  803018:	18801315 	stw	r2,76(r3)
}
  80301c:	e037883a 	mov	sp,fp
  803020:	df000017 	ldw	fp,0(sp)
  803024:	dec00104 	addi	sp,sp,4
  803028:	f800283a 	ret

0080302c <resetBullet>:

void resetBullet(struct Bullet* this, int scale) {
  80302c:	defffc04 	addi	sp,sp,-16
  803030:	dfc00315 	stw	ra,12(sp)
  803034:	df000215 	stw	fp,8(sp)
  803038:	df000204 	addi	fp,sp,8
  80303c:	e13ffe15 	stw	r4,-8(fp)
  803040:	e17fff15 	stw	r5,-4(fp)
	this->v_y = this->v_x = 0;
  803044:	e0bffe17 	ldw	r2,-8(fp)
  803048:	10000115 	stw	zero,4(r2)
  80304c:	e0bffe17 	ldw	r2,-8(fp)
  803050:	10c00117 	ldw	r3,4(r2)
  803054:	e0bffe17 	ldw	r2,-8(fp)
  803058:	10c00215 	stw	r3,8(r2)
	this->frame = 0;
  80305c:	e0bffe17 	ldw	r2,-8(fp)
  803060:	10000f15 	stw	zero,60(r2)
	this->image_changed_flag = 0;
  803064:	e0bffe17 	ldw	r2,-8(fp)
  803068:	10001015 	stw	zero,64(r2)
	this->super->scale = scale;
  80306c:	e0bffe17 	ldw	r2,-8(fp)
  803070:	10c00017 	ldw	r3,0(r2)
  803074:	e0bfff17 	ldw	r2,-4(fp)
  803078:	18800215 	stw	r2,8(r3)
	this->super->collideRange = scale;
  80307c:	e0bffe17 	ldw	r2,-8(fp)
  803080:	10c00017 	ldw	r3,0(r2)
  803084:	e0bfff17 	ldw	r2,-4(fp)
  803088:	18800815 	stw	r2,32(r3)
	this->super->startAnimated = 1;
  80308c:	e0bffe17 	ldw	r2,-8(fp)
  803090:	10c00017 	ldw	r3,0(r2)
  803094:	00800044 	movi	r2,1
  803098:	18801415 	stw	r2,80(r3)
	setStats(this->super, 0);
  80309c:	e0bffe17 	ldw	r2,-8(fp)
  8030a0:	11000017 	ldw	r4,0(r2)
  8030a4:	000b883a 	mov	r5,zero
  8030a8:	08100ac0 	call	8100ac <setStats>
}
  8030ac:	e037883a 	mov	sp,fp
  8030b0:	dfc00117 	ldw	ra,4(sp)
  8030b4:	df000017 	ldw	fp,0(sp)
  8030b8:	dec00204 	addi	sp,sp,8
  8030bc:	f800283a 	ret

008030c0 <bulletAction>:
void bulletAction(void* self){
  8030c0:	defffd04 	addi	sp,sp,-12
  8030c4:	dfc00215 	stw	ra,8(sp)
  8030c8:	df000115 	stw	fp,4(sp)
  8030cc:	df000104 	addi	fp,sp,4
  8030d0:	e13fff15 	stw	r4,-4(fp)
	if (((struct Bullet*)((struct Object*)self)->subObject)->image_changed_flag == 1)
  8030d4:	e0bfff17 	ldw	r2,-4(fp)
  8030d8:	10801817 	ldw	r2,96(r2)
  8030dc:	10801017 	ldw	r2,64(r2)
  8030e0:	10800058 	cmpnei	r2,r2,1
  8030e4:	10002f1e 	bne	r2,zero,8031a4 <bulletAction+0xe4>
	{
		if (((struct Bullet*)((struct Object*)self)->subObject)->frame == 5)
  8030e8:	e0bfff17 	ldw	r2,-4(fp)
  8030ec:	10801817 	ldw	r2,96(r2)
  8030f0:	10800f17 	ldw	r2,60(r2)
  8030f4:	10800158 	cmpnei	r2,r2,5
  8030f8:	1000051e 	bne	r2,zero,803110 <bulletAction+0x50>
		{
			setXY_noBound((struct Object*)self, 400, 400);
  8030fc:	e13fff17 	ldw	r4,-4(fp)
  803100:	01406404 	movi	r5,400
  803104:	01806404 	movi	r6,400
  803108:	08102d00 	call	8102d0 <setXY_noBound>
  80310c:	00001e06 	br	803188 <bulletAction+0xc8>
		}
		else if (((struct Bullet*)((struct Object*)self)->subObject)->frame >= 20)
  803110:	e0bfff17 	ldw	r2,-4(fp)
  803114:	10801817 	ldw	r2,96(r2)
  803118:	10800f17 	ldw	r2,60(r2)
  80311c:	10800510 	cmplti	r2,r2,20
  803120:	1000191e 	bne	r2,zero,803188 <bulletAction+0xc8>
		{
			removeFromCollide((struct Collidable*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->collision_checker, (struct Object*)self);
  803124:	e0bfff17 	ldw	r2,-4(fp)
  803128:	10801817 	ldw	r2,96(r2)
  80312c:	10801117 	ldw	r2,68(r2)
  803130:	11003417 	ldw	r4,208(r2)
  803134:	e17fff17 	ldw	r5,-4(fp)
  803138:	08071200 	call	807120 <removeFromCollide>
			removeFromEnvOnly((struct Env*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->env, (struct Object*)self);
  80313c:	e0bfff17 	ldw	r2,-4(fp)
  803140:	10801817 	ldw	r2,96(r2)
  803144:	10801117 	ldw	r2,68(r2)
  803148:	11003317 	ldw	r4,204(r2)
  80314c:	e17fff17 	ldw	r5,-4(fp)
  803150:	0808c340 	call	808c34 <removeFromEnvOnly>
			resetBullet(((struct Bullet*)((struct Object*)self)->subObject), 1);
  803154:	e0bfff17 	ldw	r2,-4(fp)
  803158:	10801817 	ldw	r2,96(r2)
  80315c:	1009883a 	mov	r4,r2
  803160:	01400044 	movi	r5,1
  803164:	080302c0 	call	80302c <resetBullet>

			// reload bullet that has collided with boundary or alien
			reloadBullet(((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection, ((struct Bullet*)((struct Object*)self)->subObject), 49);
  803168:	e0bfff17 	ldw	r2,-4(fp)
  80316c:	10801817 	ldw	r2,96(r2)
  803170:	11001117 	ldw	r4,68(r2)
  803174:	e0bfff17 	ldw	r2,-4(fp)
  803178:	10801817 	ldw	r2,96(r2)
  80317c:	100b883a 	mov	r5,r2
  803180:	01800c44 	movi	r6,49
  803184:	0805eb00 	call	805eb0 <reloadBullet>
		}
		((struct Bullet*)((struct Object*)self)->subObject)->frame++;
  803188:	e0bfff17 	ldw	r2,-4(fp)
  80318c:	10801817 	ldw	r2,96(r2)
  803190:	1007883a 	mov	r3,r2
  803194:	18800f17 	ldw	r2,60(r3)
  803198:	10800044 	addi	r2,r2,1
  80319c:	18800f15 	stw	r2,60(r3)
  8031a0:	00000406 	br	8031b4 <bulletAction+0xf4>

	}

	else
	{
		shootEnemy((struct Bullet*)((struct Object*)self)->subObject);
  8031a4:	e0bfff17 	ldw	r2,-4(fp)
  8031a8:	10801817 	ldw	r2,96(r2)
  8031ac:	1009883a 	mov	r4,r2
  8031b0:	0803a3c0 	call	803a3c <shootEnemy>
	}
}
  8031b4:	e037883a 	mov	sp,fp
  8031b8:	dfc00117 	ldw	ra,4(sp)
  8031bc:	df000017 	ldw	fp,0(sp)
  8031c0:	dec00204 	addi	sp,sp,8
  8031c4:	f800283a 	ret

008031c8 <blackHoleAction>:

void blackHoleAction(void* self){
  8031c8:	defffd04 	addi	sp,sp,-12
  8031cc:	dfc00215 	stw	ra,8(sp)
  8031d0:	df000115 	stw	fp,4(sp)
  8031d4:	df000104 	addi	fp,sp,4
  8031d8:	e13fff15 	stw	r4,-4(fp)
	if (((struct Bullet*)((struct Object*)self)->subObject)->frame == 30) {
  8031dc:	e0bfff17 	ldw	r2,-4(fp)
  8031e0:	10801817 	ldw	r2,96(r2)
  8031e4:	10800f17 	ldw	r2,60(r2)
  8031e8:	10800798 	cmpnei	r2,r2,30
  8031ec:	1000051e 	bne	r2,zero,803204 <blackHoleAction+0x3c>
			setXY_noBound((struct Object*)self, 400, 400);
  8031f0:	e13fff17 	ldw	r4,-4(fp)
  8031f4:	01406404 	movi	r5,400
  8031f8:	01806404 	movi	r6,400
  8031fc:	08102d00 	call	8102d0 <setXY_noBound>
  803200:	00001e06 	br	80327c <blackHoleAction+0xb4>
	} else if(((struct Bullet*)((struct Object*)self)->subObject)->frame == 80) {
  803204:	e0bfff17 	ldw	r2,-4(fp)
  803208:	10801817 	ldw	r2,96(r2)
  80320c:	10800f17 	ldw	r2,60(r2)
  803210:	10801418 	cmpnei	r2,r2,80
  803214:	1000191e 	bne	r2,zero,80327c <blackHoleAction+0xb4>
		resetBullet(((struct Bullet*)((struct Object*)self)->subObject), 40);
  803218:	e0bfff17 	ldw	r2,-4(fp)
  80321c:	10801817 	ldw	r2,96(r2)
  803220:	1009883a 	mov	r4,r2
  803224:	01400a04 	movi	r5,40
  803228:	080302c0 	call	80302c <resetBullet>

		removeFromEnvOnly((struct Env*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->env, (struct Object*)self);
  80322c:	e0bfff17 	ldw	r2,-4(fp)
  803230:	10801817 	ldw	r2,96(r2)
  803234:	10801117 	ldw	r2,68(r2)
  803238:	11003317 	ldw	r4,204(r2)
  80323c:	e17fff17 	ldw	r5,-4(fp)
  803240:	0808c340 	call	808c34 <removeFromEnvOnly>
		removeFromCollide((struct Collidable*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->collision_checker, (struct Object*)self);
  803244:	e0bfff17 	ldw	r2,-4(fp)
  803248:	10801817 	ldw	r2,96(r2)
  80324c:	10801117 	ldw	r2,68(r2)
  803250:	11003417 	ldw	r4,208(r2)
  803254:	e17fff17 	ldw	r5,-4(fp)
  803258:	08071200 	call	807120 <removeFromCollide>

		reloadBullet(((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection, ((struct Bullet*)((struct Object*)self)->subObject), 49);
  80325c:	e0bfff17 	ldw	r2,-4(fp)
  803260:	10801817 	ldw	r2,96(r2)
  803264:	11001117 	ldw	r4,68(r2)
  803268:	e0bfff17 	ldw	r2,-4(fp)
  80326c:	10801817 	ldw	r2,96(r2)
  803270:	100b883a 	mov	r5,r2
  803274:	01800c44 	movi	r6,49
  803278:	0805eb00 	call	805eb0 <reloadBullet>
	}
	((struct Bullet*)((struct Object*)self)->subObject)->frame++;
  80327c:	e0bfff17 	ldw	r2,-4(fp)
  803280:	10801817 	ldw	r2,96(r2)
  803284:	1007883a 	mov	r3,r2
  803288:	18800f17 	ldw	r2,60(r3)
  80328c:	10800044 	addi	r2,r2,1
  803290:	18800f15 	stw	r2,60(r3)
}
  803294:	e037883a 	mov	sp,fp
  803298:	dfc00117 	ldw	ra,4(sp)
  80329c:	df000017 	ldw	fp,0(sp)
  8032a0:	dec00204 	addi	sp,sp,8
  8032a4:	f800283a 	ret

008032a8 <laserAction>:

void laserAction(void* self) {
  8032a8:	defff804 	addi	sp,sp,-32
  8032ac:	dfc00715 	stw	ra,28(sp)
  8032b0:	df000615 	stw	fp,24(sp)
  8032b4:	dc400515 	stw	r17,20(sp)
  8032b8:	dc000415 	stw	r16,16(sp)
  8032bc:	df000404 	addi	fp,sp,16
  8032c0:	e13fff15 	stw	r4,-4(fp)
	if (((struct Bullet*)((struct Object*)self)->subObject)->frame >= 4)
  8032c4:	e0bfff17 	ldw	r2,-4(fp)
  8032c8:	10801817 	ldw	r2,96(r2)
  8032cc:	10800f17 	ldw	r2,60(r2)
  8032d0:	10800110 	cmplti	r2,r2,4
  8032d4:	1000321e 	bne	r2,zero,8033a0 <laserAction+0xf8>
	{

		alt_up_pixel_buffer_dma_draw_line(pixel_buffer, ((struct Object*)self)->x, ((struct Object*)self)->y, ((struct Bullet*)((struct Object*)self)->subObject)->init_x, ((struct Bullet*)((struct Object*)self)->subObject)->init_y, 0x0000,swap);
  8032d8:	008020f4 	movhi	r2,131
  8032dc:	109c8a04 	addi	r2,r2,29224
  8032e0:	11000017 	ldw	r4,0(r2)
  8032e4:	e0bfff17 	ldw	r2,-4(fp)
  8032e8:	11400017 	ldw	r5,0(r2)
  8032ec:	e0bfff17 	ldw	r2,-4(fp)
  8032f0:	11800117 	ldw	r6,4(r2)
  8032f4:	e0bfff17 	ldw	r2,-4(fp)
  8032f8:	10801817 	ldw	r2,96(r2)
  8032fc:	11c00d17 	ldw	r7,52(r2)
  803300:	e0bfff17 	ldw	r2,-4(fp)
  803304:	10801817 	ldw	r2,96(r2)
  803308:	10c00e17 	ldw	r3,56(r2)
  80330c:	008020f4 	movhi	r2,131
  803310:	109c7d04 	addi	r2,r2,29172
  803314:	10800017 	ldw	r2,0(r2)
  803318:	d8c00015 	stw	r3,0(sp)
  80331c:	d8000115 	stw	zero,4(sp)
  803320:	d8800215 	stw	r2,8(sp)
  803324:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
		//usleep(1000);
		setXY_noBound((struct Object*)self, 400, 400);
  803328:	e13fff17 	ldw	r4,-4(fp)
  80332c:	01406404 	movi	r5,400
  803330:	01806404 	movi	r6,400
  803334:	08102d00 	call	8102d0 <setXY_noBound>
		removeFromEnvOnly((struct Env*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->env, (struct Object*)self);
  803338:	e0bfff17 	ldw	r2,-4(fp)
  80333c:	10801817 	ldw	r2,96(r2)
  803340:	10801117 	ldw	r2,68(r2)
  803344:	11003317 	ldw	r4,204(r2)
  803348:	e17fff17 	ldw	r5,-4(fp)
  80334c:	0808c340 	call	808c34 <removeFromEnvOnly>
		removeFromCollide((struct Collidable*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->collision_checker, (struct Object*)self);
  803350:	e0bfff17 	ldw	r2,-4(fp)
  803354:	10801817 	ldw	r2,96(r2)
  803358:	10801117 	ldw	r2,68(r2)
  80335c:	11003417 	ldw	r4,208(r2)
  803360:	e17fff17 	ldw	r5,-4(fp)
  803364:	08071200 	call	807120 <removeFromCollide>
		resetBullet(((struct Bullet*)((struct Object*)self)->subObject), 1);
  803368:	e0bfff17 	ldw	r2,-4(fp)
  80336c:	10801817 	ldw	r2,96(r2)
  803370:	1009883a 	mov	r4,r2
  803374:	01400044 	movi	r5,1
  803378:	080302c0 	call	80302c <resetBullet>
		// reload bullet that has collided with boundary or alien
		reloadBullet(((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection, ((struct Bullet*)((struct Object*)self)->subObject), 49);
  80337c:	e0bfff17 	ldw	r2,-4(fp)
  803380:	10801817 	ldw	r2,96(r2)
  803384:	11001117 	ldw	r4,68(r2)
  803388:	e0bfff17 	ldw	r2,-4(fp)
  80338c:	10801817 	ldw	r2,96(r2)
  803390:	100b883a 	mov	r5,r2
  803394:	01800c44 	movi	r6,49
  803398:	0805eb00 	call	805eb0 <reloadBullet>
  80339c:	00007106 	br	803564 <laserAction+0x2bc>
	} else {
		((struct Bullet*)((struct Object*)self)->subObject)->next_x = ((struct Object*)self)->x +((struct Bullet*)((struct Object*)self)->subObject)->v_x;
  8033a0:	e0bfff17 	ldw	r2,-4(fp)
  8033a4:	10801817 	ldw	r2,96(r2)
  8033a8:	1021883a 	mov	r16,r2
  8033ac:	e0bfff17 	ldw	r2,-4(fp)
  8033b0:	11000017 	ldw	r4,0(r2)
  8033b4:	08135a40 	call	8135a4 <__floatsisf>
  8033b8:	1007883a 	mov	r3,r2
  8033bc:	e0bfff17 	ldw	r2,-4(fp)
  8033c0:	10801817 	ldw	r2,96(r2)
  8033c4:	10800117 	ldw	r2,4(r2)
  8033c8:	1809883a 	mov	r4,r3
  8033cc:	100b883a 	mov	r5,r2
  8033d0:	081300c0 	call	81300c <__addsf3>
  8033d4:	80800615 	stw	r2,24(r16)
		((struct Bullet*)((struct Object*)self)->subObject)->next_y = ((struct Object*)self)->y+ ((struct Bullet*)((struct Object*)self)->subObject)->v_y;
  8033d8:	e0bfff17 	ldw	r2,-4(fp)
  8033dc:	10801817 	ldw	r2,96(r2)
  8033e0:	1021883a 	mov	r16,r2
  8033e4:	e0bfff17 	ldw	r2,-4(fp)
  8033e8:	11000117 	ldw	r4,4(r2)
  8033ec:	08135a40 	call	8135a4 <__floatsisf>
  8033f0:	1007883a 	mov	r3,r2
  8033f4:	e0bfff17 	ldw	r2,-4(fp)
  8033f8:	10801817 	ldw	r2,96(r2)
  8033fc:	10800217 	ldw	r2,8(r2)
  803400:	1809883a 	mov	r4,r3
  803404:	100b883a 	mov	r5,r2
  803408:	081300c0 	call	81300c <__addsf3>
  80340c:	80800715 	stw	r2,28(r16)
		if(((struct Bullet*)((struct Object*)self)->subObject)->next_x  > 245 ||
  803410:	e0bfff17 	ldw	r2,-4(fp)
  803414:	10801817 	ldw	r2,96(r2)
  803418:	10800617 	ldw	r2,24(r2)
  80341c:	1009883a 	mov	r4,r2
  803420:	0150dd74 	movhi	r5,17269
  803424:	08133c40 	call	8133c4 <__gtsf2>
  803428:	10800048 	cmpgei	r2,r2,1
  80342c:	1000191e 	bne	r2,zero,803494 <laserAction+0x1ec>
  803430:	e0bfff17 	ldw	r2,-4(fp)
  803434:	10801817 	ldw	r2,96(r2)
  803438:	10800717 	ldw	r2,28(r2)
  80343c:	1009883a 	mov	r4,r2
  803440:	0150daf4 	movhi	r5,17259
  803444:	081343c0 	call	81343c <__gesf2>
  803448:	1004403a 	cmpge	r2,r2,zero
  80344c:	1000111e 	bne	r2,zero,803494 <laserAction+0x1ec>
  803450:	e0bfff17 	ldw	r2,-4(fp)
  803454:	10801817 	ldw	r2,96(r2)
  803458:	10800617 	ldw	r2,24(r2)
  80345c:	1009883a 	mov	r4,r2
  803460:	01501034 	movhi	r5,16448
  803464:	081352c0 	call	81352c <__lesf2>
  803468:	10800050 	cmplti	r2,r2,1
  80346c:	1000091e 	bne	r2,zero,803494 <laserAction+0x1ec>
  803470:	e0bfff17 	ldw	r2,-4(fp)
  803474:	10801817 	ldw	r2,96(r2)
  803478:	10800717 	ldw	r2,28(r2)
  80347c:	1009883a 	mov	r4,r2
  803480:	01501034 	movhi	r5,16448
  803484:	081352c0 	call	81352c <__lesf2>
  803488:	10800050 	cmplti	r2,r2,1
  80348c:	1000011e 	bne	r2,zero,803494 <laserAction+0x1ec>
  803490:	00000e06 	br	8034cc <laserAction+0x224>
			((struct Bullet*)((struct Object*)self)->subObject)->next_y >= 235 ||
			((struct Bullet*)((struct Object*)self)->subObject)->next_x  <= 3 ||
			((struct Bullet*)((struct Object*)self)->subObject)->next_y <= 3) {
			((struct Bullet*)((struct Object*)self)->subObject)->v_x = ((struct Bullet*)((struct Object*)self)->subObject)->v_y = 0;
  803494:	e0bfff17 	ldw	r2,-4(fp)
  803498:	10801817 	ldw	r2,96(r2)
  80349c:	1007883a 	mov	r3,r2
  8034a0:	e0bfff17 	ldw	r2,-4(fp)
  8034a4:	10801817 	ldw	r2,96(r2)
  8034a8:	10000215 	stw	zero,8(r2)
  8034ac:	10800217 	ldw	r2,8(r2)
  8034b0:	18800115 	stw	r2,4(r3)
			((struct Bullet*)((struct Object*)self)->subObject)->frame = 4;
  8034b4:	e0bfff17 	ldw	r2,-4(fp)
  8034b8:	10801817 	ldw	r2,96(r2)
  8034bc:	1007883a 	mov	r3,r2
  8034c0:	00800104 	movi	r2,4
  8034c4:	18800f15 	stw	r2,60(r3)
		// reload bullet that has collided with boundary or alien
		reloadBullet(((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection, ((struct Bullet*)((struct Object*)self)->subObject), 49);
	} else {
		((struct Bullet*)((struct Object*)self)->subObject)->next_x = ((struct Object*)self)->x +((struct Bullet*)((struct Object*)self)->subObject)->v_x;
		((struct Bullet*)((struct Object*)self)->subObject)->next_y = ((struct Object*)self)->y+ ((struct Bullet*)((struct Object*)self)->subObject)->v_y;
		if(((struct Bullet*)((struct Object*)self)->subObject)->next_x  > 245 ||
  8034c8:	00002606 	br	803564 <laserAction+0x2bc>
			((struct Bullet*)((struct Object*)self)->subObject)->next_x  <= 3 ||
			((struct Bullet*)((struct Object*)self)->subObject)->next_y <= 3) {
			((struct Bullet*)((struct Object*)self)->subObject)->v_x = ((struct Bullet*)((struct Object*)self)->subObject)->v_y = 0;
			((struct Bullet*)((struct Object*)self)->subObject)->frame = 4;
		} else {
			setXY_noBound((struct Object*)self, (int)(((struct Bullet*)((struct Object*)self)->subObject)->next_x) , (int)(((struct Bullet*)((struct Object*)self)->subObject)->next_y));
  8034cc:	e47fff17 	ldw	r17,-4(fp)
  8034d0:	e0bfff17 	ldw	r2,-4(fp)
  8034d4:	10801817 	ldw	r2,96(r2)
  8034d8:	10800617 	ldw	r2,24(r2)
  8034dc:	1009883a 	mov	r4,r2
  8034e0:	081363c0 	call	81363c <__fixsfsi>
  8034e4:	1021883a 	mov	r16,r2
  8034e8:	e0bfff17 	ldw	r2,-4(fp)
  8034ec:	10801817 	ldw	r2,96(r2)
  8034f0:	10800717 	ldw	r2,28(r2)
  8034f4:	1009883a 	mov	r4,r2
  8034f8:	081363c0 	call	81363c <__fixsfsi>
  8034fc:	100d883a 	mov	r6,r2
  803500:	8809883a 	mov	r4,r17
  803504:	800b883a 	mov	r5,r16
  803508:	08102d00 	call	8102d0 <setXY_noBound>
			alt_up_pixel_buffer_dma_draw_line(pixel_buffer, ((struct Object*)self)->x, ((struct Object*)self)->y,((struct Object*)self)->prev_x, ((struct Object*)self)->prev_y, 0xFF11,0);
  80350c:	008020f4 	movhi	r2,131
  803510:	109c8a04 	addi	r2,r2,29224
  803514:	11000017 	ldw	r4,0(r2)
  803518:	e0bfff17 	ldw	r2,-4(fp)
  80351c:	11400017 	ldw	r5,0(r2)
  803520:	e0bfff17 	ldw	r2,-4(fp)
  803524:	11800117 	ldw	r6,4(r2)
  803528:	e0bfff17 	ldw	r2,-4(fp)
  80352c:	11c00317 	ldw	r7,12(r2)
  803530:	e0bfff17 	ldw	r2,-4(fp)
  803534:	10800417 	ldw	r2,16(r2)
  803538:	d8800015 	stw	r2,0(sp)
  80353c:	00bfc454 	movui	r2,65297
  803540:	d8800115 	stw	r2,4(sp)
  803544:	d8000215 	stw	zero,8(sp)
  803548:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
			((struct Bullet*)((struct Object*)self)->subObject)->frame++;
  80354c:	e0bfff17 	ldw	r2,-4(fp)
  803550:	10801817 	ldw	r2,96(r2)
  803554:	1007883a 	mov	r3,r2
  803558:	18800f17 	ldw	r2,60(r3)
  80355c:	10800044 	addi	r2,r2,1
  803560:	18800f15 	stw	r2,60(r3)
			//usleep(1000);
		}
	}
}
  803564:	e037883a 	mov	sp,fp
  803568:	dfc00317 	ldw	ra,12(sp)
  80356c:	df000217 	ldw	fp,8(sp)
  803570:	dc400117 	ldw	r17,4(sp)
  803574:	dc000017 	ldw	r16,0(sp)
  803578:	dec00404 	addi	sp,sp,16
  80357c:	f800283a 	ret

00803580 <fireAction>:

void fireAction(void* self) {
  803580:	defffd04 	addi	sp,sp,-12
  803584:	dfc00215 	stw	ra,8(sp)
  803588:	df000115 	stw	fp,4(sp)
  80358c:	df000104 	addi	fp,sp,4
  803590:	e13fff15 	stw	r4,-4(fp)
	if (((struct Object*)self)->scale > 4){
  803594:	e0bfff17 	ldw	r2,-4(fp)
  803598:	10800217 	ldw	r2,8(r2)
  80359c:	10800150 	cmplti	r2,r2,5
  8035a0:	10002f1e 	bne	r2,zero,803660 <fireAction+0xe0>
		if (((struct Bullet*)((struct Object*)self)->subObject)->frame == 40) {
  8035a4:	e0bfff17 	ldw	r2,-4(fp)
  8035a8:	10801817 	ldw	r2,96(r2)
  8035ac:	10800f17 	ldw	r2,60(r2)
  8035b0:	10800a18 	cmpnei	r2,r2,40
  8035b4:	1000051e 	bne	r2,zero,8035cc <fireAction+0x4c>
			setXY_noBound((struct Object*)self, 400, 400);
  8035b8:	e13fff17 	ldw	r4,-4(fp)
  8035bc:	01406404 	movi	r5,400
  8035c0:	01806404 	movi	r6,400
  8035c4:	08102d00 	call	8102d0 <setXY_noBound>
  8035c8:	00001e06 	br	803644 <fireAction+0xc4>
		} else if(((struct Bullet*)((struct Object*)self)->subObject)->frame == 80) {
  8035cc:	e0bfff17 	ldw	r2,-4(fp)
  8035d0:	10801817 	ldw	r2,96(r2)
  8035d4:	10800f17 	ldw	r2,60(r2)
  8035d8:	10801418 	cmpnei	r2,r2,80
  8035dc:	1000191e 	bne	r2,zero,803644 <fireAction+0xc4>
			resetBullet(((struct Bullet*)((struct Object*)self)->subObject), 40);
  8035e0:	e0bfff17 	ldw	r2,-4(fp)
  8035e4:	10801817 	ldw	r2,96(r2)
  8035e8:	1009883a 	mov	r4,r2
  8035ec:	01400a04 	movi	r5,40
  8035f0:	080302c0 	call	80302c <resetBullet>

			removeFromEnvOnly((struct Env*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->env, (struct Object*)self);
  8035f4:	e0bfff17 	ldw	r2,-4(fp)
  8035f8:	10801817 	ldw	r2,96(r2)
  8035fc:	10801117 	ldw	r2,68(r2)
  803600:	11003317 	ldw	r4,204(r2)
  803604:	e17fff17 	ldw	r5,-4(fp)
  803608:	0808c340 	call	808c34 <removeFromEnvOnly>
			removeFromCollide((struct Collidable*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->collision_checker, (struct Object*)self);
  80360c:	e0bfff17 	ldw	r2,-4(fp)
  803610:	10801817 	ldw	r2,96(r2)
  803614:	10801117 	ldw	r2,68(r2)
  803618:	11003417 	ldw	r4,208(r2)
  80361c:	e17fff17 	ldw	r5,-4(fp)
  803620:	08071200 	call	807120 <removeFromCollide>

			reloadBullet(((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection, ((struct Bullet*)((struct Object*)self)->subObject), 49);
  803624:	e0bfff17 	ldw	r2,-4(fp)
  803628:	10801817 	ldw	r2,96(r2)
  80362c:	11001117 	ldw	r4,68(r2)
  803630:	e0bfff17 	ldw	r2,-4(fp)
  803634:	10801817 	ldw	r2,96(r2)
  803638:	100b883a 	mov	r5,r2
  80363c:	01800c44 	movi	r6,49
  803640:	0805eb00 	call	805eb0 <reloadBullet>
		}
		((struct Bullet*)((struct Object*)self)->subObject)->frame++;
  803644:	e0bfff17 	ldw	r2,-4(fp)
  803648:	10801817 	ldw	r2,96(r2)
  80364c:	1007883a 	mov	r3,r2
  803650:	18800f17 	ldw	r2,60(r3)
  803654:	10800044 	addi	r2,r2,1
  803658:	18800f15 	stw	r2,60(r3)
  80365c:	00003206 	br	803728 <fireAction+0x1a8>
	} else {

		if (((struct Bullet*)((struct Object*)self)->subObject)->image_changed_flag == 1)
  803660:	e0bfff17 	ldw	r2,-4(fp)
  803664:	10801817 	ldw	r2,96(r2)
  803668:	10801017 	ldw	r2,64(r2)
  80366c:	10800058 	cmpnei	r2,r2,1
  803670:	1000291e 	bne	r2,zero,803718 <fireAction+0x198>
		{
			setXY_noBound((struct Object*)self, 400, 400);
  803674:	e13fff17 	ldw	r4,-4(fp)
  803678:	01406404 	movi	r5,400
  80367c:	01806404 	movi	r6,400
  803680:	08102d00 	call	8102d0 <setXY_noBound>
			if (((struct Bullet*)((struct Object*)self)->subObject)->frame == 20)
  803684:	e0bfff17 	ldw	r2,-4(fp)
  803688:	10801817 	ldw	r2,96(r2)
  80368c:	10800f17 	ldw	r2,60(r2)
  803690:	10800518 	cmpnei	r2,r2,20
  803694:	1000191e 	bne	r2,zero,8036fc <fireAction+0x17c>
			{
				removeFromCollide((struct Collidable*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->collision_checker, (struct Object*)self);
  803698:	e0bfff17 	ldw	r2,-4(fp)
  80369c:	10801817 	ldw	r2,96(r2)
  8036a0:	10801117 	ldw	r2,68(r2)
  8036a4:	11003417 	ldw	r4,208(r2)
  8036a8:	e17fff17 	ldw	r5,-4(fp)
  8036ac:	08071200 	call	807120 <removeFromCollide>
				removeFromEnvOnly((struct Env*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->env, (struct Object*)self);
  8036b0:	e0bfff17 	ldw	r2,-4(fp)
  8036b4:	10801817 	ldw	r2,96(r2)
  8036b8:	10801117 	ldw	r2,68(r2)
  8036bc:	11003317 	ldw	r4,204(r2)
  8036c0:	e17fff17 	ldw	r5,-4(fp)
  8036c4:	0808c340 	call	808c34 <removeFromEnvOnly>
				resetBullet(((struct Bullet*)((struct Object*)self)->subObject), 40);
  8036c8:	e0bfff17 	ldw	r2,-4(fp)
  8036cc:	10801817 	ldw	r2,96(r2)
  8036d0:	1009883a 	mov	r4,r2
  8036d4:	01400a04 	movi	r5,40
  8036d8:	080302c0 	call	80302c <resetBullet>

				// reload bullet that has collided with boundary or alien
				reloadBullet(((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection, ((struct Bullet*)((struct Object*)self)->subObject), 49);
  8036dc:	e0bfff17 	ldw	r2,-4(fp)
  8036e0:	10801817 	ldw	r2,96(r2)
  8036e4:	11001117 	ldw	r4,68(r2)
  8036e8:	e0bfff17 	ldw	r2,-4(fp)
  8036ec:	10801817 	ldw	r2,96(r2)
  8036f0:	100b883a 	mov	r5,r2
  8036f4:	01800c44 	movi	r6,49
  8036f8:	0805eb00 	call	805eb0 <reloadBullet>
			}
			((struct Bullet*)((struct Object*)self)->subObject)->frame++;
  8036fc:	e0bfff17 	ldw	r2,-4(fp)
  803700:	10801817 	ldw	r2,96(r2)
  803704:	1007883a 	mov	r3,r2
  803708:	18800f17 	ldw	r2,60(r3)
  80370c:	10800044 	addi	r2,r2,1
  803710:	18800f15 	stw	r2,60(r3)
  803714:	00000406 	br	803728 <fireAction+0x1a8>
		} else {
			shootEnemy((struct Bullet*)((struct Object*)self)->subObject);
  803718:	e0bfff17 	ldw	r2,-4(fp)
  80371c:	10801817 	ldw	r2,96(r2)
  803720:	1009883a 	mov	r4,r2
  803724:	0803a3c0 	call	803a3c <shootEnemy>
		}
	}
}
  803728:	e037883a 	mov	sp,fp
  80372c:	dfc00117 	ldw	ra,4(sp)
  803730:	df000017 	ldw	fp,0(sp)
  803734:	dec00204 	addi	sp,sp,8
  803738:	f800283a 	ret

0080373c <freezeAction>:

void freezeAction(void* self){
  80373c:	defffd04 	addi	sp,sp,-12
  803740:	dfc00215 	stw	ra,8(sp)
  803744:	df000115 	stw	fp,4(sp)
  803748:	df000104 	addi	fp,sp,4
  80374c:	e13fff15 	stw	r4,-4(fp)
	// for big bullet, remove after 30 frames
	if (((struct Object*)self)->scale > 4) {
  803750:	e0bfff17 	ldw	r2,-4(fp)
  803754:	10800217 	ldw	r2,8(r2)
  803758:	10800150 	cmplti	r2,r2,5
  80375c:	10002f1e 	bne	r2,zero,80381c <freezeAction+0xe0>
		if (((struct Bullet*)((struct Object*)self)->subObject)->frame == 30) {
  803760:	e0bfff17 	ldw	r2,-4(fp)
  803764:	10801817 	ldw	r2,96(r2)
  803768:	10800f17 	ldw	r2,60(r2)
  80376c:	10800798 	cmpnei	r2,r2,30
  803770:	1000051e 	bne	r2,zero,803788 <freezeAction+0x4c>
			setXY_noBound((struct Object*)self, 400, 400);
  803774:	e13fff17 	ldw	r4,-4(fp)
  803778:	01406404 	movi	r5,400
  80377c:	01806404 	movi	r6,400
  803780:	08102d00 	call	8102d0 <setXY_noBound>
  803784:	00001e06 	br	803800 <freezeAction+0xc4>
		} else if(((struct Bullet*)((struct Object*)self)->subObject)->frame == 80) {
  803788:	e0bfff17 	ldw	r2,-4(fp)
  80378c:	10801817 	ldw	r2,96(r2)
  803790:	10800f17 	ldw	r2,60(r2)
  803794:	10801418 	cmpnei	r2,r2,80
  803798:	1000191e 	bne	r2,zero,803800 <freezeAction+0xc4>
			resetBullet(((struct Bullet*)((struct Object*)self)->subObject), 40);
  80379c:	e0bfff17 	ldw	r2,-4(fp)
  8037a0:	10801817 	ldw	r2,96(r2)
  8037a4:	1009883a 	mov	r4,r2
  8037a8:	01400a04 	movi	r5,40
  8037ac:	080302c0 	call	80302c <resetBullet>

			removeFromEnvOnly((struct Env*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->env, (struct Object*)self);
  8037b0:	e0bfff17 	ldw	r2,-4(fp)
  8037b4:	10801817 	ldw	r2,96(r2)
  8037b8:	10801117 	ldw	r2,68(r2)
  8037bc:	11003317 	ldw	r4,204(r2)
  8037c0:	e17fff17 	ldw	r5,-4(fp)
  8037c4:	0808c340 	call	808c34 <removeFromEnvOnly>
			removeFromCollide((struct Collidable*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->collision_checker, (struct Object*)self);
  8037c8:	e0bfff17 	ldw	r2,-4(fp)
  8037cc:	10801817 	ldw	r2,96(r2)
  8037d0:	10801117 	ldw	r2,68(r2)
  8037d4:	11003417 	ldw	r4,208(r2)
  8037d8:	e17fff17 	ldw	r5,-4(fp)
  8037dc:	08071200 	call	807120 <removeFromCollide>

			reloadBullet(((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection, ((struct Bullet*)((struct Object*)self)->subObject), 49);
  8037e0:	e0bfff17 	ldw	r2,-4(fp)
  8037e4:	10801817 	ldw	r2,96(r2)
  8037e8:	11001117 	ldw	r4,68(r2)
  8037ec:	e0bfff17 	ldw	r2,-4(fp)
  8037f0:	10801817 	ldw	r2,96(r2)
  8037f4:	100b883a 	mov	r5,r2
  8037f8:	01800c44 	movi	r6,49
  8037fc:	0805eb00 	call	805eb0 <reloadBullet>
		}
			((struct Bullet*)((struct Object*)self)->subObject)->frame++;
  803800:	e0bfff17 	ldw	r2,-4(fp)
  803804:	10801817 	ldw	r2,96(r2)
  803808:	1007883a 	mov	r3,r2
  80380c:	18800f17 	ldw	r2,60(r3)
  803810:	10800044 	addi	r2,r2,1
  803814:	18800f15 	stw	r2,60(r3)
  803818:	00003706 	br	8038f8 <freezeAction+0x1bc>

	// small bullet, remove after 15 frames
	} else {
		if (((struct Bullet*)((struct Object*)self)->subObject)->image_changed_flag == 1)
  80381c:	e0bfff17 	ldw	r2,-4(fp)
  803820:	10801817 	ldw	r2,96(r2)
  803824:	10801017 	ldw	r2,64(r2)
  803828:	10800058 	cmpnei	r2,r2,1
  80382c:	10002e1e 	bne	r2,zero,8038e8 <freezeAction+0x1ac>
		{
			if (((struct Bullet*)((struct Object*)self)->subObject)->frame == 15)
  803830:	e0bfff17 	ldw	r2,-4(fp)
  803834:	10801817 	ldw	r2,96(r2)
  803838:	10800f17 	ldw	r2,60(r2)
  80383c:	108003d8 	cmpnei	r2,r2,15
  803840:	1000041e 	bne	r2,zero,803854 <freezeAction+0x118>
				setXY_noBound((struct Object*)self, 400, 400);
  803844:	e13fff17 	ldw	r4,-4(fp)
  803848:	01406404 	movi	r5,400
  80384c:	01806404 	movi	r6,400
  803850:	08102d00 	call	8102d0 <setXY_noBound>
			if (((struct Bullet*)((struct Object*)self)->subObject)->frame == 20)
  803854:	e0bfff17 	ldw	r2,-4(fp)
  803858:	10801817 	ldw	r2,96(r2)
  80385c:	10800f17 	ldw	r2,60(r2)
  803860:	10800518 	cmpnei	r2,r2,20
  803864:	1000191e 	bne	r2,zero,8038cc <freezeAction+0x190>
			{
				removeFromCollide((struct Collidable*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->collision_checker, (struct Object*)self);
  803868:	e0bfff17 	ldw	r2,-4(fp)
  80386c:	10801817 	ldw	r2,96(r2)
  803870:	10801117 	ldw	r2,68(r2)
  803874:	11003417 	ldw	r4,208(r2)
  803878:	e17fff17 	ldw	r5,-4(fp)
  80387c:	08071200 	call	807120 <removeFromCollide>
				removeFromEnvOnly((struct Env*)((struct BulletCollection*)((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection)->env, (struct Object*)self);
  803880:	e0bfff17 	ldw	r2,-4(fp)
  803884:	10801817 	ldw	r2,96(r2)
  803888:	10801117 	ldw	r2,68(r2)
  80388c:	11003317 	ldw	r4,204(r2)
  803890:	e17fff17 	ldw	r5,-4(fp)
  803894:	0808c340 	call	808c34 <removeFromEnvOnly>
				resetBullet(((struct Bullet*)((struct Object*)self)->subObject), 40);
  803898:	e0bfff17 	ldw	r2,-4(fp)
  80389c:	10801817 	ldw	r2,96(r2)
  8038a0:	1009883a 	mov	r4,r2
  8038a4:	01400a04 	movi	r5,40
  8038a8:	080302c0 	call	80302c <resetBullet>

				// reload bullet that has collided with boundary or alien
				reloadBullet(((struct Bullet*)((struct Object*)self)->subObject)->pBulCollection, ((struct Bullet*)((struct Object*)self)->subObject), 49);
  8038ac:	e0bfff17 	ldw	r2,-4(fp)
  8038b0:	10801817 	ldw	r2,96(r2)
  8038b4:	11001117 	ldw	r4,68(r2)
  8038b8:	e0bfff17 	ldw	r2,-4(fp)
  8038bc:	10801817 	ldw	r2,96(r2)
  8038c0:	100b883a 	mov	r5,r2
  8038c4:	01800c44 	movi	r6,49
  8038c8:	0805eb00 	call	805eb0 <reloadBullet>
			}
			((struct Bullet*)((struct Object*)self)->subObject)->frame++;
  8038cc:	e0bfff17 	ldw	r2,-4(fp)
  8038d0:	10801817 	ldw	r2,96(r2)
  8038d4:	1007883a 	mov	r3,r2
  8038d8:	18800f17 	ldw	r2,60(r3)
  8038dc:	10800044 	addi	r2,r2,1
  8038e0:	18800f15 	stw	r2,60(r3)
  8038e4:	00000406 	br	8038f8 <freezeAction+0x1bc>
		} else {
			shootEnemy((struct Bullet*)((struct Object*)self)->subObject);
  8038e8:	e0bfff17 	ldw	r2,-4(fp)
  8038ec:	10801817 	ldw	r2,96(r2)
  8038f0:	1009883a 	mov	r4,r2
  8038f4:	0803a3c0 	call	803a3c <shootEnemy>
		}
	}
}
  8038f8:	e037883a 	mov	sp,fp
  8038fc:	dfc00117 	ldw	ra,4(sp)
  803900:	df000017 	ldw	fp,0(sp)
  803904:	dec00204 	addi	sp,sp,8
  803908:	f800283a 	ret

0080390c <setBulletInitPosition>:

void setBulletInitPosition(int x, int y, struct Bullet* bul)
{
  80390c:	defffb04 	addi	sp,sp,-20
  803910:	dfc00415 	stw	ra,16(sp)
  803914:	df000315 	stw	fp,12(sp)
  803918:	df000304 	addi	fp,sp,12
  80391c:	e13ffd15 	stw	r4,-12(fp)
  803920:	e17ffe15 	stw	r5,-8(fp)
  803924:	e1bfff15 	stw	r6,-4(fp)
	bul->init_x = x;
  803928:	e0ffff17 	ldw	r3,-4(fp)
  80392c:	e0bffd17 	ldw	r2,-12(fp)
  803930:	18800d15 	stw	r2,52(r3)
	bul->init_y = y;
  803934:	e0ffff17 	ldw	r3,-4(fp)
  803938:	e0bffe17 	ldw	r2,-8(fp)
  80393c:	18800e15 	stw	r2,56(r3)
	bul->next_x = x;
  803940:	e13ffd17 	ldw	r4,-12(fp)
  803944:	08135a40 	call	8135a4 <__floatsisf>
  803948:	1007883a 	mov	r3,r2
  80394c:	e0bfff17 	ldw	r2,-4(fp)
  803950:	10c00615 	stw	r3,24(r2)
	bul->next_y = y;
  803954:	e13ffe17 	ldw	r4,-8(fp)
  803958:	08135a40 	call	8135a4 <__floatsisf>
  80395c:	1007883a 	mov	r3,r2
  803960:	e0bfff17 	ldw	r2,-4(fp)
  803964:	10c00715 	stw	r3,28(r2)

	bul->super->prev_x = x;
  803968:	e0bfff17 	ldw	r2,-4(fp)
  80396c:	10c00017 	ldw	r3,0(r2)
  803970:	e0bffd17 	ldw	r2,-12(fp)
  803974:	18800315 	stw	r2,12(r3)
	bul->super->prev_y = y;
  803978:	e0bfff17 	ldw	r2,-4(fp)
  80397c:	10c00017 	ldw	r3,0(r2)
  803980:	e0bffe17 	ldw	r2,-8(fp)
  803984:	18800415 	stw	r2,16(r3)
	bul->super->animate_prev_x = x;
  803988:	e0bfff17 	ldw	r2,-4(fp)
  80398c:	10c00017 	ldw	r3,0(r2)
  803990:	e0bffd17 	ldw	r2,-12(fp)
  803994:	18800915 	stw	r2,36(r3)
	bul->super->animate_prev_y = y;
  803998:	e0bfff17 	ldw	r2,-4(fp)
  80399c:	10c00017 	ldw	r3,0(r2)
  8039a0:	e0bffe17 	ldw	r2,-8(fp)
  8039a4:	18800a15 	stw	r2,40(r3)
	if(bul->super->scale > 2)
  8039a8:	e0bfff17 	ldw	r2,-4(fp)
  8039ac:	10800017 	ldw	r2,0(r2)
  8039b0:	10800217 	ldw	r2,8(r2)
  8039b4:	108000d0 	cmplti	r2,r2,3
  8039b8:	1000161e 	bne	r2,zero,803a14 <setBulletInitPosition+0x108>
		setXY(bul->super, x-bul->super->scale/2, y-bul->super->scale/2);
  8039bc:	e0bfff17 	ldw	r2,-4(fp)
  8039c0:	11000017 	ldw	r4,0(r2)
  8039c4:	e0bfff17 	ldw	r2,-4(fp)
  8039c8:	10800017 	ldw	r2,0(r2)
  8039cc:	10c00217 	ldw	r3,8(r2)
  8039d0:	1804d7fa 	srli	r2,r3,31
  8039d4:	10c5883a 	add	r2,r2,r3
  8039d8:	1005d07a 	srai	r2,r2,1
  8039dc:	1007883a 	mov	r3,r2
  8039e0:	e0bffd17 	ldw	r2,-12(fp)
  8039e4:	10cbc83a 	sub	r5,r2,r3
  8039e8:	e0bfff17 	ldw	r2,-4(fp)
  8039ec:	10800017 	ldw	r2,0(r2)
  8039f0:	10c00217 	ldw	r3,8(r2)
  8039f4:	1804d7fa 	srli	r2,r3,31
  8039f8:	10c5883a 	add	r2,r2,r3
  8039fc:	1005d07a 	srai	r2,r2,1
  803a00:	1007883a 	mov	r3,r2
  803a04:	e0bffe17 	ldw	r2,-8(fp)
  803a08:	10cdc83a 	sub	r6,r2,r3
  803a0c:	081016c0 	call	81016c <setXY>
  803a10:	00000506 	br	803a28 <setBulletInitPosition+0x11c>
	else
		setXY(bul->super, x, y);
  803a14:	e0bfff17 	ldw	r2,-4(fp)
  803a18:	11000017 	ldw	r4,0(r2)
  803a1c:	e17ffd17 	ldw	r5,-12(fp)
  803a20:	e1bffe17 	ldw	r6,-8(fp)
  803a24:	081016c0 	call	81016c <setXY>
}
  803a28:	e037883a 	mov	sp,fp
  803a2c:	dfc00117 	ldw	ra,4(sp)
  803a30:	df000017 	ldw	fp,0(sp)
  803a34:	dec00204 	addi	sp,sp,8
  803a38:	f800283a 	ret

00803a3c <shootEnemy>:

void shootEnemy(struct Bullet* self)
{
  803a3c:	defffb04 	addi	sp,sp,-20
  803a40:	dfc00415 	stw	ra,16(sp)
  803a44:	df000315 	stw	fp,12(sp)
  803a48:	dc400215 	stw	r17,8(sp)
  803a4c:	dc000115 	stw	r16,4(sp)
  803a50:	df000104 	addi	fp,sp,4
  803a54:	e13fff15 	stw	r4,-4(fp)

		self->v_x = ((self->acc_x)/50.0) + self->v_x;
  803a58:	e0bfff17 	ldw	r2,-4(fp)
  803a5c:	10800317 	ldw	r2,12(r2)
  803a60:	1009883a 	mov	r4,r2
  803a64:	08136d00 	call	8136d0 <__extendsfdf2>
  803a68:	100b883a 	mov	r5,r2
  803a6c:	180d883a 	mov	r6,r3
  803a70:	2809883a 	mov	r4,r5
  803a74:	300b883a 	mov	r5,r6
  803a78:	000d883a 	mov	r6,zero
  803a7c:	01d01274 	movhi	r7,16457
  803a80:	08140ac0 	call	8140ac <__divdf3>
  803a84:	1009883a 	mov	r4,r2
  803a88:	180b883a 	mov	r5,r3
  803a8c:	2021883a 	mov	r16,r4
  803a90:	2823883a 	mov	r17,r5
  803a94:	e0bfff17 	ldw	r2,-4(fp)
  803a98:	10800117 	ldw	r2,4(r2)
  803a9c:	1009883a 	mov	r4,r2
  803aa0:	08136d00 	call	8136d0 <__extendsfdf2>
  803aa4:	100f883a 	mov	r7,r2
  803aa8:	1811883a 	mov	r8,r3
  803aac:	8009883a 	mov	r4,r16
  803ab0:	880b883a 	mov	r5,r17
  803ab4:	380d883a 	mov	r6,r7
  803ab8:	400f883a 	mov	r7,r8
  803abc:	0813c740 	call	813c74 <__adddf3>
  803ac0:	1009883a 	mov	r4,r2
  803ac4:	180b883a 	mov	r5,r3
  803ac8:	2005883a 	mov	r2,r4
  803acc:	2807883a 	mov	r3,r5
  803ad0:	1009883a 	mov	r4,r2
  803ad4:	180b883a 	mov	r5,r3
  803ad8:	081450c0 	call	81450c <__truncdfsf2>
  803adc:	1007883a 	mov	r3,r2
  803ae0:	e0bfff17 	ldw	r2,-4(fp)
  803ae4:	10c00115 	stw	r3,4(r2)
		self->v_y = ((self->acc_y)/50.0) + self->v_y;
  803ae8:	e0bfff17 	ldw	r2,-4(fp)
  803aec:	10800417 	ldw	r2,16(r2)
  803af0:	1009883a 	mov	r4,r2
  803af4:	08136d00 	call	8136d0 <__extendsfdf2>
  803af8:	100b883a 	mov	r5,r2
  803afc:	180d883a 	mov	r6,r3
  803b00:	2809883a 	mov	r4,r5
  803b04:	300b883a 	mov	r5,r6
  803b08:	000d883a 	mov	r6,zero
  803b0c:	01d01274 	movhi	r7,16457
  803b10:	08140ac0 	call	8140ac <__divdf3>
  803b14:	1009883a 	mov	r4,r2
  803b18:	180b883a 	mov	r5,r3
  803b1c:	2021883a 	mov	r16,r4
  803b20:	2823883a 	mov	r17,r5
  803b24:	e0bfff17 	ldw	r2,-4(fp)
  803b28:	10800217 	ldw	r2,8(r2)
  803b2c:	1009883a 	mov	r4,r2
  803b30:	08136d00 	call	8136d0 <__extendsfdf2>
  803b34:	100f883a 	mov	r7,r2
  803b38:	1811883a 	mov	r8,r3
  803b3c:	8009883a 	mov	r4,r16
  803b40:	880b883a 	mov	r5,r17
  803b44:	380d883a 	mov	r6,r7
  803b48:	400f883a 	mov	r7,r8
  803b4c:	0813c740 	call	813c74 <__adddf3>
  803b50:	1009883a 	mov	r4,r2
  803b54:	180b883a 	mov	r5,r3
  803b58:	2005883a 	mov	r2,r4
  803b5c:	2807883a 	mov	r3,r5
  803b60:	1009883a 	mov	r4,r2
  803b64:	180b883a 	mov	r5,r3
  803b68:	081450c0 	call	81450c <__truncdfsf2>
  803b6c:	1007883a 	mov	r3,r2
  803b70:	e0bfff17 	ldw	r2,-4(fp)
  803b74:	10c00215 	stw	r3,8(r2)

		self->next_x = self->next_x + ((self->v_x));
  803b78:	e0bfff17 	ldw	r2,-4(fp)
  803b7c:	10c00617 	ldw	r3,24(r2)
  803b80:	e0bfff17 	ldw	r2,-4(fp)
  803b84:	10800117 	ldw	r2,4(r2)
  803b88:	1809883a 	mov	r4,r3
  803b8c:	100b883a 	mov	r5,r2
  803b90:	081300c0 	call	81300c <__addsf3>
  803b94:	1007883a 	mov	r3,r2
  803b98:	e0bfff17 	ldw	r2,-4(fp)
  803b9c:	10c00615 	stw	r3,24(r2)
		self->next_y = self->next_y + ((self->v_y));
  803ba0:	e0bfff17 	ldw	r2,-4(fp)
  803ba4:	10c00717 	ldw	r3,28(r2)
  803ba8:	e0bfff17 	ldw	r2,-4(fp)
  803bac:	10800217 	ldw	r2,8(r2)
  803bb0:	1809883a 	mov	r4,r3
  803bb4:	100b883a 	mov	r5,r2
  803bb8:	081300c0 	call	81300c <__addsf3>
  803bbc:	1007883a 	mov	r3,r2
  803bc0:	e0bfff17 	ldw	r2,-4(fp)
  803bc4:	10c00715 	stw	r3,28(r2)

		if(self->next_x > 245 || self->next_y >= 240 || self->next_x <= 0 || self->next_y <= 0) {
  803bc8:	e0bfff17 	ldw	r2,-4(fp)
  803bcc:	10800617 	ldw	r2,24(r2)
  803bd0:	1009883a 	mov	r4,r2
  803bd4:	0150dd74 	movhi	r5,17269
  803bd8:	08133c40 	call	8133c4 <__gtsf2>
  803bdc:	10800048 	cmpgei	r2,r2,1
  803be0:	1000161e 	bne	r2,zero,803c3c <shootEnemy+0x200>
  803be4:	e0bfff17 	ldw	r2,-4(fp)
  803be8:	10800717 	ldw	r2,28(r2)
  803bec:	1009883a 	mov	r4,r2
  803bf0:	0150dc34 	movhi	r5,17264
  803bf4:	081343c0 	call	81343c <__gesf2>
  803bf8:	1004403a 	cmpge	r2,r2,zero
  803bfc:	10000f1e 	bne	r2,zero,803c3c <shootEnemy+0x200>
  803c00:	e0bfff17 	ldw	r2,-4(fp)
  803c04:	10800617 	ldw	r2,24(r2)
  803c08:	1009883a 	mov	r4,r2
  803c0c:	000b883a 	mov	r5,zero
  803c10:	081352c0 	call	81352c <__lesf2>
  803c14:	10800050 	cmplti	r2,r2,1
  803c18:	1000081e 	bne	r2,zero,803c3c <shootEnemy+0x200>
  803c1c:	e0bfff17 	ldw	r2,-4(fp)
  803c20:	10800717 	ldw	r2,28(r2)
  803c24:	1009883a 	mov	r4,r2
  803c28:	000b883a 	mov	r5,zero
  803c2c:	081352c0 	call	81352c <__lesf2>
  803c30:	10800050 	cmplti	r2,r2,1
  803c34:	1000011e 	bne	r2,zero,803c3c <shootEnemy+0x200>
  803c38:	00001306 	br	803c88 <shootEnemy+0x24c>
			self->image_changed_flag = 1;
  803c3c:	e0ffff17 	ldw	r3,-4(fp)
  803c40:	00800044 	movi	r2,1
  803c44:	18801015 	stw	r2,64(r3)
			self->v_x = self->v_y = 0;
  803c48:	e0bfff17 	ldw	r2,-4(fp)
  803c4c:	10000215 	stw	zero,8(r2)
  803c50:	e0bfff17 	ldw	r2,-4(fp)
  803c54:	10c00217 	ldw	r3,8(r2)
  803c58:	e0bfff17 	ldw	r2,-4(fp)
  803c5c:	10c00115 	stw	r3,4(r2)
			self->next_x = self->next_y = 400;
  803c60:	e0ffff17 	ldw	r3,-4(fp)
  803c64:	0090f234 	movhi	r2,17352
  803c68:	18800715 	stw	r2,28(r3)
  803c6c:	e0bfff17 	ldw	r2,-4(fp)
  803c70:	10c00717 	ldw	r3,28(r2)
  803c74:	e0bfff17 	ldw	r2,-4(fp)
  803c78:	10c00615 	stw	r3,24(r2)
			self->frame = 20;
  803c7c:	e0ffff17 	ldw	r3,-4(fp)
  803c80:	00800504 	movi	r2,20
  803c84:	18800f15 	stw	r2,60(r3)
		}
		setXY_noBound(self->super, (int)(self->next_x), (int)(self->next_y));
  803c88:	e0bfff17 	ldw	r2,-4(fp)
  803c8c:	14400017 	ldw	r17,0(r2)
  803c90:	e0bfff17 	ldw	r2,-4(fp)
  803c94:	10800617 	ldw	r2,24(r2)
  803c98:	1009883a 	mov	r4,r2
  803c9c:	081363c0 	call	81363c <__fixsfsi>
  803ca0:	1021883a 	mov	r16,r2
  803ca4:	e0bfff17 	ldw	r2,-4(fp)
  803ca8:	10800717 	ldw	r2,28(r2)
  803cac:	1009883a 	mov	r4,r2
  803cb0:	081363c0 	call	81363c <__fixsfsi>
  803cb4:	100d883a 	mov	r6,r2
  803cb8:	8809883a 	mov	r4,r17
  803cbc:	800b883a 	mov	r5,r16
  803cc0:	08102d00 	call	8102d0 <setXY_noBound>
}
  803cc4:	e037883a 	mov	sp,fp
  803cc8:	dfc00317 	ldw	ra,12(sp)
  803ccc:	df000217 	ldw	fp,8(sp)
  803cd0:	dc400117 	ldw	r17,4(sp)
  803cd4:	dc000017 	ldw	r16,0(sp)
  803cd8:	dec00404 	addi	sp,sp,16
  803cdc:	f800283a 	ret

00803ce0 <bulletCollide>:

void bulletCollide(void* self, void* obj, struct Collidable* col)
{
  803ce0:	defff904 	addi	sp,sp,-28
  803ce4:	dfc00615 	stw	ra,24(sp)
  803ce8:	df000515 	stw	fp,20(sp)
  803cec:	df000504 	addi	fp,sp,20
  803cf0:	e13ffd15 	stw	r4,-12(fp)
  803cf4:	e17ffe15 	stw	r5,-8(fp)
  803cf8:	e1bfff15 	stw	r6,-4(fp)
	lock = 1;
  803cfc:	00c020f4 	movhi	r3,131
  803d00:	18dc7b04 	addi	r3,r3,29164
  803d04:	00800044 	movi	r2,1
  803d08:	18800015 	stw	r2,0(r3)

	if (((struct Object*)obj)->class == 2 && ((struct Bullet*)((struct Object*)self)->subObject)->image_changed_flag == 0 )
  803d0c:	e0bffe17 	ldw	r2,-8(fp)
  803d10:	10801117 	ldw	r2,68(r2)
  803d14:	10800098 	cmpnei	r2,r2,2
  803d18:	10002e1e 	bne	r2,zero,803dd4 <bulletCollide+0xf4>
  803d1c:	e0bffd17 	ldw	r2,-12(fp)
  803d20:	10801817 	ldw	r2,96(r2)
  803d24:	10801017 	ldw	r2,64(r2)
  803d28:	1004c03a 	cmpne	r2,r2,zero
  803d2c:	1000291e 	bne	r2,zero,803dd4 <bulletCollide+0xf4>
	{
		((struct Object*)self)->isShowing = 0; //ensure animation is not drawing this bullet until stats is changed
  803d30:	e0bffd17 	ldw	r2,-12(fp)
  803d34:	10001515 	stw	zero,84(r2)
		((struct Object*)self)->scale = 10;
  803d38:	e0fffd17 	ldw	r3,-12(fp)
  803d3c:	00800284 	movi	r2,10
  803d40:	18800215 	stw	r2,8(r3)
		setStats((struct Object*)self, 1);
  803d44:	e13ffd17 	ldw	r4,-12(fp)
  803d48:	01400044 	movi	r5,1
  803d4c:	08100ac0 	call	8100ac <setStats>
		((struct Bullet*)((struct Object*)self)->subObject)->image_changed_flag = 1;
  803d50:	e0bffd17 	ldw	r2,-12(fp)
  803d54:	10801817 	ldw	r2,96(r2)
  803d58:	1007883a 	mov	r3,r2
  803d5c:	00800044 	movi	r2,1
  803d60:	18801015 	stw	r2,64(r3)
		//clean the bullet picture before explode
		drawBox(((struct Object*)self)->animate_prev_x, ((struct Object*)self)->animate_prev_y, ((struct Object*)self)->animate_prev_x+1, ((struct Object*)self)->animate_prev_y+1, 0, NULL);
  803d64:	e0bffd17 	ldw	r2,-12(fp)
  803d68:	11000917 	ldw	r4,36(r2)
  803d6c:	e0bffd17 	ldw	r2,-12(fp)
  803d70:	11400a17 	ldw	r5,40(r2)
  803d74:	e0bffd17 	ldw	r2,-12(fp)
  803d78:	10800917 	ldw	r2,36(r2)
  803d7c:	11800044 	addi	r6,r2,1
  803d80:	e0bffd17 	ldw	r2,-12(fp)
  803d84:	10800a17 	ldw	r2,40(r2)
  803d88:	11c00044 	addi	r7,r2,1
  803d8c:	d8000015 	stw	zero,0(sp)
  803d90:	d8000115 	stw	zero,4(sp)
  803d94:	08122300 	call	812230 <drawBox>
		//make sure the bullet stop moving before explode
		((struct Bullet*)((struct Object*)self)->subObject)->v_x = 0;
  803d98:	e0bffd17 	ldw	r2,-12(fp)
  803d9c:	10801817 	ldw	r2,96(r2)
  803da0:	10000115 	stw	zero,4(r2)
		((struct Bullet*)((struct Object*)self)->subObject)->v_y = 0;
  803da4:	e0bffd17 	ldw	r2,-12(fp)
  803da8:	10801817 	ldw	r2,96(r2)
  803dac:	10000215 	stw	zero,8(r2)
		((struct Bullet*)((struct Object*)self)->subObject)->acc_x = 0;
  803db0:	e0bffd17 	ldw	r2,-12(fp)
  803db4:	10801817 	ldw	r2,96(r2)
  803db8:	10000315 	stw	zero,12(r2)
		((struct Bullet*)((struct Object*)self)->subObject)->acc_y = 0;
  803dbc:	e0bffd17 	ldw	r2,-12(fp)
  803dc0:	10801817 	ldw	r2,96(r2)
  803dc4:	10000415 	stw	zero,16(r2)
		((struct Object*)self)->isShowing = 1; //release for animation
  803dc8:	e0fffd17 	ldw	r3,-12(fp)
  803dcc:	00800044 	movi	r2,1
  803dd0:	18801515 	stw	r2,84(r3)

	} lock = 0;
  803dd4:	008020f4 	movhi	r2,131
  803dd8:	109c7b04 	addi	r2,r2,29164
  803ddc:	10000015 	stw	zero,0(r2)
}
  803de0:	e037883a 	mov	sp,fp
  803de4:	dfc00117 	ldw	ra,4(sp)
  803de8:	df000017 	ldw	fp,0(sp)
  803dec:	dec00204 	addi	sp,sp,8
  803df0:	f800283a 	ret

00803df4 <blackHoleCollide>:

void blackHoleCollide(void* self, void* obj, struct Collidable* col){
  803df4:	defff904 	addi	sp,sp,-28
  803df8:	dfc00615 	stw	ra,24(sp)
  803dfc:	df000515 	stw	fp,20(sp)
  803e00:	df000504 	addi	fp,sp,20
  803e04:	e13ffd15 	stw	r4,-12(fp)
  803e08:	e17ffe15 	stw	r5,-8(fp)
  803e0c:	e1bfff15 	stw	r6,-4(fp)
	lock = 1;
  803e10:	00c020f4 	movhi	r3,131
  803e14:	18dc7b04 	addi	r3,r3,29164
  803e18:	00800044 	movi	r2,1
  803e1c:	18800015 	stw	r2,0(r3)
	if (((struct Object*)obj)->class == alien){
  803e20:	e0bffe17 	ldw	r2,-8(fp)
  803e24:	10801117 	ldw	r2,68(r2)
  803e28:	10800098 	cmpnei	r2,r2,2
  803e2c:	10004c1e 	bne	r2,zero,803f60 <blackHoleCollide+0x16c>
		if (((struct Bullet*)((struct Object*)self)->subObject)->image_changed_flag == 0){
  803e30:	e0bffd17 	ldw	r2,-12(fp)
  803e34:	10801817 	ldw	r2,96(r2)
  803e38:	10801017 	ldw	r2,64(r2)
  803e3c:	1004c03a 	cmpne	r2,r2,zero
  803e40:	1000331e 	bne	r2,zero,803f10 <blackHoleCollide+0x11c>
			// if tower position is greater than (30, 30), move alien back by 30 pixels.
			// Otherwise, send enemy back to 0,0
			if (((struct Object*)self)->x <= 30 && ((struct Object*)self)->y <= 30){
  803e44:	e0bffd17 	ldw	r2,-12(fp)
  803e48:	10800017 	ldw	r2,0(r2)
  803e4c:	108007c8 	cmpgei	r2,r2,31
  803e50:	1000161e 	bne	r2,zero,803eac <blackHoleCollide+0xb8>
  803e54:	e0bffd17 	ldw	r2,-12(fp)
  803e58:	10800117 	ldw	r2,4(r2)
  803e5c:	108007c8 	cmpgei	r2,r2,31
  803e60:	1000121e 	bne	r2,zero,803eac <blackHoleCollide+0xb8>
				setXY((struct Object*)obj, 0, 0);
  803e64:	e13ffe17 	ldw	r4,-8(fp)
  803e68:	000b883a 	mov	r5,zero
  803e6c:	000d883a 	mov	r6,zero
  803e70:	081016c0 	call	81016c <setXY>
				drawBox(((struct Object*)self)->animate_prev_x, ((struct Object*)self)->animate_prev_y, ((struct Object*)self)->animate_prev_x+1, ((struct Object*)self)->animate_prev_y+1, 0, NULL);
  803e74:	e0bffd17 	ldw	r2,-12(fp)
  803e78:	11000917 	ldw	r4,36(r2)
  803e7c:	e0bffd17 	ldw	r2,-12(fp)
  803e80:	11400a17 	ldw	r5,40(r2)
  803e84:	e0bffd17 	ldw	r2,-12(fp)
  803e88:	10800917 	ldw	r2,36(r2)
  803e8c:	11800044 	addi	r6,r2,1
  803e90:	e0bffd17 	ldw	r2,-12(fp)
  803e94:	10800a17 	ldw	r2,40(r2)
  803e98:	11c00044 	addi	r7,r2,1
  803e9c:	d8000015 	stw	zero,0(sp)
  803ea0:	d8000115 	stw	zero,4(sp)
  803ea4:	08122300 	call	812230 <drawBox>
	lock = 1;
	if (((struct Object*)obj)->class == alien){
		if (((struct Bullet*)((struct Object*)self)->subObject)->image_changed_flag == 0){
			// if tower position is greater than (30, 30), move alien back by 30 pixels.
			// Otherwise, send enemy back to 0,0
			if (((struct Object*)self)->x <= 30 && ((struct Object*)self)->y <= 30){
  803ea8:	00001506 	br	803f00 <blackHoleCollide+0x10c>
				setXY((struct Object*)obj, 0, 0);
				drawBox(((struct Object*)self)->animate_prev_x, ((struct Object*)self)->animate_prev_y, ((struct Object*)self)->animate_prev_x+1, ((struct Object*)self)->animate_prev_y+1, 0, NULL);
			}
			else{
				setXY((struct Object*)obj, ((struct Object*)obj)->x - 30, ((struct Object*)obj)->y - 30);
  803eac:	e13ffe17 	ldw	r4,-8(fp)
  803eb0:	e0bffe17 	ldw	r2,-8(fp)
  803eb4:	10800017 	ldw	r2,0(r2)
  803eb8:	117ff884 	addi	r5,r2,-30
  803ebc:	e0bffe17 	ldw	r2,-8(fp)
  803ec0:	10800117 	ldw	r2,4(r2)
  803ec4:	11bff884 	addi	r6,r2,-30
  803ec8:	081016c0 	call	81016c <setXY>
				drawBox(((struct Object*)self)->animate_prev_x, ((struct Object*)self)->animate_prev_y, ((struct Object*)self)->animate_prev_x+1, ((struct Object*)self)->animate_prev_y+1, 0, NULL);
  803ecc:	e0bffd17 	ldw	r2,-12(fp)
  803ed0:	11000917 	ldw	r4,36(r2)
  803ed4:	e0bffd17 	ldw	r2,-12(fp)
  803ed8:	11400a17 	ldw	r5,40(r2)
  803edc:	e0bffd17 	ldw	r2,-12(fp)
  803ee0:	10800917 	ldw	r2,36(r2)
  803ee4:	11800044 	addi	r6,r2,1
  803ee8:	e0bffd17 	ldw	r2,-12(fp)
  803eec:	10800a17 	ldw	r2,40(r2)
  803ef0:	11c00044 	addi	r7,r2,1
  803ef4:	d8000015 	stw	zero,0(sp)
  803ef8:	d8000115 	stw	zero,4(sp)
  803efc:	08122300 	call	812230 <drawBox>
			}
			((struct Bullet*)((struct Object*)self)->subObject)->image_changed_flag = 0;
  803f00:	e0bffd17 	ldw	r2,-12(fp)
  803f04:	10801817 	ldw	r2,96(r2)
  803f08:	10001015 	stw	zero,64(r2)
  803f0c:	00001406 	br	803f60 <blackHoleCollide+0x16c>
		} else {
			setXY((struct Object*)obj, 0, 0);
  803f10:	e13ffe17 	ldw	r4,-8(fp)
  803f14:	000b883a 	mov	r5,zero
  803f18:	000d883a 	mov	r6,zero
  803f1c:	081016c0 	call	81016c <setXY>
			drawBox(((struct Object*)self)->animate_prev_x, ((struct Object*)self)->animate_prev_y, ((struct Object*)self)->animate_prev_x+1, ((struct Object*)self)->animate_prev_y+1, 0, NULL);
  803f20:	e0bffd17 	ldw	r2,-12(fp)
  803f24:	11000917 	ldw	r4,36(r2)
  803f28:	e0bffd17 	ldw	r2,-12(fp)
  803f2c:	11400a17 	ldw	r5,40(r2)
  803f30:	e0bffd17 	ldw	r2,-12(fp)
  803f34:	10800917 	ldw	r2,36(r2)
  803f38:	11800044 	addi	r6,r2,1
  803f3c:	e0bffd17 	ldw	r2,-12(fp)
  803f40:	10800a17 	ldw	r2,40(r2)
  803f44:	11c00044 	addi	r7,r2,1
  803f48:	d8000015 	stw	zero,0(sp)
  803f4c:	d8000115 	stw	zero,4(sp)
  803f50:	08122300 	call	812230 <drawBox>
			((struct Bullet*)((struct Object*)self)->subObject)->image_changed_flag = 0;
  803f54:	e0bffd17 	ldw	r2,-12(fp)
  803f58:	10801817 	ldw	r2,96(r2)
  803f5c:	10001015 	stw	zero,64(r2)
		}
	}
	lock = 0;
  803f60:	008020f4 	movhi	r2,131
  803f64:	109c7b04 	addi	r2,r2,29164
  803f68:	10000015 	stw	zero,0(r2)
}
  803f6c:	e037883a 	mov	sp,fp
  803f70:	dfc00117 	ldw	ra,4(sp)
  803f74:	df000017 	ldw	fp,0(sp)
  803f78:	dec00204 	addi	sp,sp,8
  803f7c:	f800283a 	ret

00803f80 <laserCollide>:

void laserCollide(void* this, void* obj, struct Collidable* col) {
  803f80:	defffc04 	addi	sp,sp,-16
  803f84:	df000315 	stw	fp,12(sp)
  803f88:	df000304 	addi	fp,sp,12
  803f8c:	e13ffd15 	stw	r4,-12(fp)
  803f90:	e17ffe15 	stw	r5,-8(fp)
  803f94:	e1bfff15 	stw	r6,-4(fp)
}
  803f98:	e037883a 	mov	sp,fp
  803f9c:	df000017 	ldw	fp,0(sp)
  803fa0:	dec00104 	addi	sp,sp,4
  803fa4:	f800283a 	ret

00803fa8 <fireCollide>:

void fireCollide(void* this, void* obj, struct Collidable* col) {
  803fa8:	defff904 	addi	sp,sp,-28
  803fac:	dfc00615 	stw	ra,24(sp)
  803fb0:	df000515 	stw	fp,20(sp)
  803fb4:	df000504 	addi	fp,sp,20
  803fb8:	e13ffd15 	stw	r4,-12(fp)
  803fbc:	e17ffe15 	stw	r5,-8(fp)
  803fc0:	e1bfff15 	stw	r6,-4(fp)
	 lock = 1;
  803fc4:	00c020f4 	movhi	r3,131
  803fc8:	18dc7b04 	addi	r3,r3,29164
  803fcc:	00800044 	movi	r2,1
  803fd0:	18800015 	stw	r2,0(r3)

	if (((struct Object*)obj)->class == alien && ((struct Bullet*)((struct Object*)this)->subObject)->image_changed_flag == 0){
  803fd4:	e0bffe17 	ldw	r2,-8(fp)
  803fd8:	10801117 	ldw	r2,68(r2)
  803fdc:	10800098 	cmpnei	r2,r2,2
  803fe0:	1000271e 	bne	r2,zero,804080 <fireCollide+0xd8>
  803fe4:	e0bffd17 	ldw	r2,-12(fp)
  803fe8:	10801817 	ldw	r2,96(r2)
  803fec:	10801017 	ldw	r2,64(r2)
  803ff0:	1004c03a 	cmpne	r2,r2,zero
  803ff4:	1000221e 	bne	r2,zero,804080 <fireCollide+0xd8>
		if (((struct Object*)this)->scale == 4){
  803ff8:	e0bffd17 	ldw	r2,-12(fp)
  803ffc:	10800217 	ldw	r2,8(r2)
  804000:	10800118 	cmpnei	r2,r2,4
  804004:	10001e1e 	bne	r2,zero,804080 <fireCollide+0xd8>
			((struct Bullet*)((struct Object*)this)->subObject)->image_changed_flag = 1;
  804008:	e0bffd17 	ldw	r2,-12(fp)
  80400c:	10801817 	ldw	r2,96(r2)
  804010:	1007883a 	mov	r3,r2
  804014:	00800044 	movi	r2,1
  804018:	18801015 	stw	r2,64(r3)
			//clean the bullet picture before removing from environment
			drawBox(((struct Object*)this)->animate_prev_x, ((struct Object*)this)->animate_prev_y, ((struct Object*)this)->animate_prev_x+1, ((struct Object*)this)->animate_prev_y+1, 0, NULL);
  80401c:	e0bffd17 	ldw	r2,-12(fp)
  804020:	11000917 	ldw	r4,36(r2)
  804024:	e0bffd17 	ldw	r2,-12(fp)
  804028:	11400a17 	ldw	r5,40(r2)
  80402c:	e0bffd17 	ldw	r2,-12(fp)
  804030:	10800917 	ldw	r2,36(r2)
  804034:	11800044 	addi	r6,r2,1
  804038:	e0bffd17 	ldw	r2,-12(fp)
  80403c:	10800a17 	ldw	r2,40(r2)
  804040:	11c00044 	addi	r7,r2,1
  804044:	d8000015 	stw	zero,0(sp)
  804048:	d8000115 	stw	zero,4(sp)
  80404c:	08122300 	call	812230 <drawBox>
			//make sure the bullet stop moving before moved from the environment
			((struct Bullet*)((struct Object*)this)->subObject)->v_x = 0;
  804050:	e0bffd17 	ldw	r2,-12(fp)
  804054:	10801817 	ldw	r2,96(r2)
  804058:	10000115 	stw	zero,4(r2)
			((struct Bullet*)((struct Object*)this)->subObject)->v_y = 0;
  80405c:	e0bffd17 	ldw	r2,-12(fp)
  804060:	10801817 	ldw	r2,96(r2)
  804064:	10000215 	stw	zero,8(r2)
			((struct Bullet*)((struct Object*)this)->subObject)->acc_x = 0;
  804068:	e0bffd17 	ldw	r2,-12(fp)
  80406c:	10801817 	ldw	r2,96(r2)
  804070:	10000315 	stw	zero,12(r2)
			((struct Bullet*)((struct Object*)this)->subObject)->acc_y = 0;
  804074:	e0bffd17 	ldw	r2,-12(fp)
  804078:	10801817 	ldw	r2,96(r2)
  80407c:	10000415 	stw	zero,16(r2)
		}
	}
	lock = 0;
  804080:	008020f4 	movhi	r2,131
  804084:	109c7b04 	addi	r2,r2,29164
  804088:	10000015 	stw	zero,0(r2)
}
  80408c:	e037883a 	mov	sp,fp
  804090:	dfc00117 	ldw	ra,4(sp)
  804094:	df000017 	ldw	fp,0(sp)
  804098:	dec00204 	addi	sp,sp,8
  80409c:	f800283a 	ret

008040a0 <freezeCollide>:

void freezeCollide(void* this, void* obj, struct Collidable* col){
  8040a0:	defff904 	addi	sp,sp,-28
  8040a4:	dfc00615 	stw	ra,24(sp)
  8040a8:	df000515 	stw	fp,20(sp)
  8040ac:	df000504 	addi	fp,sp,20
  8040b0:	e13ffd15 	stw	r4,-12(fp)
  8040b4:	e17ffe15 	stw	r5,-8(fp)
  8040b8:	e1bfff15 	stw	r6,-4(fp)

	if (((struct Object*)obj)->class == alien){
  8040bc:	e0bffe17 	ldw	r2,-8(fp)
  8040c0:	10801117 	ldw	r2,68(r2)
  8040c4:	10800098 	cmpnei	r2,r2,2
  8040c8:	1000551e 	bne	r2,zero,804220 <freezeCollide+0x180>
		if (((struct Object*)this)->scale > 4){
  8040cc:	e0bffd17 	ldw	r2,-12(fp)
  8040d0:	10800217 	ldw	r2,8(r2)
  8040d4:	10800150 	cmplti	r2,r2,5
  8040d8:	1000201e 	bne	r2,zero,80415c <freezeCollide+0xbc>
			// big bullets : freeze enemy for 30 frames, damage and release
			if (((struct Bullet*)((struct Object*)this)->subObject)->frame < 30)
  8040dc:	e0bffd17 	ldw	r2,-12(fp)
  8040e0:	10801817 	ldw	r2,96(r2)
  8040e4:	10800f17 	ldw	r2,60(r2)
  8040e8:	10800788 	cmpgei	r2,r2,30
  8040ec:	1000121e 	bne	r2,zero,804138 <freezeCollide+0x98>
			{
				((struct Bullet*)((struct Object*)this)->subObject)->enemy_v_x = ((struct Alien*)((struct Object*)obj)->subObject)->speed;
  8040f0:	e0bffd17 	ldw	r2,-12(fp)
  8040f4:	10801817 	ldw	r2,96(r2)
  8040f8:	1007883a 	mov	r3,r2
  8040fc:	e0bffe17 	ldw	r2,-8(fp)
  804100:	10801817 	ldw	r2,96(r2)
  804104:	10800617 	ldw	r2,24(r2)
  804108:	18800815 	stw	r2,32(r3)
				((struct Alien*)((struct Object*)obj)->subObject)->speed = 0;
  80410c:	e0bffe17 	ldw	r2,-8(fp)
  804110:	10801817 	ldw	r2,96(r2)
  804114:	10000615 	stw	zero,24(r2)

				if (((struct Object*)this)->scale == 1)
  804118:	e0bffd17 	ldw	r2,-12(fp)
  80411c:	10800217 	ldw	r2,8(r2)
  804120:	10800058 	cmpnei	r2,r2,1
  804124:	10003e1e 	bne	r2,zero,804220 <freezeCollide+0x180>
					printf("freezeCollide error\n");
  804128:	010020f4 	movhi	r4,131
  80412c:	2120c304 	addi	r4,r4,-31988
  804130:	08158640 	call	815864 <puts>
  804134:	00003a06 	br	804220 <freezeCollide+0x180>

			} else {
				((struct Bullet*)((struct Object*)this)->subObject)->damage = 0;
  804138:	e0bffd17 	ldw	r2,-12(fp)
  80413c:	10801817 	ldw	r2,96(r2)
  804140:	10000515 	stw	zero,20(r2)
				((struct Alien*)((struct Object*)obj)->subObject)->speed = 1;
  804144:	e0bffe17 	ldw	r2,-8(fp)
  804148:	10801817 	ldw	r2,96(r2)
  80414c:	1007883a 	mov	r3,r2
  804150:	008fe034 	movhi	r2,16256
  804154:	18800615 	stw	r2,24(r3)
  804158:	00003106 	br	804220 <freezeCollide+0x180>
			}
		} else {
			// small bullets : freeze enemy for 10 frames, damage and release
			if (((struct Bullet*)((struct Object*)this)->subObject)->frame < 10)
  80415c:	e0bffd17 	ldw	r2,-12(fp)
  804160:	10801817 	ldw	r2,96(r2)
  804164:	10800f17 	ldw	r2,60(r2)
  804168:	10800288 	cmpgei	r2,r2,10
  80416c:	1000221e 	bne	r2,zero,8041f8 <freezeCollide+0x158>
			{
				((struct Bullet*)((struct Object*)this)->subObject)->image_changed_flag = 1;
  804170:	e0bffd17 	ldw	r2,-12(fp)
  804174:	10801817 	ldw	r2,96(r2)
  804178:	1007883a 	mov	r3,r2
  80417c:	00800044 	movi	r2,1
  804180:	18801015 	stw	r2,64(r3)
				drawBox(((struct Object*)this)->animate_prev_x, ((struct Object*)this)->animate_prev_y, ((struct Object*)this)->animate_prev_x+1, ((struct Object*)this)->animate_prev_y+1, 0, NULL);
  804184:	e0bffd17 	ldw	r2,-12(fp)
  804188:	11000917 	ldw	r4,36(r2)
  80418c:	e0bffd17 	ldw	r2,-12(fp)
  804190:	11400a17 	ldw	r5,40(r2)
  804194:	e0bffd17 	ldw	r2,-12(fp)
  804198:	10800917 	ldw	r2,36(r2)
  80419c:	11800044 	addi	r6,r2,1
  8041a0:	e0bffd17 	ldw	r2,-12(fp)
  8041a4:	10800a17 	ldw	r2,40(r2)
  8041a8:	11c00044 	addi	r7,r2,1
  8041ac:	d8000015 	stw	zero,0(sp)
  8041b0:	d8000115 	stw	zero,4(sp)
  8041b4:	08122300 	call	812230 <drawBox>
				((struct Alien*)((struct Object*)obj)->subObject)->speed = 0;
  8041b8:	e0bffe17 	ldw	r2,-8(fp)
  8041bc:	10801817 	ldw	r2,96(r2)
  8041c0:	10000615 	stw	zero,24(r2)
				((struct Bullet*)((struct Object*)this)->subObject)->v_x = 0;
  8041c4:	e0bffd17 	ldw	r2,-12(fp)
  8041c8:	10801817 	ldw	r2,96(r2)
  8041cc:	10000115 	stw	zero,4(r2)
				((struct Bullet*)((struct Object*)this)->subObject)->v_y = 0;
  8041d0:	e0bffd17 	ldw	r2,-12(fp)
  8041d4:	10801817 	ldw	r2,96(r2)
  8041d8:	10000215 	stw	zero,8(r2)
				((struct Bullet*)((struct Object*)this)->subObject)->acc_x = 0;
  8041dc:	e0bffd17 	ldw	r2,-12(fp)
  8041e0:	10801817 	ldw	r2,96(r2)
  8041e4:	10000315 	stw	zero,12(r2)
				((struct Bullet*)((struct Object*)this)->subObject)->acc_y = 0;
  8041e8:	e0bffd17 	ldw	r2,-12(fp)
  8041ec:	10801817 	ldw	r2,96(r2)
  8041f0:	10000415 	stw	zero,16(r2)
  8041f4:	00000a06 	br	804220 <freezeCollide+0x180>
			} else {
				((struct Bullet*)((struct Object*)this)->subObject)->damage = 10.0;
  8041f8:	e0bffd17 	ldw	r2,-12(fp)
  8041fc:	10801817 	ldw	r2,96(r2)
  804200:	1007883a 	mov	r3,r2
  804204:	00904834 	movhi	r2,16672
  804208:	18800515 	stw	r2,20(r3)
				((struct Alien*)((struct Object*)obj)->subObject)->speed = 1;
  80420c:	e0bffe17 	ldw	r2,-8(fp)
  804210:	10801817 	ldw	r2,96(r2)
  804214:	1007883a 	mov	r3,r2
  804218:	008fe034 	movhi	r2,16256
  80421c:	18800615 	stw	r2,24(r3)
			}
		}
	}
}
  804220:	e037883a 	mov	sp,fp
  804224:	dfc00117 	ldw	ra,4(sp)
  804228:	df000017 	ldw	fp,0(sp)
  80422c:	dec00204 	addi	sp,sp,8
  804230:	f800283a 	ret

00804234 <laserAnimate>:

void laserAnimate(struct animation** curr, int x, int y, int size, int isForward, struct Object* obj, struct Cursor* m) {
  804234:	defffb04 	addi	sp,sp,-20
  804238:	df000415 	stw	fp,16(sp)
  80423c:	df000404 	addi	fp,sp,16
  804240:	e13ffc15 	stw	r4,-16(fp)
  804244:	e17ffd15 	stw	r5,-12(fp)
  804248:	e1bffe15 	stw	r6,-8(fp)
  80424c:	e1ffff15 	stw	r7,-4(fp)

}
  804250:	e037883a 	mov	sp,fp
  804254:	df000017 	ldw	fp,0(sp)
  804258:	dec00104 	addi	sp,sp,4
  80425c:	f800283a 	ret

00804260 <initBulletCollection>:
#include "BulletCollection.h"
/*
 * Constructor of the BulletCollection object
 */
struct BulletCollection* initBulletCollection(struct Env* e, struct Collidable* col){
  804260:	defffb04 	addi	sp,sp,-20
  804264:	dfc00415 	stw	ra,16(sp)
  804268:	df000315 	stw	fp,12(sp)
  80426c:	df000304 	addi	fp,sp,12
  804270:	e13ffe15 	stw	r4,-8(fp)
  804274:	e17fff15 	stw	r5,-4(fp)
	struct BulletCollection* bc = (struct BulletCollection*)malloc(sizeof(struct BulletCollection));
  804278:	01003904 	movi	r4,228
  80427c:	0814f580 	call	814f58 <malloc>
  804280:	e0bffd15 	stw	r2,-12(fp)
	bc->env = e;
  804284:	e0fffd17 	ldw	r3,-12(fp)
  804288:	e0bffe17 	ldw	r2,-8(fp)
  80428c:	18803315 	stw	r2,204(r3)
	bc->pStart = 0;
  804290:	e0bffd17 	ldw	r2,-12(fp)
  804294:	10003515 	stw	zero,212(r2)
	bc->pEnd = 0;
  804298:	e0bffd17 	ldw	r2,-12(fp)
  80429c:	10003615 	stw	zero,216(r2)
	bc->collision_checker = col;
  8042a0:	e0fffd17 	ldw	r3,-12(fp)
  8042a4:	e0bfff17 	ldw	r2,-4(fp)
  8042a8:	18803415 	stw	r2,208(r3)
	bc->total_bullet_available = 0;
  8042ac:	e0bffd17 	ldw	r2,-12(fp)
  8042b0:	10003715 	stw	zero,220(r2)
	return bc;
  8042b4:	e0bffd17 	ldw	r2,-12(fp)
}
  8042b8:	e037883a 	mov	sp,fp
  8042bc:	dfc00117 	ldw	ra,4(sp)
  8042c0:	df000017 	ldw	fp,0(sp)
  8042c4:	dec00204 	addi	sp,sp,8
  8042c8:	f800283a 	ret

008042cc <initBulletToWeapon1>:

// shotGun
void initBulletToWeapon1(int level, struct animation* bulletImage, struct animation* explosion, struct BulletCollection* bc){
  8042cc:	defff504 	addi	sp,sp,-44
  8042d0:	dfc00a15 	stw	ra,40(sp)
  8042d4:	df000915 	stw	fp,36(sp)
  8042d8:	dc000815 	stw	r16,32(sp)
  8042dc:	df000804 	addi	fp,sp,32
  8042e0:	e13ffc15 	stw	r4,-16(fp)
  8042e4:	e17ffd15 	stw	r5,-12(fp)
  8042e8:	e1bffe15 	stw	r6,-8(fp)
  8042ec:	e1ffff15 	stw	r7,-4(fp)
	int i;
	float dmg = 40;
  8042f0:	00908834 	movhi	r2,16928
  8042f4:	e0bffa15 	stw	r2,-24(fp)
	if (level == 1) {
  8042f8:	e0bffc17 	ldw	r2,-16(fp)
  8042fc:	10800058 	cmpnei	r2,r2,1
  804300:	1000071e 	bne	r2,zero,804320 <initBulletToWeapon1+0x54>
		dmg = 20;
  804304:	00906834 	movhi	r2,16800
  804308:	e0bffa15 	stw	r2,-24(fp)
		bc->bc_fire = fire_tower1_level1;
  80430c:	e0ffff17 	ldw	r3,-4(fp)
  804310:	00802034 	movhi	r2,128
  804314:	10930b04 	addi	r2,r2,19500
  804318:	18803815 	stw	r2,224(r3)
  80431c:	00000406 	br	804330 <initBulletToWeapon1+0x64>
	}else
		bc->bc_fire = fire_tower1_level2;
  804320:	e0ffff17 	ldw	r3,-4(fp)
  804324:	00802034 	movhi	r2,128
  804328:	10932c04 	addi	r2,r2,19632
  80432c:	18803815 	stw	r2,224(r3)
	for (i = 0; i < 25; i++){
  804330:	e03ffb15 	stw	zero,-20(fp)
  804334:	00002106 	br	8043bc <initBulletToWeapon1+0xf0>
		bc->bullets[i] = initBullet(100, 100, 1, dmg, bulletImage, bc);
  804338:	e43ffb17 	ldw	r16,-20(fp)
  80433c:	e0bffd17 	ldw	r2,-12(fp)
  804340:	d8800015 	stw	r2,0(sp)
  804344:	e0bfff17 	ldw	r2,-4(fp)
  804348:	d8800115 	stw	r2,4(sp)
  80434c:	01001904 	movi	r4,100
  804350:	01401904 	movi	r5,100
  804354:	01800044 	movi	r6,1
  804358:	e1fffa17 	ldw	r7,-24(fp)
  80435c:	0802e8c0 	call	802e8c <initBullet>
  804360:	1009883a 	mov	r4,r2
  804364:	e0ffff17 	ldw	r3,-4(fp)
  804368:	8405883a 	add	r2,r16,r16
  80436c:	1085883a 	add	r2,r2,r2
  804370:	10c5883a 	add	r2,r2,r3
  804374:	10800104 	addi	r2,r2,4
  804378:	11000015 	stw	r4,0(r2)
		setupBullet(bc->bullets[i], explosion, bulletAction, bulletCollide);
  80437c:	e0bffb17 	ldw	r2,-20(fp)
  804380:	e0ffff17 	ldw	r3,-4(fp)
  804384:	1085883a 	add	r2,r2,r2
  804388:	1085883a 	add	r2,r2,r2
  80438c:	10c5883a 	add	r2,r2,r3
  804390:	10800104 	addi	r2,r2,4
  804394:	11000017 	ldw	r4,0(r2)
  804398:	e17ffe17 	ldw	r5,-8(fp)
  80439c:	01802034 	movhi	r6,128
  8043a0:	318c3004 	addi	r6,r6,12480
  8043a4:	01c02034 	movhi	r7,128
  8043a8:	39cf3804 	addi	r7,r7,15584
  8043ac:	0802f8c0 	call	802f8c <setupBullet>
	if (level == 1) {
		dmg = 20;
		bc->bc_fire = fire_tower1_level1;
	}else
		bc->bc_fire = fire_tower1_level2;
	for (i = 0; i < 25; i++){
  8043b0:	e0bffb17 	ldw	r2,-20(fp)
  8043b4:	10800044 	addi	r2,r2,1
  8043b8:	e0bffb15 	stw	r2,-20(fp)
  8043bc:	e0bffb17 	ldw	r2,-20(fp)
  8043c0:	10800650 	cmplti	r2,r2,25
  8043c4:	103fdc1e 	bne	r2,zero,804338 <initBulletToWeapon1+0x6c>
		bc->bullets[i] = initBullet(100, 100, 1, dmg, bulletImage, bc);
		setupBullet(bc->bullets[i], explosion, bulletAction, bulletCollide);
	}
	bc->total_bullet_available = 25;
  8043c8:	e0ffff17 	ldw	r3,-4(fp)
  8043cc:	00800644 	movi	r2,25
  8043d0:	18803715 	stw	r2,220(r3)
	bc->pEnd = 25;
  8043d4:	e0ffff17 	ldw	r3,-4(fp)
  8043d8:	00800644 	movi	r2,25
  8043dc:	18803615 	stw	r2,216(r3)
}
  8043e0:	e037883a 	mov	sp,fp
  8043e4:	dfc00217 	ldw	ra,8(sp)
  8043e8:	df000117 	ldw	fp,4(sp)
  8043ec:	dc000017 	ldw	r16,0(sp)
  8043f0:	dec00304 	addi	sp,sp,12
  8043f4:	f800283a 	ret

008043f8 <initBulletToWeapon2>:

// black hole
void initBulletToWeapon2(int level, struct animation* bulletImage, struct animation* explosion, struct BulletCollection* this){
  8043f8:	defff604 	addi	sp,sp,-40
  8043fc:	dfc00915 	stw	ra,36(sp)
  804400:	df000815 	stw	fp,32(sp)
  804404:	dc000715 	stw	r16,28(sp)
  804408:	df000704 	addi	fp,sp,28
  80440c:	e13ffc15 	stw	r4,-16(fp)
  804410:	e17ffd15 	stw	r5,-12(fp)
  804414:	e1bffe15 	stw	r6,-8(fp)
  804418:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for (i = 0; i < 25; i++){
  80441c:	e03ffb15 	stw	zero,-20(fp)
  804420:	00002106 	br	8044a8 <initBulletToWeapon2+0xb0>
		this->bullets[i] = initBullet(400, 400, 40, 0.0, bulletImage, this);
  804424:	e43ffb17 	ldw	r16,-20(fp)
  804428:	e0bffd17 	ldw	r2,-12(fp)
  80442c:	d8800015 	stw	r2,0(sp)
  804430:	e0bfff17 	ldw	r2,-4(fp)
  804434:	d8800115 	stw	r2,4(sp)
  804438:	01006404 	movi	r4,400
  80443c:	01406404 	movi	r5,400
  804440:	01800a04 	movi	r6,40
  804444:	000f883a 	mov	r7,zero
  804448:	0802e8c0 	call	802e8c <initBullet>
  80444c:	1009883a 	mov	r4,r2
  804450:	e0ffff17 	ldw	r3,-4(fp)
  804454:	8405883a 	add	r2,r16,r16
  804458:	1085883a 	add	r2,r2,r2
  80445c:	10c5883a 	add	r2,r2,r3
  804460:	10800104 	addi	r2,r2,4
  804464:	11000015 	stw	r4,0(r2)
		setupBullet(this->bullets[i], explosion, blackHoleAction, blackHoleCollide);
  804468:	e0bffb17 	ldw	r2,-20(fp)
  80446c:	e0ffff17 	ldw	r3,-4(fp)
  804470:	1085883a 	add	r2,r2,r2
  804474:	1085883a 	add	r2,r2,r2
  804478:	10c5883a 	add	r2,r2,r3
  80447c:	10800104 	addi	r2,r2,4
  804480:	11000017 	ldw	r4,0(r2)
  804484:	e17ffe17 	ldw	r5,-8(fp)
  804488:	01802034 	movhi	r6,128
  80448c:	318c7204 	addi	r6,r6,12744
  804490:	01c02034 	movhi	r7,128
  804494:	39cf7d04 	addi	r7,r7,15860
  804498:	0802f8c0 	call	802f8c <setupBullet>
}

// black hole
void initBulletToWeapon2(int level, struct animation* bulletImage, struct animation* explosion, struct BulletCollection* this){
	int i;
	for (i = 0; i < 25; i++){
  80449c:	e0bffb17 	ldw	r2,-20(fp)
  8044a0:	10800044 	addi	r2,r2,1
  8044a4:	e0bffb15 	stw	r2,-20(fp)
  8044a8:	e0bffb17 	ldw	r2,-20(fp)
  8044ac:	10800650 	cmplti	r2,r2,25
  8044b0:	103fdc1e 	bne	r2,zero,804424 <initBulletToWeapon2+0x2c>
		this->bullets[i] = initBullet(400, 400, 40, 0.0, bulletImage, this);
		setupBullet(this->bullets[i], explosion, blackHoleAction, blackHoleCollide);
	}
	this->total_bullet_available = 25;
  8044b4:	e0ffff17 	ldw	r3,-4(fp)
  8044b8:	00800644 	movi	r2,25
  8044bc:	18803715 	stw	r2,220(r3)
	this->pEnd = 25;
  8044c0:	e0ffff17 	ldw	r3,-4(fp)
  8044c4:	00800644 	movi	r2,25
  8044c8:	18803615 	stw	r2,216(r3)
	if (level == 1)
  8044cc:	e0bffc17 	ldw	r2,-16(fp)
  8044d0:	10800058 	cmpnei	r2,r2,1
  8044d4:	1000051e 	bne	r2,zero,8044ec <initBulletToWeapon2+0xf4>
		this->bc_fire = fire_tower2_level1;
  8044d8:	e0ffff17 	ldw	r3,-4(fp)
  8044dc:	00802034 	movhi	r2,128
  8044e0:	10947904 	addi	r2,r2,20964
  8044e4:	18803815 	stw	r2,224(r3)
  8044e8:	00000406 	br	8044fc <initBulletToWeapon2+0x104>
	else
		this->bc_fire = fire_tower2_level2;
  8044ec:	e0ffff17 	ldw	r3,-4(fp)
  8044f0:	00802034 	movhi	r2,128
  8044f4:	10949804 	addi	r2,r2,21088
  8044f8:	18803815 	stw	r2,224(r3)
}
  8044fc:	e037883a 	mov	sp,fp
  804500:	dfc00217 	ldw	ra,8(sp)
  804504:	df000117 	ldw	fp,4(sp)
  804508:	dc000017 	ldw	r16,0(sp)
  80450c:	dec00304 	addi	sp,sp,12
  804510:	f800283a 	ret

00804514 <initBulletToWeapon3>:

// laser
void initBulletToWeapon3(int level, struct animation* bulletImage, struct animation* explosion, struct BulletCollection* this) {
  804514:	defff504 	addi	sp,sp,-44
  804518:	dfc00a15 	stw	ra,40(sp)
  80451c:	df000915 	stw	fp,36(sp)
  804520:	dc000815 	stw	r16,32(sp)
  804524:	df000804 	addi	fp,sp,32
  804528:	e13ffc15 	stw	r4,-16(fp)
  80452c:	e17ffd15 	stw	r5,-12(fp)
  804530:	e1bffe15 	stw	r6,-8(fp)
  804534:	e1ffff15 	stw	r7,-4(fp)
	int i;
	float dmg = 40;
  804538:	00908834 	movhi	r2,16928
  80453c:	e0bffa15 	stw	r2,-24(fp)
	if (level == 1)
  804540:	e0bffc17 	ldw	r2,-16(fp)
  804544:	10800058 	cmpnei	r2,r2,1
  804548:	1000051e 	bne	r2,zero,804560 <initBulletToWeapon3+0x4c>
		this->bc_fire = fire_tower3_level1;
  80454c:	e0ffff17 	ldw	r3,-4(fp)
  804550:	00802034 	movhi	r2,128
  804554:	1094b804 	addi	r2,r2,21216
  804558:	18803815 	stw	r2,224(r3)
  80455c:	00000606 	br	804578 <initBulletToWeapon3+0x64>
	else {
		dmg = 80;
  804560:	0090a834 	movhi	r2,17056
  804564:	e0bffa15 	stw	r2,-24(fp)
		this->bc_fire = fire_tower3_level2;
  804568:	e0ffff17 	ldw	r3,-4(fp)
  80456c:	00802034 	movhi	r2,128
  804570:	1094d904 	addi	r2,r2,21348
  804574:	18803815 	stw	r2,224(r3)
	}
	for(i = 0; i< 25; i++) {
  804578:	e03ffb15 	stw	zero,-20(fp)
  80457c:	00002a06 	br	804628 <initBulletToWeapon3+0x114>
		this->bullets[i] = initBullet(400, 400, 1, dmg, bulletImage, this);
  804580:	e43ffb17 	ldw	r16,-20(fp)
  804584:	e0bffd17 	ldw	r2,-12(fp)
  804588:	d8800015 	stw	r2,0(sp)
  80458c:	e0bfff17 	ldw	r2,-4(fp)
  804590:	d8800115 	stw	r2,4(sp)
  804594:	01006404 	movi	r4,400
  804598:	01406404 	movi	r5,400
  80459c:	01800044 	movi	r6,1
  8045a0:	e1fffa17 	ldw	r7,-24(fp)
  8045a4:	0802e8c0 	call	802e8c <initBullet>
  8045a8:	1009883a 	mov	r4,r2
  8045ac:	e0ffff17 	ldw	r3,-4(fp)
  8045b0:	8405883a 	add	r2,r16,r16
  8045b4:	1085883a 	add	r2,r2,r2
  8045b8:	10c5883a 	add	r2,r2,r3
  8045bc:	10800104 	addi	r2,r2,4
  8045c0:	11000015 	stw	r4,0(r2)
		setupBullet(this->bullets[i], explosion, laserAction, laserCollide);
  8045c4:	e0bffb17 	ldw	r2,-20(fp)
  8045c8:	e0ffff17 	ldw	r3,-4(fp)
  8045cc:	1085883a 	add	r2,r2,r2
  8045d0:	1085883a 	add	r2,r2,r2
  8045d4:	10c5883a 	add	r2,r2,r3
  8045d8:	10800104 	addi	r2,r2,4
  8045dc:	11000017 	ldw	r4,0(r2)
  8045e0:	e17ffe17 	ldw	r5,-8(fp)
  8045e4:	01802034 	movhi	r6,128
  8045e8:	318caa04 	addi	r6,r6,12968
  8045ec:	01c02034 	movhi	r7,128
  8045f0:	39cfe004 	addi	r7,r7,16256
  8045f4:	0802f8c0 	call	802f8c <setupBullet>
		this->bullets[i]->super->isShowing = 0;
  8045f8:	e0bffb17 	ldw	r2,-20(fp)
  8045fc:	e0ffff17 	ldw	r3,-4(fp)
  804600:	1085883a 	add	r2,r2,r2
  804604:	1085883a 	add	r2,r2,r2
  804608:	10c5883a 	add	r2,r2,r3
  80460c:	10800104 	addi	r2,r2,4
  804610:	10800017 	ldw	r2,0(r2)
  804614:	10800017 	ldw	r2,0(r2)
  804618:	10001515 	stw	zero,84(r2)
		this->bc_fire = fire_tower3_level1;
	else {
		dmg = 80;
		this->bc_fire = fire_tower3_level2;
	}
	for(i = 0; i< 25; i++) {
  80461c:	e0bffb17 	ldw	r2,-20(fp)
  804620:	10800044 	addi	r2,r2,1
  804624:	e0bffb15 	stw	r2,-20(fp)
  804628:	e0bffb17 	ldw	r2,-20(fp)
  80462c:	10800650 	cmplti	r2,r2,25
  804630:	103fd31e 	bne	r2,zero,804580 <initBulletToWeapon3+0x6c>
		this->bullets[i] = initBullet(400, 400, 1, dmg, bulletImage, this);
		setupBullet(this->bullets[i], explosion, laserAction, laserCollide);
		this->bullets[i]->super->isShowing = 0;
	}
	this->total_bullet_available = 25;
  804634:	e0ffff17 	ldw	r3,-4(fp)
  804638:	00800644 	movi	r2,25
  80463c:	18803715 	stw	r2,220(r3)
	this->pEnd = 25;
  804640:	e0ffff17 	ldw	r3,-4(fp)
  804644:	00800644 	movi	r2,25
  804648:	18803615 	stw	r2,216(r3)
}
  80464c:	e037883a 	mov	sp,fp
  804650:	dfc00217 	ldw	ra,8(sp)
  804654:	df000117 	ldw	fp,4(sp)
  804658:	dc000017 	ldw	r16,0(sp)
  80465c:	dec00304 	addi	sp,sp,12
  804660:	f800283a 	ret

00804664 <initBulletToWeapon4>:

// fire bomb
void initBulletToWeapon4(int level, struct animation* bulletImage, struct animation* explosion, struct BulletCollection* this) {
  804664:	defff504 	addi	sp,sp,-44
  804668:	dfc00a15 	stw	ra,40(sp)
  80466c:	df000915 	stw	fp,36(sp)
  804670:	dc000815 	stw	r16,32(sp)
  804674:	df000804 	addi	fp,sp,32
  804678:	e13ffc15 	stw	r4,-16(fp)
  80467c:	e17ffd15 	stw	r5,-12(fp)
  804680:	e1bffe15 	stw	r6,-8(fp)
  804684:	e1ffff15 	stw	r7,-4(fp)
	int i;
	float dmg = 100;
  804688:	0090b234 	movhi	r2,17096
  80468c:	e0bffa15 	stw	r2,-24(fp)
	if (level == 1)
  804690:	e0bffc17 	ldw	r2,-16(fp)
  804694:	10800058 	cmpnei	r2,r2,1
  804698:	1000051e 	bne	r2,zero,8046b0 <initBulletToWeapon4+0x4c>
		this->bc_fire = fire_tower4_level1;
  80469c:	e0ffff17 	ldw	r3,-4(fp)
  8046a0:	00802034 	movhi	r2,128
  8046a4:	10962704 	addi	r2,r2,22684
  8046a8:	18803815 	stw	r2,224(r3)
  8046ac:	00000606 	br	8046c8 <initBulletToWeapon4+0x64>
	else {
		dmg = 180;
  8046b0:	0090cd34 	movhi	r2,17204
  8046b4:	e0bffa15 	stw	r2,-24(fp)
		this->bc_fire = fire_tower4_level2;
  8046b8:	e0ffff17 	ldw	r3,-4(fp)
  8046bc:	00802034 	movhi	r2,128
  8046c0:	10963d04 	addi	r2,r2,22772
  8046c4:	18803815 	stw	r2,224(r3)
	}
	for(i = 0; i< 25; i++) {
  8046c8:	e03ffb15 	stw	zero,-20(fp)
  8046cc:	00002b06 	br	80477c <initBulletToWeapon4+0x118>
		this->bullets[i] = initBullet(400, 400, 40, dmg, bulletImage, this);
  8046d0:	e43ffb17 	ldw	r16,-20(fp)
  8046d4:	e0bffd17 	ldw	r2,-12(fp)
  8046d8:	d8800015 	stw	r2,0(sp)
  8046dc:	e0bfff17 	ldw	r2,-4(fp)
  8046e0:	d8800115 	stw	r2,4(sp)
  8046e4:	01006404 	movi	r4,400
  8046e8:	01406404 	movi	r5,400
  8046ec:	01800a04 	movi	r6,40
  8046f0:	e1fffa17 	ldw	r7,-24(fp)
  8046f4:	0802e8c0 	call	802e8c <initBullet>
  8046f8:	1009883a 	mov	r4,r2
  8046fc:	e0ffff17 	ldw	r3,-4(fp)
  804700:	8405883a 	add	r2,r16,r16
  804704:	1085883a 	add	r2,r2,r2
  804708:	10c5883a 	add	r2,r2,r3
  80470c:	10800104 	addi	r2,r2,4
  804710:	11000015 	stw	r4,0(r2)
		setupBullet(this->bullets[i], explosion, fireAction, fireCollide);
  804714:	e0bffb17 	ldw	r2,-20(fp)
  804718:	e0ffff17 	ldw	r3,-4(fp)
  80471c:	1085883a 	add	r2,r2,r2
  804720:	1085883a 	add	r2,r2,r2
  804724:	10c5883a 	add	r2,r2,r3
  804728:	10800104 	addi	r2,r2,4
  80472c:	11000017 	ldw	r4,0(r2)
  804730:	e17ffe17 	ldw	r5,-8(fp)
  804734:	01802034 	movhi	r6,128
  804738:	318d6004 	addi	r6,r6,13696
  80473c:	01c02034 	movhi	r7,128
  804740:	39cfea04 	addi	r7,r7,16296
  804744:	0802f8c0 	call	802f8c <setupBullet>
		this->bullets[i]->super->collideRange = 80;
  804748:	e0bffb17 	ldw	r2,-20(fp)
  80474c:	e0ffff17 	ldw	r3,-4(fp)
  804750:	1085883a 	add	r2,r2,r2
  804754:	1085883a 	add	r2,r2,r2
  804758:	10c5883a 	add	r2,r2,r3
  80475c:	10800104 	addi	r2,r2,4
  804760:	10800017 	ldw	r2,0(r2)
  804764:	10c00017 	ldw	r3,0(r2)
  804768:	00801404 	movi	r2,80
  80476c:	18800815 	stw	r2,32(r3)
		this->bc_fire = fire_tower4_level1;
	else {
		dmg = 180;
		this->bc_fire = fire_tower4_level2;
	}
	for(i = 0; i< 25; i++) {
  804770:	e0bffb17 	ldw	r2,-20(fp)
  804774:	10800044 	addi	r2,r2,1
  804778:	e0bffb15 	stw	r2,-20(fp)
  80477c:	e0bffb17 	ldw	r2,-20(fp)
  804780:	10800650 	cmplti	r2,r2,25
  804784:	103fd21e 	bne	r2,zero,8046d0 <initBulletToWeapon4+0x6c>
		this->bullets[i] = initBullet(400, 400, 40, dmg, bulletImage, this);
		setupBullet(this->bullets[i], explosion, fireAction, fireCollide);
		this->bullets[i]->super->collideRange = 80;
	}
	this->total_bullet_available = 25;
  804788:	e0ffff17 	ldw	r3,-4(fp)
  80478c:	00800644 	movi	r2,25
  804790:	18803715 	stw	r2,220(r3)
	this->pEnd = 25;
  804794:	e0ffff17 	ldw	r3,-4(fp)
  804798:	00800644 	movi	r2,25
  80479c:	18803615 	stw	r2,216(r3)
}
  8047a0:	e037883a 	mov	sp,fp
  8047a4:	dfc00217 	ldw	ra,8(sp)
  8047a8:	df000117 	ldw	fp,4(sp)
  8047ac:	dc000017 	ldw	r16,0(sp)
  8047b0:	dec00304 	addi	sp,sp,12
  8047b4:	f800283a 	ret

008047b8 <initBulletToWeapon5>:

void initBulletToWeapon5(int level, struct animation* bulletImage, struct animation* explosion, struct BulletCollection* this){
  8047b8:	defff604 	addi	sp,sp,-40
  8047bc:	dfc00915 	stw	ra,36(sp)
  8047c0:	df000815 	stw	fp,32(sp)
  8047c4:	dc000715 	stw	r16,28(sp)
  8047c8:	df000704 	addi	fp,sp,28
  8047cc:	e13ffc15 	stw	r4,-16(fp)
  8047d0:	e17ffd15 	stw	r5,-12(fp)
  8047d4:	e1bffe15 	stw	r6,-8(fp)
  8047d8:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for (i = 0; i < 25; i++){
  8047dc:	e03ffb15 	stw	zero,-20(fp)
  8047e0:	00002106 	br	804868 <initBulletToWeapon5+0xb0>
		this->bullets[i] = initBullet(400, 400, 40, 0.0, bulletImage, this);
  8047e4:	e43ffb17 	ldw	r16,-20(fp)
  8047e8:	e0bffd17 	ldw	r2,-12(fp)
  8047ec:	d8800015 	stw	r2,0(sp)
  8047f0:	e0bfff17 	ldw	r2,-4(fp)
  8047f4:	d8800115 	stw	r2,4(sp)
  8047f8:	01006404 	movi	r4,400
  8047fc:	01406404 	movi	r5,400
  804800:	01800a04 	movi	r6,40
  804804:	000f883a 	mov	r7,zero
  804808:	0802e8c0 	call	802e8c <initBullet>
  80480c:	1009883a 	mov	r4,r2
  804810:	e0ffff17 	ldw	r3,-4(fp)
  804814:	8405883a 	add	r2,r16,r16
  804818:	1085883a 	add	r2,r2,r2
  80481c:	10c5883a 	add	r2,r2,r3
  804820:	10800104 	addi	r2,r2,4
  804824:	11000015 	stw	r4,0(r2)
		setupBullet(this->bullets[i], explosion, freezeAction, freezeCollide);
  804828:	e0bffb17 	ldw	r2,-20(fp)
  80482c:	e0ffff17 	ldw	r3,-4(fp)
  804830:	1085883a 	add	r2,r2,r2
  804834:	1085883a 	add	r2,r2,r2
  804838:	10c5883a 	add	r2,r2,r3
  80483c:	10800104 	addi	r2,r2,4
  804840:	11000017 	ldw	r4,0(r2)
  804844:	e17ffe17 	ldw	r5,-8(fp)
  804848:	01802034 	movhi	r6,128
  80484c:	318dcf04 	addi	r6,r6,14140
  804850:	01c02034 	movhi	r7,128
  804854:	39d02804 	addi	r7,r7,16544
  804858:	0802f8c0 	call	802f8c <setupBullet>
	this->pEnd = 25;
}

void initBulletToWeapon5(int level, struct animation* bulletImage, struct animation* explosion, struct BulletCollection* this){
	int i;
	for (i = 0; i < 25; i++){
  80485c:	e0bffb17 	ldw	r2,-20(fp)
  804860:	10800044 	addi	r2,r2,1
  804864:	e0bffb15 	stw	r2,-20(fp)
  804868:	e0bffb17 	ldw	r2,-20(fp)
  80486c:	10800650 	cmplti	r2,r2,25
  804870:	103fdc1e 	bne	r2,zero,8047e4 <initBulletToWeapon5+0x2c>
		this->bullets[i] = initBullet(400, 400, 40, 0.0, bulletImage, this);
		setupBullet(this->bullets[i], explosion, freezeAction, freezeCollide);
	}
	this->total_bullet_available = 25;
  804874:	e0ffff17 	ldw	r3,-4(fp)
  804878:	00800644 	movi	r2,25
  80487c:	18803715 	stw	r2,220(r3)
	this->pEnd = 25;
  804880:	e0ffff17 	ldw	r3,-4(fp)
  804884:	00800644 	movi	r2,25
  804888:	18803615 	stw	r2,216(r3)
	if (level == 1)
  80488c:	e0bffc17 	ldw	r2,-16(fp)
  804890:	10800058 	cmpnei	r2,r2,1
  804894:	1000051e 	bne	r2,zero,8048ac <initBulletToWeapon5+0xf4>
		this->bc_fire = fire_tower5_level1;
  804898:	e0ffff17 	ldw	r3,-4(fp)
  80489c:	00802034 	movhi	r2,128
  8048a0:	10974604 	addi	r2,r2,23832
  8048a4:	18803815 	stw	r2,224(r3)
  8048a8:	00000406 	br	8048bc <initBulletToWeapon5+0x104>
	else
		this->bc_fire = fire_tower5_level2;
  8048ac:	e0ffff17 	ldw	r3,-4(fp)
  8048b0:	00802034 	movhi	r2,128
  8048b4:	10975c04 	addi	r2,r2,23920
  8048b8:	18803815 	stw	r2,224(r3)

}
  8048bc:	e037883a 	mov	sp,fp
  8048c0:	dfc00217 	ldw	ra,8(sp)
  8048c4:	df000117 	ldw	fp,4(sp)
  8048c8:	dc000017 	ldw	r16,0(sp)
  8048cc:	dec00304 	addi	sp,sp,12
  8048d0:	f800283a 	ret

008048d4 <killBulletCollection>:


void killBulletCollection(void* bc)
{
  8048d4:	defffd04 	addi	sp,sp,-12
  8048d8:	dfc00215 	stw	ra,8(sp)
  8048dc:	df000115 	stw	fp,4(sp)
  8048e0:	df000104 	addi	fp,sp,4
  8048e4:	e13fff15 	stw	r4,-4(fp)
	((struct BulletCollection*)bc)->super->end_frame = ((struct Bullet*)bc)->super->curr_frame + 5;
  8048e8:	e0bfff17 	ldw	r2,-4(fp)
  8048ec:	10c00017 	ldw	r3,0(r2)
  8048f0:	e0bfff17 	ldw	r2,-4(fp)
  8048f4:	10800017 	ldw	r2,0(r2)
  8048f8:	10801617 	ldw	r2,88(r2)
  8048fc:	10800144 	addi	r2,r2,5
  804900:	18801315 	stw	r2,76(r3)
	safefree(&bc);
  804904:	e13fff04 	addi	r4,fp,-4
  804908:	080af080 	call	80af08 <safefree>
}
  80490c:	e037883a 	mov	sp,fp
  804910:	dfc00117 	ldw	ra,4(sp)
  804914:	df000017 	ldw	fp,0(sp)
  804918:	dec00204 	addi	sp,sp,8
  80491c:	f800283a 	ret

00804920 <launchMainBullet>:
/*
 * This is the helper function that initialize main bullet with position
 */
bool launchMainBullet(struct BulletCollection* self, struct SpaceShip* ss) {
  804920:	defffb04 	addi	sp,sp,-20
  804924:	dfc00415 	stw	ra,16(sp)
  804928:	df000315 	stw	fp,12(sp)
  80492c:	df000304 	addi	fp,sp,12
  804930:	e13ffd15 	stw	r4,-12(fp)
  804934:	e17ffe15 	stw	r5,-8(fp)
	if(self->pStart > 49 || self->total_bullet_available < 1) {
  804938:	e0bffd17 	ldw	r2,-12(fp)
  80493c:	10803517 	ldw	r2,212(r2)
  804940:	10800c88 	cmpgei	r2,r2,50
  804944:	1000041e 	bne	r2,zero,804958 <launchMainBullet+0x38>
  804948:	e0bffd17 	ldw	r2,-12(fp)
  80494c:	10803717 	ldw	r2,220(r2)
  804950:	10800048 	cmpgei	r2,r2,1
  804954:	1000051e 	bne	r2,zero,80496c <launchMainBullet+0x4c>
		printf("load bullet error\n");
  804958:	010020f4 	movhi	r4,131
  80495c:	2120c804 	addi	r4,r4,-31968
  804960:	08158640 	call	815864 <puts>
		return false;
  804964:	e03fff15 	stw	zero,-4(fp)
  804968:	00002e06 	br	804a24 <launchMainBullet+0x104>
	}
	setBulletInitPosition(ss->super->center_x, ss->super->center_y, self->bullets[self->pStart]);
  80496c:	e0bffe17 	ldw	r2,-8(fp)
  804970:	10800017 	ldw	r2,0(r2)
  804974:	11000517 	ldw	r4,20(r2)
  804978:	e0bffe17 	ldw	r2,-8(fp)
  80497c:	10800017 	ldw	r2,0(r2)
  804980:	11400617 	ldw	r5,24(r2)
  804984:	e0bffd17 	ldw	r2,-12(fp)
  804988:	10803517 	ldw	r2,212(r2)
  80498c:	e0fffd17 	ldw	r3,-12(fp)
  804990:	1085883a 	add	r2,r2,r2
  804994:	1085883a 	add	r2,r2,r2
  804998:	10c5883a 	add	r2,r2,r3
  80499c:	10800104 	addi	r2,r2,4
  8049a0:	11800017 	ldw	r6,0(r2)
  8049a4:	080390c0 	call	80390c <setBulletInitPosition>
	addToEnv(self->env, self->bullets[self->pStart]->super);
  8049a8:	e0bffd17 	ldw	r2,-12(fp)
  8049ac:	11003317 	ldw	r4,204(r2)
  8049b0:	e0bffd17 	ldw	r2,-12(fp)
  8049b4:	10803517 	ldw	r2,212(r2)
  8049b8:	e0fffd17 	ldw	r3,-12(fp)
  8049bc:	1085883a 	add	r2,r2,r2
  8049c0:	1085883a 	add	r2,r2,r2
  8049c4:	10c5883a 	add	r2,r2,r3
  8049c8:	10800104 	addi	r2,r2,4
  8049cc:	10800017 	ldw	r2,0(r2)
  8049d0:	11400017 	ldw	r5,0(r2)
  8049d4:	0808a100 	call	808a10 <addToEnv>
	addObjToCollide(self->collision_checker, self->bullets[self->pStart]->super);
  8049d8:	e0bffd17 	ldw	r2,-12(fp)
  8049dc:	11003417 	ldw	r4,208(r2)
  8049e0:	e0bffd17 	ldw	r2,-12(fp)
  8049e4:	10803517 	ldw	r2,212(r2)
  8049e8:	e0fffd17 	ldw	r3,-12(fp)
  8049ec:	1085883a 	add	r2,r2,r2
  8049f0:	1085883a 	add	r2,r2,r2
  8049f4:	10c5883a 	add	r2,r2,r3
  8049f8:	10800104 	addi	r2,r2,4
  8049fc:	10800017 	ldw	r2,0(r2)
  804a00:	11400017 	ldw	r5,0(r2)
  804a04:	080707c0 	call	80707c <addObjToCollide>
	self->total_bullet_available--;
  804a08:	e0bffd17 	ldw	r2,-12(fp)
  804a0c:	10803717 	ldw	r2,220(r2)
  804a10:	10ffffc4 	addi	r3,r2,-1
  804a14:	e0bffd17 	ldw	r2,-12(fp)
  804a18:	10c03715 	stw	r3,220(r2)
	return true;
  804a1c:	00800044 	movi	r2,1
  804a20:	e0bfff15 	stw	r2,-4(fp)
  804a24:	e0bfff17 	ldw	r2,-4(fp)
}
  804a28:	e037883a 	mov	sp,fp
  804a2c:	dfc00117 	ldw	ra,4(sp)
  804a30:	df000017 	ldw	fp,0(sp)
  804a34:	dec00204 	addi	sp,sp,8
  804a38:	f800283a 	ret

00804a3c <launchSecondaryBullet>:
 * This is helper function that initialize secondary bullets (for weapon that have 2 diff kind of bullets)
 * REQUIREMENT:
 *  - image for secondary bullet has to be in stats[1];
 * - if you want to use for other types of bullet, remember to change: collideRange, scale
 */
bool launchSecondaryBullet(struct BulletCollection* this, struct SpaceShip* ss){
  804a3c:	defffb04 	addi	sp,sp,-20
  804a40:	dfc00415 	stw	ra,16(sp)
  804a44:	df000315 	stw	fp,12(sp)
  804a48:	df000304 	addi	fp,sp,12
  804a4c:	e13ffd15 	stw	r4,-12(fp)
  804a50:	e17ffe15 	stw	r5,-8(fp)
	if (this->pStart > 49 || this->total_bullet_available < 1){
  804a54:	e0bffd17 	ldw	r2,-12(fp)
  804a58:	10803517 	ldw	r2,212(r2)
  804a5c:	10800c88 	cmpgei	r2,r2,50
  804a60:	1000041e 	bne	r2,zero,804a74 <launchSecondaryBullet+0x38>
  804a64:	e0bffd17 	ldw	r2,-12(fp)
  804a68:	10803717 	ldw	r2,220(r2)
  804a6c:	10800048 	cmpgei	r2,r2,1
  804a70:	1000051e 	bne	r2,zero,804a88 <launchSecondaryBullet+0x4c>
		printf("load secondary bullet error\n");
  804a74:	010020f4 	movhi	r4,131
  804a78:	2120cd04 	addi	r4,r4,-31948
  804a7c:	08158640 	call	815864 <puts>
		return false;
  804a80:	e03fff15 	stw	zero,-4(fp)
  804a84:	00004f06 	br	804bc4 <launchSecondaryBullet+0x188>
	}
	setStats(this->bullets[this->pStart]->super, 1);
  804a88:	e0bffd17 	ldw	r2,-12(fp)
  804a8c:	10803517 	ldw	r2,212(r2)
  804a90:	e0fffd17 	ldw	r3,-12(fp)
  804a94:	1085883a 	add	r2,r2,r2
  804a98:	1085883a 	add	r2,r2,r2
  804a9c:	10c5883a 	add	r2,r2,r3
  804aa0:	10800104 	addi	r2,r2,4
  804aa4:	10800017 	ldw	r2,0(r2)
  804aa8:	11000017 	ldw	r4,0(r2)
  804aac:	01400044 	movi	r5,1
  804ab0:	08100ac0 	call	8100ac <setStats>
	this->bullets[this->pStart]->super->scale = 4;
  804ab4:	e0bffd17 	ldw	r2,-12(fp)
  804ab8:	10803517 	ldw	r2,212(r2)
  804abc:	e0fffd17 	ldw	r3,-12(fp)
  804ac0:	1085883a 	add	r2,r2,r2
  804ac4:	1085883a 	add	r2,r2,r2
  804ac8:	10c5883a 	add	r2,r2,r3
  804acc:	10800104 	addi	r2,r2,4
  804ad0:	10800017 	ldw	r2,0(r2)
  804ad4:	10c00017 	ldw	r3,0(r2)
  804ad8:	00800104 	movi	r2,4
  804adc:	18800215 	stw	r2,8(r3)
	this->bullets[this->pStart]->super->collideRange = 4;
  804ae0:	e0bffd17 	ldw	r2,-12(fp)
  804ae4:	10803517 	ldw	r2,212(r2)
  804ae8:	e0fffd17 	ldw	r3,-12(fp)
  804aec:	1085883a 	add	r2,r2,r2
  804af0:	1085883a 	add	r2,r2,r2
  804af4:	10c5883a 	add	r2,r2,r3
  804af8:	10800104 	addi	r2,r2,4
  804afc:	10800017 	ldw	r2,0(r2)
  804b00:	10c00017 	ldw	r3,0(r2)
  804b04:	00800104 	movi	r2,4
  804b08:	18800815 	stw	r2,32(r3)
	setBulletInitPosition(ss->super->center_x, ss->super->center_y, this->bullets[this->pStart]);
  804b0c:	e0bffe17 	ldw	r2,-8(fp)
  804b10:	10800017 	ldw	r2,0(r2)
  804b14:	11000517 	ldw	r4,20(r2)
  804b18:	e0bffe17 	ldw	r2,-8(fp)
  804b1c:	10800017 	ldw	r2,0(r2)
  804b20:	11400617 	ldw	r5,24(r2)
  804b24:	e0bffd17 	ldw	r2,-12(fp)
  804b28:	10803517 	ldw	r2,212(r2)
  804b2c:	e0fffd17 	ldw	r3,-12(fp)
  804b30:	1085883a 	add	r2,r2,r2
  804b34:	1085883a 	add	r2,r2,r2
  804b38:	10c5883a 	add	r2,r2,r3
  804b3c:	10800104 	addi	r2,r2,4
  804b40:	11800017 	ldw	r6,0(r2)
  804b44:	080390c0 	call	80390c <setBulletInitPosition>
	addToEnv(this->env, this->bullets[this->pStart]->super);
  804b48:	e0bffd17 	ldw	r2,-12(fp)
  804b4c:	11003317 	ldw	r4,204(r2)
  804b50:	e0bffd17 	ldw	r2,-12(fp)
  804b54:	10803517 	ldw	r2,212(r2)
  804b58:	e0fffd17 	ldw	r3,-12(fp)
  804b5c:	1085883a 	add	r2,r2,r2
  804b60:	1085883a 	add	r2,r2,r2
  804b64:	10c5883a 	add	r2,r2,r3
  804b68:	10800104 	addi	r2,r2,4
  804b6c:	10800017 	ldw	r2,0(r2)
  804b70:	11400017 	ldw	r5,0(r2)
  804b74:	0808a100 	call	808a10 <addToEnv>
	addObjToCollide(this->collision_checker, this->bullets[this->pStart]->super);
  804b78:	e0bffd17 	ldw	r2,-12(fp)
  804b7c:	11003417 	ldw	r4,208(r2)
  804b80:	e0bffd17 	ldw	r2,-12(fp)
  804b84:	10803517 	ldw	r2,212(r2)
  804b88:	e0fffd17 	ldw	r3,-12(fp)
  804b8c:	1085883a 	add	r2,r2,r2
  804b90:	1085883a 	add	r2,r2,r2
  804b94:	10c5883a 	add	r2,r2,r3
  804b98:	10800104 	addi	r2,r2,4
  804b9c:	10800017 	ldw	r2,0(r2)
  804ba0:	11400017 	ldw	r5,0(r2)
  804ba4:	080707c0 	call	80707c <addObjToCollide>
	this->total_bullet_available--;
  804ba8:	e0bffd17 	ldw	r2,-12(fp)
  804bac:	10803717 	ldw	r2,220(r2)
  804bb0:	10ffffc4 	addi	r3,r2,-1
  804bb4:	e0bffd17 	ldw	r2,-12(fp)
  804bb8:	10c03715 	stw	r3,220(r2)
	return true;
  804bbc:	00800044 	movi	r2,1
  804bc0:	e0bfff15 	stw	r2,-4(fp)
  804bc4:	e0bfff17 	ldw	r2,-4(fp)
}
  804bc8:	e037883a 	mov	sp,fp
  804bcc:	dfc00117 	ldw	ra,4(sp)
  804bd0:	df000017 	ldw	fp,0(sp)
  804bd4:	dec00204 	addi	sp,sp,8
  804bd8:	f800283a 	ret

00804bdc <nextBullet>:

/*
 * This is the helper function that increase the index of bullet
 */
void nextBullet(struct BulletCollection* self) {
  804bdc:	defffe04 	addi	sp,sp,-8
  804be0:	df000115 	stw	fp,4(sp)
  804be4:	df000104 	addi	fp,sp,4
  804be8:	e13fff15 	stw	r4,-4(fp)
	if (self->pStart < 49)
  804bec:	e0bfff17 	ldw	r2,-4(fp)
  804bf0:	10803517 	ldw	r2,212(r2)
  804bf4:	10800c48 	cmpgei	r2,r2,49
  804bf8:	1000061e 	bne	r2,zero,804c14 <nextBullet+0x38>
		self->pStart++;
  804bfc:	e0bfff17 	ldw	r2,-4(fp)
  804c00:	10803517 	ldw	r2,212(r2)
  804c04:	10c00044 	addi	r3,r2,1
  804c08:	e0bfff17 	ldw	r2,-4(fp)
  804c0c:	10c03515 	stw	r3,212(r2)
  804c10:	00000206 	br	804c1c <nextBullet+0x40>
	else
		self->pStart = 0;
  804c14:	e0bfff17 	ldw	r2,-4(fp)
  804c18:	10003515 	stw	zero,212(r2)
}
  804c1c:	e037883a 	mov	sp,fp
  804c20:	df000017 	ldw	fp,0(sp)
  804c24:	dec00104 	addi	sp,sp,4
  804c28:	f800283a 	ret

00804c2c <fire_tower1_level1>:
/*
 * fire_tower1_level1
 * this function will prepare bullets before shooting,
 * by calculating acceleration needed, set the initial position and shoots the bullet
 */
void fire_tower1_level1(int en_x, int en_y, struct BulletCollection* self, struct SpaceShip* ss){
  804c2c:	defffa04 	addi	sp,sp,-24
  804c30:	dfc00515 	stw	ra,20(sp)
  804c34:	df000415 	stw	fp,16(sp)
  804c38:	df000404 	addi	fp,sp,16
  804c3c:	e13ffc15 	stw	r4,-16(fp)
  804c40:	e17ffd15 	stw	r5,-12(fp)
  804c44:	e1bffe15 	stw	r6,-8(fp)
  804c48:	e1ffff15 	stw	r7,-4(fp)

	if(!launchMainBullet(self, ss)) return;
  804c4c:	e13ffe17 	ldw	r4,-8(fp)
  804c50:	e17fff17 	ldw	r5,-4(fp)
  804c54:	08049200 	call	804920 <launchMainBullet>
  804c58:	1080005c 	xori	r2,r2,1
  804c5c:	10803fcc 	andi	r2,r2,255
  804c60:	1004c03a 	cmpne	r2,r2,zero
  804c64:	10000d1e 	bne	r2,zero,804c9c <fire_tower1_level1+0x70>
	setBulletAcceleration((en_x), (en_y), self->bullets[self->pStart]);
  804c68:	e0bffe17 	ldw	r2,-8(fp)
  804c6c:	10803517 	ldw	r2,212(r2)
  804c70:	e0fffe17 	ldw	r3,-8(fp)
  804c74:	1085883a 	add	r2,r2,r2
  804c78:	1085883a 	add	r2,r2,r2
  804c7c:	10c5883a 	add	r2,r2,r3
  804c80:	10800104 	addi	r2,r2,4
  804c84:	11800017 	ldw	r6,0(r2)
  804c88:	e13ffc17 	ldw	r4,-16(fp)
  804c8c:	e17ffd17 	ldw	r5,-12(fp)
  804c90:	0805db80 	call	805db8 <setBulletAcceleration>
	nextBullet(self);
  804c94:	e13ffe17 	ldw	r4,-8(fp)
  804c98:	0804bdc0 	call	804bdc <nextBullet>
	//printf("pStart: %d, pEnd: %d, bullets left: %d\n", self->pStart, self->pEnd, self->total_bullet_available);
}
  804c9c:	e037883a 	mov	sp,fp
  804ca0:	dfc00117 	ldw	ra,4(sp)
  804ca4:	df000017 	ldw	fp,0(sp)
  804ca8:	dec00204 	addi	sp,sp,8
  804cac:	f800283a 	ret

00804cb0 <fire_tower1_level2>:
/*
 * fire_tower1_level2	: this function is available weapon for tower type 1 to upgrade
 * bullet's behavior	: 3 bullets will be shot at once, bullet1 will go directly to the enemy
 *						: bullet2 will be shot at -45deg from bullet1, bullet3 will be shot at +45deg from bullet1.
 */
void fire_tower1_level2(int en_x, int en_y, struct BulletCollection* self, struct SpaceShip* ss){
  804cb0:	defff404 	addi	sp,sp,-48
  804cb4:	dfc00b15 	stw	ra,44(sp)
  804cb8:	df000a15 	stw	fp,40(sp)
  804cbc:	dc800915 	stw	r18,36(sp)
  804cc0:	dc400815 	stw	r17,32(sp)
  804cc4:	dc000715 	stw	r16,28(sp)
  804cc8:	df000704 	addi	fp,sp,28
  804ccc:	e13ffc15 	stw	r4,-16(fp)
  804cd0:	e17ffd15 	stw	r5,-12(fp)
  804cd4:	e1bffe15 	stw	r6,-8(fp)
  804cd8:	e1ffff15 	stw	r7,-4(fp)
	if(self->total_bullet_available > 3){
  804cdc:	e0bffe17 	ldw	r2,-8(fp)
  804ce0:	10803717 	ldw	r2,220(r2)
  804ce4:	10800110 	cmplti	r2,r2,4
  804ce8:	1001361e 	bne	r2,zero,8051c4 <fire_tower1_level2+0x514>

		// set up Bullet1
		int bullet1_index = self->pStart;
  804cec:	e0bffe17 	ldw	r2,-8(fp)
  804cf0:	10803517 	ldw	r2,212(r2)
  804cf4:	e0bffb15 	stw	r2,-20(fp)
		if(!launchMainBullet(self, ss)) return;
  804cf8:	e13ffe17 	ldw	r4,-8(fp)
  804cfc:	e17fff17 	ldw	r5,-4(fp)
  804d00:	08049200 	call	804920 <launchMainBullet>
  804d04:	1080005c 	xori	r2,r2,1
  804d08:	10803fcc 	andi	r2,r2,255
  804d0c:	1004c03a 	cmpne	r2,r2,zero
  804d10:	10012c1e 	bne	r2,zero,8051c4 <fire_tower1_level2+0x514>
		setBulletAcceleration(en_x, en_y, self->bullets[bullet1_index]);
  804d14:	e0bffb17 	ldw	r2,-20(fp)
  804d18:	e0fffe17 	ldw	r3,-8(fp)
  804d1c:	1085883a 	add	r2,r2,r2
  804d20:	1085883a 	add	r2,r2,r2
  804d24:	10c5883a 	add	r2,r2,r3
  804d28:	10800104 	addi	r2,r2,4
  804d2c:	11800017 	ldw	r6,0(r2)
  804d30:	e13ffc17 	ldw	r4,-16(fp)
  804d34:	e17ffd17 	ldw	r5,-12(fp)
  804d38:	0805db80 	call	805db8 <setBulletAcceleration>
		nextBullet(self);
  804d3c:	e13ffe17 	ldw	r4,-8(fp)
  804d40:	0804bdc0 	call	804bdc <nextBullet>

		// set up Bullet2
		int bullet2_index = self->pStart;
  804d44:	e0bffe17 	ldw	r2,-8(fp)
  804d48:	10803517 	ldw	r2,212(r2)
  804d4c:	e0bffa15 	stw	r2,-24(fp)
		if(!launchMainBullet(self, ss)) return;
  804d50:	e13ffe17 	ldw	r4,-8(fp)
  804d54:	e17fff17 	ldw	r5,-4(fp)
  804d58:	08049200 	call	804920 <launchMainBullet>
  804d5c:	1080005c 	xori	r2,r2,1
  804d60:	10803fcc 	andi	r2,r2,255
  804d64:	1004c03a 	cmpne	r2,r2,zero
  804d68:	1001161e 	bne	r2,zero,8051c4 <fire_tower1_level2+0x514>
		self->bullets[bullet2_index]->acc_x = (self->bullets[bullet1_index]->acc_x * 0.7071) + (self->bullets[bullet1_index]->acc_y * 0.7071);
  804d6c:	e0bffa17 	ldw	r2,-24(fp)
  804d70:	e0fffe17 	ldw	r3,-8(fp)
  804d74:	1085883a 	add	r2,r2,r2
  804d78:	1085883a 	add	r2,r2,r2
  804d7c:	10c5883a 	add	r2,r2,r3
  804d80:	10800104 	addi	r2,r2,4
  804d84:	14800017 	ldw	r18,0(r2)
  804d88:	e0bffb17 	ldw	r2,-20(fp)
  804d8c:	e0fffe17 	ldw	r3,-8(fp)
  804d90:	1085883a 	add	r2,r2,r2
  804d94:	1085883a 	add	r2,r2,r2
  804d98:	10c5883a 	add	r2,r2,r3
  804d9c:	10800104 	addi	r2,r2,4
  804da0:	10800017 	ldw	r2,0(r2)
  804da4:	10800317 	ldw	r2,12(r2)
  804da8:	1009883a 	mov	r4,r2
  804dac:	08136d00 	call	8136d0 <__extendsfdf2>
  804db0:	100b883a 	mov	r5,r2
  804db4:	180d883a 	mov	r6,r3
  804db8:	2809883a 	mov	r4,r5
  804dbc:	300b883a 	mov	r5,r6
  804dc0:	018b7834 	movhi	r6,11744
  804dc4:	318346c4 	addi	r6,r6,3355
  804dc8:	01cff9f4 	movhi	r7,16359
  804dcc:	39e82404 	addi	r7,r7,-24432
  804dd0:	0813ce80 	call	813ce8 <__muldf3>
  804dd4:	1009883a 	mov	r4,r2
  804dd8:	180b883a 	mov	r5,r3
  804ddc:	2021883a 	mov	r16,r4
  804de0:	2823883a 	mov	r17,r5
  804de4:	e0bffb17 	ldw	r2,-20(fp)
  804de8:	e0fffe17 	ldw	r3,-8(fp)
  804dec:	1085883a 	add	r2,r2,r2
  804df0:	1085883a 	add	r2,r2,r2
  804df4:	10c5883a 	add	r2,r2,r3
  804df8:	10800104 	addi	r2,r2,4
  804dfc:	10800017 	ldw	r2,0(r2)
  804e00:	10800417 	ldw	r2,16(r2)
  804e04:	1009883a 	mov	r4,r2
  804e08:	08136d00 	call	8136d0 <__extendsfdf2>
  804e0c:	100b883a 	mov	r5,r2
  804e10:	180d883a 	mov	r6,r3
  804e14:	2809883a 	mov	r4,r5
  804e18:	300b883a 	mov	r5,r6
  804e1c:	018b7834 	movhi	r6,11744
  804e20:	318346c4 	addi	r6,r6,3355
  804e24:	01cff9f4 	movhi	r7,16359
  804e28:	39e82404 	addi	r7,r7,-24432
  804e2c:	0813ce80 	call	813ce8 <__muldf3>
  804e30:	1009883a 	mov	r4,r2
  804e34:	180b883a 	mov	r5,r3
  804e38:	2005883a 	mov	r2,r4
  804e3c:	2807883a 	mov	r3,r5
  804e40:	8009883a 	mov	r4,r16
  804e44:	880b883a 	mov	r5,r17
  804e48:	100d883a 	mov	r6,r2
  804e4c:	180f883a 	mov	r7,r3
  804e50:	0813c740 	call	813c74 <__adddf3>
  804e54:	1009883a 	mov	r4,r2
  804e58:	180b883a 	mov	r5,r3
  804e5c:	2005883a 	mov	r2,r4
  804e60:	2807883a 	mov	r3,r5
  804e64:	1009883a 	mov	r4,r2
  804e68:	180b883a 	mov	r5,r3
  804e6c:	081450c0 	call	81450c <__truncdfsf2>
  804e70:	90800315 	stw	r2,12(r18)
		self->bullets[bullet2_index]->acc_y = (self->bullets[bullet1_index]->acc_x * -0.7071) + (self->bullets[bullet1_index]->acc_y * 0.7071);
  804e74:	e0bffa17 	ldw	r2,-24(fp)
  804e78:	e0fffe17 	ldw	r3,-8(fp)
  804e7c:	1085883a 	add	r2,r2,r2
  804e80:	1085883a 	add	r2,r2,r2
  804e84:	10c5883a 	add	r2,r2,r3
  804e88:	10800104 	addi	r2,r2,4
  804e8c:	14800017 	ldw	r18,0(r2)
  804e90:	e0bffb17 	ldw	r2,-20(fp)
  804e94:	e0fffe17 	ldw	r3,-8(fp)
  804e98:	1085883a 	add	r2,r2,r2
  804e9c:	1085883a 	add	r2,r2,r2
  804ea0:	10c5883a 	add	r2,r2,r3
  804ea4:	10800104 	addi	r2,r2,4
  804ea8:	10800017 	ldw	r2,0(r2)
  804eac:	10800317 	ldw	r2,12(r2)
  804eb0:	1009883a 	mov	r4,r2
  804eb4:	08136d00 	call	8136d0 <__extendsfdf2>
  804eb8:	100b883a 	mov	r5,r2
  804ebc:	180d883a 	mov	r6,r3
  804ec0:	2809883a 	mov	r4,r5
  804ec4:	300b883a 	mov	r5,r6
  804ec8:	018b7834 	movhi	r6,11744
  804ecc:	318346c4 	addi	r6,r6,3355
  804ed0:	01eff9f4 	movhi	r7,49127
  804ed4:	39e82404 	addi	r7,r7,-24432
  804ed8:	0813ce80 	call	813ce8 <__muldf3>
  804edc:	1009883a 	mov	r4,r2
  804ee0:	180b883a 	mov	r5,r3
  804ee4:	2021883a 	mov	r16,r4
  804ee8:	2823883a 	mov	r17,r5
  804eec:	e0bffb17 	ldw	r2,-20(fp)
  804ef0:	e0fffe17 	ldw	r3,-8(fp)
  804ef4:	1085883a 	add	r2,r2,r2
  804ef8:	1085883a 	add	r2,r2,r2
  804efc:	10c5883a 	add	r2,r2,r3
  804f00:	10800104 	addi	r2,r2,4
  804f04:	10800017 	ldw	r2,0(r2)
  804f08:	10800417 	ldw	r2,16(r2)
  804f0c:	1009883a 	mov	r4,r2
  804f10:	08136d00 	call	8136d0 <__extendsfdf2>
  804f14:	100b883a 	mov	r5,r2
  804f18:	180d883a 	mov	r6,r3
  804f1c:	2809883a 	mov	r4,r5
  804f20:	300b883a 	mov	r5,r6
  804f24:	018b7834 	movhi	r6,11744
  804f28:	318346c4 	addi	r6,r6,3355
  804f2c:	01cff9f4 	movhi	r7,16359
  804f30:	39e82404 	addi	r7,r7,-24432
  804f34:	0813ce80 	call	813ce8 <__muldf3>
  804f38:	1009883a 	mov	r4,r2
  804f3c:	180b883a 	mov	r5,r3
  804f40:	2005883a 	mov	r2,r4
  804f44:	2807883a 	mov	r3,r5
  804f48:	8009883a 	mov	r4,r16
  804f4c:	880b883a 	mov	r5,r17
  804f50:	100d883a 	mov	r6,r2
  804f54:	180f883a 	mov	r7,r3
  804f58:	0813c740 	call	813c74 <__adddf3>
  804f5c:	1009883a 	mov	r4,r2
  804f60:	180b883a 	mov	r5,r3
  804f64:	2005883a 	mov	r2,r4
  804f68:	2807883a 	mov	r3,r5
  804f6c:	1009883a 	mov	r4,r2
  804f70:	180b883a 	mov	r5,r3
  804f74:	081450c0 	call	81450c <__truncdfsf2>
  804f78:	90800415 	stw	r2,16(r18)
		nextBullet(self);
  804f7c:	e13ffe17 	ldw	r4,-8(fp)
  804f80:	0804bdc0 	call	804bdc <nextBullet>

		//set up Bullet3
		int bullet3_index = self->pStart;
  804f84:	e0bffe17 	ldw	r2,-8(fp)
  804f88:	10803517 	ldw	r2,212(r2)
  804f8c:	e0bff915 	stw	r2,-28(fp)
		if(!launchMainBullet(self, ss)) return;
  804f90:	e13ffe17 	ldw	r4,-8(fp)
  804f94:	e17fff17 	ldw	r5,-4(fp)
  804f98:	08049200 	call	804920 <launchMainBullet>
  804f9c:	1080005c 	xori	r2,r2,1
  804fa0:	10803fcc 	andi	r2,r2,255
  804fa4:	1004c03a 	cmpne	r2,r2,zero
  804fa8:	1000861e 	bne	r2,zero,8051c4 <fire_tower1_level2+0x514>
		self->bullets[bullet3_index]->acc_x = (self->bullets[bullet1_index]->acc_x * 0.7071) - (self->bullets[bullet1_index]->acc_y * 0.7071);
  804fac:	e0bff917 	ldw	r2,-28(fp)
  804fb0:	e0fffe17 	ldw	r3,-8(fp)
  804fb4:	1085883a 	add	r2,r2,r2
  804fb8:	1085883a 	add	r2,r2,r2
  804fbc:	10c5883a 	add	r2,r2,r3
  804fc0:	10800104 	addi	r2,r2,4
  804fc4:	14800017 	ldw	r18,0(r2)
  804fc8:	e0bffb17 	ldw	r2,-20(fp)
  804fcc:	e0fffe17 	ldw	r3,-8(fp)
  804fd0:	1085883a 	add	r2,r2,r2
  804fd4:	1085883a 	add	r2,r2,r2
  804fd8:	10c5883a 	add	r2,r2,r3
  804fdc:	10800104 	addi	r2,r2,4
  804fe0:	10800017 	ldw	r2,0(r2)
  804fe4:	10800317 	ldw	r2,12(r2)
  804fe8:	1009883a 	mov	r4,r2
  804fec:	08136d00 	call	8136d0 <__extendsfdf2>
  804ff0:	100b883a 	mov	r5,r2
  804ff4:	180d883a 	mov	r6,r3
  804ff8:	2809883a 	mov	r4,r5
  804ffc:	300b883a 	mov	r5,r6
  805000:	018b7834 	movhi	r6,11744
  805004:	318346c4 	addi	r6,r6,3355
  805008:	01cff9f4 	movhi	r7,16359
  80500c:	39e82404 	addi	r7,r7,-24432
  805010:	0813ce80 	call	813ce8 <__muldf3>
  805014:	1009883a 	mov	r4,r2
  805018:	180b883a 	mov	r5,r3
  80501c:	2021883a 	mov	r16,r4
  805020:	2823883a 	mov	r17,r5
  805024:	e0bffb17 	ldw	r2,-20(fp)
  805028:	e0fffe17 	ldw	r3,-8(fp)
  80502c:	1085883a 	add	r2,r2,r2
  805030:	1085883a 	add	r2,r2,r2
  805034:	10c5883a 	add	r2,r2,r3
  805038:	10800104 	addi	r2,r2,4
  80503c:	10800017 	ldw	r2,0(r2)
  805040:	10800417 	ldw	r2,16(r2)
  805044:	1009883a 	mov	r4,r2
  805048:	08136d00 	call	8136d0 <__extendsfdf2>
  80504c:	100b883a 	mov	r5,r2
  805050:	180d883a 	mov	r6,r3
  805054:	2809883a 	mov	r4,r5
  805058:	300b883a 	mov	r5,r6
  80505c:	018b7834 	movhi	r6,11744
  805060:	318346c4 	addi	r6,r6,3355
  805064:	01eff9f4 	movhi	r7,49127
  805068:	39e82404 	addi	r7,r7,-24432
  80506c:	0813ce80 	call	813ce8 <__muldf3>
  805070:	1009883a 	mov	r4,r2
  805074:	180b883a 	mov	r5,r3
  805078:	2005883a 	mov	r2,r4
  80507c:	2807883a 	mov	r3,r5
  805080:	8009883a 	mov	r4,r16
  805084:	880b883a 	mov	r5,r17
  805088:	100d883a 	mov	r6,r2
  80508c:	180f883a 	mov	r7,r3
  805090:	0813c740 	call	813c74 <__adddf3>
  805094:	1009883a 	mov	r4,r2
  805098:	180b883a 	mov	r5,r3
  80509c:	2005883a 	mov	r2,r4
  8050a0:	2807883a 	mov	r3,r5
  8050a4:	1009883a 	mov	r4,r2
  8050a8:	180b883a 	mov	r5,r3
  8050ac:	081450c0 	call	81450c <__truncdfsf2>
  8050b0:	90800315 	stw	r2,12(r18)
		self->bullets[bullet3_index]->acc_y = (self->bullets[bullet1_index]->acc_x * 0.7071) + (self->bullets[bullet1_index]->acc_y * 0.7071);
  8050b4:	e0bff917 	ldw	r2,-28(fp)
  8050b8:	e0fffe17 	ldw	r3,-8(fp)
  8050bc:	1085883a 	add	r2,r2,r2
  8050c0:	1085883a 	add	r2,r2,r2
  8050c4:	10c5883a 	add	r2,r2,r3
  8050c8:	10800104 	addi	r2,r2,4
  8050cc:	14800017 	ldw	r18,0(r2)
  8050d0:	e0bffb17 	ldw	r2,-20(fp)
  8050d4:	e0fffe17 	ldw	r3,-8(fp)
  8050d8:	1085883a 	add	r2,r2,r2
  8050dc:	1085883a 	add	r2,r2,r2
  8050e0:	10c5883a 	add	r2,r2,r3
  8050e4:	10800104 	addi	r2,r2,4
  8050e8:	10800017 	ldw	r2,0(r2)
  8050ec:	10800317 	ldw	r2,12(r2)
  8050f0:	1009883a 	mov	r4,r2
  8050f4:	08136d00 	call	8136d0 <__extendsfdf2>
  8050f8:	100b883a 	mov	r5,r2
  8050fc:	180d883a 	mov	r6,r3
  805100:	2809883a 	mov	r4,r5
  805104:	300b883a 	mov	r5,r6
  805108:	018b7834 	movhi	r6,11744
  80510c:	318346c4 	addi	r6,r6,3355
  805110:	01cff9f4 	movhi	r7,16359
  805114:	39e82404 	addi	r7,r7,-24432
  805118:	0813ce80 	call	813ce8 <__muldf3>
  80511c:	1009883a 	mov	r4,r2
  805120:	180b883a 	mov	r5,r3
  805124:	2021883a 	mov	r16,r4
  805128:	2823883a 	mov	r17,r5
  80512c:	e0bffb17 	ldw	r2,-20(fp)
  805130:	e0fffe17 	ldw	r3,-8(fp)
  805134:	1085883a 	add	r2,r2,r2
  805138:	1085883a 	add	r2,r2,r2
  80513c:	10c5883a 	add	r2,r2,r3
  805140:	10800104 	addi	r2,r2,4
  805144:	10800017 	ldw	r2,0(r2)
  805148:	10800417 	ldw	r2,16(r2)
  80514c:	1009883a 	mov	r4,r2
  805150:	08136d00 	call	8136d0 <__extendsfdf2>
  805154:	100b883a 	mov	r5,r2
  805158:	180d883a 	mov	r6,r3
  80515c:	2809883a 	mov	r4,r5
  805160:	300b883a 	mov	r5,r6
  805164:	018b7834 	movhi	r6,11744
  805168:	318346c4 	addi	r6,r6,3355
  80516c:	01cff9f4 	movhi	r7,16359
  805170:	39e82404 	addi	r7,r7,-24432
  805174:	0813ce80 	call	813ce8 <__muldf3>
  805178:	1009883a 	mov	r4,r2
  80517c:	180b883a 	mov	r5,r3
  805180:	2005883a 	mov	r2,r4
  805184:	2807883a 	mov	r3,r5
  805188:	8009883a 	mov	r4,r16
  80518c:	880b883a 	mov	r5,r17
  805190:	100d883a 	mov	r6,r2
  805194:	180f883a 	mov	r7,r3
  805198:	0813c740 	call	813c74 <__adddf3>
  80519c:	1009883a 	mov	r4,r2
  8051a0:	180b883a 	mov	r5,r3
  8051a4:	2005883a 	mov	r2,r4
  8051a8:	2807883a 	mov	r3,r5
  8051ac:	1009883a 	mov	r4,r2
  8051b0:	180b883a 	mov	r5,r3
  8051b4:	081450c0 	call	81450c <__truncdfsf2>
  8051b8:	90800415 	stw	r2,16(r18)
		nextBullet(self);
  8051bc:	e13ffe17 	ldw	r4,-8(fp)
  8051c0:	0804bdc0 	call	804bdc <nextBullet>
	}
}
  8051c4:	e037883a 	mov	sp,fp
  8051c8:	dfc00417 	ldw	ra,16(sp)
  8051cc:	df000317 	ldw	fp,12(sp)
  8051d0:	dc800217 	ldw	r18,8(sp)
  8051d4:	dc400117 	ldw	r17,4(sp)
  8051d8:	dc000017 	ldw	r16,0(sp)
  8051dc:	dec00504 	addi	sp,sp,20
  8051e0:	f800283a 	ret

008051e4 <fire_tower2_level1>:
 * fire_tower2_level1 :
 * if tower is located on position with x and y greater than 30,
 * this weapon will send enemy back by 30 pixels.
 * Otherwise, it will send enemy back to (0,0)
 */
void fire_tower2_level1(int en_x, int en_y, struct BulletCollection* this, struct SpaceShip* ss){
  8051e4:	defffa04 	addi	sp,sp,-24
  8051e8:	dfc00515 	stw	ra,20(sp)
  8051ec:	df000415 	stw	fp,16(sp)
  8051f0:	df000404 	addi	fp,sp,16
  8051f4:	e13ffc15 	stw	r4,-16(fp)
  8051f8:	e17ffd15 	stw	r5,-12(fp)
  8051fc:	e1bffe15 	stw	r6,-8(fp)
  805200:	e1ffff15 	stw	r7,-4(fp)
	if(!launchMainBullet(this, ss)) return;
  805204:	e13ffe17 	ldw	r4,-8(fp)
  805208:	e17fff17 	ldw	r5,-4(fp)
  80520c:	08049200 	call	804920 <launchMainBullet>
  805210:	1080005c 	xori	r2,r2,1
  805214:	10803fcc 	andi	r2,r2,255
  805218:	1004c03a 	cmpne	r2,r2,zero
  80521c:	10000b1e 	bne	r2,zero,80524c <fire_tower2_level1+0x68>
	this->bullets[this->pStart]->image_changed_flag = 0; // using this variable as level. this means level1
  805220:	e0bffe17 	ldw	r2,-8(fp)
  805224:	10803517 	ldw	r2,212(r2)
  805228:	e0fffe17 	ldw	r3,-8(fp)
  80522c:	1085883a 	add	r2,r2,r2
  805230:	1085883a 	add	r2,r2,r2
  805234:	10c5883a 	add	r2,r2,r3
  805238:	10800104 	addi	r2,r2,4
  80523c:	10800017 	ldw	r2,0(r2)
  805240:	10001015 	stw	zero,64(r2)
	nextBullet(this);
  805244:	e13ffe17 	ldw	r4,-8(fp)
  805248:	0804bdc0 	call	804bdc <nextBullet>
}
  80524c:	e037883a 	mov	sp,fp
  805250:	dfc00117 	ldw	ra,4(sp)
  805254:	df000017 	ldw	fp,0(sp)
  805258:	dec00204 	addi	sp,sp,8
  80525c:	f800283a 	ret

00805260 <fire_tower2_level2>:

/*
 * fire_tower2_level2 :
 * this weapon will send enemy back to (0,0)
 */
void fire_tower2_level2(int en_x, int en_y, struct BulletCollection* this, struct SpaceShip* ss){
  805260:	defffa04 	addi	sp,sp,-24
  805264:	dfc00515 	stw	ra,20(sp)
  805268:	df000415 	stw	fp,16(sp)
  80526c:	df000404 	addi	fp,sp,16
  805270:	e13ffc15 	stw	r4,-16(fp)
  805274:	e17ffd15 	stw	r5,-12(fp)
  805278:	e1bffe15 	stw	r6,-8(fp)
  80527c:	e1ffff15 	stw	r7,-4(fp)
	if(!launchMainBullet(this, ss)) return;
  805280:	e13ffe17 	ldw	r4,-8(fp)
  805284:	e17fff17 	ldw	r5,-4(fp)
  805288:	08049200 	call	804920 <launchMainBullet>
  80528c:	1080005c 	xori	r2,r2,1
  805290:	10803fcc 	andi	r2,r2,255
  805294:	1004c03a 	cmpne	r2,r2,zero
  805298:	10000c1e 	bne	r2,zero,8052cc <fire_tower2_level2+0x6c>
	this->bullets[this->pStart]->image_changed_flag = 1; // this means level 2
  80529c:	e0bffe17 	ldw	r2,-8(fp)
  8052a0:	10803517 	ldw	r2,212(r2)
  8052a4:	e0fffe17 	ldw	r3,-8(fp)
  8052a8:	1085883a 	add	r2,r2,r2
  8052ac:	1085883a 	add	r2,r2,r2
  8052b0:	10c5883a 	add	r2,r2,r3
  8052b4:	10800104 	addi	r2,r2,4
  8052b8:	10c00017 	ldw	r3,0(r2)
  8052bc:	00800044 	movi	r2,1
  8052c0:	18801015 	stw	r2,64(r3)
	nextBullet(this);
  8052c4:	e13ffe17 	ldw	r4,-8(fp)
  8052c8:	0804bdc0 	call	804bdc <nextBullet>
}
  8052cc:	e037883a 	mov	sp,fp
  8052d0:	dfc00117 	ldw	ra,4(sp)
  8052d4:	df000017 	ldw	fp,0(sp)
  8052d8:	dec00204 	addi	sp,sp,8
  8052dc:	f800283a 	ret

008052e0 <fire_tower3_level1>:

void fire_tower3_level1(int en_x, int en_y, struct BulletCollection* this, struct SpaceShip* ss){
  8052e0:	defffa04 	addi	sp,sp,-24
  8052e4:	dfc00515 	stw	ra,20(sp)
  8052e8:	df000415 	stw	fp,16(sp)
  8052ec:	df000404 	addi	fp,sp,16
  8052f0:	e13ffc15 	stw	r4,-16(fp)
  8052f4:	e17ffd15 	stw	r5,-12(fp)
  8052f8:	e1bffe15 	stw	r6,-8(fp)
  8052fc:	e1ffff15 	stw	r7,-4(fp)
	if(!launchMainBullet(this, ss)) return;
  805300:	e13ffe17 	ldw	r4,-8(fp)
  805304:	e17fff17 	ldw	r5,-4(fp)
  805308:	08049200 	call	804920 <launchMainBullet>
  80530c:	1080005c 	xori	r2,r2,1
  805310:	10803fcc 	andi	r2,r2,255
  805314:	1004c03a 	cmpne	r2,r2,zero
  805318:	10000d1e 	bne	r2,zero,805350 <fire_tower3_level1+0x70>
	setBulletVelocity((en_x), (en_y), this->bullets[this->pStart]);
  80531c:	e0bffe17 	ldw	r2,-8(fp)
  805320:	10803517 	ldw	r2,212(r2)
  805324:	e0fffe17 	ldw	r3,-8(fp)
  805328:	1085883a 	add	r2,r2,r2
  80532c:	1085883a 	add	r2,r2,r2
  805330:	10c5883a 	add	r2,r2,r3
  805334:	10800104 	addi	r2,r2,4
  805338:	11800017 	ldw	r6,0(r2)
  80533c:	e13ffc17 	ldw	r4,-16(fp)
  805340:	e17ffd17 	ldw	r5,-12(fp)
  805344:	0805e280 	call	805e28 <setBulletVelocity>
	nextBullet(this);
  805348:	e13ffe17 	ldw	r4,-8(fp)
  80534c:	0804bdc0 	call	804bdc <nextBullet>
}
  805350:	e037883a 	mov	sp,fp
  805354:	dfc00117 	ldw	ra,4(sp)
  805358:	df000017 	ldw	fp,0(sp)
  80535c:	dec00204 	addi	sp,sp,8
  805360:	f800283a 	ret

00805364 <fire_tower3_level2>:
void fire_tower3_level2(int en_x, int en_y, struct BulletCollection* self, struct SpaceShip* ss){
  805364:	defff404 	addi	sp,sp,-48
  805368:	dfc00b15 	stw	ra,44(sp)
  80536c:	df000a15 	stw	fp,40(sp)
  805370:	dc800915 	stw	r18,36(sp)
  805374:	dc400815 	stw	r17,32(sp)
  805378:	dc000715 	stw	r16,28(sp)
  80537c:	df000704 	addi	fp,sp,28
  805380:	e13ffc15 	stw	r4,-16(fp)
  805384:	e17ffd15 	stw	r5,-12(fp)
  805388:	e1bffe15 	stw	r6,-8(fp)
  80538c:	e1ffff15 	stw	r7,-4(fp)
	if(self->total_bullet_available > 3){
  805390:	e0bffe17 	ldw	r2,-8(fp)
  805394:	10803717 	ldw	r2,220(r2)
  805398:	10800110 	cmplti	r2,r2,4
  80539c:	1001371e 	bne	r2,zero,80587c <fire_tower3_level2+0x518>

		// set up Bullet1
		int bullet1_index = self->pStart;
  8053a0:	e0bffe17 	ldw	r2,-8(fp)
  8053a4:	10803517 	ldw	r2,212(r2)
  8053a8:	e0bffb15 	stw	r2,-20(fp)
		if(!launchMainBullet(self, ss)) return;
  8053ac:	e13ffe17 	ldw	r4,-8(fp)
  8053b0:	e17fff17 	ldw	r5,-4(fp)
  8053b4:	08049200 	call	804920 <launchMainBullet>
  8053b8:	1080005c 	xori	r2,r2,1
  8053bc:	10803fcc 	andi	r2,r2,255
  8053c0:	1004c03a 	cmpne	r2,r2,zero
  8053c4:	10012d1e 	bne	r2,zero,80587c <fire_tower3_level2+0x518>
		setBulletVelocity((en_x), (en_y), self->bullets[self->pStart]);
  8053c8:	e0bffe17 	ldw	r2,-8(fp)
  8053cc:	10803517 	ldw	r2,212(r2)
  8053d0:	e0fffe17 	ldw	r3,-8(fp)
  8053d4:	1085883a 	add	r2,r2,r2
  8053d8:	1085883a 	add	r2,r2,r2
  8053dc:	10c5883a 	add	r2,r2,r3
  8053e0:	10800104 	addi	r2,r2,4
  8053e4:	11800017 	ldw	r6,0(r2)
  8053e8:	e13ffc17 	ldw	r4,-16(fp)
  8053ec:	e17ffd17 	ldw	r5,-12(fp)
  8053f0:	0805e280 	call	805e28 <setBulletVelocity>
		nextBullet(self);
  8053f4:	e13ffe17 	ldw	r4,-8(fp)
  8053f8:	0804bdc0 	call	804bdc <nextBullet>

		// set up Bullet2
		int bullet2_index = self->pStart;
  8053fc:	e0bffe17 	ldw	r2,-8(fp)
  805400:	10803517 	ldw	r2,212(r2)
  805404:	e0bffa15 	stw	r2,-24(fp)
		if(!launchMainBullet(self, ss)) return;
  805408:	e13ffe17 	ldw	r4,-8(fp)
  80540c:	e17fff17 	ldw	r5,-4(fp)
  805410:	08049200 	call	804920 <launchMainBullet>
  805414:	1080005c 	xori	r2,r2,1
  805418:	10803fcc 	andi	r2,r2,255
  80541c:	1004c03a 	cmpne	r2,r2,zero
  805420:	1001161e 	bne	r2,zero,80587c <fire_tower3_level2+0x518>
		self->bullets[bullet2_index]->v_x = (self->bullets[bullet1_index]->v_x * 0.7071) + (self->bullets[bullet1_index]->v_y * 0.7071);
  805424:	e0bffa17 	ldw	r2,-24(fp)
  805428:	e0fffe17 	ldw	r3,-8(fp)
  80542c:	1085883a 	add	r2,r2,r2
  805430:	1085883a 	add	r2,r2,r2
  805434:	10c5883a 	add	r2,r2,r3
  805438:	10800104 	addi	r2,r2,4
  80543c:	14800017 	ldw	r18,0(r2)
  805440:	e0bffb17 	ldw	r2,-20(fp)
  805444:	e0fffe17 	ldw	r3,-8(fp)
  805448:	1085883a 	add	r2,r2,r2
  80544c:	1085883a 	add	r2,r2,r2
  805450:	10c5883a 	add	r2,r2,r3
  805454:	10800104 	addi	r2,r2,4
  805458:	10800017 	ldw	r2,0(r2)
  80545c:	10800117 	ldw	r2,4(r2)
  805460:	1009883a 	mov	r4,r2
  805464:	08136d00 	call	8136d0 <__extendsfdf2>
  805468:	100b883a 	mov	r5,r2
  80546c:	180d883a 	mov	r6,r3
  805470:	2809883a 	mov	r4,r5
  805474:	300b883a 	mov	r5,r6
  805478:	018b7834 	movhi	r6,11744
  80547c:	318346c4 	addi	r6,r6,3355
  805480:	01cff9f4 	movhi	r7,16359
  805484:	39e82404 	addi	r7,r7,-24432
  805488:	0813ce80 	call	813ce8 <__muldf3>
  80548c:	1009883a 	mov	r4,r2
  805490:	180b883a 	mov	r5,r3
  805494:	2021883a 	mov	r16,r4
  805498:	2823883a 	mov	r17,r5
  80549c:	e0bffb17 	ldw	r2,-20(fp)
  8054a0:	e0fffe17 	ldw	r3,-8(fp)
  8054a4:	1085883a 	add	r2,r2,r2
  8054a8:	1085883a 	add	r2,r2,r2
  8054ac:	10c5883a 	add	r2,r2,r3
  8054b0:	10800104 	addi	r2,r2,4
  8054b4:	10800017 	ldw	r2,0(r2)
  8054b8:	10800217 	ldw	r2,8(r2)
  8054bc:	1009883a 	mov	r4,r2
  8054c0:	08136d00 	call	8136d0 <__extendsfdf2>
  8054c4:	100b883a 	mov	r5,r2
  8054c8:	180d883a 	mov	r6,r3
  8054cc:	2809883a 	mov	r4,r5
  8054d0:	300b883a 	mov	r5,r6
  8054d4:	018b7834 	movhi	r6,11744
  8054d8:	318346c4 	addi	r6,r6,3355
  8054dc:	01cff9f4 	movhi	r7,16359
  8054e0:	39e82404 	addi	r7,r7,-24432
  8054e4:	0813ce80 	call	813ce8 <__muldf3>
  8054e8:	1009883a 	mov	r4,r2
  8054ec:	180b883a 	mov	r5,r3
  8054f0:	2005883a 	mov	r2,r4
  8054f4:	2807883a 	mov	r3,r5
  8054f8:	8009883a 	mov	r4,r16
  8054fc:	880b883a 	mov	r5,r17
  805500:	100d883a 	mov	r6,r2
  805504:	180f883a 	mov	r7,r3
  805508:	0813c740 	call	813c74 <__adddf3>
  80550c:	1009883a 	mov	r4,r2
  805510:	180b883a 	mov	r5,r3
  805514:	2005883a 	mov	r2,r4
  805518:	2807883a 	mov	r3,r5
  80551c:	1009883a 	mov	r4,r2
  805520:	180b883a 	mov	r5,r3
  805524:	081450c0 	call	81450c <__truncdfsf2>
  805528:	90800115 	stw	r2,4(r18)
		self->bullets[bullet2_index]->v_y = (self->bullets[bullet1_index]->v_x * -0.7071) + (self->bullets[bullet1_index]->v_y * 0.7071);
  80552c:	e0bffa17 	ldw	r2,-24(fp)
  805530:	e0fffe17 	ldw	r3,-8(fp)
  805534:	1085883a 	add	r2,r2,r2
  805538:	1085883a 	add	r2,r2,r2
  80553c:	10c5883a 	add	r2,r2,r3
  805540:	10800104 	addi	r2,r2,4
  805544:	14800017 	ldw	r18,0(r2)
  805548:	e0bffb17 	ldw	r2,-20(fp)
  80554c:	e0fffe17 	ldw	r3,-8(fp)
  805550:	1085883a 	add	r2,r2,r2
  805554:	1085883a 	add	r2,r2,r2
  805558:	10c5883a 	add	r2,r2,r3
  80555c:	10800104 	addi	r2,r2,4
  805560:	10800017 	ldw	r2,0(r2)
  805564:	10800117 	ldw	r2,4(r2)
  805568:	1009883a 	mov	r4,r2
  80556c:	08136d00 	call	8136d0 <__extendsfdf2>
  805570:	100b883a 	mov	r5,r2
  805574:	180d883a 	mov	r6,r3
  805578:	2809883a 	mov	r4,r5
  80557c:	300b883a 	mov	r5,r6
  805580:	018b7834 	movhi	r6,11744
  805584:	318346c4 	addi	r6,r6,3355
  805588:	01eff9f4 	movhi	r7,49127
  80558c:	39e82404 	addi	r7,r7,-24432
  805590:	0813ce80 	call	813ce8 <__muldf3>
  805594:	1009883a 	mov	r4,r2
  805598:	180b883a 	mov	r5,r3
  80559c:	2021883a 	mov	r16,r4
  8055a0:	2823883a 	mov	r17,r5
  8055a4:	e0bffb17 	ldw	r2,-20(fp)
  8055a8:	e0fffe17 	ldw	r3,-8(fp)
  8055ac:	1085883a 	add	r2,r2,r2
  8055b0:	1085883a 	add	r2,r2,r2
  8055b4:	10c5883a 	add	r2,r2,r3
  8055b8:	10800104 	addi	r2,r2,4
  8055bc:	10800017 	ldw	r2,0(r2)
  8055c0:	10800217 	ldw	r2,8(r2)
  8055c4:	1009883a 	mov	r4,r2
  8055c8:	08136d00 	call	8136d0 <__extendsfdf2>
  8055cc:	100b883a 	mov	r5,r2
  8055d0:	180d883a 	mov	r6,r3
  8055d4:	2809883a 	mov	r4,r5
  8055d8:	300b883a 	mov	r5,r6
  8055dc:	018b7834 	movhi	r6,11744
  8055e0:	318346c4 	addi	r6,r6,3355
  8055e4:	01cff9f4 	movhi	r7,16359
  8055e8:	39e82404 	addi	r7,r7,-24432
  8055ec:	0813ce80 	call	813ce8 <__muldf3>
  8055f0:	1009883a 	mov	r4,r2
  8055f4:	180b883a 	mov	r5,r3
  8055f8:	2005883a 	mov	r2,r4
  8055fc:	2807883a 	mov	r3,r5
  805600:	8009883a 	mov	r4,r16
  805604:	880b883a 	mov	r5,r17
  805608:	100d883a 	mov	r6,r2
  80560c:	180f883a 	mov	r7,r3
  805610:	0813c740 	call	813c74 <__adddf3>
  805614:	1009883a 	mov	r4,r2
  805618:	180b883a 	mov	r5,r3
  80561c:	2005883a 	mov	r2,r4
  805620:	2807883a 	mov	r3,r5
  805624:	1009883a 	mov	r4,r2
  805628:	180b883a 	mov	r5,r3
  80562c:	081450c0 	call	81450c <__truncdfsf2>
  805630:	90800215 	stw	r2,8(r18)
		nextBullet(self);
  805634:	e13ffe17 	ldw	r4,-8(fp)
  805638:	0804bdc0 	call	804bdc <nextBullet>

		//set up Bullet3
		int bullet3_index = self->pStart;
  80563c:	e0bffe17 	ldw	r2,-8(fp)
  805640:	10803517 	ldw	r2,212(r2)
  805644:	e0bff915 	stw	r2,-28(fp)
		if(!launchMainBullet(self, ss)) return;
  805648:	e13ffe17 	ldw	r4,-8(fp)
  80564c:	e17fff17 	ldw	r5,-4(fp)
  805650:	08049200 	call	804920 <launchMainBullet>
  805654:	1080005c 	xori	r2,r2,1
  805658:	10803fcc 	andi	r2,r2,255
  80565c:	1004c03a 	cmpne	r2,r2,zero
  805660:	1000861e 	bne	r2,zero,80587c <fire_tower3_level2+0x518>
		self->bullets[bullet3_index]->v_x = (self->bullets[bullet1_index]->v_x * 0.7071) - (self->bullets[bullet1_index]->v_y * 0.7071);
  805664:	e0bff917 	ldw	r2,-28(fp)
  805668:	e0fffe17 	ldw	r3,-8(fp)
  80566c:	1085883a 	add	r2,r2,r2
  805670:	1085883a 	add	r2,r2,r2
  805674:	10c5883a 	add	r2,r2,r3
  805678:	10800104 	addi	r2,r2,4
  80567c:	14800017 	ldw	r18,0(r2)
  805680:	e0bffb17 	ldw	r2,-20(fp)
  805684:	e0fffe17 	ldw	r3,-8(fp)
  805688:	1085883a 	add	r2,r2,r2
  80568c:	1085883a 	add	r2,r2,r2
  805690:	10c5883a 	add	r2,r2,r3
  805694:	10800104 	addi	r2,r2,4
  805698:	10800017 	ldw	r2,0(r2)
  80569c:	10800117 	ldw	r2,4(r2)
  8056a0:	1009883a 	mov	r4,r2
  8056a4:	08136d00 	call	8136d0 <__extendsfdf2>
  8056a8:	100b883a 	mov	r5,r2
  8056ac:	180d883a 	mov	r6,r3
  8056b0:	2809883a 	mov	r4,r5
  8056b4:	300b883a 	mov	r5,r6
  8056b8:	018b7834 	movhi	r6,11744
  8056bc:	318346c4 	addi	r6,r6,3355
  8056c0:	01cff9f4 	movhi	r7,16359
  8056c4:	39e82404 	addi	r7,r7,-24432
  8056c8:	0813ce80 	call	813ce8 <__muldf3>
  8056cc:	1009883a 	mov	r4,r2
  8056d0:	180b883a 	mov	r5,r3
  8056d4:	2021883a 	mov	r16,r4
  8056d8:	2823883a 	mov	r17,r5
  8056dc:	e0bffb17 	ldw	r2,-20(fp)
  8056e0:	e0fffe17 	ldw	r3,-8(fp)
  8056e4:	1085883a 	add	r2,r2,r2
  8056e8:	1085883a 	add	r2,r2,r2
  8056ec:	10c5883a 	add	r2,r2,r3
  8056f0:	10800104 	addi	r2,r2,4
  8056f4:	10800017 	ldw	r2,0(r2)
  8056f8:	10800217 	ldw	r2,8(r2)
  8056fc:	1009883a 	mov	r4,r2
  805700:	08136d00 	call	8136d0 <__extendsfdf2>
  805704:	100b883a 	mov	r5,r2
  805708:	180d883a 	mov	r6,r3
  80570c:	2809883a 	mov	r4,r5
  805710:	300b883a 	mov	r5,r6
  805714:	018b7834 	movhi	r6,11744
  805718:	318346c4 	addi	r6,r6,3355
  80571c:	01eff9f4 	movhi	r7,49127
  805720:	39e82404 	addi	r7,r7,-24432
  805724:	0813ce80 	call	813ce8 <__muldf3>
  805728:	1009883a 	mov	r4,r2
  80572c:	180b883a 	mov	r5,r3
  805730:	2005883a 	mov	r2,r4
  805734:	2807883a 	mov	r3,r5
  805738:	8009883a 	mov	r4,r16
  80573c:	880b883a 	mov	r5,r17
  805740:	100d883a 	mov	r6,r2
  805744:	180f883a 	mov	r7,r3
  805748:	0813c740 	call	813c74 <__adddf3>
  80574c:	1009883a 	mov	r4,r2
  805750:	180b883a 	mov	r5,r3
  805754:	2005883a 	mov	r2,r4
  805758:	2807883a 	mov	r3,r5
  80575c:	1009883a 	mov	r4,r2
  805760:	180b883a 	mov	r5,r3
  805764:	081450c0 	call	81450c <__truncdfsf2>
  805768:	90800115 	stw	r2,4(r18)
		self->bullets[bullet3_index]->v_y = (self->bullets[bullet1_index]->v_x * 0.7071) + (self->bullets[bullet1_index]->v_y * 0.7071);
  80576c:	e0bff917 	ldw	r2,-28(fp)
  805770:	e0fffe17 	ldw	r3,-8(fp)
  805774:	1085883a 	add	r2,r2,r2
  805778:	1085883a 	add	r2,r2,r2
  80577c:	10c5883a 	add	r2,r2,r3
  805780:	10800104 	addi	r2,r2,4
  805784:	14800017 	ldw	r18,0(r2)
  805788:	e0bffb17 	ldw	r2,-20(fp)
  80578c:	e0fffe17 	ldw	r3,-8(fp)
  805790:	1085883a 	add	r2,r2,r2
  805794:	1085883a 	add	r2,r2,r2
  805798:	10c5883a 	add	r2,r2,r3
  80579c:	10800104 	addi	r2,r2,4
  8057a0:	10800017 	ldw	r2,0(r2)
  8057a4:	10800117 	ldw	r2,4(r2)
  8057a8:	1009883a 	mov	r4,r2
  8057ac:	08136d00 	call	8136d0 <__extendsfdf2>
  8057b0:	100b883a 	mov	r5,r2
  8057b4:	180d883a 	mov	r6,r3
  8057b8:	2809883a 	mov	r4,r5
  8057bc:	300b883a 	mov	r5,r6
  8057c0:	018b7834 	movhi	r6,11744
  8057c4:	318346c4 	addi	r6,r6,3355
  8057c8:	01cff9f4 	movhi	r7,16359
  8057cc:	39e82404 	addi	r7,r7,-24432
  8057d0:	0813ce80 	call	813ce8 <__muldf3>
  8057d4:	1009883a 	mov	r4,r2
  8057d8:	180b883a 	mov	r5,r3
  8057dc:	2021883a 	mov	r16,r4
  8057e0:	2823883a 	mov	r17,r5
  8057e4:	e0bffb17 	ldw	r2,-20(fp)
  8057e8:	e0fffe17 	ldw	r3,-8(fp)
  8057ec:	1085883a 	add	r2,r2,r2
  8057f0:	1085883a 	add	r2,r2,r2
  8057f4:	10c5883a 	add	r2,r2,r3
  8057f8:	10800104 	addi	r2,r2,4
  8057fc:	10800017 	ldw	r2,0(r2)
  805800:	10800217 	ldw	r2,8(r2)
  805804:	1009883a 	mov	r4,r2
  805808:	08136d00 	call	8136d0 <__extendsfdf2>
  80580c:	100b883a 	mov	r5,r2
  805810:	180d883a 	mov	r6,r3
  805814:	2809883a 	mov	r4,r5
  805818:	300b883a 	mov	r5,r6
  80581c:	018b7834 	movhi	r6,11744
  805820:	318346c4 	addi	r6,r6,3355
  805824:	01cff9f4 	movhi	r7,16359
  805828:	39e82404 	addi	r7,r7,-24432
  80582c:	0813ce80 	call	813ce8 <__muldf3>
  805830:	1009883a 	mov	r4,r2
  805834:	180b883a 	mov	r5,r3
  805838:	2005883a 	mov	r2,r4
  80583c:	2807883a 	mov	r3,r5
  805840:	8009883a 	mov	r4,r16
  805844:	880b883a 	mov	r5,r17
  805848:	100d883a 	mov	r6,r2
  80584c:	180f883a 	mov	r7,r3
  805850:	0813c740 	call	813c74 <__adddf3>
  805854:	1009883a 	mov	r4,r2
  805858:	180b883a 	mov	r5,r3
  80585c:	2005883a 	mov	r2,r4
  805860:	2807883a 	mov	r3,r5
  805864:	1009883a 	mov	r4,r2
  805868:	180b883a 	mov	r5,r3
  80586c:	081450c0 	call	81450c <__truncdfsf2>
  805870:	90800215 	stw	r2,8(r18)
		nextBullet(self);
  805874:	e13ffe17 	ldw	r4,-8(fp)
  805878:	0804bdc0 	call	804bdc <nextBullet>
	}
}
  80587c:	e037883a 	mov	sp,fp
  805880:	dfc00417 	ldw	ra,16(sp)
  805884:	df000317 	ldw	fp,12(sp)
  805888:	dc800217 	ldw	r18,8(sp)
  80588c:	dc400117 	ldw	r17,4(sp)
  805890:	dc000017 	ldw	r16,0(sp)
  805894:	dec00504 	addi	sp,sp,20
  805898:	f800283a 	ret

0080589c <fire_tower4_level1>:
void fire_tower4_level1(int en_x, int en_y, struct BulletCollection* this, struct SpaceShip* ss){
  80589c:	defffa04 	addi	sp,sp,-24
  8058a0:	dfc00515 	stw	ra,20(sp)
  8058a4:	df000415 	stw	fp,16(sp)
  8058a8:	df000404 	addi	fp,sp,16
  8058ac:	e13ffc15 	stw	r4,-16(fp)
  8058b0:	e17ffd15 	stw	r5,-12(fp)
  8058b4:	e1bffe15 	stw	r6,-8(fp)
  8058b8:	e1ffff15 	stw	r7,-4(fp)
	if(!launchMainBullet(this, ss)) return;
  8058bc:	e13ffe17 	ldw	r4,-8(fp)
  8058c0:	e17fff17 	ldw	r5,-4(fp)
  8058c4:	08049200 	call	804920 <launchMainBullet>
  8058c8:	1080005c 	xori	r2,r2,1
  8058cc:	10803fcc 	andi	r2,r2,255
  8058d0:	1004c03a 	cmpne	r2,r2,zero
  8058d4:	1000021e 	bne	r2,zero,8058e0 <fire_tower4_level1+0x44>
	nextBullet(this);
  8058d8:	e13ffe17 	ldw	r4,-8(fp)
  8058dc:	0804bdc0 	call	804bdc <nextBullet>
}
  8058e0:	e037883a 	mov	sp,fp
  8058e4:	dfc00117 	ldw	ra,4(sp)
  8058e8:	df000017 	ldw	fp,0(sp)
  8058ec:	dec00204 	addi	sp,sp,8
  8058f0:	f800283a 	ret

008058f4 <fire_tower4_level2>:
void fire_tower4_level2(int en_x, int en_y, struct BulletCollection* this, struct SpaceShip* ss){
  8058f4:	defffa04 	addi	sp,sp,-24
  8058f8:	dfc00515 	stw	ra,20(sp)
  8058fc:	df000415 	stw	fp,16(sp)
  805900:	df000404 	addi	fp,sp,16
  805904:	e13ffc15 	stw	r4,-16(fp)
  805908:	e17ffd15 	stw	r5,-12(fp)
  80590c:	e1bffe15 	stw	r6,-8(fp)
  805910:	e1ffff15 	stw	r7,-4(fp)

	if (this->total_bullet_available > 7){
  805914:	e0bffe17 	ldw	r2,-8(fp)
  805918:	10803717 	ldw	r2,220(r2)
  80591c:	10800210 	cmplti	r2,r2,8
  805920:	1000f81e 	bne	r2,zero,805d04 <fire_tower4_level2+0x410>

		if(!launchMainBullet(this, ss)) return;
  805924:	e13ffe17 	ldw	r4,-8(fp)
  805928:	e17fff17 	ldw	r5,-4(fp)
  80592c:	08049200 	call	804920 <launchMainBullet>
  805930:	1080005c 	xori	r2,r2,1
  805934:	10803fcc 	andi	r2,r2,255
  805938:	1004c03a 	cmpne	r2,r2,zero
  80593c:	1000f11e 	bne	r2,zero,805d04 <fire_tower4_level2+0x410>
		this->bullets[this->pStart]->super->collideRange = 50;
  805940:	e0bffe17 	ldw	r2,-8(fp)
  805944:	10803517 	ldw	r2,212(r2)
  805948:	e0fffe17 	ldw	r3,-8(fp)
  80594c:	1085883a 	add	r2,r2,r2
  805950:	1085883a 	add	r2,r2,r2
  805954:	10c5883a 	add	r2,r2,r3
  805958:	10800104 	addi	r2,r2,4
  80595c:	10800017 	ldw	r2,0(r2)
  805960:	10c00017 	ldw	r3,0(r2)
  805964:	00800c84 	movi	r2,50
  805968:	18800815 	stw	r2,32(r3)
		nextBullet(this);
  80596c:	e13ffe17 	ldw	r4,-8(fp)
  805970:	0804bdc0 	call	804bdc <nextBullet>

		// shoot in all directions at a time
		if(!launchSecondaryBullet(this, ss)) return;
  805974:	e13ffe17 	ldw	r4,-8(fp)
  805978:	e17fff17 	ldw	r5,-4(fp)
  80597c:	0804a3c0 	call	804a3c <launchSecondaryBullet>
  805980:	1080005c 	xori	r2,r2,1
  805984:	10803fcc 	andi	r2,r2,255
  805988:	1004c03a 	cmpne	r2,r2,zero
  80598c:	1000dd1e 	bne	r2,zero,805d04 <fire_tower4_level2+0x410>
		this->bullets[this->pStart]->acc_x = 0;
  805990:	e0bffe17 	ldw	r2,-8(fp)
  805994:	10803517 	ldw	r2,212(r2)
  805998:	e0fffe17 	ldw	r3,-8(fp)
  80599c:	1085883a 	add	r2,r2,r2
  8059a0:	1085883a 	add	r2,r2,r2
  8059a4:	10c5883a 	add	r2,r2,r3
  8059a8:	10800104 	addi	r2,r2,4
  8059ac:	10800017 	ldw	r2,0(r2)
  8059b0:	10000315 	stw	zero,12(r2)
		this->bullets[this->pStart]->acc_y = -50;
  8059b4:	e0bffe17 	ldw	r2,-8(fp)
  8059b8:	10803517 	ldw	r2,212(r2)
  8059bc:	e0fffe17 	ldw	r3,-8(fp)
  8059c0:	1085883a 	add	r2,r2,r2
  8059c4:	1085883a 	add	r2,r2,r2
  8059c8:	10c5883a 	add	r2,r2,r3
  8059cc:	10800104 	addi	r2,r2,4
  8059d0:	10c00017 	ldw	r3,0(r2)
  8059d4:	00b09234 	movhi	r2,49736
  8059d8:	18800415 	stw	r2,16(r3)
		nextBullet(this);
  8059dc:	e13ffe17 	ldw	r4,-8(fp)
  8059e0:	0804bdc0 	call	804bdc <nextBullet>

		if (!launchSecondaryBullet(this, ss)) return;
  8059e4:	e13ffe17 	ldw	r4,-8(fp)
  8059e8:	e17fff17 	ldw	r5,-4(fp)
  8059ec:	0804a3c0 	call	804a3c <launchSecondaryBullet>
  8059f0:	1080005c 	xori	r2,r2,1
  8059f4:	10803fcc 	andi	r2,r2,255
  8059f8:	1004c03a 	cmpne	r2,r2,zero
  8059fc:	1000c11e 	bne	r2,zero,805d04 <fire_tower4_level2+0x410>
		this->bullets[this->pStart]->acc_x = 0;
  805a00:	e0bffe17 	ldw	r2,-8(fp)
  805a04:	10803517 	ldw	r2,212(r2)
  805a08:	e0fffe17 	ldw	r3,-8(fp)
  805a0c:	1085883a 	add	r2,r2,r2
  805a10:	1085883a 	add	r2,r2,r2
  805a14:	10c5883a 	add	r2,r2,r3
  805a18:	10800104 	addi	r2,r2,4
  805a1c:	10800017 	ldw	r2,0(r2)
  805a20:	10000315 	stw	zero,12(r2)
		this->bullets[this->pStart]->acc_y = 50;
  805a24:	e0bffe17 	ldw	r2,-8(fp)
  805a28:	10803517 	ldw	r2,212(r2)
  805a2c:	e0fffe17 	ldw	r3,-8(fp)
  805a30:	1085883a 	add	r2,r2,r2
  805a34:	1085883a 	add	r2,r2,r2
  805a38:	10c5883a 	add	r2,r2,r3
  805a3c:	10800104 	addi	r2,r2,4
  805a40:	10c00017 	ldw	r3,0(r2)
  805a44:	00909234 	movhi	r2,16968
  805a48:	18800415 	stw	r2,16(r3)
		nextBullet(this);
  805a4c:	e13ffe17 	ldw	r4,-8(fp)
  805a50:	0804bdc0 	call	804bdc <nextBullet>

		if (!launchSecondaryBullet(this, ss)) return;
  805a54:	e13ffe17 	ldw	r4,-8(fp)
  805a58:	e17fff17 	ldw	r5,-4(fp)
  805a5c:	0804a3c0 	call	804a3c <launchSecondaryBullet>
  805a60:	1080005c 	xori	r2,r2,1
  805a64:	10803fcc 	andi	r2,r2,255
  805a68:	1004c03a 	cmpne	r2,r2,zero
  805a6c:	1000a51e 	bne	r2,zero,805d04 <fire_tower4_level2+0x410>
		this->bullets[this->pStart]->acc_x = 50;
  805a70:	e0bffe17 	ldw	r2,-8(fp)
  805a74:	10803517 	ldw	r2,212(r2)
  805a78:	e0fffe17 	ldw	r3,-8(fp)
  805a7c:	1085883a 	add	r2,r2,r2
  805a80:	1085883a 	add	r2,r2,r2
  805a84:	10c5883a 	add	r2,r2,r3
  805a88:	10800104 	addi	r2,r2,4
  805a8c:	10c00017 	ldw	r3,0(r2)
  805a90:	00909234 	movhi	r2,16968
  805a94:	18800315 	stw	r2,12(r3)
		this->bullets[this->pStart]->acc_y = 0;
  805a98:	e0bffe17 	ldw	r2,-8(fp)
  805a9c:	10803517 	ldw	r2,212(r2)
  805aa0:	e0fffe17 	ldw	r3,-8(fp)
  805aa4:	1085883a 	add	r2,r2,r2
  805aa8:	1085883a 	add	r2,r2,r2
  805aac:	10c5883a 	add	r2,r2,r3
  805ab0:	10800104 	addi	r2,r2,4
  805ab4:	10800017 	ldw	r2,0(r2)
  805ab8:	10000415 	stw	zero,16(r2)
		nextBullet(this);
  805abc:	e13ffe17 	ldw	r4,-8(fp)
  805ac0:	0804bdc0 	call	804bdc <nextBullet>

		if (!launchSecondaryBullet(this, ss)) return;
  805ac4:	e13ffe17 	ldw	r4,-8(fp)
  805ac8:	e17fff17 	ldw	r5,-4(fp)
  805acc:	0804a3c0 	call	804a3c <launchSecondaryBullet>
  805ad0:	1080005c 	xori	r2,r2,1
  805ad4:	10803fcc 	andi	r2,r2,255
  805ad8:	1004c03a 	cmpne	r2,r2,zero
  805adc:	1000891e 	bne	r2,zero,805d04 <fire_tower4_level2+0x410>
		this->bullets[this->pStart]->acc_x = -50;
  805ae0:	e0bffe17 	ldw	r2,-8(fp)
  805ae4:	10803517 	ldw	r2,212(r2)
  805ae8:	e0fffe17 	ldw	r3,-8(fp)
  805aec:	1085883a 	add	r2,r2,r2
  805af0:	1085883a 	add	r2,r2,r2
  805af4:	10c5883a 	add	r2,r2,r3
  805af8:	10800104 	addi	r2,r2,4
  805afc:	10c00017 	ldw	r3,0(r2)
  805b00:	00b09234 	movhi	r2,49736
  805b04:	18800315 	stw	r2,12(r3)
		this->bullets[this->pStart]->acc_y = 0;
  805b08:	e0bffe17 	ldw	r2,-8(fp)
  805b0c:	10803517 	ldw	r2,212(r2)
  805b10:	e0fffe17 	ldw	r3,-8(fp)
  805b14:	1085883a 	add	r2,r2,r2
  805b18:	1085883a 	add	r2,r2,r2
  805b1c:	10c5883a 	add	r2,r2,r3
  805b20:	10800104 	addi	r2,r2,4
  805b24:	10800017 	ldw	r2,0(r2)
  805b28:	10000415 	stw	zero,16(r2)
		nextBullet(this);
  805b2c:	e13ffe17 	ldw	r4,-8(fp)
  805b30:	0804bdc0 	call	804bdc <nextBullet>

		if (!launchSecondaryBullet(this, ss)) return;
  805b34:	e13ffe17 	ldw	r4,-8(fp)
  805b38:	e17fff17 	ldw	r5,-4(fp)
  805b3c:	0804a3c0 	call	804a3c <launchSecondaryBullet>
  805b40:	1080005c 	xori	r2,r2,1
  805b44:	10803fcc 	andi	r2,r2,255
  805b48:	1004c03a 	cmpne	r2,r2,zero
  805b4c:	10006d1e 	bne	r2,zero,805d04 <fire_tower4_level2+0x410>
		this->bullets[this->pStart]->acc_x = 50;
  805b50:	e0bffe17 	ldw	r2,-8(fp)
  805b54:	10803517 	ldw	r2,212(r2)
  805b58:	e0fffe17 	ldw	r3,-8(fp)
  805b5c:	1085883a 	add	r2,r2,r2
  805b60:	1085883a 	add	r2,r2,r2
  805b64:	10c5883a 	add	r2,r2,r3
  805b68:	10800104 	addi	r2,r2,4
  805b6c:	10c00017 	ldw	r3,0(r2)
  805b70:	00909234 	movhi	r2,16968
  805b74:	18800315 	stw	r2,12(r3)
		this->bullets[this->pStart]->acc_y = -50;
  805b78:	e0bffe17 	ldw	r2,-8(fp)
  805b7c:	10803517 	ldw	r2,212(r2)
  805b80:	e0fffe17 	ldw	r3,-8(fp)
  805b84:	1085883a 	add	r2,r2,r2
  805b88:	1085883a 	add	r2,r2,r2
  805b8c:	10c5883a 	add	r2,r2,r3
  805b90:	10800104 	addi	r2,r2,4
  805b94:	10c00017 	ldw	r3,0(r2)
  805b98:	00b09234 	movhi	r2,49736
  805b9c:	18800415 	stw	r2,16(r3)
		nextBullet(this);
  805ba0:	e13ffe17 	ldw	r4,-8(fp)
  805ba4:	0804bdc0 	call	804bdc <nextBullet>

		if (!launchSecondaryBullet(this, ss)) return;
  805ba8:	e13ffe17 	ldw	r4,-8(fp)
  805bac:	e17fff17 	ldw	r5,-4(fp)
  805bb0:	0804a3c0 	call	804a3c <launchSecondaryBullet>
  805bb4:	1080005c 	xori	r2,r2,1
  805bb8:	10803fcc 	andi	r2,r2,255
  805bbc:	1004c03a 	cmpne	r2,r2,zero
  805bc0:	1000501e 	bne	r2,zero,805d04 <fire_tower4_level2+0x410>
		this->bullets[this->pStart]->acc_x = 50;
  805bc4:	e0bffe17 	ldw	r2,-8(fp)
  805bc8:	10803517 	ldw	r2,212(r2)
  805bcc:	e0fffe17 	ldw	r3,-8(fp)
  805bd0:	1085883a 	add	r2,r2,r2
  805bd4:	1085883a 	add	r2,r2,r2
  805bd8:	10c5883a 	add	r2,r2,r3
  805bdc:	10800104 	addi	r2,r2,4
  805be0:	10c00017 	ldw	r3,0(r2)
  805be4:	00909234 	movhi	r2,16968
  805be8:	18800315 	stw	r2,12(r3)
		this->bullets[this->pStart]->acc_y = 50;
  805bec:	e0bffe17 	ldw	r2,-8(fp)
  805bf0:	10803517 	ldw	r2,212(r2)
  805bf4:	e0fffe17 	ldw	r3,-8(fp)
  805bf8:	1085883a 	add	r2,r2,r2
  805bfc:	1085883a 	add	r2,r2,r2
  805c00:	10c5883a 	add	r2,r2,r3
  805c04:	10800104 	addi	r2,r2,4
  805c08:	10c00017 	ldw	r3,0(r2)
  805c0c:	00909234 	movhi	r2,16968
  805c10:	18800415 	stw	r2,16(r3)
		nextBullet(this);
  805c14:	e13ffe17 	ldw	r4,-8(fp)
  805c18:	0804bdc0 	call	804bdc <nextBullet>

		if (!launchSecondaryBullet(this, ss)) return;
  805c1c:	e13ffe17 	ldw	r4,-8(fp)
  805c20:	e17fff17 	ldw	r5,-4(fp)
  805c24:	0804a3c0 	call	804a3c <launchSecondaryBullet>
  805c28:	1080005c 	xori	r2,r2,1
  805c2c:	10803fcc 	andi	r2,r2,255
  805c30:	1004c03a 	cmpne	r2,r2,zero
  805c34:	1000331e 	bne	r2,zero,805d04 <fire_tower4_level2+0x410>
		this->bullets[this->pStart]->acc_x = -50;
  805c38:	e0bffe17 	ldw	r2,-8(fp)
  805c3c:	10803517 	ldw	r2,212(r2)
  805c40:	e0fffe17 	ldw	r3,-8(fp)
  805c44:	1085883a 	add	r2,r2,r2
  805c48:	1085883a 	add	r2,r2,r2
  805c4c:	10c5883a 	add	r2,r2,r3
  805c50:	10800104 	addi	r2,r2,4
  805c54:	10c00017 	ldw	r3,0(r2)
  805c58:	00b09234 	movhi	r2,49736
  805c5c:	18800315 	stw	r2,12(r3)
		this->bullets[this->pStart]->acc_y = 50;
  805c60:	e0bffe17 	ldw	r2,-8(fp)
  805c64:	10803517 	ldw	r2,212(r2)
  805c68:	e0fffe17 	ldw	r3,-8(fp)
  805c6c:	1085883a 	add	r2,r2,r2
  805c70:	1085883a 	add	r2,r2,r2
  805c74:	10c5883a 	add	r2,r2,r3
  805c78:	10800104 	addi	r2,r2,4
  805c7c:	10c00017 	ldw	r3,0(r2)
  805c80:	00909234 	movhi	r2,16968
  805c84:	18800415 	stw	r2,16(r3)
		nextBullet(this);
  805c88:	e13ffe17 	ldw	r4,-8(fp)
  805c8c:	0804bdc0 	call	804bdc <nextBullet>

		if (!launchSecondaryBullet(this, ss)) return;
  805c90:	e13ffe17 	ldw	r4,-8(fp)
  805c94:	e17fff17 	ldw	r5,-4(fp)
  805c98:	0804a3c0 	call	804a3c <launchSecondaryBullet>
  805c9c:	1080005c 	xori	r2,r2,1
  805ca0:	10803fcc 	andi	r2,r2,255
  805ca4:	1004c03a 	cmpne	r2,r2,zero
  805ca8:	1000161e 	bne	r2,zero,805d04 <fire_tower4_level2+0x410>
		this->bullets[this->pStart]->acc_x = -50;
  805cac:	e0bffe17 	ldw	r2,-8(fp)
  805cb0:	10803517 	ldw	r2,212(r2)
  805cb4:	e0fffe17 	ldw	r3,-8(fp)
  805cb8:	1085883a 	add	r2,r2,r2
  805cbc:	1085883a 	add	r2,r2,r2
  805cc0:	10c5883a 	add	r2,r2,r3
  805cc4:	10800104 	addi	r2,r2,4
  805cc8:	10c00017 	ldw	r3,0(r2)
  805ccc:	00b09234 	movhi	r2,49736
  805cd0:	18800315 	stw	r2,12(r3)
		this->bullets[this->pStart]->acc_y = -50;
  805cd4:	e0bffe17 	ldw	r2,-8(fp)
  805cd8:	10803517 	ldw	r2,212(r2)
  805cdc:	e0fffe17 	ldw	r3,-8(fp)
  805ce0:	1085883a 	add	r2,r2,r2
  805ce4:	1085883a 	add	r2,r2,r2
  805ce8:	10c5883a 	add	r2,r2,r3
  805cec:	10800104 	addi	r2,r2,4
  805cf0:	10c00017 	ldw	r3,0(r2)
  805cf4:	00b09234 	movhi	r2,49736
  805cf8:	18800415 	stw	r2,16(r3)
		nextBullet(this);
  805cfc:	e13ffe17 	ldw	r4,-8(fp)
  805d00:	0804bdc0 	call	804bdc <nextBullet>
	}
}
  805d04:	e037883a 	mov	sp,fp
  805d08:	dfc00117 	ldw	ra,4(sp)
  805d0c:	df000017 	ldw	fp,0(sp)
  805d10:	dec00204 	addi	sp,sp,8
  805d14:	f800283a 	ret

00805d18 <fire_tower5_level1>:

/*
 * fire_tower5_level1 :
 * this weapon will freeze the enemy for 30 frames, damage and then release it
 */
void fire_tower5_level1(int en_x, int en_y, struct BulletCollection* this, struct SpaceShip* ss){
  805d18:	defffa04 	addi	sp,sp,-24
  805d1c:	dfc00515 	stw	ra,20(sp)
  805d20:	df000415 	stw	fp,16(sp)
  805d24:	df000404 	addi	fp,sp,16
  805d28:	e13ffc15 	stw	r4,-16(fp)
  805d2c:	e17ffd15 	stw	r5,-12(fp)
  805d30:	e1bffe15 	stw	r6,-8(fp)
  805d34:	e1ffff15 	stw	r7,-4(fp)
	if(!launchMainBullet(this, ss)) return;
  805d38:	e13ffe17 	ldw	r4,-8(fp)
  805d3c:	e17fff17 	ldw	r5,-4(fp)
  805d40:	08049200 	call	804920 <launchMainBullet>
  805d44:	1080005c 	xori	r2,r2,1
  805d48:	10803fcc 	andi	r2,r2,255
  805d4c:	1004c03a 	cmpne	r2,r2,zero
  805d50:	1000021e 	bne	r2,zero,805d5c <fire_tower5_level1+0x44>
	nextBullet(this);
  805d54:	e13ffe17 	ldw	r4,-8(fp)
  805d58:	0804bdc0 	call	804bdc <nextBullet>
}
  805d5c:	e037883a 	mov	sp,fp
  805d60:	dfc00117 	ldw	ra,4(sp)
  805d64:	df000017 	ldw	fp,0(sp)
  805d68:	dec00204 	addi	sp,sp,8
  805d6c:	f800283a 	ret

00805d70 <fire_tower5_level2>:
/*
 * fire_tower5_level2 :
 * this weapon will freeze enemy for 30 frames, damage and then release it
 * in the same time, it also shoots 6 other freezing bullets that will cause any alien to freeze for 10 frames.
 * */
void fire_tower5_level2(int en_x, int en_y, struct BulletCollection* this, struct SpaceShip* ss){
  805d70:	defffa04 	addi	sp,sp,-24
  805d74:	dfc00515 	stw	ra,20(sp)
  805d78:	df000415 	stw	fp,16(sp)
  805d7c:	df000404 	addi	fp,sp,16
  805d80:	e13ffc15 	stw	r4,-16(fp)
  805d84:	e17ffd15 	stw	r5,-12(fp)
  805d88:	e1bffe15 	stw	r6,-8(fp)
  805d8c:	e1ffff15 	stw	r7,-4(fp)
	fire_tower4_level2(en_x, en_y, this, ss);
  805d90:	e13ffc17 	ldw	r4,-16(fp)
  805d94:	e17ffd17 	ldw	r5,-12(fp)
  805d98:	e1bffe17 	ldw	r6,-8(fp)
  805d9c:	e1ffff17 	ldw	r7,-4(fp)
  805da0:	08058f40 	call	8058f4 <fire_tower4_level2>
}
  805da4:	e037883a 	mov	sp,fp
  805da8:	dfc00117 	ldw	ra,4(sp)
  805dac:	df000017 	ldw	fp,0(sp)
  805db0:	dec00204 	addi	sp,sp,8
  805db4:	f800283a 	ret

00805db8 <setBulletAcceleration>:


void setBulletAcceleration(int en_x, int en_y, struct Bullet* bul)
{
  805db8:	defffb04 	addi	sp,sp,-20
  805dbc:	dfc00415 	stw	ra,16(sp)
  805dc0:	df000315 	stw	fp,12(sp)
  805dc4:	df000304 	addi	fp,sp,12
  805dc8:	e13ffd15 	stw	r4,-12(fp)
  805dcc:	e17ffe15 	stw	r5,-8(fp)
  805dd0:	e1bfff15 	stw	r6,-4(fp)
		bul->acc_x = (float)(en_x  - bul->init_x);
  805dd4:	e0bfff17 	ldw	r2,-4(fp)
  805dd8:	10c00d17 	ldw	r3,52(r2)
  805ddc:	e0bffd17 	ldw	r2,-12(fp)
  805de0:	10c9c83a 	sub	r4,r2,r3
  805de4:	08135a40 	call	8135a4 <__floatsisf>
  805de8:	1007883a 	mov	r3,r2
  805dec:	e0bfff17 	ldw	r2,-4(fp)
  805df0:	10c00315 	stw	r3,12(r2)
		bul->acc_y = (float)(en_y - bul->init_y);
  805df4:	e0bfff17 	ldw	r2,-4(fp)
  805df8:	10c00e17 	ldw	r3,56(r2)
  805dfc:	e0bffe17 	ldw	r2,-8(fp)
  805e00:	10c9c83a 	sub	r4,r2,r3
  805e04:	08135a40 	call	8135a4 <__floatsisf>
  805e08:	1007883a 	mov	r3,r2
  805e0c:	e0bfff17 	ldw	r2,-4(fp)
  805e10:	10c00415 	stw	r3,16(r2)
}
  805e14:	e037883a 	mov	sp,fp
  805e18:	dfc00117 	ldw	ra,4(sp)
  805e1c:	df000017 	ldw	fp,0(sp)
  805e20:	dec00204 	addi	sp,sp,8
  805e24:	f800283a 	ret

00805e28 <setBulletVelocity>:

void setBulletVelocity(int en_x, int en_y, struct Bullet* bul)
{
  805e28:	defffb04 	addi	sp,sp,-20
  805e2c:	dfc00415 	stw	ra,16(sp)
  805e30:	df000315 	stw	fp,12(sp)
  805e34:	df000304 	addi	fp,sp,12
  805e38:	e13ffd15 	stw	r4,-12(fp)
  805e3c:	e17ffe15 	stw	r5,-8(fp)
  805e40:	e1bfff15 	stw	r6,-4(fp)
		bul->v_x = (float)(en_x  - bul->init_x)/3;
  805e44:	e0bfff17 	ldw	r2,-4(fp)
  805e48:	10c00d17 	ldw	r3,52(r2)
  805e4c:	e0bffd17 	ldw	r2,-12(fp)
  805e50:	10c9c83a 	sub	r4,r2,r3
  805e54:	08135a40 	call	8135a4 <__floatsisf>
  805e58:	1009883a 	mov	r4,r2
  805e5c:	01501034 	movhi	r5,16448
  805e60:	08132500 	call	813250 <__divsf3>
  805e64:	1007883a 	mov	r3,r2
  805e68:	e0bfff17 	ldw	r2,-4(fp)
  805e6c:	10c00115 	stw	r3,4(r2)
		bul->v_y = (float)(en_y - bul->init_y)/3;
  805e70:	e0bfff17 	ldw	r2,-4(fp)
  805e74:	10c00e17 	ldw	r3,56(r2)
  805e78:	e0bffe17 	ldw	r2,-8(fp)
  805e7c:	10c9c83a 	sub	r4,r2,r3
  805e80:	08135a40 	call	8135a4 <__floatsisf>
  805e84:	1009883a 	mov	r4,r2
  805e88:	01501034 	movhi	r5,16448
  805e8c:	08132500 	call	813250 <__divsf3>
  805e90:	1007883a 	mov	r3,r2
  805e94:	e0bfff17 	ldw	r2,-4(fp)
  805e98:	10c00215 	stw	r3,8(r2)
}
  805e9c:	e037883a 	mov	sp,fp
  805ea0:	dfc00117 	ldw	ra,4(sp)
  805ea4:	df000017 	ldw	fp,0(sp)
  805ea8:	dec00204 	addi	sp,sp,8
  805eac:	f800283a 	ret

00805eb0 <reloadBullet>:

void reloadBullet(struct BulletCollection* this, struct Bullet* bul, int index) {
  805eb0:	defffb04 	addi	sp,sp,-20
  805eb4:	dfc00415 	stw	ra,16(sp)
  805eb8:	df000315 	stw	fp,12(sp)
  805ebc:	df000304 	addi	fp,sp,12
  805ec0:	e13ffd15 	stw	r4,-12(fp)
  805ec4:	e17ffe15 	stw	r5,-8(fp)
  805ec8:	e1bfff15 	stw	r6,-4(fp)
	if(this->pEnd > index || this->pEnd < 0) {
  805ecc:	e0bffd17 	ldw	r2,-12(fp)
  805ed0:	10c03617 	ldw	r3,216(r2)
  805ed4:	e0bfff17 	ldw	r2,-4(fp)
  805ed8:	10c00416 	blt	r2,r3,805eec <reloadBullet+0x3c>
  805edc:	e0bffd17 	ldw	r2,-12(fp)
  805ee0:	10803617 	ldw	r2,216(r2)
  805ee4:	1004403a 	cmpge	r2,r2,zero
  805ee8:	1000041e 	bne	r2,zero,805efc <reloadBullet+0x4c>
		printf("reload bullet error\n");
  805eec:	010020f4 	movhi	r4,131
  805ef0:	2120d404 	addi	r4,r4,-31920
  805ef4:	08158640 	call	815864 <puts>
		return;
  805ef8:	00001a06 	br	805f64 <reloadBullet+0xb4>
	}
	this->bullets[this->pEnd] = bul;
  805efc:	e0bffd17 	ldw	r2,-12(fp)
  805f00:	10803617 	ldw	r2,216(r2)
  805f04:	e0fffd17 	ldw	r3,-12(fp)
  805f08:	1085883a 	add	r2,r2,r2
  805f0c:	1085883a 	add	r2,r2,r2
  805f10:	10c5883a 	add	r2,r2,r3
  805f14:	10c00104 	addi	r3,r2,4
  805f18:	e0bffe17 	ldw	r2,-8(fp)
  805f1c:	18800015 	stw	r2,0(r3)
	this->total_bullet_available++;
  805f20:	e0bffd17 	ldw	r2,-12(fp)
  805f24:	10803717 	ldw	r2,220(r2)
  805f28:	10c00044 	addi	r3,r2,1
  805f2c:	e0bffd17 	ldw	r2,-12(fp)
  805f30:	10c03715 	stw	r3,220(r2)
	if (this->pEnd >= index)
  805f34:	e0bffd17 	ldw	r2,-12(fp)
  805f38:	10c03617 	ldw	r3,216(r2)
  805f3c:	e0bfff17 	ldw	r2,-4(fp)
  805f40:	18800316 	blt	r3,r2,805f50 <reloadBullet+0xa0>
		this->pEnd = 0;
  805f44:	e0bffd17 	ldw	r2,-12(fp)
  805f48:	10003615 	stw	zero,216(r2)
  805f4c:	00000506 	br	805f64 <reloadBullet+0xb4>
	else
		this->pEnd++;
  805f50:	e0bffd17 	ldw	r2,-12(fp)
  805f54:	10803617 	ldw	r2,216(r2)
  805f58:	10c00044 	addi	r3,r2,1
  805f5c:	e0bffd17 	ldw	r2,-12(fp)
  805f60:	10c03615 	stw	r3,216(r2)
}
  805f64:	e037883a 	mov	sp,fp
  805f68:	dfc00117 	ldw	ra,4(sp)
  805f6c:	df000017 	ldw	fp,0(sp)
  805f70:	dec00204 	addi	sp,sp,8
  805f74:	f800283a 	ret

00805f78 <initButton>:
 *      Author: Danny
 */

#include "Button.h"

struct Button* initButton(int x, int y, int size, struct animation* np, struct animation* p, struct Env* e) {
  805f78:	defff804 	addi	sp,sp,-32
  805f7c:	dfc00715 	stw	ra,28(sp)
  805f80:	df000615 	stw	fp,24(sp)
  805f84:	df000604 	addi	fp,sp,24
  805f88:	e13ffc15 	stw	r4,-16(fp)
  805f8c:	e17ffd15 	stw	r5,-12(fp)
  805f90:	e1bffe15 	stw	r6,-8(fp)
  805f94:	e1ffff15 	stw	r7,-4(fp)
	struct Button* b = (struct Button*)malloc(sizeof(struct Button));
  805f98:	01000d04 	movi	r4,52
  805f9c:	0814f580 	call	814f58 <malloc>
  805fa0:	e0bffb15 	stw	r2,-20(fp)
	b->super = initObject(x, y, size, np, (void*)b);
  805fa4:	e0bffb17 	ldw	r2,-20(fp)
  805fa8:	d8800015 	stw	r2,0(sp)
  805fac:	e13ffc17 	ldw	r4,-16(fp)
  805fb0:	e17ffd17 	ldw	r5,-12(fp)
  805fb4:	e1bffe17 	ldw	r6,-8(fp)
  805fb8:	e1ffff17 	ldw	r7,-4(fp)
  805fbc:	080fe780 	call	80fe78 <initObject>
  805fc0:	1007883a 	mov	r3,r2
  805fc4:	e0bffb17 	ldw	r2,-20(fp)
  805fc8:	10c00015 	stw	r3,0(r2)
	addStats(b->super, p);
  805fcc:	e0bffb17 	ldw	r2,-20(fp)
  805fd0:	11000017 	ldw	r4,0(r2)
  805fd4:	e1400217 	ldw	r5,8(fp)
  805fd8:	08100f40 	call	8100f4 <addStats>
	b->super->isSelected = 0;
  805fdc:	e0bffb17 	ldw	r2,-20(fp)
  805fe0:	10800017 	ldw	r2,0(r2)
  805fe4:	10001215 	stw	zero,72(r2)
	b->r = initRange(x, y, size, size);
  805fe8:	e13ffc17 	ldw	r4,-16(fp)
  805fec:	e17ffd17 	ldw	r5,-12(fp)
  805ff0:	e1bffe17 	ldw	r6,-8(fp)
  805ff4:	e1fffe17 	ldw	r7,-8(fp)
  805ff8:	081047c0 	call	81047c <initRange>
  805ffc:	1007883a 	mov	r3,r2
  806000:	e0bffb17 	ldw	r2,-20(fp)
  806004:	10c00815 	stw	r3,32(r2)
	b->super->class = button;
  806008:	e0bffb17 	ldw	r2,-20(fp)
  80600c:	10c00017 	ldw	r3,0(r2)
  806010:	00800144 	movi	r2,5
  806014:	18801115 	stw	r2,68(r3)
	b->super->isShowing = 0;
  806018:	e0bffb17 	ldw	r2,-20(fp)
  80601c:	10800017 	ldw	r2,0(r2)
  806020:	10001515 	stw	zero,84(r2)
	b->redrawing= true;
  806024:	e0fffb17 	ldw	r3,-20(fp)
  806028:	00800044 	movi	r2,1
  80602c:	18800a05 	stb	r2,40(r3)
	b->env = e;
  806030:	e0fffb17 	ldw	r3,-20(fp)
  806034:	e0800317 	ldw	r2,12(fp)
  806038:	18800b15 	stw	r2,44(r3)
	b->redrawImg = dummyRedraw;
  80603c:	e0fffb17 	ldw	r3,-20(fp)
  806040:	00802034 	movhi	r2,128
  806044:	10983504 	addi	r2,r2,24788
  806048:	18800c15 	stw	r2,48(r3)
	b->obj = NULL;
  80604c:	e0bffb17 	ldw	r2,-20(fp)
  806050:	10000115 	stw	zero,4(r2)
	return b;
  806054:	e0bffb17 	ldw	r2,-20(fp)
}
  806058:	e037883a 	mov	sp,fp
  80605c:	dfc00117 	ldw	ra,4(sp)
  806060:	df000017 	ldw	fp,0(sp)
  806064:	dec00204 	addi	sp,sp,8
  806068:	f800283a 	ret

0080606c <killButton>:
void killButton(struct Button* this) {
  80606c:	defffd04 	addi	sp,sp,-12
  806070:	dfc00215 	stw	ra,8(sp)
  806074:	df000115 	stw	fp,4(sp)
  806078:	df000104 	addi	fp,sp,4
  80607c:	e13fff15 	stw	r4,-4(fp)
	safefree(&this->obj);
  806080:	e0bfff17 	ldw	r2,-4(fp)
  806084:	10800104 	addi	r2,r2,4
  806088:	1009883a 	mov	r4,r2
  80608c:	080af080 	call	80af08 <safefree>
	safefree(&this->r);
  806090:	e0bfff17 	ldw	r2,-4(fp)
  806094:	10800804 	addi	r2,r2,32
  806098:	1009883a 	mov	r4,r2
  80609c:	080af080 	call	80af08 <safefree>
	this->env = NULL;
  8060a0:	e0bfff17 	ldw	r2,-4(fp)
  8060a4:	10000b15 	stw	zero,44(r2)
	killObject(this->super);
  8060a8:	e0bfff17 	ldw	r2,-4(fp)
  8060ac:	11000017 	ldw	r4,0(r2)
  8060b0:	08100380 	call	810038 <killObject>
	free(this);
  8060b4:	e13fff17 	ldw	r4,-4(fp)
  8060b8:	0814f440 	call	814f44 <free>
	this = NULL;
  8060bc:	e03fff15 	stw	zero,-4(fp)
}
  8060c0:	e037883a 	mov	sp,fp
  8060c4:	dfc00117 	ldw	ra,4(sp)
  8060c8:	df000017 	ldw	fp,0(sp)
  8060cc:	dec00204 	addi	sp,sp,8
  8060d0:	f800283a 	ret

008060d4 <dummyRedraw>:
void dummyRedraw(struct Button*b, struct Cursor* c) {};
  8060d4:	defffd04 	addi	sp,sp,-12
  8060d8:	df000215 	stw	fp,8(sp)
  8060dc:	df000204 	addi	fp,sp,8
  8060e0:	e13ffe15 	stw	r4,-8(fp)
  8060e4:	e17fff15 	stw	r5,-4(fp)
  8060e8:	e037883a 	mov	sp,fp
  8060ec:	df000017 	ldw	fp,0(sp)
  8060f0:	dec00104 	addi	sp,sp,4
  8060f4:	f800283a 	ret

008060f8 <setBuyButton>:
void setBuyButton(struct Button* this, int type, struct animation** a) {
  8060f8:	defffb04 	addi	sp,sp,-20
  8060fc:	dfc00415 	stw	ra,16(sp)
  806100:	df000315 	stw	fp,12(sp)
  806104:	df000304 	addi	fp,sp,12
  806108:	e13ffd15 	stw	r4,-12(fp)
  80610c:	e17ffe15 	stw	r5,-8(fp)
  806110:	e1bfff15 	stw	r6,-4(fp)
	this->type = type;
  806114:	e0fffd17 	ldw	r3,-12(fp)
  806118:	e0bffe17 	ldw	r2,-8(fp)
  80611c:	18800415 	stw	r2,16(r3)
	this->super->collide = buyButtonCollide;
  806120:	e0bffd17 	ldw	r2,-12(fp)
  806124:	10c00017 	ldw	r3,0(r2)
  806128:	00802034 	movhi	r2,128
  80612c:	10992b04 	addi	r2,r2,25772
  806130:	18801a15 	stw	r2,104(r3)
	this->redrawImg = drawBuyButton;
  806134:	e0fffd17 	ldw	r3,-12(fp)
  806138:	00802034 	movhi	r2,128
  80613c:	10989004 	addi	r2,r2,25152
  806140:	18800c15 	stw	r2,48(r3)
	this->animatePic = a[type];
  806144:	e0bffe17 	ldw	r2,-8(fp)
  806148:	1085883a 	add	r2,r2,r2
  80614c:	1085883a 	add	r2,r2,r2
  806150:	1007883a 	mov	r3,r2
  806154:	e0bfff17 	ldw	r2,-4(fp)
  806158:	1885883a 	add	r2,r3,r2
  80615c:	10c00017 	ldw	r3,0(r2)
  806160:	e0bffd17 	ldw	r2,-12(fp)
  806164:	10c00215 	stw	r3,8(r2)
	createShip(this);
  806168:	e13ffd17 	ldw	r4,-12(fp)
  80616c:	0806f080 	call	806f08 <createShip>
	this->obj->super->isShowing = 0;
  806170:	e0bffd17 	ldw	r2,-12(fp)
  806174:	10800117 	ldw	r2,4(r2)
  806178:	10800017 	ldw	r2,0(r2)
  80617c:	10001515 	stw	zero,84(r2)
}
  806180:	e037883a 	mov	sp,fp
  806184:	dfc00117 	ldw	ra,4(sp)
  806188:	df000017 	ldw	fp,0(sp)
  80618c:	dec00204 	addi	sp,sp,8
  806190:	f800283a 	ret

00806194 <setTxtButton>:
void setTxtButton(struct Button* this, int type, int h, int w, char* name, int red, int green, int blue) {
  806194:	defffb04 	addi	sp,sp,-20
  806198:	df000415 	stw	fp,16(sp)
  80619c:	df000404 	addi	fp,sp,16
  8061a0:	e13ffc15 	stw	r4,-16(fp)
  8061a4:	e17ffd15 	stw	r5,-12(fp)
  8061a8:	e1bffe15 	stw	r6,-8(fp)
  8061ac:	e1ffff15 	stw	r7,-4(fp)
	this->type = type;
  8061b0:	e0fffc17 	ldw	r3,-16(fp)
  8061b4:	e0bffd17 	ldw	r2,-12(fp)
  8061b8:	18800415 	stw	r2,16(r3)
	this->r->height = h;
  8061bc:	e0bffc17 	ldw	r2,-16(fp)
  8061c0:	10c00817 	ldw	r3,32(r2)
  8061c4:	e0bffe17 	ldw	r2,-8(fp)
  8061c8:	18800315 	stw	r2,12(r3)
	this->r->width = w;
  8061cc:	e0bffc17 	ldw	r2,-16(fp)
  8061d0:	10c00817 	ldw	r3,32(r2)
  8061d4:	e0bfff17 	ldw	r2,-4(fp)
  8061d8:	18800215 	stw	r2,8(r3)
	this->super->collide = pageButtonCollide;
  8061dc:	e0bffc17 	ldw	r2,-16(fp)
  8061e0:	10c00017 	ldw	r3,0(r2)
  8061e4:	00802034 	movhi	r2,128
  8061e8:	10998704 	addi	r2,r2,26140
  8061ec:	18801a15 	stw	r2,104(r3)
	this->redrawImg = drawTxtButton;
  8061f0:	e0fffc17 	ldw	r3,-16(fp)
  8061f4:	00802034 	movhi	r2,128
  8061f8:	1098ab04 	addi	r2,r2,25260
  8061fc:	18800c15 	stw	r2,48(r3)
	this->name = name;
  806200:	e0fffc17 	ldw	r3,-16(fp)
  806204:	e0800117 	ldw	r2,4(fp)
  806208:	18800915 	stw	r2,36(r3)
	this->red = red;
  80620c:	e0fffc17 	ldw	r3,-16(fp)
  806210:	e0800217 	ldw	r2,8(fp)
  806214:	18800515 	stw	r2,20(r3)
	this->green = green;
  806218:	e0fffc17 	ldw	r3,-16(fp)
  80621c:	e0800317 	ldw	r2,12(fp)
  806220:	18800615 	stw	r2,24(r3)
	this->blue = blue;
  806224:	e0fffc17 	ldw	r3,-16(fp)
  806228:	e0800417 	ldw	r2,16(fp)
  80622c:	18800715 	stw	r2,28(r3)
}
  806230:	e037883a 	mov	sp,fp
  806234:	df000017 	ldw	fp,0(sp)
  806238:	dec00104 	addi	sp,sp,4
  80623c:	f800283a 	ret

00806240 <drawBuyButton>:
void drawBuyButton(struct Button* b, struct Cursor* c) {
  806240:	defffb04 	addi	sp,sp,-20
  806244:	dfc00415 	stw	ra,16(sp)
  806248:	df000315 	stw	fp,12(sp)
  80624c:	df000304 	addi	fp,sp,12
  806250:	e13ffe15 	stw	r4,-8(fp)
  806254:	e17fff15 	stw	r5,-4(fp)
	draw_nontransparent(b->super->x, b->super->y, b->super->currImg->image, 20, c);
  806258:	e0bffe17 	ldw	r2,-8(fp)
  80625c:	10800017 	ldw	r2,0(r2)
  806260:	11000017 	ldw	r4,0(r2)
  806264:	e0bffe17 	ldw	r2,-8(fp)
  806268:	10800017 	ldw	r2,0(r2)
  80626c:	11400117 	ldw	r5,4(r2)
  806270:	e0bffe17 	ldw	r2,-8(fp)
  806274:	10800017 	ldw	r2,0(r2)
  806278:	10800c17 	ldw	r2,48(r2)
  80627c:	11800017 	ldw	r6,0(r2)
  806280:	e0bfff17 	ldw	r2,-4(fp)
  806284:	d8800015 	stw	r2,0(sp)
  806288:	01c00504 	movi	r7,20
  80628c:	08123c80 	call	8123c8 <draw_nontransparent>
	b->redrawing = false;
  806290:	e0bffe17 	ldw	r2,-8(fp)
  806294:	10000a05 	stb	zero,40(r2)
}
  806298:	e037883a 	mov	sp,fp
  80629c:	dfc00117 	ldw	ra,4(sp)
  8062a0:	df000017 	ldw	fp,0(sp)
  8062a4:	dec00204 	addi	sp,sp,8
  8062a8:	f800283a 	ret

008062ac <drawTxtButton>:

void drawTxtButton(struct Button* this, struct Cursor* c) {
  8062ac:	deffed04 	addi	sp,sp,-76
  8062b0:	dfc01215 	stw	ra,72(sp)
  8062b4:	df001115 	stw	fp,68(sp)
  8062b8:	dcc01015 	stw	r19,64(sp)
  8062bc:	dc800f15 	stw	r18,60(sp)
  8062c0:	dc400e15 	stw	r17,56(sp)
  8062c4:	dc000d15 	stw	r16,52(sp)
  8062c8:	df000d04 	addi	fp,sp,52
  8062cc:	e13ff515 	stw	r4,-44(fp)
  8062d0:	e17ff615 	stw	r5,-40(fp)
	alt_up_char_buffer_string(char_buffer, "     ", this->super->prev_x/4+1, this->super->prev_y/4+1);
  8062d4:	d0bc2217 	ldw	r2,-3960(gp)
  8062d8:	e0bffb15 	stw	r2,-20(fp)
  8062dc:	e0bff517 	ldw	r2,-44(fp)
  8062e0:	10800017 	ldw	r2,0(r2)
  8062e4:	10800317 	ldw	r2,12(r2)
  8062e8:	e0bffc15 	stw	r2,-16(fp)
  8062ec:	e0fffc17 	ldw	r3,-16(fp)
  8062f0:	1804403a 	cmpge	r2,r3,zero
  8062f4:	1000031e 	bne	r2,zero,806304 <drawTxtButton+0x58>
  8062f8:	e0bffc17 	ldw	r2,-16(fp)
  8062fc:	108000c4 	addi	r2,r2,3
  806300:	e0bffc15 	stw	r2,-16(fp)
  806304:	e0fffc17 	ldw	r3,-16(fp)
  806308:	1805d0ba 	srai	r2,r3,2
  80630c:	10800044 	addi	r2,r2,1
  806310:	e0bffa15 	stw	r2,-24(fp)
  806314:	e0bff517 	ldw	r2,-44(fp)
  806318:	10800017 	ldw	r2,0(r2)
  80631c:	10800417 	ldw	r2,16(r2)
  806320:	e0bffd15 	stw	r2,-12(fp)
  806324:	e0fffd17 	ldw	r3,-12(fp)
  806328:	1804403a 	cmpge	r2,r3,zero
  80632c:	1000031e 	bne	r2,zero,80633c <drawTxtButton+0x90>
  806330:	e0bffd17 	ldw	r2,-12(fp)
  806334:	108000c4 	addi	r2,r2,3
  806338:	e0bffd15 	stw	r2,-12(fp)
  80633c:	e0fffd17 	ldw	r3,-12(fp)
  806340:	1805d0ba 	srai	r2,r3,2
  806344:	10800044 	addi	r2,r2,1
  806348:	100f883a 	mov	r7,r2
  80634c:	e13ffb17 	ldw	r4,-20(fp)
  806350:	014020f4 	movhi	r5,131
  806354:	2960d904 	addi	r5,r5,-31900
  806358:	e1bffa17 	ldw	r6,-24(fp)
  80635c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, this->name, this->super->x/4+1, this->super->y/4+1);
  806360:	d0bc2217 	ldw	r2,-3960(gp)
  806364:	e0bff915 	stw	r2,-28(fp)
  806368:	e0bff517 	ldw	r2,-44(fp)
  80636c:	10800917 	ldw	r2,36(r2)
  806370:	e0bff815 	stw	r2,-32(fp)
  806374:	e0bff517 	ldw	r2,-44(fp)
  806378:	10800017 	ldw	r2,0(r2)
  80637c:	10800017 	ldw	r2,0(r2)
  806380:	e0bffe15 	stw	r2,-8(fp)
  806384:	e0fffe17 	ldw	r3,-8(fp)
  806388:	1804403a 	cmpge	r2,r3,zero
  80638c:	1000031e 	bne	r2,zero,80639c <drawTxtButton+0xf0>
  806390:	e0bffe17 	ldw	r2,-8(fp)
  806394:	108000c4 	addi	r2,r2,3
  806398:	e0bffe15 	stw	r2,-8(fp)
  80639c:	e0fffe17 	ldw	r3,-8(fp)
  8063a0:	1805d0ba 	srai	r2,r3,2
  8063a4:	10800044 	addi	r2,r2,1
  8063a8:	e0bff715 	stw	r2,-36(fp)
  8063ac:	e0bff517 	ldw	r2,-44(fp)
  8063b0:	10800017 	ldw	r2,0(r2)
  8063b4:	10800117 	ldw	r2,4(r2)
  8063b8:	e0bfff15 	stw	r2,-4(fp)
  8063bc:	e0ffff17 	ldw	r3,-4(fp)
  8063c0:	1804403a 	cmpge	r2,r3,zero
  8063c4:	1000031e 	bne	r2,zero,8063d4 <drawTxtButton+0x128>
  8063c8:	e0bfff17 	ldw	r2,-4(fp)
  8063cc:	108000c4 	addi	r2,r2,3
  8063d0:	e0bfff15 	stw	r2,-4(fp)
  8063d4:	e0ffff17 	ldw	r3,-4(fp)
  8063d8:	1805d0ba 	srai	r2,r3,2
  8063dc:	10800044 	addi	r2,r2,1
  8063e0:	100f883a 	mov	r7,r2
  8063e4:	e13ff917 	ldw	r4,-28(fp)
  8063e8:	e17ff817 	ldw	r5,-32(fp)
  8063ec:	e1bff717 	ldw	r6,-36(fp)
  8063f0:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	drawBox(this->super->x, this->super->y, this->super->x+this->r->width, this->super->y+this->r->height, getColor(this->red, this->green, this->blue), c);
  8063f4:	e0bff517 	ldw	r2,-44(fp)
  8063f8:	10800017 	ldw	r2,0(r2)
  8063fc:	14000017 	ldw	r16,0(r2)
  806400:	e0bff517 	ldw	r2,-44(fp)
  806404:	10800017 	ldw	r2,0(r2)
  806408:	14400117 	ldw	r17,4(r2)
  80640c:	e0bff517 	ldw	r2,-44(fp)
  806410:	10800017 	ldw	r2,0(r2)
  806414:	10c00017 	ldw	r3,0(r2)
  806418:	e0bff517 	ldw	r2,-44(fp)
  80641c:	10800817 	ldw	r2,32(r2)
  806420:	10800217 	ldw	r2,8(r2)
  806424:	18a5883a 	add	r18,r3,r2
  806428:	e0bff517 	ldw	r2,-44(fp)
  80642c:	10800017 	ldw	r2,0(r2)
  806430:	10c00117 	ldw	r3,4(r2)
  806434:	e0bff517 	ldw	r2,-44(fp)
  806438:	10800817 	ldw	r2,32(r2)
  80643c:	10800317 	ldw	r2,12(r2)
  806440:	18a7883a 	add	r19,r3,r2
  806444:	e0bff517 	ldw	r2,-44(fp)
  806448:	11000517 	ldw	r4,20(r2)
  80644c:	e0bff517 	ldw	r2,-44(fp)
  806450:	11400617 	ldw	r5,24(r2)
  806454:	e0bff517 	ldw	r2,-44(fp)
  806458:	11800717 	ldw	r6,28(r2)
  80645c:	0812c580 	call	812c58 <getColor>
  806460:	d8800015 	stw	r2,0(sp)
  806464:	e0bff617 	ldw	r2,-40(fp)
  806468:	d8800115 	stw	r2,4(sp)
  80646c:	8009883a 	mov	r4,r16
  806470:	880b883a 	mov	r5,r17
  806474:	900d883a 	mov	r6,r18
  806478:	980f883a 	mov	r7,r19
  80647c:	08122300 	call	812230 <drawBox>
	this->redrawing = false;
  806480:	e0bff517 	ldw	r2,-44(fp)
  806484:	10000a05 	stb	zero,40(r2)
}
  806488:	e037883a 	mov	sp,fp
  80648c:	dfc00517 	ldw	ra,20(sp)
  806490:	df000417 	ldw	fp,16(sp)
  806494:	dcc00317 	ldw	r19,12(sp)
  806498:	dc800217 	ldw	r18,8(sp)
  80649c:	dc400117 	ldw	r17,4(sp)
  8064a0:	dc000017 	ldw	r16,0(sp)
  8064a4:	dec00604 	addi	sp,sp,24
  8064a8:	f800283a 	ret

008064ac <buyButtonCollide>:
void buyButtonCollide(void* this, void* obj, struct Collidable* c) {
  8064ac:	deffee04 	addi	sp,sp,-72
  8064b0:	dfc01115 	stw	ra,68(sp)
  8064b4:	df001015 	stw	fp,64(sp)
  8064b8:	df001004 	addi	fp,sp,64
  8064bc:	e13ffd15 	stw	r4,-12(fp)
  8064c0:	e17ffe15 	stw	r5,-8(fp)
  8064c4:	e1bfff15 	stw	r6,-4(fp)
	if(((struct Object*)obj)->class == cursor && ((struct Cursor*)((struct Object*)obj)->subObject)->hit == 1) {
  8064c8:	e0bffe17 	ldw	r2,-8(fp)
  8064cc:	10801117 	ldw	r2,68(r2)
  8064d0:	10800118 	cmpnei	r2,r2,4
  8064d4:	10004c1e 	bne	r2,zero,806608 <buyButtonCollide+0x15c>
  8064d8:	e0bffe17 	ldw	r2,-8(fp)
  8064dc:	10801817 	ldw	r2,96(r2)
  8064e0:	10800c17 	ldw	r2,48(r2)
  8064e4:	10800058 	cmpnei	r2,r2,1
  8064e8:	1000471e 	bne	r2,zero,806608 <buyButtonCollide+0x15c>
		if(((struct Button*)((struct Object*)this)->subObject)->obj->price > info.currency) {
  8064ec:	e0bffd17 	ldw	r2,-12(fp)
  8064f0:	10801817 	ldw	r2,96(r2)
  8064f4:	10800117 	ldw	r2,4(r2)
  8064f8:	10800217 	ldw	r2,8(r2)
  8064fc:	1007883a 	mov	r3,r2
  806500:	008020f4 	movhi	r2,131
  806504:	109cb404 	addi	r2,r2,29392
  806508:	10800117 	ldw	r2,4(r2)
  80650c:	10c0092e 	bgeu	r2,r3,806534 <buyButtonCollide+0x88>
			updateMSG(gamePanel.elements[2], "You do not have enough money.");
  806510:	008020f4 	movhi	r2,131
  806514:	109cc404 	addi	r2,r2,29456
  806518:	10800d17 	ldw	r2,52(r2)
  80651c:	10800204 	addi	r2,r2,8
  806520:	11000017 	ldw	r4,0(r2)
  806524:	014020f4 	movhi	r5,131
  806528:	2960db04 	addi	r5,r5,-31892
  80652c:	080a3040 	call	80a304 <updateMSG>
			return;
  806530:	00003506 	br	806608 <buyButtonCollide+0x15c>
		}
		((struct Cursor*)((struct Object*)obj)->subObject)->selectedObj->isSelected = 0;
  806534:	e0bffe17 	ldw	r2,-8(fp)
  806538:	10801817 	ldw	r2,96(r2)
  80653c:	10800a17 	ldw	r2,40(r2)
  806540:	10001215 	stw	zero,72(r2)
		((struct Cursor*)((struct Object*)obj)->subObject)->selectedObj = ((struct Object*)this);
  806544:	e0bffe17 	ldw	r2,-8(fp)
  806548:	10801817 	ldw	r2,96(r2)
  80654c:	1007883a 	mov	r3,r2
  806550:	e0bffd17 	ldw	r2,-12(fp)
  806554:	18800a15 	stw	r2,40(r3)

		((struct Cursor*)((struct Object*)obj)->subObject)->createdObj = ((struct Button*)((struct Object*)this)->subObject)->obj->super;
  806558:	e0bffe17 	ldw	r2,-8(fp)
  80655c:	10801817 	ldw	r2,96(r2)
  806560:	1007883a 	mov	r3,r2
  806564:	e0bffd17 	ldw	r2,-12(fp)
  806568:	10801817 	ldw	r2,96(r2)
  80656c:	10800117 	ldw	r2,4(r2)
  806570:	10800017 	ldw	r2,0(r2)
  806574:	18800b15 	stw	r2,44(r3)
		createShip(((struct Button*)((struct Object*)this)->subObject));
  806578:	e0bffd17 	ldw	r2,-12(fp)
  80657c:	10801817 	ldw	r2,96(r2)
  806580:	1009883a 	mov	r4,r2
  806584:	0806f080 	call	806f08 <createShip>
		((struct Cursor*)((struct Object*)obj)->subObject)->buttonPushed = 1;
  806588:	e0bffe17 	ldw	r2,-8(fp)
  80658c:	10801817 	ldw	r2,96(r2)
  806590:	1007883a 	mov	r3,r2
  806594:	00800044 	movi	r2,1
  806598:	18800d15 	stw	r2,52(r3)
		((struct Object*)this)->isSelected = 1;
  80659c:	e0fffd17 	ldw	r3,-12(fp)
  8065a0:	00800044 	movi	r2,1
  8065a4:	18801215 	stw	r2,72(r3)
		setStats((struct Object*)this, 1);
  8065a8:	e13ffd17 	ldw	r4,-12(fp)
  8065ac:	01400044 	movi	r5,1
  8065b0:	08100ac0 	call	8100ac <setStats>

		char money[50];
		sprintf(money, "A space ship is bought!! $%d is deducted!", ((struct Button*)((struct Object*)this)->subObject)->obj->price);
  8065b4:	e0bffd17 	ldw	r2,-12(fp)
  8065b8:	10801817 	ldw	r2,96(r2)
  8065bc:	10800117 	ldw	r2,4(r2)
  8065c0:	11800217 	ldw	r6,8(r2)
  8065c4:	e13ff004 	addi	r4,fp,-64
  8065c8:	014020f4 	movhi	r5,131
  8065cc:	2960e304 	addi	r5,r5,-31860
  8065d0:	081597c0 	call	81597c <sprintf>
		writeMSG(money );
  8065d4:	e13ff004 	addi	r4,fp,-64
  8065d8:	080a1580 	call	80a158 <writeMSG>
		updateScoreMoney(0, 0-((struct Button*)((struct Object*)this)->subObject)->obj->price);
  8065dc:	e0bffd17 	ldw	r2,-12(fp)
  8065e0:	10801817 	ldw	r2,96(r2)
  8065e4:	10800117 	ldw	r2,4(r2)
  8065e8:	10800217 	ldw	r2,8(r2)
  8065ec:	008bc83a 	sub	r5,zero,r2
  8065f0:	0009883a 	mov	r4,zero
  8065f4:	080e3c40 	call	80e3c4 <updateScoreMoney>

		updateView(((struct Button*)((struct Object*)this)->subObject));
  8065f8:	e0bffd17 	ldw	r2,-12(fp)
  8065fc:	10801817 	ldw	r2,96(r2)
  806600:	1009883a 	mov	r4,r2
  806604:	0806f680 	call	806f68 <updateView>

	}
}
  806608:	e037883a 	mov	sp,fp
  80660c:	dfc00117 	ldw	ra,4(sp)
  806610:	df000017 	ldw	fp,0(sp)
  806614:	dec00204 	addi	sp,sp,8
  806618:	f800283a 	ret

0080661c <pageButtonCollide>:

void pageButtonCollide(void* this, void* obj, struct Collidable* c) {
  80661c:	deffe604 	addi	sp,sp,-104
  806620:	dfc01915 	stw	ra,100(sp)
  806624:	df001815 	stw	fp,96(sp)
  806628:	df001804 	addi	fp,sp,96
  80662c:	e13fe815 	stw	r4,-96(fp)
  806630:	e17fe915 	stw	r5,-92(fp)
  806634:	e1bfea15 	stw	r6,-88(fp)
	switch(((struct Button*)((struct Object*)this)->subObject)->type) {
  806638:	e0bfe817 	ldw	r2,-96(fp)
  80663c:	10801817 	ldw	r2,96(r2)
  806640:	10800417 	ldw	r2,16(r2)
  806644:	10bffd84 	addi	r2,r2,-10
  806648:	e0bff515 	stw	r2,-44(fp)
  80664c:	e0fff517 	ldw	r3,-44(fp)
  806650:	188001a8 	cmpgeui	r2,r3,6
  806654:	1001871e 	bne	r2,zero,806c74 <pageButtonCollide+0x658>
  806658:	e13ff517 	ldw	r4,-44(fp)
  80665c:	e13ff517 	ldw	r4,-44(fp)
  806660:	2105883a 	add	r2,r4,r4
  806664:	1087883a 	add	r3,r2,r2
  806668:	00802034 	movhi	r2,128
  80666c:	10999f04 	addi	r2,r2,26236
  806670:	1885883a 	add	r2,r3,r2
  806674:	10800017 	ldw	r2,0(r2)
  806678:	1000683a 	jmp	r2
  80667c:	00806694 	movui	r2,410
  806680:	008067e0 	cmpeqi	r2,zero,415
  806684:	00806a20 	cmpeqi	r2,zero,424
  806688:	00806c30 	cmpltui	r2,zero,432
  80668c:	00806c48 	cmpgei	r2,zero,433
  806690:	00806c60 	cmpeqi	r2,zero,433
	case 10: //ctrl page
		changePage(((struct Cursor*)((struct Object*)obj)->subObject), 1);
  806694:	e0bfe917 	ldw	r2,-92(fp)
  806698:	10801817 	ldw	r2,96(r2)
  80669c:	1009883a 	mov	r4,r2
  8066a0:	01400044 	movi	r5,1
  8066a4:	0806fa40 	call	806fa4 <changePage>
		alt_up_char_buffer_string(char_buffer, "              ", gamePanel.elements[3]->buttons[0]->super->x/4+1, gamePanel.elements[3]->buttons[0]->super->y/4+1);
  8066a8:	d0bc2217 	ldw	r2,-3960(gp)
  8066ac:	e0bff415 	stw	r2,-48(fp)
  8066b0:	008020f4 	movhi	r2,131
  8066b4:	109cc404 	addi	r2,r2,29456
  8066b8:	10800d17 	ldw	r2,52(r2)
  8066bc:	10800304 	addi	r2,r2,12
  8066c0:	10800017 	ldw	r2,0(r2)
  8066c4:	10800917 	ldw	r2,36(r2)
  8066c8:	10800017 	ldw	r2,0(r2)
  8066cc:	10800017 	ldw	r2,0(r2)
  8066d0:	10800017 	ldw	r2,0(r2)
  8066d4:	e0bff615 	stw	r2,-40(fp)
  8066d8:	e0fff617 	ldw	r3,-40(fp)
  8066dc:	1804403a 	cmpge	r2,r3,zero
  8066e0:	1000031e 	bne	r2,zero,8066f0 <pageButtonCollide+0xd4>
  8066e4:	e13ff617 	ldw	r4,-40(fp)
  8066e8:	210000c4 	addi	r4,r4,3
  8066ec:	e13ff615 	stw	r4,-40(fp)
  8066f0:	e0fff617 	ldw	r3,-40(fp)
  8066f4:	1805d0ba 	srai	r2,r3,2
  8066f8:	10800044 	addi	r2,r2,1
  8066fc:	e0bff315 	stw	r2,-52(fp)
  806700:	008020f4 	movhi	r2,131
  806704:	109cc404 	addi	r2,r2,29456
  806708:	10800d17 	ldw	r2,52(r2)
  80670c:	10800304 	addi	r2,r2,12
  806710:	10800017 	ldw	r2,0(r2)
  806714:	10800917 	ldw	r2,36(r2)
  806718:	10800017 	ldw	r2,0(r2)
  80671c:	10800017 	ldw	r2,0(r2)
  806720:	10800117 	ldw	r2,4(r2)
  806724:	e0bff715 	stw	r2,-36(fp)
  806728:	e13ff717 	ldw	r4,-36(fp)
  80672c:	2004403a 	cmpge	r2,r4,zero
  806730:	1000031e 	bne	r2,zero,806740 <pageButtonCollide+0x124>
  806734:	e0bff717 	ldw	r2,-36(fp)
  806738:	108000c4 	addi	r2,r2,3
  80673c:	e0bff715 	stw	r2,-36(fp)
  806740:	e0fff717 	ldw	r3,-36(fp)
  806744:	1805d0ba 	srai	r2,r3,2
  806748:	10800044 	addi	r2,r2,1
  80674c:	100f883a 	mov	r7,r2
  806750:	e13ff417 	ldw	r4,-48(fp)
  806754:	014020f4 	movhi	r5,131
  806758:	2960ee04 	addi	r5,r5,-31816
  80675c:	e1bff317 	ldw	r6,-52(fp)
  806760:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 11);
  806764:	d13c2217 	ldw	r4,-3960(gp)
  806768:	014020f4 	movhi	r5,131
  80676c:	2960ee04 	addi	r5,r5,-31816
  806770:	01801044 	movi	r6,65
  806774:	01c002c4 	movi	r7,11
  806778:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 12);
  80677c:	d13c2217 	ldw	r4,-3960(gp)
  806780:	014020f4 	movhi	r5,131
  806784:	2960ee04 	addi	r5,r5,-31816
  806788:	01801044 	movi	r6,65
  80678c:	01c00304 	movi	r7,12
  806790:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 20);
  806794:	d13c2217 	ldw	r4,-3960(gp)
  806798:	014020f4 	movhi	r5,131
  80679c:	2960ee04 	addi	r5,r5,-31816
  8067a0:	01801044 	movi	r6,65
  8067a4:	01c00504 	movi	r7,20
  8067a8:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 21);
  8067ac:	d13c2217 	ldw	r4,-3960(gp)
  8067b0:	014020f4 	movhi	r5,131
  8067b4:	2960ee04 	addi	r5,r5,-31816
  8067b8:	01801044 	movi	r6,65
  8067bc:	01c00544 	movi	r7,21
  8067c0:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 22);
  8067c4:	d13c2217 	ldw	r4,-3960(gp)
  8067c8:	014020f4 	movhi	r5,131
  8067cc:	2960ee04 	addi	r5,r5,-31816
  8067d0:	01801044 	movi	r6,65
  8067d4:	01c00584 	movi	r7,22
  8067d8:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		break;
  8067dc:	00012506 	br	806c74 <pageButtonCollide+0x658>
	case 11: //stats page
		changePage(((struct Cursor*)((struct Object*)obj)->subObject), 3);
  8067e0:	e0bfe917 	ldw	r2,-92(fp)
  8067e4:	10801817 	ldw	r2,96(r2)
  8067e8:	1009883a 	mov	r4,r2
  8067ec:	014000c4 	movi	r5,3
  8067f0:	0806fa40 	call	806fa4 <changePage>
		alt_up_char_buffer_string(char_buffer, "              ", gamePanel.elements[3]->buttons[0]->super->x/4+1, gamePanel.elements[3]->buttons[0]->super->y/4+1);
  8067f4:	d13c2217 	ldw	r4,-3960(gp)
  8067f8:	e13ff215 	stw	r4,-56(fp)
  8067fc:	008020f4 	movhi	r2,131
  806800:	109cc404 	addi	r2,r2,29456
  806804:	10800d17 	ldw	r2,52(r2)
  806808:	10800304 	addi	r2,r2,12
  80680c:	10800017 	ldw	r2,0(r2)
  806810:	10800917 	ldw	r2,36(r2)
  806814:	10800017 	ldw	r2,0(r2)
  806818:	10800017 	ldw	r2,0(r2)
  80681c:	10800017 	ldw	r2,0(r2)
  806820:	e0bff815 	stw	r2,-32(fp)
  806824:	e0fff817 	ldw	r3,-32(fp)
  806828:	1804403a 	cmpge	r2,r3,zero
  80682c:	1000031e 	bne	r2,zero,80683c <pageButtonCollide+0x220>
  806830:	e13ff817 	ldw	r4,-32(fp)
  806834:	210000c4 	addi	r4,r4,3
  806838:	e13ff815 	stw	r4,-32(fp)
  80683c:	e0fff817 	ldw	r3,-32(fp)
  806840:	1805d0ba 	srai	r2,r3,2
  806844:	10800044 	addi	r2,r2,1
  806848:	e0bff115 	stw	r2,-60(fp)
  80684c:	008020f4 	movhi	r2,131
  806850:	109cc404 	addi	r2,r2,29456
  806854:	10800d17 	ldw	r2,52(r2)
  806858:	10800304 	addi	r2,r2,12
  80685c:	10800017 	ldw	r2,0(r2)
  806860:	10800917 	ldw	r2,36(r2)
  806864:	10800017 	ldw	r2,0(r2)
  806868:	10800017 	ldw	r2,0(r2)
  80686c:	10800117 	ldw	r2,4(r2)
  806870:	e0bff915 	stw	r2,-28(fp)
  806874:	e13ff917 	ldw	r4,-28(fp)
  806878:	2004403a 	cmpge	r2,r4,zero
  80687c:	1000031e 	bne	r2,zero,80688c <pageButtonCollide+0x270>
  806880:	e0bff917 	ldw	r2,-28(fp)
  806884:	108000c4 	addi	r2,r2,3
  806888:	e0bff915 	stw	r2,-28(fp)
  80688c:	e0fff917 	ldw	r3,-28(fp)
  806890:	1805d0ba 	srai	r2,r3,2
  806894:	10800044 	addi	r2,r2,1
  806898:	100f883a 	mov	r7,r2
  80689c:	e13ff217 	ldw	r4,-56(fp)
  8068a0:	014020f4 	movhi	r5,131
  8068a4:	2960ee04 	addi	r5,r5,-31816
  8068a8:	e1bff117 	ldw	r6,-60(fp)
  8068ac:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 11);
  8068b0:	d13c2217 	ldw	r4,-3960(gp)
  8068b4:	014020f4 	movhi	r5,131
  8068b8:	2960ee04 	addi	r5,r5,-31816
  8068bc:	01801044 	movi	r6,65
  8068c0:	01c002c4 	movi	r7,11
  8068c4:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 12);
  8068c8:	d13c2217 	ldw	r4,-3960(gp)
  8068cc:	014020f4 	movhi	r5,131
  8068d0:	2960ee04 	addi	r5,r5,-31816
  8068d4:	01801044 	movi	r6,65
  8068d8:	01c00304 	movi	r7,12
  8068dc:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 20);
  8068e0:	d13c2217 	ldw	r4,-3960(gp)
  8068e4:	014020f4 	movhi	r5,131
  8068e8:	2960ee04 	addi	r5,r5,-31816
  8068ec:	01801044 	movi	r6,65
  8068f0:	01c00504 	movi	r7,20
  8068f4:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 21);
  8068f8:	d13c2217 	ldw	r4,-3960(gp)
  8068fc:	014020f4 	movhi	r5,131
  806900:	2960ee04 	addi	r5,r5,-31816
  806904:	01801044 	movi	r6,65
  806908:	01c00544 	movi	r7,21
  80690c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 22);
  806910:	d13c2217 	ldw	r4,-3960(gp)
  806914:	014020f4 	movhi	r5,131
  806918:	2960ee04 	addi	r5,r5,-31816
  80691c:	01801044 	movi	r6,65
  806920:	01c00584 	movi	r7,22
  806924:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", gamePanel.elements[1]->buttons[5]->super->x/4+1, gamePanel.elements[1]->buttons[5]->super->y/4+1);
  806928:	d13c2217 	ldw	r4,-3960(gp)
  80692c:	e13ff015 	stw	r4,-64(fp)
  806930:	008020f4 	movhi	r2,131
  806934:	109cc404 	addi	r2,r2,29456
  806938:	10800d17 	ldw	r2,52(r2)
  80693c:	10800104 	addi	r2,r2,4
  806940:	10800017 	ldw	r2,0(r2)
  806944:	10800917 	ldw	r2,36(r2)
  806948:	10800504 	addi	r2,r2,20
  80694c:	10800017 	ldw	r2,0(r2)
  806950:	10800017 	ldw	r2,0(r2)
  806954:	10800017 	ldw	r2,0(r2)
  806958:	e0bffa15 	stw	r2,-24(fp)
  80695c:	e0fffa17 	ldw	r3,-24(fp)
  806960:	1804403a 	cmpge	r2,r3,zero
  806964:	1000031e 	bne	r2,zero,806974 <pageButtonCollide+0x358>
  806968:	e13ffa17 	ldw	r4,-24(fp)
  80696c:	210000c4 	addi	r4,r4,3
  806970:	e13ffa15 	stw	r4,-24(fp)
  806974:	e0fffa17 	ldw	r3,-24(fp)
  806978:	1805d0ba 	srai	r2,r3,2
  80697c:	10800044 	addi	r2,r2,1
  806980:	e0bfef15 	stw	r2,-68(fp)
  806984:	008020f4 	movhi	r2,131
  806988:	109cc404 	addi	r2,r2,29456
  80698c:	10800d17 	ldw	r2,52(r2)
  806990:	10800104 	addi	r2,r2,4
  806994:	10800017 	ldw	r2,0(r2)
  806998:	10800917 	ldw	r2,36(r2)
  80699c:	10800504 	addi	r2,r2,20
  8069a0:	10800017 	ldw	r2,0(r2)
  8069a4:	10800017 	ldw	r2,0(r2)
  8069a8:	10800117 	ldw	r2,4(r2)
  8069ac:	e0bffb15 	stw	r2,-20(fp)
  8069b0:	e13ffb17 	ldw	r4,-20(fp)
  8069b4:	2004403a 	cmpge	r2,r4,zero
  8069b8:	1000031e 	bne	r2,zero,8069c8 <pageButtonCollide+0x3ac>
  8069bc:	e0bffb17 	ldw	r2,-20(fp)
  8069c0:	108000c4 	addi	r2,r2,3
  8069c4:	e0bffb15 	stw	r2,-20(fp)
  8069c8:	e0fffb17 	ldw	r3,-20(fp)
  8069cc:	1805d0ba 	srai	r2,r3,2
  8069d0:	10800044 	addi	r2,r2,1
  8069d4:	100f883a 	mov	r7,r2
  8069d8:	e13ff017 	ldw	r4,-64(fp)
  8069dc:	014020f4 	movhi	r5,131
  8069e0:	2960ee04 	addi	r5,r5,-31816
  8069e4:	e1bfef17 	ldw	r6,-68(fp)
  8069e8:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		if((((struct Cursor*)((struct Object*)obj)->subObject)->selectedObj)->class == ship) {
  8069ec:	e0bfe917 	ldw	r2,-92(fp)
  8069f0:	10801817 	ldw	r2,96(r2)
  8069f4:	10800a17 	ldw	r2,40(r2)
  8069f8:	10801117 	ldw	r2,68(r2)
  8069fc:	10800198 	cmpnei	r2,r2,6
  806a00:	10009c1e 	bne	r2,zero,806c74 <pageButtonCollide+0x658>
			updateStatsPage(((struct SpaceShip*)(((struct Cursor*)((struct Object*)obj)->subObject)->selectedObj->subObject)));
  806a04:	e0bfe917 	ldw	r2,-92(fp)
  806a08:	10801817 	ldw	r2,96(r2)
  806a0c:	10800a17 	ldw	r2,40(r2)
  806a10:	10801817 	ldw	r2,96(r2)
  806a14:	1009883a 	mov	r4,r2
  806a18:	0806c980 	call	806c98 <updateStatsPage>
		}
		break;
  806a1c:	00009506 	br	806c74 <pageButtonCollide+0x658>
	case 12: //menu page
		changePage(((struct Cursor*)((struct Object*)obj)->subObject), 4);
  806a20:	e0bfe917 	ldw	r2,-92(fp)
  806a24:	10801817 	ldw	r2,96(r2)
  806a28:	1009883a 	mov	r4,r2
  806a2c:	01400104 	movi	r5,4
  806a30:	0806fa40 	call	806fa4 <changePage>
		alt_up_char_buffer_string(char_buffer, "              ", gamePanel.elements[3]->buttons[0]->super->x/4+1, gamePanel.elements[3]->buttons[0]->super->y/4+1);
  806a34:	d13c2217 	ldw	r4,-3960(gp)
  806a38:	e13fee15 	stw	r4,-72(fp)
  806a3c:	008020f4 	movhi	r2,131
  806a40:	109cc404 	addi	r2,r2,29456
  806a44:	10800d17 	ldw	r2,52(r2)
  806a48:	10800304 	addi	r2,r2,12
  806a4c:	10800017 	ldw	r2,0(r2)
  806a50:	10800917 	ldw	r2,36(r2)
  806a54:	10800017 	ldw	r2,0(r2)
  806a58:	10800017 	ldw	r2,0(r2)
  806a5c:	10800017 	ldw	r2,0(r2)
  806a60:	e0bffc15 	stw	r2,-16(fp)
  806a64:	e0fffc17 	ldw	r3,-16(fp)
  806a68:	1804403a 	cmpge	r2,r3,zero
  806a6c:	1000031e 	bne	r2,zero,806a7c <pageButtonCollide+0x460>
  806a70:	e13ffc17 	ldw	r4,-16(fp)
  806a74:	210000c4 	addi	r4,r4,3
  806a78:	e13ffc15 	stw	r4,-16(fp)
  806a7c:	e0fffc17 	ldw	r3,-16(fp)
  806a80:	1805d0ba 	srai	r2,r3,2
  806a84:	10800044 	addi	r2,r2,1
  806a88:	e0bfed15 	stw	r2,-76(fp)
  806a8c:	008020f4 	movhi	r2,131
  806a90:	109cc404 	addi	r2,r2,29456
  806a94:	10800d17 	ldw	r2,52(r2)
  806a98:	10800304 	addi	r2,r2,12
  806a9c:	10800017 	ldw	r2,0(r2)
  806aa0:	10800917 	ldw	r2,36(r2)
  806aa4:	10800017 	ldw	r2,0(r2)
  806aa8:	10800017 	ldw	r2,0(r2)
  806aac:	10800117 	ldw	r2,4(r2)
  806ab0:	e0bffd15 	stw	r2,-12(fp)
  806ab4:	e13ffd17 	ldw	r4,-12(fp)
  806ab8:	2004403a 	cmpge	r2,r4,zero
  806abc:	1000031e 	bne	r2,zero,806acc <pageButtonCollide+0x4b0>
  806ac0:	e0bffd17 	ldw	r2,-12(fp)
  806ac4:	108000c4 	addi	r2,r2,3
  806ac8:	e0bffd15 	stw	r2,-12(fp)
  806acc:	e0fffd17 	ldw	r3,-12(fp)
  806ad0:	1805d0ba 	srai	r2,r3,2
  806ad4:	10800044 	addi	r2,r2,1
  806ad8:	100f883a 	mov	r7,r2
  806adc:	e13fee17 	ldw	r4,-72(fp)
  806ae0:	014020f4 	movhi	r5,131
  806ae4:	2960ee04 	addi	r5,r5,-31816
  806ae8:	e1bfed17 	ldw	r6,-76(fp)
  806aec:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 11);
  806af0:	d13c2217 	ldw	r4,-3960(gp)
  806af4:	014020f4 	movhi	r5,131
  806af8:	2960ee04 	addi	r5,r5,-31816
  806afc:	01801044 	movi	r6,65
  806b00:	01c002c4 	movi	r7,11
  806b04:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 12);
  806b08:	d13c2217 	ldw	r4,-3960(gp)
  806b0c:	014020f4 	movhi	r5,131
  806b10:	2960ee04 	addi	r5,r5,-31816
  806b14:	01801044 	movi	r6,65
  806b18:	01c00304 	movi	r7,12
  806b1c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 20);
  806b20:	d13c2217 	ldw	r4,-3960(gp)
  806b24:	014020f4 	movhi	r5,131
  806b28:	2960ee04 	addi	r5,r5,-31816
  806b2c:	01801044 	movi	r6,65
  806b30:	01c00504 	movi	r7,20
  806b34:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 21);
  806b38:	d13c2217 	ldw	r4,-3960(gp)
  806b3c:	014020f4 	movhi	r5,131
  806b40:	2960ee04 	addi	r5,r5,-31816
  806b44:	01801044 	movi	r6,65
  806b48:	01c00544 	movi	r7,21
  806b4c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", 65, 22);
  806b50:	d13c2217 	ldw	r4,-3960(gp)
  806b54:	014020f4 	movhi	r5,131
  806b58:	2960ee04 	addi	r5,r5,-31816
  806b5c:	01801044 	movi	r6,65
  806b60:	01c00584 	movi	r7,22
  806b64:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		alt_up_char_buffer_string(char_buffer, "              ", gamePanel.elements[1]->buttons[5]->super->x/4+1, gamePanel.elements[1]->buttons[5]->super->y/4+1);
  806b68:	d13c2217 	ldw	r4,-3960(gp)
  806b6c:	e13fec15 	stw	r4,-80(fp)
  806b70:	008020f4 	movhi	r2,131
  806b74:	109cc404 	addi	r2,r2,29456
  806b78:	10800d17 	ldw	r2,52(r2)
  806b7c:	10800104 	addi	r2,r2,4
  806b80:	10800017 	ldw	r2,0(r2)
  806b84:	10800917 	ldw	r2,36(r2)
  806b88:	10800504 	addi	r2,r2,20
  806b8c:	10800017 	ldw	r2,0(r2)
  806b90:	10800017 	ldw	r2,0(r2)
  806b94:	10800017 	ldw	r2,0(r2)
  806b98:	e0bffe15 	stw	r2,-8(fp)
  806b9c:	e0fffe17 	ldw	r3,-8(fp)
  806ba0:	1804403a 	cmpge	r2,r3,zero
  806ba4:	1000031e 	bne	r2,zero,806bb4 <pageButtonCollide+0x598>
  806ba8:	e13ffe17 	ldw	r4,-8(fp)
  806bac:	210000c4 	addi	r4,r4,3
  806bb0:	e13ffe15 	stw	r4,-8(fp)
  806bb4:	e0fffe17 	ldw	r3,-8(fp)
  806bb8:	1805d0ba 	srai	r2,r3,2
  806bbc:	10800044 	addi	r2,r2,1
  806bc0:	e0bfeb15 	stw	r2,-84(fp)
  806bc4:	008020f4 	movhi	r2,131
  806bc8:	109cc404 	addi	r2,r2,29456
  806bcc:	10800d17 	ldw	r2,52(r2)
  806bd0:	10800104 	addi	r2,r2,4
  806bd4:	10800017 	ldw	r2,0(r2)
  806bd8:	10800917 	ldw	r2,36(r2)
  806bdc:	10800504 	addi	r2,r2,20
  806be0:	10800017 	ldw	r2,0(r2)
  806be4:	10800017 	ldw	r2,0(r2)
  806be8:	10800117 	ldw	r2,4(r2)
  806bec:	e0bfff15 	stw	r2,-4(fp)
  806bf0:	e13fff17 	ldw	r4,-4(fp)
  806bf4:	2004403a 	cmpge	r2,r4,zero
  806bf8:	1000031e 	bne	r2,zero,806c08 <pageButtonCollide+0x5ec>
  806bfc:	e0bfff17 	ldw	r2,-4(fp)
  806c00:	108000c4 	addi	r2,r2,3
  806c04:	e0bfff15 	stw	r2,-4(fp)
  806c08:	e0ffff17 	ldw	r3,-4(fp)
  806c0c:	1805d0ba 	srai	r2,r3,2
  806c10:	10800044 	addi	r2,r2,1
  806c14:	100f883a 	mov	r7,r2
  806c18:	e13fec17 	ldw	r4,-80(fp)
  806c1c:	014020f4 	movhi	r5,131
  806c20:	2960ee04 	addi	r5,r5,-31816
  806c24:	e1bfeb17 	ldw	r6,-84(fp)
  806c28:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		break;
  806c2c:	00001106 	br	806c74 <pageButtonCollide+0x658>
	case 13:
		((struct Button*)((struct Object*)this)->subObject)->obj1->endAnimate = true;
  806c30:	e0bfe817 	ldw	r2,-96(fp)
  806c34:	10801817 	ldw	r2,96(r2)
  806c38:	10c00317 	ldw	r3,12(r2)
  806c3c:	00800044 	movi	r2,1
  806c40:	18801e45 	stb	r2,121(r3)
		break;
  806c44:	00000b06 	br	806c74 <pageButtonCollide+0x658>
	case 14:
		((struct Button*)((struct Object*)this)->subObject)->obj1->endAnimate = true;
  806c48:	e0bfe817 	ldw	r2,-96(fp)
  806c4c:	10801817 	ldw	r2,96(r2)
  806c50:	10c00317 	ldw	r3,12(r2)
  806c54:	00800044 	movi	r2,1
  806c58:	18801e45 	stb	r2,121(r3)
		break;
  806c5c:	00000506 	br	806c74 <pageButtonCollide+0x658>
	case 15:
		((struct Button*)((struct Object*)this)->subObject)->obj1->endAnimate = true;
  806c60:	e0bfe817 	ldw	r2,-96(fp)
  806c64:	10801817 	ldw	r2,96(r2)
  806c68:	10c00317 	ldw	r3,12(r2)
  806c6c:	00800044 	movi	r2,1
  806c70:	18801e45 	stb	r2,121(r3)
		break;
	default:
		break;
	}
	updateView(((struct Button*)((struct Object*)this)->subObject));
  806c74:	e0bfe817 	ldw	r2,-96(fp)
  806c78:	10801817 	ldw	r2,96(r2)
  806c7c:	1009883a 	mov	r4,r2
  806c80:	0806f680 	call	806f68 <updateView>
}
  806c84:	e037883a 	mov	sp,fp
  806c88:	dfc00117 	ldw	ra,4(sp)
  806c8c:	df000017 	ldw	fp,0(sp)
  806c90:	dec00204 	addi	sp,sp,8
  806c94:	f800283a 	ret

00806c98 <updateStatsPage>:

void updateStatsPage(struct SpaceShip* obj) {
  806c98:	deffcb04 	addi	sp,sp,-212
  806c9c:	dfc03415 	stw	ra,208(sp)
  806ca0:	df003315 	stw	fp,204(sp)
  806ca4:	df003304 	addi	fp,sp,204
  806ca8:	e13fff15 	stw	r4,-4(fp)
	alt_up_char_buffer_string(char_buffer, obj->name, 65, 11);
  806cac:	d13c2217 	ldw	r4,-3960(gp)
  806cb0:	e0bfff17 	ldw	r2,-4(fp)
  806cb4:	11400817 	ldw	r5,32(r2)
  806cb8:	01801044 	movi	r6,65
  806cbc:	01c002c4 	movi	r7,11
  806cc0:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	char level[50];
	char dmg[50];
	char range[50];
	char fireRate[50];
	sprintf(level, "LEVEL: %d ",obj->level);
  806cc4:	e0bfff17 	ldw	r2,-4(fp)
  806cc8:	11800617 	ldw	r6,24(r2)
  806ccc:	e13fcd04 	addi	r4,fp,-204
  806cd0:	014020f4 	movhi	r5,131
  806cd4:	2960f204 	addi	r5,r5,-31800
  806cd8:	081597c0 	call	81597c <sprintf>
	alt_up_char_buffer_string(char_buffer, level, 65, 12);
  806cdc:	d13c2217 	ldw	r4,-3960(gp)
  806ce0:	e17fcd04 	addi	r5,fp,-204
  806ce4:	01801044 	movi	r6,65
  806ce8:	01c00304 	movi	r7,12
  806cec:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	sprintf(range, "RANGE: %d ",obj->super->collideRange);
  806cf0:	e0bfff17 	ldw	r2,-4(fp)
  806cf4:	10800017 	ldw	r2,0(r2)
  806cf8:	11800817 	ldw	r6,32(r2)
  806cfc:	e13fe604 	addi	r4,fp,-104
  806d00:	014020f4 	movhi	r5,131
  806d04:	2960f504 	addi	r5,r5,-31788
  806d08:	081597c0 	call	81597c <sprintf>
	alt_up_char_buffer_string(char_buffer, range, 65, 20);
  806d0c:	d13c2217 	ldw	r4,-3960(gp)
  806d10:	e17fe604 	addi	r5,fp,-104
  806d14:	01801044 	movi	r6,65
  806d18:	01c00504 	movi	r7,20
  806d1c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	sprintf(dmg, "DAMAGE: %d ",obj->damage);
  806d20:	e0bfff17 	ldw	r2,-4(fp)
  806d24:	11800117 	ldw	r6,4(r2)
  806d28:	e13fd984 	addi	r4,fp,-154
  806d2c:	014020f4 	movhi	r5,131
  806d30:	2960f804 	addi	r5,r5,-31776
  806d34:	081597c0 	call	81597c <sprintf>
	alt_up_char_buffer_string(char_buffer, dmg, 65, 21);
  806d38:	d13c2217 	ldw	r4,-3960(gp)
  806d3c:	e17fd984 	addi	r5,fp,-154
  806d40:	01801044 	movi	r6,65
  806d44:	01c00544 	movi	r7,21
  806d48:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	sprintf(fireRate, "SPEED: %d ",obj->fire_rate);
  806d4c:	e0bfff17 	ldw	r2,-4(fp)
  806d50:	11800317 	ldw	r6,12(r2)
  806d54:	e13ff284 	addi	r4,fp,-54
  806d58:	014020f4 	movhi	r5,131
  806d5c:	2960fb04 	addi	r5,r5,-31764
  806d60:	081597c0 	call	81597c <sprintf>
	alt_up_char_buffer_string(char_buffer, fireRate, 65, 22);
  806d64:	d13c2217 	ldw	r4,-3960(gp)
  806d68:	e17ff284 	addi	r5,fp,-54
  806d6c:	01801044 	movi	r6,65
  806d70:	01c00584 	movi	r7,22
  806d74:	08216fc0 	call	8216fc <alt_up_char_buffer_string>

}
  806d78:	e037883a 	mov	sp,fp
  806d7c:	dfc00117 	ldw	ra,4(sp)
  806d80:	df000017 	ldw	fp,0(sp)
  806d84:	dec00204 	addi	sp,sp,8
  806d88:	f800283a 	ret

00806d8c <upgradeButtonCollide>:
void upgradeButtonCollide(void* this, void* obj, struct Collidable* c) {
  806d8c:	defffb04 	addi	sp,sp,-20
  806d90:	dfc00415 	stw	ra,16(sp)
  806d94:	df000315 	stw	fp,12(sp)
  806d98:	df000304 	addi	fp,sp,12
  806d9c:	e13ffd15 	stw	r4,-12(fp)
  806da0:	e17ffe15 	stw	r5,-8(fp)
  806da4:	e1bfff15 	stw	r6,-4(fp)
	if(((struct Object*)obj)->class == cursor && ((struct Cursor*)((struct Object*)obj)->subObject)->hit == 1) {
  806da8:	e0bffe17 	ldw	r2,-8(fp)
  806dac:	10801117 	ldw	r2,68(r2)
  806db0:	10800118 	cmpnei	r2,r2,4
  806db4:	1000171e 	bne	r2,zero,806e14 <upgradeButtonCollide+0x88>
  806db8:	e0bffe17 	ldw	r2,-8(fp)
  806dbc:	10801817 	ldw	r2,96(r2)
  806dc0:	10800c17 	ldw	r2,48(r2)
  806dc4:	10800058 	cmpnei	r2,r2,1
  806dc8:	1000121e 	bne	r2,zero,806e14 <upgradeButtonCollide+0x88>
		if(((struct Cursor*)((struct Object*)obj)->subObject)->selectedObj->class == ship) {
  806dcc:	e0bffe17 	ldw	r2,-8(fp)
  806dd0:	10801817 	ldw	r2,96(r2)
  806dd4:	10800a17 	ldw	r2,40(r2)
  806dd8:	10801117 	ldw	r2,68(r2)
  806ddc:	10800198 	cmpnei	r2,r2,6
  806de0:	10000c1e 	bne	r2,zero,806e14 <upgradeButtonCollide+0x88>
			upgrade(((struct SpaceShip*)((struct Cursor*)((struct Object*)obj)->subObject)->selectedObj->subObject));
  806de4:	e0bffe17 	ldw	r2,-8(fp)
  806de8:	10801817 	ldw	r2,96(r2)
  806dec:	10800a17 	ldw	r2,40(r2)
  806df0:	10801817 	ldw	r2,96(r2)
  806df4:	1009883a 	mov	r4,r2
  806df8:	08117940 	call	811794 <upgrade>
			updateStatsPage(((struct SpaceShip*)(((struct Cursor*)((struct Object*)obj)->subObject)->selectedObj->subObject)));
  806dfc:	e0bffe17 	ldw	r2,-8(fp)
  806e00:	10801817 	ldw	r2,96(r2)
  806e04:	10800a17 	ldw	r2,40(r2)
  806e08:	10801817 	ldw	r2,96(r2)
  806e0c:	1009883a 	mov	r4,r2
  806e10:	0806c980 	call	806c98 <updateStatsPage>
		}
	}
}
  806e14:	e037883a 	mov	sp,fp
  806e18:	dfc00117 	ldw	ra,4(sp)
  806e1c:	df000017 	ldw	fp,0(sp)
  806e20:	dec00204 	addi	sp,sp,8
  806e24:	f800283a 	ret

00806e28 <endGameButtonCollide>:

void endGameButtonCollide(void* this, void* obj, struct Collidable* c){
  806e28:	defffc04 	addi	sp,sp,-16
  806e2c:	df000315 	stw	fp,12(sp)
  806e30:	df000304 	addi	fp,sp,12
  806e34:	e13ffd15 	stw	r4,-12(fp)
  806e38:	e17ffe15 	stw	r5,-8(fp)
  806e3c:	e1bfff15 	stw	r6,-4(fp)
	if (((struct Object*)obj)->class == cursor && ((struct Cursor*)((struct Object*)obj)->subObject)->hit == 1){
  806e40:	e0bffe17 	ldw	r2,-8(fp)
  806e44:	10801117 	ldw	r2,68(r2)
  806e48:	10800118 	cmpnei	r2,r2,4
  806e4c:	10000c1e 	bne	r2,zero,806e80 <endGameButtonCollide+0x58>
  806e50:	e0bffe17 	ldw	r2,-8(fp)
  806e54:	10801817 	ldw	r2,96(r2)
  806e58:	10800c17 	ldw	r2,48(r2)
  806e5c:	10800058 	cmpnei	r2,r2,1
  806e60:	1000071e 	bne	r2,zero,806e80 <endGameButtonCollide+0x58>
		info.isWin = false;
  806e64:	008020f4 	movhi	r2,131
  806e68:	109cb404 	addi	r2,r2,29392
  806e6c:	10000815 	stw	zero,32(r2)
		info.isEnd = true;
  806e70:	00c020f4 	movhi	r3,131
  806e74:	18dcb404 	addi	r3,r3,29392
  806e78:	00800044 	movi	r2,1
  806e7c:	18800715 	stw	r2,28(r3)
	}
}
  806e80:	e037883a 	mov	sp,fp
  806e84:	df000017 	ldw	fp,0(sp)
  806e88:	dec00104 	addi	sp,sp,4
  806e8c:	f800283a 	ret

00806e90 <startGameButtonCollide>:

void startGameButtonCollide(void* this, void* obj, struct Collidable* c){
  806e90:	defffc04 	addi	sp,sp,-16
  806e94:	df000315 	stw	fp,12(sp)
  806e98:	df000304 	addi	fp,sp,12
  806e9c:	e13ffd15 	stw	r4,-12(fp)
  806ea0:	e17ffe15 	stw	r5,-8(fp)
  806ea4:	e1bfff15 	stw	r6,-4(fp)
	// only set true to startButton once in 200 execution
	// this will prevent from calling checkStages multiple time.
	if (((struct Object*)obj)->class == cursor && ((struct Cursor*)((struct Object*)obj)->subObject)->hit == 1
  806ea8:	e0bffe17 	ldw	r2,-8(fp)
  806eac:	10801117 	ldw	r2,68(r2)
  806eb0:	10800118 	cmpnei	r2,r2,4
  806eb4:	1000101e 	bne	r2,zero,806ef8 <startGameButtonCollide+0x68>
  806eb8:	e0bffe17 	ldw	r2,-8(fp)
  806ebc:	10801817 	ldw	r2,96(r2)
  806ec0:	10800c17 	ldw	r2,48(r2)
  806ec4:	10800058 	cmpnei	r2,r2,1
  806ec8:	10000b1e 	bne	r2,zero,806ef8 <startGameButtonCollide+0x68>
  806ecc:	e0bffd17 	ldw	r2,-12(fp)
  806ed0:	10801217 	ldw	r2,72(r2)
  806ed4:	1004c03a 	cmpne	r2,r2,zero
  806ed8:	1000071e 	bne	r2,zero,806ef8 <startGameButtonCollide+0x68>
			&& ((struct Object*)this)->isSelected == 0){
		//info.stage_counter++;
		//if (info.stage_counter > 250){
			info.startButton = true;
  806edc:	00c020f4 	movhi	r3,131
  806ee0:	18dcb404 	addi	r3,r3,29392
  806ee4:	00800044 	movi	r2,1
  806ee8:	18800915 	stw	r2,36(r3)
			((struct Object*)this)->isSelected = 1;
  806eec:	e0fffd17 	ldw	r3,-12(fp)
  806ef0:	00800044 	movi	r2,1
  806ef4:	18801215 	stw	r2,72(r3)
			//printf("startButton is set to TRUE\n");
		//	info.stage_counter = 0;
		//}
	}
}
  806ef8:	e037883a 	mov	sp,fp
  806efc:	df000017 	ldw	fp,0(sp)
  806f00:	dec00104 	addi	sp,sp,4
  806f04:	f800283a 	ret

00806f08 <createShip>:

void createShip(struct Button* b) {
  806f08:	defffd04 	addi	sp,sp,-12
  806f0c:	dfc00215 	stw	ra,8(sp)
  806f10:	df000115 	stw	fp,4(sp)
  806f14:	df000104 	addi	fp,sp,4
  806f18:	e13fff15 	stw	r4,-4(fp)
	b->obj = initSpaceShip(b->super->x, b->super->y, b->type, b->animatePic);
  806f1c:	e0bfff17 	ldw	r2,-4(fp)
  806f20:	10800017 	ldw	r2,0(r2)
  806f24:	11000017 	ldw	r4,0(r2)
  806f28:	e0bfff17 	ldw	r2,-4(fp)
  806f2c:	10800017 	ldw	r2,0(r2)
  806f30:	11400117 	ldw	r5,4(r2)
  806f34:	e0bfff17 	ldw	r2,-4(fp)
  806f38:	11800417 	ldw	r6,16(r2)
  806f3c:	e0bfff17 	ldw	r2,-4(fp)
  806f40:	11c00217 	ldw	r7,8(r2)
  806f44:	08112b80 	call	8112b8 <initSpaceShip>
  806f48:	1007883a 	mov	r3,r2
  806f4c:	e0bfff17 	ldw	r2,-4(fp)
  806f50:	10c00115 	stw	r3,4(r2)
}
  806f54:	e037883a 	mov	sp,fp
  806f58:	dfc00117 	ldw	ra,4(sp)
  806f5c:	df000017 	ldw	fp,0(sp)
  806f60:	dec00204 	addi	sp,sp,8
  806f64:	f800283a 	ret

00806f68 <updateView>:

void updateView(struct Button* this) {
  806f68:	defffe04 	addi	sp,sp,-8
  806f6c:	df000115 	stw	fp,4(sp)
  806f70:	df000104 	addi	fp,sp,4
  806f74:	e13fff15 	stw	r4,-4(fp)
	this->env->redraw = true;
  806f78:	e0bfff17 	ldw	r2,-4(fp)
  806f7c:	10c00b17 	ldw	r3,44(r2)
  806f80:	00800044 	movi	r2,1
  806f84:	18800615 	stw	r2,24(r3)
	this->redrawing = true;
  806f88:	e0ffff17 	ldw	r3,-4(fp)
  806f8c:	00800044 	movi	r2,1
  806f90:	18800a05 	stb	r2,40(r3)
}
  806f94:	e037883a 	mov	sp,fp
  806f98:	df000017 	ldw	fp,0(sp)
  806f9c:	dec00104 	addi	sp,sp,4
  806fa0:	f800283a 	ret

00806fa4 <changePage>:

void changePage(struct Cursor* c, int pageNum) {
  806fa4:	defffd04 	addi	sp,sp,-12
  806fa8:	df000215 	stw	fp,8(sp)
  806fac:	df000204 	addi	fp,sp,8
  806fb0:	e13ffe15 	stw	r4,-8(fp)
  806fb4:	e17fff15 	stw	r5,-4(fp)
	c->curr_page = gamePanel.elements[pageNum];
  806fb8:	008020f4 	movhi	r2,131
  806fbc:	109cc404 	addi	r2,r2,29456
  806fc0:	10c00d17 	ldw	r3,52(r2)
  806fc4:	e0bfff17 	ldw	r2,-4(fp)
  806fc8:	1085883a 	add	r2,r2,r2
  806fcc:	1085883a 	add	r2,r2,r2
  806fd0:	1885883a 	add	r2,r3,r2
  806fd4:	10c00017 	ldw	r3,0(r2)
  806fd8:	e0bffe17 	ldw	r2,-8(fp)
  806fdc:	10c00915 	stw	r3,36(r2)
	gamePanel.elements[pageNum]->redrawing = true;
  806fe0:	008020f4 	movhi	r2,131
  806fe4:	109cc404 	addi	r2,r2,29456
  806fe8:	10c00d17 	ldw	r3,52(r2)
  806fec:	e0bfff17 	ldw	r2,-4(fp)
  806ff0:	1085883a 	add	r2,r2,r2
  806ff4:	1085883a 	add	r2,r2,r2
  806ff8:	1885883a 	add	r2,r3,r2
  806ffc:	10c00017 	ldw	r3,0(r2)
  807000:	00800044 	movi	r2,1
  807004:	18800b15 	stw	r2,44(r3)
}
  807008:	e037883a 	mov	sp,fp
  80700c:	df000017 	ldw	fp,0(sp)
  807010:	dec00104 	addi	sp,sp,4
  807014:	f800283a 	ret

00807018 <initCollidable>:
 *      Author: Danny
 */

#include "Collidable.h"

struct Collidable* initCollidable() {
  807018:	defffd04 	addi	sp,sp,-12
  80701c:	dfc00215 	stw	ra,8(sp)
  807020:	df000115 	stw	fp,4(sp)
  807024:	df000104 	addi	fp,sp,4
	struct Collidable* c = (struct Collideable*)malloc(sizeof(struct Collidable));
  807028:	01000304 	movi	r4,12
  80702c:	0814f580 	call	814f58 <malloc>
  807030:	e0bfff15 	stw	r2,-4(fp)
	c->objCollection = (struct Object**)malloc(sizeof(struct Object*)*350);
  807034:	01015e04 	movi	r4,1400
  807038:	0814f580 	call	814f58 <malloc>
  80703c:	1007883a 	mov	r3,r2
  807040:	e0bfff17 	ldw	r2,-4(fp)
  807044:	10c00015 	stw	r3,0(r2)
	c->size = 0;
  807048:	e0bfff17 	ldw	r2,-4(fp)
  80704c:	10000115 	stw	zero,4(r2)
	c->qt = initQuardTree(NULL);
  807050:	0009883a 	mov	r4,zero
  807054:	08103c80 	call	8103c8 <initQuardTree>
  807058:	1007883a 	mov	r3,r2
  80705c:	e0bfff17 	ldw	r2,-4(fp)
  807060:	10c00215 	stw	r3,8(r2)
	return c;
  807064:	e0bfff17 	ldw	r2,-4(fp)
}
  807068:	e037883a 	mov	sp,fp
  80706c:	dfc00117 	ldw	ra,4(sp)
  807070:	df000017 	ldw	fp,0(sp)
  807074:	dec00204 	addi	sp,sp,8
  807078:	f800283a 	ret

0080707c <addObjToCollide>:

void addObjToCollide(struct Collidable* this, struct Object* obj) {
  80707c:	defffc04 	addi	sp,sp,-16
  807080:	dfc00315 	stw	ra,12(sp)
  807084:	df000215 	stw	fp,8(sp)
  807088:	df000204 	addi	fp,sp,8
  80708c:	e13ffe15 	stw	r4,-8(fp)
  807090:	e17fff15 	stw	r5,-4(fp)
	lock = 1;
  807094:	00c020f4 	movhi	r3,131
  807098:	18dc7b04 	addi	r3,r3,29164
  80709c:	00800044 	movi	r2,1
  8070a0:	18800015 	stw	r2,0(r3)
	if(obj == NULL) {
  8070a4:	e0bfff17 	ldw	r2,-4(fp)
  8070a8:	1004c03a 	cmpne	r2,r2,zero
  8070ac:	1000041e 	bne	r2,zero,8070c0 <addObjToCollide+0x44>
		printf("add null collidable obj\n");
  8070b0:	010020f4 	movhi	r4,131
  8070b4:	2120fe04 	addi	r4,r4,-31752
  8070b8:	08158640 	call	815864 <puts>
		return;
  8070bc:	00001306 	br	80710c <addObjToCollide+0x90>
	}
	obj->isRunable = 1;
  8070c0:	e0ffff17 	ldw	r3,-4(fp)
  8070c4:	00800044 	movi	r2,1
  8070c8:	18801715 	stw	r2,92(r3)
	this->objCollection[this->size++] = obj;
  8070cc:	e0bffe17 	ldw	r2,-8(fp)
  8070d0:	10c00017 	ldw	r3,0(r2)
  8070d4:	e0bffe17 	ldw	r2,-8(fp)
  8070d8:	11000117 	ldw	r4,4(r2)
  8070dc:	2005883a 	mov	r2,r4
  8070e0:	1085883a 	add	r2,r2,r2
  8070e4:	1085883a 	add	r2,r2,r2
  8070e8:	1887883a 	add	r3,r3,r2
  8070ec:	e0bfff17 	ldw	r2,-4(fp)
  8070f0:	18800015 	stw	r2,0(r3)
  8070f4:	20c00044 	addi	r3,r4,1
  8070f8:	e0bffe17 	ldw	r2,-8(fp)
  8070fc:	10c00115 	stw	r3,4(r2)
	//printf("collidable objs: %d\n", this->size);
	lock = 0;
  807100:	008020f4 	movhi	r2,131
  807104:	109c7b04 	addi	r2,r2,29164
  807108:	10000015 	stw	zero,0(r2)
}
  80710c:	e037883a 	mov	sp,fp
  807110:	dfc00117 	ldw	ra,4(sp)
  807114:	df000017 	ldw	fp,0(sp)
  807118:	dec00204 	addi	sp,sp,8
  80711c:	f800283a 	ret

00807120 <removeFromCollide>:


void removeFromCollide(struct Collidable* this, struct Object* obj) {
  807120:	defffa04 	addi	sp,sp,-24
  807124:	dfc00515 	stw	ra,20(sp)
  807128:	df000415 	stw	fp,16(sp)
  80712c:	df000404 	addi	fp,sp,16
  807130:	e13ffe15 	stw	r4,-8(fp)
  807134:	e17fff15 	stw	r5,-4(fp)
	if(obj == NULL) {
  807138:	e0bfff17 	ldw	r2,-4(fp)
  80713c:	1004c03a 	cmpne	r2,r2,zero
  807140:	1000041e 	bne	r2,zero,807154 <removeFromCollide+0x34>
		printf("remove null collidable obj\n");
  807144:	010020f4 	movhi	r4,131
  807148:	21210404 	addi	r4,r4,-31728
  80714c:	08158640 	call	815864 <puts>
		return;
  807150:	00004b06 	br	807280 <removeFromCollide+0x160>
	}
	lock = 1;
  807154:	00c020f4 	movhi	r3,131
  807158:	18dc7b04 	addi	r3,r3,29164
  80715c:	00800044 	movi	r2,1
  807160:	18800015 	stw	r2,0(r3)
	if(obj->class == ship)
  807164:	e0bfff17 	ldw	r2,-4(fp)
  807168:	10801117 	ldw	r2,68(r2)
  80716c:	10800198 	cmpnei	r2,r2,6
  807170:	1000031e 	bne	r2,zero,807180 <removeFromCollide+0x60>
		printf("ERROR!!!\n");
  807174:	010020f4 	movhi	r4,131
  807178:	21210b04 	addi	r4,r4,-31700
  80717c:	08158640 	call	815864 <puts>
	int i = 0, found = 0;
  807180:	e03ffd15 	stw	zero,-12(fp)
  807184:	e03ffc15 	stw	zero,-16(fp)
	for(i = 0; i < this->size; i++) {
  807188:	e03ffd15 	stw	zero,-12(fp)
  80718c:	00002106 	br	807214 <removeFromCollide+0xf4>
		if(found == 1) {
  807190:	e0bffc17 	ldw	r2,-16(fp)
  807194:	10800058 	cmpnei	r2,r2,1
  807198:	1000101e 	bne	r2,zero,8071dc <removeFromCollide+0xbc>
			this->objCollection[i-1] = this->objCollection[i];
  80719c:	e0bffe17 	ldw	r2,-8(fp)
  8071a0:	10c00017 	ldw	r3,0(r2)
  8071a4:	e0bffd17 	ldw	r2,-12(fp)
  8071a8:	1085883a 	add	r2,r2,r2
  8071ac:	1085883a 	add	r2,r2,r2
  8071b0:	1885883a 	add	r2,r3,r2
  8071b4:	10ffff04 	addi	r3,r2,-4
  8071b8:	e0bffe17 	ldw	r2,-8(fp)
  8071bc:	11000017 	ldw	r4,0(r2)
  8071c0:	e0bffd17 	ldw	r2,-12(fp)
  8071c4:	1085883a 	add	r2,r2,r2
  8071c8:	1085883a 	add	r2,r2,r2
  8071cc:	2085883a 	add	r2,r4,r2
  8071d0:	10800017 	ldw	r2,0(r2)
  8071d4:	18800015 	stw	r2,0(r3)
  8071d8:	00000b06 	br	807208 <removeFromCollide+0xe8>
		} else if(this->objCollection[i] == obj) {
  8071dc:	e0bffe17 	ldw	r2,-8(fp)
  8071e0:	10c00017 	ldw	r3,0(r2)
  8071e4:	e0bffd17 	ldw	r2,-12(fp)
  8071e8:	1085883a 	add	r2,r2,r2
  8071ec:	1085883a 	add	r2,r2,r2
  8071f0:	1885883a 	add	r2,r3,r2
  8071f4:	10c00017 	ldw	r3,0(r2)
  8071f8:	e0bfff17 	ldw	r2,-4(fp)
  8071fc:	1880021e 	bne	r3,r2,807208 <removeFromCollide+0xe8>
			found = 1;
  807200:	00800044 	movi	r2,1
  807204:	e0bffc15 	stw	r2,-16(fp)
	}
	lock = 1;
	if(obj->class == ship)
		printf("ERROR!!!\n");
	int i = 0, found = 0;
	for(i = 0; i < this->size; i++) {
  807208:	e0bffd17 	ldw	r2,-12(fp)
  80720c:	10800044 	addi	r2,r2,1
  807210:	e0bffd15 	stw	r2,-12(fp)
  807214:	e0bffe17 	ldw	r2,-8(fp)
  807218:	10c00117 	ldw	r3,4(r2)
  80721c:	e0bffd17 	ldw	r2,-12(fp)
  807220:	10ffdb16 	blt	r2,r3,807190 <removeFromCollide+0x70>
			this->objCollection[i-1] = this->objCollection[i];
		} else if(this->objCollection[i] == obj) {
			found = 1;
		}
	}
	if(found == 1) {
  807224:	e0bffc17 	ldw	r2,-16(fp)
  807228:	10800058 	cmpnei	r2,r2,1
  80722c:	10000e1e 	bne	r2,zero,807268 <removeFromCollide+0x148>
		this->size--;
  807230:	e0bffe17 	ldw	r2,-8(fp)
  807234:	10800117 	ldw	r2,4(r2)
  807238:	10ffffc4 	addi	r3,r2,-1
  80723c:	e0bffe17 	ldw	r2,-8(fp)
  807240:	10c00115 	stw	r3,4(r2)
		this->objCollection[this->size] = NULL;
  807244:	e0bffe17 	ldw	r2,-8(fp)
  807248:	10c00017 	ldw	r3,0(r2)
  80724c:	e0bffe17 	ldw	r2,-8(fp)
  807250:	10800117 	ldw	r2,4(r2)
  807254:	1085883a 	add	r2,r2,r2
  807258:	1085883a 	add	r2,r2,r2
  80725c:	1885883a 	add	r2,r3,r2
  807260:	10000015 	stw	zero,0(r2)
  807264:	00000306 	br	807274 <removeFromCollide+0x154>
	} else {
		printf("???\n");
  807268:	010020f4 	movhi	r4,131
  80726c:	21210e04 	addi	r4,r4,-31688
  807270:	08158640 	call	815864 <puts>
	}
	lock = 0;
  807274:	008020f4 	movhi	r2,131
  807278:	109c7b04 	addi	r2,r2,29164
  80727c:	10000015 	stw	zero,0(r2)
}
  807280:	e037883a 	mov	sp,fp
  807284:	dfc00117 	ldw	ra,4(sp)
  807288:	df000017 	ldw	fp,0(sp)
  80728c:	dec00204 	addi	sp,sp,8
  807290:	f800283a 	ret

00807294 <distance_>:

/*helper function to calculate the distance between two points */
float distance_(int x1, int y1, int x2, int y2) {
  807294:	defff804 	addi	sp,sp,-32
  807298:	dfc00715 	stw	ra,28(sp)
  80729c:	df000615 	stw	fp,24(sp)
  8072a0:	df000604 	addi	fp,sp,24
  8072a4:	e13ffc15 	stw	r4,-16(fp)
  8072a8:	e17ffd15 	stw	r5,-12(fp)
  8072ac:	e1bffe15 	stw	r6,-8(fp)
  8072b0:	e1ffff15 	stw	r7,-4(fp)
	int dx = x2 - x1;
  8072b4:	e0fffe17 	ldw	r3,-8(fp)
  8072b8:	e0bffc17 	ldw	r2,-16(fp)
  8072bc:	1885c83a 	sub	r2,r3,r2
  8072c0:	e0bffb15 	stw	r2,-20(fp)
	int dy = y2 - y1;
  8072c4:	e0ffff17 	ldw	r3,-4(fp)
  8072c8:	e0bffd17 	ldw	r2,-12(fp)
  8072cc:	1885c83a 	sub	r2,r3,r2
  8072d0:	e0bffa15 	stw	r2,-24(fp)
	return dx*dx+dy*dy;
  8072d4:	e0fffb17 	ldw	r3,-20(fp)
  8072d8:	e0bffb17 	ldw	r2,-20(fp)
  8072dc:	1889383a 	mul	r4,r3,r2
  8072e0:	e0fffa17 	ldw	r3,-24(fp)
  8072e4:	e0bffa17 	ldw	r2,-24(fp)
  8072e8:	1885383a 	mul	r2,r3,r2
  8072ec:	2089883a 	add	r4,r4,r2
  8072f0:	08135a40 	call	8135a4 <__floatsisf>
}
  8072f4:	e037883a 	mov	sp,fp
  8072f8:	dfc00117 	ldw	ra,4(sp)
  8072fc:	df000017 	ldw	fp,0(sp)
  807300:	dec00204 	addi	sp,sp,8
  807304:	f800283a 	ret

00807308 <checkCollide>:

int checkCollide(struct Object* obj1, struct Object* obj2) {
  807308:	defffc04 	addi	sp,sp,-16
  80730c:	df000315 	stw	fp,12(sp)
  807310:	df000304 	addi	fp,sp,12
  807314:	e13ffd15 	stw	r4,-12(fp)
  807318:	e17ffe15 	stw	r5,-8(fp)
	if((obj1->x > obj2->x+obj2->collideRange) || (obj1->y > obj2->y+obj2->collideRange) ||
  80731c:	e0bffd17 	ldw	r2,-12(fp)
  807320:	11000017 	ldw	r4,0(r2)
  807324:	e0bffe17 	ldw	r2,-8(fp)
  807328:	10c00017 	ldw	r3,0(r2)
  80732c:	e0bffe17 	ldw	r2,-8(fp)
  807330:	10800817 	ldw	r2,32(r2)
  807334:	1885883a 	add	r2,r3,r2
  807338:	11001816 	blt	r2,r4,80739c <checkCollide+0x94>
  80733c:	e0bffd17 	ldw	r2,-12(fp)
  807340:	11000117 	ldw	r4,4(r2)
  807344:	e0bffe17 	ldw	r2,-8(fp)
  807348:	10c00117 	ldw	r3,4(r2)
  80734c:	e0bffe17 	ldw	r2,-8(fp)
  807350:	10800817 	ldw	r2,32(r2)
  807354:	1885883a 	add	r2,r3,r2
  807358:	11001016 	blt	r2,r4,80739c <checkCollide+0x94>
  80735c:	e0bffd17 	ldw	r2,-12(fp)
  807360:	10c00017 	ldw	r3,0(r2)
  807364:	e0bffd17 	ldw	r2,-12(fp)
  807368:	10800817 	ldw	r2,32(r2)
  80736c:	1887883a 	add	r3,r3,r2
  807370:	e0bffe17 	ldw	r2,-8(fp)
  807374:	10800017 	ldw	r2,0(r2)
  807378:	18800816 	blt	r3,r2,80739c <checkCollide+0x94>
  80737c:	e0bffd17 	ldw	r2,-12(fp)
  807380:	10c00117 	ldw	r3,4(r2)
  807384:	e0bffd17 	ldw	r2,-12(fp)
  807388:	10800817 	ldw	r2,32(r2)
  80738c:	1887883a 	add	r3,r3,r2
  807390:	e0bffe17 	ldw	r2,-8(fp)
  807394:	10800117 	ldw	r2,4(r2)
  807398:	1880020e 	bge	r3,r2,8073a4 <checkCollide+0x9c>
			(obj1->x+obj1->collideRange < obj2->x) ||	(obj1->y+obj1->collideRange < obj2->y))
		return 0;
  80739c:	e03fff15 	stw	zero,-4(fp)
  8073a0:	00000206 	br	8073ac <checkCollide+0xa4>
	return 1;
  8073a4:	00800044 	movi	r2,1
  8073a8:	e0bfff15 	stw	r2,-4(fp)
  8073ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8073b0:	e037883a 	mov	sp,fp
  8073b4:	df000017 	ldw	fp,0(sp)
  8073b8:	dec00104 	addi	sp,sp,4
  8073bc:	f800283a 	ret

008073c0 <checkCollision>:
/*
 * check the collision event between each objects in the environment
 */
void checkCollision(struct Collidable* this ) {
  8073c0:	defff604 	addi	sp,sp,-40
  8073c4:	dfc00915 	stw	ra,36(sp)
  8073c8:	df000815 	stw	fp,32(sp)
  8073cc:	dc000715 	stw	r16,28(sp)
  8073d0:	df000704 	addi	fp,sp,28
  8073d4:	e13fff15 	stw	r4,-4(fp)
	//if(lock == 1) return;
	int i;
	int size = this->size;
  8073d8:	e0bfff17 	ldw	r2,-4(fp)
  8073dc:	10800117 	ldw	r2,4(r2)
  8073e0:	e0bff915 	stw	r2,-28(fp)
	struct Range r;
	((struct QuardTree*)(this->qt))->r = initRange(0, 0, 250, 320);
  8073e4:	e0bfff17 	ldw	r2,-4(fp)
  8073e8:	10800217 	ldw	r2,8(r2)
  8073ec:	1021883a 	mov	r16,r2
  8073f0:	0009883a 	mov	r4,zero
  8073f4:	000b883a 	mov	r5,zero
  8073f8:	01803e84 	movi	r6,250
  8073fc:	01c05004 	movi	r7,320
  807400:	081047c0 	call	81047c <initRange>
  807404:	80800115 	stw	r2,4(r16)
	//lock = 1;
	for(i =0; i < size; i++) {
  807408:	e03ffa15 	stw	zero,-24(fp)
  80740c:	00000e06 	br	807448 <checkCollision+0x88>
		insertObj(this->qt, this->objCollection[i]);
  807410:	e0bfff17 	ldw	r2,-4(fp)
  807414:	10800217 	ldw	r2,8(r2)
  807418:	1009883a 	mov	r4,r2
  80741c:	e0bfff17 	ldw	r2,-4(fp)
  807420:	10c00017 	ldw	r3,0(r2)
  807424:	e0bffa17 	ldw	r2,-24(fp)
  807428:	1085883a 	add	r2,r2,r2
  80742c:	1085883a 	add	r2,r2,r2
  807430:	1885883a 	add	r2,r3,r2
  807434:	11400017 	ldw	r5,0(r2)
  807438:	08106780 	call	810678 <insertObj>
	int i;
	int size = this->size;
	struct Range r;
	((struct QuardTree*)(this->qt))->r = initRange(0, 0, 250, 320);
	//lock = 1;
	for(i =0; i < size; i++) {
  80743c:	e0bffa17 	ldw	r2,-24(fp)
  807440:	10800044 	addi	r2,r2,1
  807444:	e0bffa15 	stw	r2,-24(fp)
  807448:	e0fffa17 	ldw	r3,-24(fp)
  80744c:	e0bff917 	ldw	r2,-28(fp)
  807450:	18bfef16 	blt	r3,r2,807410 <checkCollision+0x50>
		insertObj(this->qt, this->objCollection[i]);
	}
	lock = 1;
  807454:	00c020f4 	movhi	r3,131
  807458:	18dc7b04 	addi	r3,r3,29164
  80745c:	00800044 	movi	r2,1
  807460:	18800015 	stw	r2,0(r3)
	for(i = 0; i < size; i++) {
  807464:	e03ffa15 	stw	zero,-24(fp)
  807468:	00004006 	br	80756c <checkCollision+0x1ac>
		r.x = this->objCollection[i]->center_x - this->objCollection[i]->collideRange;
  80746c:	e0bfff17 	ldw	r2,-4(fp)
  807470:	10c00017 	ldw	r3,0(r2)
  807474:	e0bffa17 	ldw	r2,-24(fp)
  807478:	1085883a 	add	r2,r2,r2
  80747c:	1085883a 	add	r2,r2,r2
  807480:	1885883a 	add	r2,r3,r2
  807484:	10800017 	ldw	r2,0(r2)
  807488:	11000517 	ldw	r4,20(r2)
  80748c:	e0bfff17 	ldw	r2,-4(fp)
  807490:	10c00017 	ldw	r3,0(r2)
  807494:	e0bffa17 	ldw	r2,-24(fp)
  807498:	1085883a 	add	r2,r2,r2
  80749c:	1085883a 	add	r2,r2,r2
  8074a0:	1885883a 	add	r2,r3,r2
  8074a4:	10800017 	ldw	r2,0(r2)
  8074a8:	10800817 	ldw	r2,32(r2)
  8074ac:	2085c83a 	sub	r2,r4,r2
  8074b0:	e0bffb15 	stw	r2,-20(fp)
		r.y = this->objCollection[i]->center_y - this->objCollection[i]->collideRange;
  8074b4:	e0bfff17 	ldw	r2,-4(fp)
  8074b8:	10c00017 	ldw	r3,0(r2)
  8074bc:	e0bffa17 	ldw	r2,-24(fp)
  8074c0:	1085883a 	add	r2,r2,r2
  8074c4:	1085883a 	add	r2,r2,r2
  8074c8:	1885883a 	add	r2,r3,r2
  8074cc:	10800017 	ldw	r2,0(r2)
  8074d0:	11000617 	ldw	r4,24(r2)
  8074d4:	e0bfff17 	ldw	r2,-4(fp)
  8074d8:	10c00017 	ldw	r3,0(r2)
  8074dc:	e0bffa17 	ldw	r2,-24(fp)
  8074e0:	1085883a 	add	r2,r2,r2
  8074e4:	1085883a 	add	r2,r2,r2
  8074e8:	1885883a 	add	r2,r3,r2
  8074ec:	10800017 	ldw	r2,0(r2)
  8074f0:	10800817 	ldw	r2,32(r2)
  8074f4:	2085c83a 	sub	r2,r4,r2
  8074f8:	e0bffc15 	stw	r2,-16(fp)
		r.height = r.width = this->objCollection[i]->collideRange*2;
  8074fc:	e0bfff17 	ldw	r2,-4(fp)
  807500:	10c00017 	ldw	r3,0(r2)
  807504:	e0bffa17 	ldw	r2,-24(fp)
  807508:	1085883a 	add	r2,r2,r2
  80750c:	1085883a 	add	r2,r2,r2
  807510:	1885883a 	add	r2,r3,r2
  807514:	10800017 	ldw	r2,0(r2)
  807518:	10800817 	ldw	r2,32(r2)
  80751c:	1085883a 	add	r2,r2,r2
  807520:	e0bffd15 	stw	r2,-12(fp)
  807524:	e0bffd17 	ldw	r2,-12(fp)
  807528:	e0bffe15 	stw	r2,-8(fp)
		query(this->qt, &r, this->objCollection[i], this);
  80752c:	e0bfff17 	ldw	r2,-4(fp)
  807530:	10800217 	ldw	r2,8(r2)
  807534:	1009883a 	mov	r4,r2
  807538:	e0bfff17 	ldw	r2,-4(fp)
  80753c:	10c00017 	ldw	r3,0(r2)
  807540:	e0bffa17 	ldw	r2,-24(fp)
  807544:	1085883a 	add	r2,r2,r2
  807548:	1085883a 	add	r2,r2,r2
  80754c:	1885883a 	add	r2,r3,r2
  807550:	11800017 	ldw	r6,0(r2)
  807554:	e17ffb04 	addi	r5,fp,-20
  807558:	e1ffff17 	ldw	r7,-4(fp)
  80755c:	08109040 	call	810904 <query>
	//lock = 1;
	for(i =0; i < size; i++) {
		insertObj(this->qt, this->objCollection[i]);
	}
	lock = 1;
	for(i = 0; i < size; i++) {
  807560:	e0bffa17 	ldw	r2,-24(fp)
  807564:	10800044 	addi	r2,r2,1
  807568:	e0bffa15 	stw	r2,-24(fp)
  80756c:	e0fffa17 	ldw	r3,-24(fp)
  807570:	e0bff917 	ldw	r2,-28(fp)
  807574:	18bfbd16 	blt	r3,r2,80746c <checkCollision+0xac>
		r.x = this->objCollection[i]->center_x - this->objCollection[i]->collideRange;
		r.y = this->objCollection[i]->center_y - this->objCollection[i]->collideRange;
		r.height = r.width = this->objCollection[i]->collideRange*2;
		query(this->qt, &r, this->objCollection[i], this);
	}
	clearTree(this->qt);
  807578:	e0bfff17 	ldw	r2,-4(fp)
  80757c:	10800217 	ldw	r2,8(r2)
  807580:	1009883a 	mov	r4,r2
  807584:	0810bac0 	call	810bac <clearTree>
	lock = 0;
  807588:	008020f4 	movhi	r2,131
  80758c:	109c7b04 	addi	r2,r2,29164
  807590:	10000015 	stw	zero,0(r2)
}
  807594:	e037883a 	mov	sp,fp
  807598:	dfc00217 	ldw	ra,8(sp)
  80759c:	df000117 	ldw	fp,4(sp)
  8075a0:	dc000017 	ldw	r16,0(sp)
  8075a4:	dec00304 	addi	sp,sp,12
  8075a8:	f800283a 	ret

008075ac <checkGoal>:


// This function is used to check if an alien enters the goal boundary (the earth).
bool checkGoal(struct Collidable* c, void* o)
{
  8075ac:	defffb04 	addi	sp,sp,-20
  8075b0:	dfc00415 	stw	ra,16(sp)
  8075b4:	df000315 	stw	fp,12(sp)
  8075b8:	df000304 	addi	fp,sp,12
  8075bc:	e13ffd15 	stw	r4,-12(fp)
  8075c0:	e17ffe15 	stw	r5,-8(fp)
	if( ((struct Object*)o)->class == alien && !(((struct Alien*)(((struct Object*)o)->subObject))->dead)) {
  8075c4:	e0bffe17 	ldw	r2,-8(fp)
  8075c8:	10801117 	ldw	r2,68(r2)
  8075cc:	10800098 	cmpnei	r2,r2,2
  8075d0:	1000161e 	bne	r2,zero,80762c <checkGoal+0x80>
  8075d4:	e0bffe17 	ldw	r2,-8(fp)
  8075d8:	10801817 	ldw	r2,96(r2)
  8075dc:	10800a17 	ldw	r2,40(r2)
  8075e0:	1004c03a 	cmpne	r2,r2,zero
  8075e4:	1000111e 	bne	r2,zero,80762c <checkGoal+0x80>
			if( (((struct Object*)o)->center_x+5) > GOALX && (((struct Object*)o)->center_y+5) > GOALY ) {
  8075e8:	e0bffe17 	ldw	r2,-8(fp)
  8075ec:	10800517 	ldw	r2,20(r2)
  8075f0:	10803090 	cmplti	r2,r2,194
  8075f4:	10000d1e 	bne	r2,zero,80762c <checkGoal+0x80>
  8075f8:	e0bffe17 	ldw	r2,-8(fp)
  8075fc:	10800617 	ldw	r2,24(r2)
  807600:	10802c10 	cmplti	r2,r2,176
  807604:	1000091e 	bne	r2,zero,80762c <checkGoal+0x80>
				removeFromCollide(c, (struct Object*)o);
  807608:	e17ffe17 	ldw	r5,-8(fp)
  80760c:	e13ffd17 	ldw	r4,-12(fp)
  807610:	08071200 	call	807120 <removeFromCollide>
				killAlien( (void*)(struct Alien*)(((struct Object*)o)->subObject));
  807614:	e0bffe17 	ldw	r2,-8(fp)
  807618:	11001817 	ldw	r4,96(r2)
  80761c:	08004680 	call	800468 <killAlien>
				return true;
  807620:	00800044 	movi	r2,1
  807624:	e0bfff15 	stw	r2,-4(fp)
  807628:	00000106 	br	807630 <checkGoal+0x84>
		}
	}
	return false;
  80762c:	e03fff15 	stw	zero,-4(fp)
  807630:	e0bfff17 	ldw	r2,-4(fp)
}
  807634:	e037883a 	mov	sp,fp
  807638:	dfc00117 	ldw	ra,4(sp)
  80763c:	df000017 	ldw	fp,0(sp)
  807640:	dec00204 	addi	sp,sp,8
  807644:	f800283a 	ret

00807648 <initCursor>:
 *      Author: Danny
 */

#include "Cursor.h"

struct Cursor* initCursor(struct Env* e, struct Collidable* collidable) {
  807648:	defff804 	addi	sp,sp,-32
  80764c:	dfc00715 	stw	ra,28(sp)
  807650:	df000615 	stw	fp,24(sp)
  807654:	df000604 	addi	fp,sp,24
  807658:	e13ffe15 	stw	r4,-8(fp)
  80765c:	e17fff15 	stw	r5,-4(fp)
	int* cursorImg = NULL;
  807660:	e03ffd15 	stw	zero,-12(fp)
	struct Cursor* c = (struct Cursor*)malloc(sizeof(struct Cursor));
  807664:	01001504 	movi	r4,84
  807668:	0814f580 	call	814f58 <malloc>
  80766c:	e0bffc15 	stw	r2,-16(fp)
	loadSDImage("AR01.BMP", &cursorImg);
  807670:	e17ffd04 	addi	r5,fp,-12
  807674:	010020f4 	movhi	r4,131
  807678:	21210f04 	addi	r4,r4,-31684
  80767c:	080b5040 	call	80b504 <loadSDImage>
	c->super = initObject(0, 0, 10, initAnimation(cursorImg, 1), (void*)c);
  807680:	e13ffd17 	ldw	r4,-12(fp)
  807684:	01400044 	movi	r5,1
  807688:	0811d7c0 	call	811d7c <initAnimation>
  80768c:	100f883a 	mov	r7,r2
  807690:	e0bffc17 	ldw	r2,-16(fp)
  807694:	d8800015 	stw	r2,0(sp)
  807698:	0009883a 	mov	r4,zero
  80769c:	000b883a 	mov	r5,zero
  8076a0:	01800284 	movi	r6,10
  8076a4:	080fe780 	call	80fe78 <initObject>
  8076a8:	1007883a 	mov	r3,r2
  8076ac:	e0bffc17 	ldw	r2,-16(fp)
  8076b0:	10c00015 	stw	r3,0(r2)
	c->super->isShowing = 1;
  8076b4:	e0bffc17 	ldw	r2,-16(fp)
  8076b8:	10c00017 	ldw	r3,0(r2)
  8076bc:	00800044 	movi	r2,1
  8076c0:	18801515 	stw	r2,84(r3)
	c->super->class = cursor;
  8076c4:	e0bffc17 	ldw	r2,-16(fp)
  8076c8:	10c00017 	ldw	r3,0(r2)
  8076cc:	00800104 	movi	r2,4
  8076d0:	18801115 	stw	r2,68(r3)
	c->super->animate = cursorAnimate;
  8076d4:	e0bffc17 	ldw	r2,-16(fp)
  8076d8:	10c00017 	ldw	r3,0(r2)
  8076dc:	00802034 	movhi	r2,128
  8076e0:	109e9904 	addi	r2,r2,31332
  8076e4:	18801915 	stw	r2,100(r3)
	c->overlapImg = (int*)malloc(sizeof(int)*100);
  8076e8:	01006404 	movi	r4,400
  8076ec:	0814f580 	call	814f58 <malloc>
  8076f0:	1007883a 	mov	r3,r2
  8076f4:	e0bffc17 	ldw	r2,-16(fp)
  8076f8:	10c00e15 	stw	r3,56(r2)
	int i;
	for(i = 0; i < 100; i++) {
  8076fc:	e03ffb15 	stw	zero,-20(fp)
  807700:	00000a06 	br	80772c <initCursor+0xe4>
		c->overlapImg[i] = 0; //clear buffer for first time
  807704:	e0bffc17 	ldw	r2,-16(fp)
  807708:	10c00e17 	ldw	r3,56(r2)
  80770c:	e0bffb17 	ldw	r2,-20(fp)
  807710:	1085883a 	add	r2,r2,r2
  807714:	1085883a 	add	r2,r2,r2
  807718:	1885883a 	add	r2,r3,r2
  80771c:	10000015 	stw	zero,0(r2)
	c->super->isShowing = 1;
	c->super->class = cursor;
	c->super->animate = cursorAnimate;
	c->overlapImg = (int*)malloc(sizeof(int)*100);
	int i;
	for(i = 0; i < 100; i++) {
  807720:	e0bffb17 	ldw	r2,-20(fp)
  807724:	10800044 	addi	r2,r2,1
  807728:	e0bffb15 	stw	r2,-20(fp)
  80772c:	e0bffb17 	ldw	r2,-20(fp)
  807730:	10801910 	cmplti	r2,r2,100
  807734:	103ff31e 	bne	r2,zero,807704 <initCursor+0xbc>
		c->overlapImg[i] = 0; //clear buffer for first time
	}
	c->dragOverlapImg = (int*)malloc(sizeof(int)*400);
  807738:	01019004 	movi	r4,1600
  80773c:	0814f580 	call	814f58 <malloc>
  807740:	1007883a 	mov	r3,r2
  807744:	e0bffc17 	ldw	r2,-16(fp)
  807748:	10c00f15 	stw	r3,60(r2)
	c->super->collide = collideCursor;
  80774c:	e0bffc17 	ldw	r2,-16(fp)
  807750:	10c00017 	ldw	r3,0(r2)
  807754:	00802034 	movhi	r2,128
  807758:	109f8404 	addi	r2,r2,32272
  80775c:	18801a15 	stw	r2,104(r3)
	c->hit = 0; c->buttonPushed = 0;
  807760:	e0bffc17 	ldw	r2,-16(fp)
  807764:	10000c15 	stw	zero,48(r2)
  807768:	e0bffc17 	ldw	r2,-16(fp)
  80776c:	10000d15 	stw	zero,52(r2)
	c->selectedObj = c->super;
  807770:	e0bffc17 	ldw	r2,-16(fp)
  807774:	10c00017 	ldw	r3,0(r2)
  807778:	e0bffc17 	ldw	r2,-16(fp)
  80777c:	10c00a15 	stw	r3,40(r2)
	c->createdObj = NULL;
  807780:	e0bffc17 	ldw	r2,-16(fp)
  807784:	10000b15 	stw	zero,44(r2)
	c->env = e;
  807788:	e0fffc17 	ldw	r3,-16(fp)
  80778c:	e0bffe17 	ldw	r2,-8(fp)
  807790:	18801215 	stw	r2,72(r3)
	c->collidable = collidable;
  807794:	e0fffc17 	ldw	r3,-16(fp)
  807798:	e0bfff17 	ldw	r2,-4(fp)
  80779c:	18801315 	stw	r2,76(r3)
	c->page_button_size = c->page_size = 0;
  8077a0:	e0bffc17 	ldw	r2,-16(fp)
  8077a4:	10001115 	stw	zero,68(r2)
  8077a8:	e0bffc17 	ldw	r2,-16(fp)
  8077ac:	10c01117 	ldw	r3,68(r2)
  8077b0:	e0bffc17 	ldw	r2,-16(fp)
  8077b4:	10c01015 	stw	r3,64(r2)
	c->r = initRange(0, 0, 10, 10);
  8077b8:	0009883a 	mov	r4,zero
  8077bc:	000b883a 	mov	r5,zero
  8077c0:	01800284 	movi	r6,10
  8077c4:	01c00284 	movi	r7,10
  8077c8:	081047c0 	call	81047c <initRange>
  8077cc:	1007883a 	mov	r3,r2
  8077d0:	e0bffc17 	ldw	r2,-16(fp)
  8077d4:	10c01415 	stw	r3,80(r2)
	return c;
  8077d8:	e0bffc17 	ldw	r2,-16(fp)
}
  8077dc:	e037883a 	mov	sp,fp
  8077e0:	dfc00117 	ldw	ra,4(sp)
  8077e4:	df000017 	ldw	fp,0(sp)
  8077e8:	dec00204 	addi	sp,sp,8
  8077ec:	f800283a 	ret

008077f0 <update>:

void update(struct Cursor* this, int x, int y) {
  8077f0:	defff804 	addi	sp,sp,-32
  8077f4:	dfc00715 	stw	ra,28(sp)
  8077f8:	df000615 	stw	fp,24(sp)
  8077fc:	df000604 	addi	fp,sp,24
  807800:	e13ffd15 	stw	r4,-12(fp)
  807804:	e17ffe15 	stw	r5,-8(fp)
  807808:	e1bfff15 	stw	r6,-4(fp)
	checkButtonCollision(this);
  80780c:	e13ffd17 	ldw	r4,-12(fp)
  807810:	0807ee00 	call	807ee0 <checkButtonCollision>
		if(this->createdObj != NULL) {
  807814:	e0bffd17 	ldw	r2,-12(fp)
  807818:	10800b17 	ldw	r2,44(r2)
  80781c:	1005003a 	cmpeq	r2,r2,zero
  807820:	1000861e 	bne	r2,zero,807a3c <update+0x24c>
			setXY_noBound(this->createdObj, x, y);
  807824:	e0bffd17 	ldw	r2,-12(fp)
  807828:	11000b17 	ldw	r4,44(r2)
  80782c:	e17ffe17 	ldw	r5,-8(fp)
  807830:	e1bfff17 	ldw	r6,-4(fp)
  807834:	08102d00 	call	8102d0 <setXY_noBound>
			if(this->hit == 0) {
  807838:	e0bffd17 	ldw	r2,-12(fp)
  80783c:	10800c17 	ldw	r2,48(r2)
  807840:	1004c03a 	cmpne	r2,r2,zero
  807844:	10007d1e 	bne	r2,zero,807a3c <update+0x24c>
				if(this->super->x > 245) {
  807848:	e0bffd17 	ldw	r2,-12(fp)
  80784c:	10800017 	ldw	r2,0(r2)
  807850:	10800017 	ldw	r2,0(r2)
  807854:	10803d90 	cmplti	r2,r2,246
  807858:	10004f1e 	bne	r2,zero,807998 <update+0x1a8>
					((struct SpaceShip*)(this->createdObj->subObject))->weapon = NULL;
  80785c:	e0bffd17 	ldw	r2,-12(fp)
  807860:	10800b17 	ldw	r2,44(r2)
  807864:	10801817 	ldw	r2,96(r2)
  807868:	10000415 	stw	zero,16(r2)
					safefree(&(this->createdObj->subObject));
  80786c:	e0bffd17 	ldw	r2,-12(fp)
  807870:	10800b17 	ldw	r2,44(r2)
  807874:	11001804 	addi	r4,r2,96
  807878:	080af080 	call	80af08 <safefree>
					//this->createdObj->subObject=NULL;
					killObject(this->createdObj);
  80787c:	e0bffd17 	ldw	r2,-12(fp)
  807880:	11000b17 	ldw	r4,44(r2)
  807884:	08100380 	call	810038 <killObject>
					this->createdObj = NULL;
  807888:	e0bffd17 	ldw	r2,-12(fp)
  80788c:	10000b15 	stw	zero,44(r2)
					this->buttonPushed = 0;
  807890:	e0bffd17 	ldw	r2,-12(fp)
  807894:	10000d15 	stw	zero,52(r2)
					setStats(this->selectedObj, 0);
  807898:	e0bffd17 	ldw	r2,-12(fp)
  80789c:	11000a17 	ldw	r4,40(r2)
  8078a0:	000b883a 	mov	r5,zero
  8078a4:	08100ac0 	call	8100ac <setStats>
					drawBox(this->super->x, this->super->y, this->super->x+20, this->super->y+20, 0, this);
  8078a8:	e0bffd17 	ldw	r2,-12(fp)
  8078ac:	10800017 	ldw	r2,0(r2)
  8078b0:	11000017 	ldw	r4,0(r2)
  8078b4:	e0bffd17 	ldw	r2,-12(fp)
  8078b8:	10800017 	ldw	r2,0(r2)
  8078bc:	11400117 	ldw	r5,4(r2)
  8078c0:	e0bffd17 	ldw	r2,-12(fp)
  8078c4:	10800017 	ldw	r2,0(r2)
  8078c8:	10800017 	ldw	r2,0(r2)
  8078cc:	11800504 	addi	r6,r2,20
  8078d0:	e0bffd17 	ldw	r2,-12(fp)
  8078d4:	10800017 	ldw	r2,0(r2)
  8078d8:	10800117 	ldw	r2,4(r2)
  8078dc:	11c00504 	addi	r7,r2,20
  8078e0:	d8000015 	stw	zero,0(sp)
  8078e4:	e0bffd17 	ldw	r2,-12(fp)
  8078e8:	d8800115 	stw	r2,4(sp)
  8078ec:	08122300 	call	812230 <drawBox>
					((struct Button*)(this->selectedObj->subObject))->redrawing = true;
  8078f0:	e0bffd17 	ldw	r2,-12(fp)
  8078f4:	10800a17 	ldw	r2,40(r2)
  8078f8:	10801817 	ldw	r2,96(r2)
  8078fc:	1007883a 	mov	r3,r2
  807900:	00800044 	movi	r2,1
  807904:	18800a15 	stw	r2,40(r3)
					((struct Button*)(this->selectedObj->subObject))->env->redraw = true;
  807908:	e0bffd17 	ldw	r2,-12(fp)
  80790c:	10800a17 	ldw	r2,40(r2)
  807910:	10801817 	ldw	r2,96(r2)
  807914:	10c00b17 	ldw	r3,44(r2)
  807918:	00800044 	movi	r2,1
  80791c:	18800615 	stw	r2,24(r3)
					gamePanel.redrawing = true;
  807920:	00c020f4 	movhi	r3,131
  807924:	18dcc404 	addi	r3,r3,29456
  807928:	00800044 	movi	r2,1
  80792c:	18800b15 	stw	r2,44(r3)
					int i;
					for(i = 0; i < 3; i++)
  807930:	e03ffc15 	stw	zero,-16(fp)
  807934:	00000d06 	br	80796c <update+0x17c>
						gamePanel.elements[i]->redrawing = true;
  807938:	008020f4 	movhi	r2,131
  80793c:	109cc404 	addi	r2,r2,29456
  807940:	10c00d17 	ldw	r3,52(r2)
  807944:	e0bffc17 	ldw	r2,-16(fp)
  807948:	1085883a 	add	r2,r2,r2
  80794c:	1085883a 	add	r2,r2,r2
  807950:	1885883a 	add	r2,r3,r2
  807954:	10c00017 	ldw	r3,0(r2)
  807958:	00800044 	movi	r2,1
  80795c:	18800b15 	stw	r2,44(r3)
					drawBox(this->super->x, this->super->y, this->super->x+20, this->super->y+20, 0, this);
					((struct Button*)(this->selectedObj->subObject))->redrawing = true;
					((struct Button*)(this->selectedObj->subObject))->env->redraw = true;
					gamePanel.redrawing = true;
					int i;
					for(i = 0; i < 3; i++)
  807960:	e0bffc17 	ldw	r2,-16(fp)
  807964:	10800044 	addi	r2,r2,1
  807968:	e0bffc15 	stw	r2,-16(fp)
  80796c:	e0bffc17 	ldw	r2,-16(fp)
  807970:	108000d0 	cmplti	r2,r2,3
  807974:	103ff01e 	bne	r2,zero,807938 <update+0x148>
						gamePanel.elements[i]->redrawing = true;
					this->selectedObj->isSelected = 0;
  807978:	e0bffd17 	ldw	r2,-12(fp)
  80797c:	10800a17 	ldw	r2,40(r2)
  807980:	10001215 	stw	zero,72(r2)
					this->selectedObj = this->super;
  807984:	e0bffd17 	ldw	r2,-12(fp)
  807988:	10c00017 	ldw	r3,0(r2)
  80798c:	e0bffd17 	ldw	r2,-12(fp)
  807990:	10c00a15 	stw	r3,40(r2)
  807994:	00002906 	br	807a3c <update+0x24c>
				} else {
					addToEnv(this->env, this->createdObj);
  807998:	e0bffd17 	ldw	r2,-12(fp)
  80799c:	11001217 	ldw	r4,72(r2)
  8079a0:	e0bffd17 	ldw	r2,-12(fp)
  8079a4:	11400b17 	ldw	r5,44(r2)
  8079a8:	0808a100 	call	808a10 <addToEnv>
					addObjToCollide(this->collidable, this->createdObj);
  8079ac:	e0bffd17 	ldw	r2,-12(fp)
  8079b0:	11001317 	ldw	r4,76(r2)
  8079b4:	e0bffd17 	ldw	r2,-12(fp)
  8079b8:	11400b17 	ldw	r5,44(r2)
  8079bc:	080707c0 	call	80707c <addObjToCollide>
					this->createdObj->isShowing = 1;
  8079c0:	e0bffd17 	ldw	r2,-12(fp)
  8079c4:	10c00b17 	ldw	r3,44(r2)
  8079c8:	00800044 	movi	r2,1
  8079cc:	18801515 	stw	r2,84(r3)
					this->createdObj = NULL;
  8079d0:	e0bffd17 	ldw	r2,-12(fp)
  8079d4:	10000b15 	stw	zero,44(r2)
					this->buttonPushed = 0;
  8079d8:	e0bffd17 	ldw	r2,-12(fp)
  8079dc:	10000d15 	stw	zero,52(r2)
					setStats(this->selectedObj, 0);
  8079e0:	e0bffd17 	ldw	r2,-12(fp)
  8079e4:	11000a17 	ldw	r4,40(r2)
  8079e8:	000b883a 	mov	r5,zero
  8079ec:	08100ac0 	call	8100ac <setStats>
					((struct Button*)(this->selectedObj->subObject))->redrawing = true;
  8079f0:	e0bffd17 	ldw	r2,-12(fp)
  8079f4:	10800a17 	ldw	r2,40(r2)
  8079f8:	10801817 	ldw	r2,96(r2)
  8079fc:	1007883a 	mov	r3,r2
  807a00:	00800044 	movi	r2,1
  807a04:	18800a15 	stw	r2,40(r3)
					((struct Button*)(this->selectedObj->subObject))->env->redraw = true;
  807a08:	e0bffd17 	ldw	r2,-12(fp)
  807a0c:	10800a17 	ldw	r2,40(r2)
  807a10:	10801817 	ldw	r2,96(r2)
  807a14:	10c00b17 	ldw	r3,44(r2)
  807a18:	00800044 	movi	r2,1
  807a1c:	18800615 	stw	r2,24(r3)
					this->selectedObj->isSelected = 0;
  807a20:	e0bffd17 	ldw	r2,-12(fp)
  807a24:	10800a17 	ldw	r2,40(r2)
  807a28:	10001215 	stw	zero,72(r2)
					this->selectedObj = this->super;
  807a2c:	e0bffd17 	ldw	r2,-12(fp)
  807a30:	10c00017 	ldw	r3,0(r2)
  807a34:	e0bffd17 	ldw	r2,-12(fp)
  807a38:	10c00a15 	stw	r3,40(r2)
				}
			}
		}
		setXY_noBound(this->super, x, y);
  807a3c:	e0bffd17 	ldw	r2,-12(fp)
  807a40:	11000017 	ldw	r4,0(r2)
  807a44:	e17ffe17 	ldw	r5,-8(fp)
  807a48:	e1bfff17 	ldw	r6,-4(fp)
  807a4c:	08102d00 	call	8102d0 <setXY_noBound>
}
  807a50:	e037883a 	mov	sp,fp
  807a54:	dfc00117 	ldw	ra,4(sp)
  807a58:	df000017 	ldw	fp,0(sp)
  807a5c:	dec00204 	addi	sp,sp,8
  807a60:	f800283a 	ret

00807a64 <cursorAnimate>:

void cursorAnimate(struct animation** curr, int x, int y, int size, int isForward, struct Object* super, struct Cursor* this) {
  807a64:	defff904 	addi	sp,sp,-28
  807a68:	dfc00615 	stw	ra,24(sp)
  807a6c:	df000515 	stw	fp,20(sp)
  807a70:	df000504 	addi	fp,sp,20
  807a74:	e13ffc15 	stw	r4,-16(fp)
  807a78:	e17ffd15 	stw	r5,-12(fp)
  807a7c:	e1bffe15 	stw	r6,-8(fp)
  807a80:	e1ffff15 	stw	r7,-4(fp)
	//if(x < 0 || y <0 || x > 315 || y > 235) return;
	if(this->buttonPushed == 1) {
  807a84:	e0800417 	ldw	r2,16(fp)
  807a88:	10800d17 	ldw	r2,52(r2)
  807a8c:	10800058 	cmpnei	r2,r2,1
  807a90:	1000251e 	bne	r2,zero,807b28 <cursorAnimate+0xc4>
		draw_nontransparent(super->animate_prev_x, super->animate_prev_y, this->dragOverlapImg, 20, NULL);
  807a94:	e0800317 	ldw	r2,12(fp)
  807a98:	11000917 	ldw	r4,36(r2)
  807a9c:	e0800317 	ldw	r2,12(fp)
  807aa0:	11400a17 	ldw	r5,40(r2)
  807aa4:	e0800417 	ldw	r2,16(fp)
  807aa8:	11800f17 	ldw	r6,60(r2)
  807aac:	d8000015 	stw	zero,0(sp)
  807ab0:	01c00504 	movi	r7,20
  807ab4:	08123c80 	call	8123c8 <draw_nontransparent>
		memOverlap(this);
  807ab8:	e1000417 	ldw	r4,16(fp)
  807abc:	0807bb80 	call	807bb8 <memOverlap>
		dragOverlap(this);
  807ac0:	e1000417 	ldw	r4,16(fp)
  807ac4:	0807ce40 	call	807ce4 <dragOverlap>
		draw(x,y,this->createdObj->currImg->image,20);
  807ac8:	e0800417 	ldw	r2,16(fp)
  807acc:	10800b17 	ldw	r2,44(r2)
  807ad0:	10800c17 	ldw	r2,48(r2)
  807ad4:	11800017 	ldw	r6,0(r2)
  807ad8:	e13ffd17 	ldw	r4,-12(fp)
  807adc:	e17ffe17 	ldw	r5,-8(fp)
  807ae0:	01c00504 	movi	r7,20
  807ae4:	0811f980 	call	811f98 <draw>
		this->createdObj->currImg = this->createdObj->currImg->next;
  807ae8:	e0800417 	ldw	r2,16(fp)
  807aec:	10c00b17 	ldw	r3,44(r2)
  807af0:	e0800417 	ldw	r2,16(fp)
  807af4:	10800b17 	ldw	r2,44(r2)
  807af8:	10800c17 	ldw	r2,48(r2)
  807afc:	10800517 	ldw	r2,20(r2)
  807b00:	18800c15 	stw	r2,48(r3)
		this->createdObj->animate_prev_x = x;
  807b04:	e0800417 	ldw	r2,16(fp)
  807b08:	10c00b17 	ldw	r3,44(r2)
  807b0c:	e0bffd17 	ldw	r2,-12(fp)
  807b10:	18800915 	stw	r2,36(r3)
		this->createdObj->animate_prev_y = y;
  807b14:	e0800417 	ldw	r2,16(fp)
  807b18:	10c00b17 	ldw	r3,44(r2)
  807b1c:	e0bffe17 	ldw	r2,-8(fp)
  807b20:	18800a15 	stw	r2,40(r3)
  807b24:	00000d06 	br	807b5c <cursorAnimate+0xf8>
	} else {
		draw_nontransparent(super->animate_prev_x, super->animate_prev_y, this->overlapImg, 10, NULL);
  807b28:	e0800317 	ldw	r2,12(fp)
  807b2c:	11000917 	ldw	r4,36(r2)
  807b30:	e0800317 	ldw	r2,12(fp)
  807b34:	11400a17 	ldw	r5,40(r2)
  807b38:	e0800417 	ldw	r2,16(fp)
  807b3c:	11800e17 	ldw	r6,56(r2)
  807b40:	d8000015 	stw	zero,0(sp)
  807b44:	01c00284 	movi	r7,10
  807b48:	08123c80 	call	8123c8 <draw_nontransparent>
		memOverlap(this);
  807b4c:	e1000417 	ldw	r4,16(fp)
  807b50:	0807bb80 	call	807bb8 <memOverlap>
		dragOverlap(this);
  807b54:	e1000417 	ldw	r4,16(fp)
  807b58:	0807ce40 	call	807ce4 <dragOverlap>
}
	super->animate_prev_x = x;
  807b5c:	e0c00317 	ldw	r3,12(fp)
  807b60:	e0bffd17 	ldw	r2,-12(fp)
  807b64:	18800915 	stw	r2,36(r3)
	super->animate_prev_y = y;
  807b68:	e0c00317 	ldw	r3,12(fp)
  807b6c:	e0bffe17 	ldw	r2,-8(fp)
  807b70:	18800a15 	stw	r2,40(r3)
	draw(this->super->x, this->super->y, this->super->currImg->image, 10);
  807b74:	e0800417 	ldw	r2,16(fp)
  807b78:	10800017 	ldw	r2,0(r2)
  807b7c:	11000017 	ldw	r4,0(r2)
  807b80:	e0800417 	ldw	r2,16(fp)
  807b84:	10800017 	ldw	r2,0(r2)
  807b88:	11400117 	ldw	r5,4(r2)
  807b8c:	e0800417 	ldw	r2,16(fp)
  807b90:	10800017 	ldw	r2,0(r2)
  807b94:	10800c17 	ldw	r2,48(r2)
  807b98:	11800017 	ldw	r6,0(r2)
  807b9c:	01c00284 	movi	r7,10
  807ba0:	0811f980 	call	811f98 <draw>
}
  807ba4:	e037883a 	mov	sp,fp
  807ba8:	dfc00117 	ldw	ra,4(sp)
  807bac:	df000017 	ldw	fp,0(sp)
  807bb0:	dec00204 	addi	sp,sp,8
  807bb4:	f800283a 	ret

00807bb8 <memOverlap>:
void memOverlap(struct Cursor* this) {
  807bb8:	defffc04 	addi	sp,sp,-16
  807bbc:	df000315 	stw	fp,12(sp)
  807bc0:	df000304 	addi	fp,sp,12
  807bc4:	e13fff15 	stw	r4,-4(fp)
	if(this->super->x < 0 || this->super->y < 0 || this->super->x > 315 || this->super->y > 235) return;
  807bc8:	e0bfff17 	ldw	r2,-4(fp)
  807bcc:	10800017 	ldw	r2,0(r2)
  807bd0:	10800017 	ldw	r2,0(r2)
  807bd4:	1004803a 	cmplt	r2,r2,zero
  807bd8:	10003e1e 	bne	r2,zero,807cd4 <memOverlap+0x11c>
  807bdc:	e0bfff17 	ldw	r2,-4(fp)
  807be0:	10800017 	ldw	r2,0(r2)
  807be4:	10800117 	ldw	r2,4(r2)
  807be8:	1004803a 	cmplt	r2,r2,zero
  807bec:	1000391e 	bne	r2,zero,807cd4 <memOverlap+0x11c>
  807bf0:	e0bfff17 	ldw	r2,-4(fp)
  807bf4:	10800017 	ldw	r2,0(r2)
  807bf8:	10800017 	ldw	r2,0(r2)
  807bfc:	10804f08 	cmpgei	r2,r2,316
  807c00:	1000341e 	bne	r2,zero,807cd4 <memOverlap+0x11c>
  807c04:	e0bfff17 	ldw	r2,-4(fp)
  807c08:	10800017 	ldw	r2,0(r2)
  807c0c:	10800117 	ldw	r2,4(r2)
  807c10:	10803b10 	cmplti	r2,r2,236
  807c14:	1000011e 	bne	r2,zero,807c1c <memOverlap+0x64>
  807c18:	00002e06 	br	807cd4 <memOverlap+0x11c>
	int i, j;
	for(i = 0; i < 10; i++) {
  807c1c:	e03ffe15 	stw	zero,-8(fp)
  807c20:	00002906 	br	807cc8 <memOverlap+0x110>
		for(j = 0; j < 10; j++) {
  807c24:	e03ffd15 	stw	zero,-12(fp)
  807c28:	00002106 	br	807cb0 <memOverlap+0xf8>
		    *(this->overlapImg+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->x+(j+this->super->y)*320)*2);
  807c2c:	e0bfff17 	ldw	r2,-4(fp)
  807c30:	11000e17 	ldw	r4,56(r2)
  807c34:	e0bffd17 	ldw	r2,-12(fp)
  807c38:	10c002a4 	muli	r3,r2,10
  807c3c:	e0bffe17 	ldw	r2,-8(fp)
  807c40:	1885883a 	add	r2,r3,r2
  807c44:	1085883a 	add	r2,r2,r2
  807c48:	1085883a 	add	r2,r2,r2
  807c4c:	208b883a 	add	r5,r4,r2
  807c50:	008020f4 	movhi	r2,131
  807c54:	109c8a04 	addi	r2,r2,29224
  807c58:	10800017 	ldw	r2,0(r2)
  807c5c:	10800b17 	ldw	r2,44(r2)
  807c60:	100d883a 	mov	r6,r2
  807c64:	e0bfff17 	ldw	r2,-4(fp)
  807c68:	10800017 	ldw	r2,0(r2)
  807c6c:	10c00017 	ldw	r3,0(r2)
  807c70:	e0bffe17 	ldw	r2,-8(fp)
  807c74:	1889883a 	add	r4,r3,r2
  807c78:	e0bfff17 	ldw	r2,-4(fp)
  807c7c:	10800017 	ldw	r2,0(r2)
  807c80:	10c00117 	ldw	r3,4(r2)
  807c84:	e0bffd17 	ldw	r2,-12(fp)
  807c88:	1885883a 	add	r2,r3,r2
  807c8c:	10805024 	muli	r2,r2,320
  807c90:	2085883a 	add	r2,r4,r2
  807c94:	1085883a 	add	r2,r2,r2
  807c98:	3085883a 	add	r2,r6,r2
  807c9c:	1080002b 	ldhuio	r2,0(r2)
  807ca0:	28800015 	stw	r2,0(r5)
}
void memOverlap(struct Cursor* this) {
	if(this->super->x < 0 || this->super->y < 0 || this->super->x > 315 || this->super->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
		for(j = 0; j < 10; j++) {
  807ca4:	e0bffd17 	ldw	r2,-12(fp)
  807ca8:	10800044 	addi	r2,r2,1
  807cac:	e0bffd15 	stw	r2,-12(fp)
  807cb0:	e0bffd17 	ldw	r2,-12(fp)
  807cb4:	10800290 	cmplti	r2,r2,10
  807cb8:	103fdc1e 	bne	r2,zero,807c2c <memOverlap+0x74>
	draw(this->super->x, this->super->y, this->super->currImg->image, 10);
}
void memOverlap(struct Cursor* this) {
	if(this->super->x < 0 || this->super->y < 0 || this->super->x > 315 || this->super->y > 235) return;
	int i, j;
	for(i = 0; i < 10; i++) {
  807cbc:	e0bffe17 	ldw	r2,-8(fp)
  807cc0:	10800044 	addi	r2,r2,1
  807cc4:	e0bffe15 	stw	r2,-8(fp)
  807cc8:	e0bffe17 	ldw	r2,-8(fp)
  807ccc:	10800290 	cmplti	r2,r2,10
  807cd0:	103fd41e 	bne	r2,zero,807c24 <memOverlap+0x6c>
		for(j = 0; j < 10; j++) {
		    *(this->overlapImg+i+10*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->x+(j+this->super->y)*320)*2);
		}
	}
}
  807cd4:	e037883a 	mov	sp,fp
  807cd8:	df000017 	ldw	fp,0(sp)
  807cdc:	dec00104 	addi	sp,sp,4
  807ce0:	f800283a 	ret

00807ce4 <dragOverlap>:

void dragOverlap(struct Cursor* this) {
  807ce4:	defffc04 	addi	sp,sp,-16
  807ce8:	df000315 	stw	fp,12(sp)
  807cec:	df000304 	addi	fp,sp,12
  807cf0:	e13fff15 	stw	r4,-4(fp)
	if(this->super->x < 0 || this->super->y < 0 || this->super->x > 310 || this->super->y > 230) return;
  807cf4:	e0bfff17 	ldw	r2,-4(fp)
  807cf8:	10800017 	ldw	r2,0(r2)
  807cfc:	10800017 	ldw	r2,0(r2)
  807d00:	1004803a 	cmplt	r2,r2,zero
  807d04:	10003e1e 	bne	r2,zero,807e00 <dragOverlap+0x11c>
  807d08:	e0bfff17 	ldw	r2,-4(fp)
  807d0c:	10800017 	ldw	r2,0(r2)
  807d10:	10800117 	ldw	r2,4(r2)
  807d14:	1004803a 	cmplt	r2,r2,zero
  807d18:	1000391e 	bne	r2,zero,807e00 <dragOverlap+0x11c>
  807d1c:	e0bfff17 	ldw	r2,-4(fp)
  807d20:	10800017 	ldw	r2,0(r2)
  807d24:	10800017 	ldw	r2,0(r2)
  807d28:	10804dc8 	cmpgei	r2,r2,311
  807d2c:	1000341e 	bne	r2,zero,807e00 <dragOverlap+0x11c>
  807d30:	e0bfff17 	ldw	r2,-4(fp)
  807d34:	10800017 	ldw	r2,0(r2)
  807d38:	10800117 	ldw	r2,4(r2)
  807d3c:	108039d0 	cmplti	r2,r2,231
  807d40:	1000011e 	bne	r2,zero,807d48 <dragOverlap+0x64>
  807d44:	00002e06 	br	807e00 <dragOverlap+0x11c>
	int i, j;
		for(i = 0; i < 20; i++) {
  807d48:	e03ffe15 	stw	zero,-8(fp)
  807d4c:	00002906 	br	807df4 <dragOverlap+0x110>
		    for(j = 0; j < 20; j++) {
  807d50:	e03ffd15 	stw	zero,-12(fp)
  807d54:	00002106 	br	807ddc <dragOverlap+0xf8>
		    	*(this->dragOverlapImg+i+20*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->x+(j+this->super->y)*320)*2);
  807d58:	e0bfff17 	ldw	r2,-4(fp)
  807d5c:	11000f17 	ldw	r4,60(r2)
  807d60:	e0bffd17 	ldw	r2,-12(fp)
  807d64:	10c00524 	muli	r3,r2,20
  807d68:	e0bffe17 	ldw	r2,-8(fp)
  807d6c:	1885883a 	add	r2,r3,r2
  807d70:	1085883a 	add	r2,r2,r2
  807d74:	1085883a 	add	r2,r2,r2
  807d78:	208b883a 	add	r5,r4,r2
  807d7c:	008020f4 	movhi	r2,131
  807d80:	109c8a04 	addi	r2,r2,29224
  807d84:	10800017 	ldw	r2,0(r2)
  807d88:	10800b17 	ldw	r2,44(r2)
  807d8c:	100d883a 	mov	r6,r2
  807d90:	e0bfff17 	ldw	r2,-4(fp)
  807d94:	10800017 	ldw	r2,0(r2)
  807d98:	10c00017 	ldw	r3,0(r2)
  807d9c:	e0bffe17 	ldw	r2,-8(fp)
  807da0:	1889883a 	add	r4,r3,r2
  807da4:	e0bfff17 	ldw	r2,-4(fp)
  807da8:	10800017 	ldw	r2,0(r2)
  807dac:	10c00117 	ldw	r3,4(r2)
  807db0:	e0bffd17 	ldw	r2,-12(fp)
  807db4:	1885883a 	add	r2,r3,r2
  807db8:	10805024 	muli	r2,r2,320
  807dbc:	2085883a 	add	r2,r4,r2
  807dc0:	1085883a 	add	r2,r2,r2
  807dc4:	3085883a 	add	r2,r6,r2
  807dc8:	1080002b 	ldhuio	r2,0(r2)
  807dcc:	28800015 	stw	r2,0(r5)

void dragOverlap(struct Cursor* this) {
	if(this->super->x < 0 || this->super->y < 0 || this->super->x > 310 || this->super->y > 230) return;
	int i, j;
		for(i = 0; i < 20; i++) {
		    for(j = 0; j < 20; j++) {
  807dd0:	e0bffd17 	ldw	r2,-12(fp)
  807dd4:	10800044 	addi	r2,r2,1
  807dd8:	e0bffd15 	stw	r2,-12(fp)
  807ddc:	e0bffd17 	ldw	r2,-12(fp)
  807de0:	10800510 	cmplti	r2,r2,20
  807de4:	103fdc1e 	bne	r2,zero,807d58 <dragOverlap+0x74>
}

void dragOverlap(struct Cursor* this) {
	if(this->super->x < 0 || this->super->y < 0 || this->super->x > 310 || this->super->y > 230) return;
	int i, j;
		for(i = 0; i < 20; i++) {
  807de8:	e0bffe17 	ldw	r2,-8(fp)
  807dec:	10800044 	addi	r2,r2,1
  807df0:	e0bffe15 	stw	r2,-8(fp)
  807df4:	e0bffe17 	ldw	r2,-8(fp)
  807df8:	10800510 	cmplti	r2,r2,20
  807dfc:	103fd41e 	bne	r2,zero,807d50 <dragOverlap+0x6c>
		    for(j = 0; j < 20; j++) {
		    	*(this->dragOverlapImg+i+20*j)=IORD_16DIRECT(pixel_buffer->buffer_start_address, (i+this->super->x+(j+this->super->y)*320)*2);
		    }
		}
}
  807e00:	e037883a 	mov	sp,fp
  807e04:	df000017 	ldw	fp,0(sp)
  807e08:	dec00104 	addi	sp,sp,4
  807e0c:	f800283a 	ret

00807e10 <collideCursor>:

void collideCursor(void* this, void* obj, struct Collidable* c) {
  807e10:	defffb04 	addi	sp,sp,-20
  807e14:	dfc00415 	stw	ra,16(sp)
  807e18:	df000315 	stw	fp,12(sp)
  807e1c:	df000304 	addi	fp,sp,12
  807e20:	e13ffd15 	stw	r4,-12(fp)
  807e24:	e17ffe15 	stw	r5,-8(fp)
  807e28:	e1bfff15 	stw	r6,-4(fp)
	if(((struct Cursor*)(((struct Object*)this)->subObject))->hit == 1 && ((struct Object*)this)->x < 250) {
  807e2c:	e0bffd17 	ldw	r2,-12(fp)
  807e30:	10801817 	ldw	r2,96(r2)
  807e34:	10800c17 	ldw	r2,48(r2)
  807e38:	10800058 	cmpnei	r2,r2,1
  807e3c:	1000231e 	bne	r2,zero,807ecc <collideCursor+0xbc>
  807e40:	e0bffd17 	ldw	r2,-12(fp)
  807e44:	10800017 	ldw	r2,0(r2)
  807e48:	10803e88 	cmpgei	r2,r2,250
  807e4c:	10001f1e 	bne	r2,zero,807ecc <collideCursor+0xbc>
		if(((struct Cursor*)((struct Object*)this)->subObject)->selectedObj->class == button) {
  807e50:	e0bffd17 	ldw	r2,-12(fp)
  807e54:	10801817 	ldw	r2,96(r2)
  807e58:	10800a17 	ldw	r2,40(r2)
  807e5c:	10801117 	ldw	r2,68(r2)
  807e60:	10800160 	cmpeqi	r2,r2,5
  807e64:	1000191e 	bne	r2,zero,807ecc <collideCursor+0xbc>
			return;
		}
		((struct Cursor*)(((struct Object*)this)->subObject))->selectedObj->isSelected = 0;
  807e68:	e0bffd17 	ldw	r2,-12(fp)
  807e6c:	10801817 	ldw	r2,96(r2)
  807e70:	10800a17 	ldw	r2,40(r2)
  807e74:	10001215 	stw	zero,72(r2)
		((struct Cursor*)(((struct Object*)this)->subObject))->selectedObj = (struct Object*)obj;
  807e78:	e0bffd17 	ldw	r2,-12(fp)
  807e7c:	10801817 	ldw	r2,96(r2)
  807e80:	1007883a 	mov	r3,r2
  807e84:	e0bffe17 	ldw	r2,-8(fp)
  807e88:	18800a15 	stw	r2,40(r3)

		if(((struct Object*)obj)->class == ship) {
  807e8c:	e0bffe17 	ldw	r2,-8(fp)
  807e90:	10801117 	ldw	r2,68(r2)
  807e94:	10800198 	cmpnei	r2,r2,6
  807e98:	10000c1e 	bne	r2,zero,807ecc <collideCursor+0xbc>
			((struct Cursor*)(((struct Object*)this)->subObject))->pageButtons[1]->super->collide(((void*)(((struct Cursor*)(((struct Object*)this)->subObject))->pageButtons[1]->super)), this, NULL);
  807e9c:	e0bffd17 	ldw	r2,-12(fp)
  807ea0:	10801817 	ldw	r2,96(r2)
  807ea4:	10800217 	ldw	r2,8(r2)
  807ea8:	10800017 	ldw	r2,0(r2)
  807eac:	10c01a17 	ldw	r3,104(r2)
  807eb0:	e0bffd17 	ldw	r2,-12(fp)
  807eb4:	10801817 	ldw	r2,96(r2)
  807eb8:	10800217 	ldw	r2,8(r2)
  807ebc:	11000017 	ldw	r4,0(r2)
  807ec0:	e17ffd17 	ldw	r5,-12(fp)
  807ec4:	000d883a 	mov	r6,zero
  807ec8:	183ee83a 	callr	r3
		}

	}
}
  807ecc:	e037883a 	mov	sp,fp
  807ed0:	dfc00117 	ldw	ra,4(sp)
  807ed4:	df000017 	ldw	fp,0(sp)
  807ed8:	dec00204 	addi	sp,sp,8
  807edc:	f800283a 	ret

00807ee0 <checkButtonCollision>:

void checkButtonCollision(struct Cursor* this) {
  807ee0:	defffc04 	addi	sp,sp,-16
  807ee4:	dfc00315 	stw	ra,12(sp)
  807ee8:	df000215 	stw	fp,8(sp)
  807eec:	df000204 	addi	fp,sp,8
  807ef0:	e13fff15 	stw	r4,-4(fp)

	int i;
	if(info.start == 1) {
  807ef4:	008020f4 	movhi	r2,131
  807ef8:	109cb404 	addi	r2,r2,29392
  807efc:	10800617 	ldw	r2,24(r2)
  807f00:	10800058 	cmpnei	r2,r2,1
  807f04:	10002c1e 	bne	r2,zero,807fb8 <checkButtonCollision+0xd8>
		for(i = 0; i < 3; i++) {
  807f08:	e03ffe15 	stw	zero,-8(fp)
  807f0c:	00002706 	br	807fac <checkButtonCollision+0xcc>
			if(inBoundary(this->curr_page->buttons[i]->r, this->super)) {
  807f10:	e0bfff17 	ldw	r2,-4(fp)
  807f14:	10800917 	ldw	r2,36(r2)
  807f18:	10c00917 	ldw	r3,36(r2)
  807f1c:	e0bffe17 	ldw	r2,-8(fp)
  807f20:	1085883a 	add	r2,r2,r2
  807f24:	1085883a 	add	r2,r2,r2
  807f28:	1885883a 	add	r2,r3,r2
  807f2c:	10800017 	ldw	r2,0(r2)
  807f30:	11000817 	ldw	r4,32(r2)
  807f34:	e0bfff17 	ldw	r2,-4(fp)
  807f38:	11400017 	ldw	r5,0(r2)
  807f3c:	08104f00 	call	8104f0 <inBoundary>
  807f40:	1005003a 	cmpeq	r2,r2,zero
  807f44:	10000c1e 	bne	r2,zero,807f78 <checkButtonCollision+0x98>
				this->curr_page->buttons[i]->obj1->startAnimate = true;
  807f48:	e0bfff17 	ldw	r2,-4(fp)
  807f4c:	10800917 	ldw	r2,36(r2)
  807f50:	10c00917 	ldw	r3,36(r2)
  807f54:	e0bffe17 	ldw	r2,-8(fp)
  807f58:	1085883a 	add	r2,r2,r2
  807f5c:	1085883a 	add	r2,r2,r2
  807f60:	1885883a 	add	r2,r3,r2
  807f64:	10800017 	ldw	r2,0(r2)
  807f68:	10c00317 	ldw	r3,12(r2)
  807f6c:	00800044 	movi	r2,1
  807f70:	18801e05 	stb	r2,120(r3)
  807f74:	00000a06 	br	807fa0 <checkButtonCollision+0xc0>
			} else
				this->curr_page->buttons[i]->obj1->startAnimate = false;
  807f78:	e0bfff17 	ldw	r2,-4(fp)
  807f7c:	10800917 	ldw	r2,36(r2)
  807f80:	10c00917 	ldw	r3,36(r2)
  807f84:	e0bffe17 	ldw	r2,-8(fp)
  807f88:	1085883a 	add	r2,r2,r2
  807f8c:	1085883a 	add	r2,r2,r2
  807f90:	1885883a 	add	r2,r3,r2
  807f94:	10800017 	ldw	r2,0(r2)
  807f98:	10800317 	ldw	r2,12(r2)
  807f9c:	10001e05 	stb	zero,120(r2)

void checkButtonCollision(struct Cursor* this) {

	int i;
	if(info.start == 1) {
		for(i = 0; i < 3; i++) {
  807fa0:	e0bffe17 	ldw	r2,-8(fp)
  807fa4:	10800044 	addi	r2,r2,1
  807fa8:	e0bffe15 	stw	r2,-8(fp)
  807fac:	e0bffe17 	ldw	r2,-8(fp)
  807fb0:	108000d0 	cmplti	r2,r2,3
  807fb4:	103fd61e 	bne	r2,zero,807f10 <checkButtonCollision+0x30>
				this->curr_page->buttons[i]->obj1->startAnimate = true;
			} else
				this->curr_page->buttons[i]->obj1->startAnimate = false;
		}
	}
	if(this->hit == 0) {
  807fb8:	e0bfff17 	ldw	r2,-4(fp)
  807fbc:	10800c17 	ldw	r2,48(r2)
  807fc0:	1004c03a 	cmpne	r2,r2,zero
  807fc4:	1000151e 	bne	r2,zero,80801c <checkButtonCollision+0x13c>
		for(i = 0; i < this->curr_page->buttons_size; i++){
  807fc8:	e03ffe15 	stw	zero,-8(fp)
  807fcc:	00000d06 	br	808004 <checkButtonCollision+0x124>
			this->curr_page->buttons[i]->super->isSelected = 0;
  807fd0:	e0bfff17 	ldw	r2,-4(fp)
  807fd4:	10800917 	ldw	r2,36(r2)
  807fd8:	10c00917 	ldw	r3,36(r2)
  807fdc:	e0bffe17 	ldw	r2,-8(fp)
  807fe0:	1085883a 	add	r2,r2,r2
  807fe4:	1085883a 	add	r2,r2,r2
  807fe8:	1885883a 	add	r2,r3,r2
  807fec:	10800017 	ldw	r2,0(r2)
  807ff0:	10800017 	ldw	r2,0(r2)
  807ff4:	10001215 	stw	zero,72(r2)
			} else
				this->curr_page->buttons[i]->obj1->startAnimate = false;
		}
	}
	if(this->hit == 0) {
		for(i = 0; i < this->curr_page->buttons_size; i++){
  807ff8:	e0bffe17 	ldw	r2,-8(fp)
  807ffc:	10800044 	addi	r2,r2,1
  808000:	e0bffe15 	stw	r2,-8(fp)
  808004:	e0bfff17 	ldw	r2,-4(fp)
  808008:	10800917 	ldw	r2,36(r2)
  80800c:	10c00717 	ldw	r3,28(r2)
  808010:	e0bffe17 	ldw	r2,-8(fp)
  808014:	10ffee16 	blt	r2,r3,807fd0 <checkButtonCollision+0xf0>
			this->curr_page->buttons[i]->super->isSelected = 0;
		}
		return;
  808018:	00007806 	br	8081fc <checkButtonCollision+0x31c>
	}
	if(this->selectedObj->class == button) {
  80801c:	e0bfff17 	ldw	r2,-4(fp)
  808020:	10800a17 	ldw	r2,40(r2)
  808024:	10801117 	ldw	r2,68(r2)
  808028:	10800160 	cmpeqi	r2,r2,5
  80802c:	1000731e 	bne	r2,zero,8081fc <checkButtonCollision+0x31c>
		return;
	}
	this->r->x = this->super->x; this->r->y = this->super->y;
  808030:	e0bfff17 	ldw	r2,-4(fp)
  808034:	10c01417 	ldw	r3,80(r2)
  808038:	e0bfff17 	ldw	r2,-4(fp)
  80803c:	10800017 	ldw	r2,0(r2)
  808040:	10800017 	ldw	r2,0(r2)
  808044:	18800015 	stw	r2,0(r3)
  808048:	e0bfff17 	ldw	r2,-4(fp)
  80804c:	10c01417 	ldw	r3,80(r2)
  808050:	e0bfff17 	ldw	r2,-4(fp)
  808054:	10800017 	ldw	r2,0(r2)
  808058:	10800117 	ldw	r2,4(r2)
  80805c:	18800115 	stw	r2,4(r3)
	for(i = 0; i < this->page_button_size; i++) {
  808060:	e03ffe15 	stw	zero,-8(fp)
  808064:	00002d06 	br	80811c <checkButtonCollision+0x23c>
		if(isContain(this->pageButtons[i]->r, this->super)) {
  808068:	e0bffe17 	ldw	r2,-8(fp)
  80806c:	e0ffff17 	ldw	r3,-4(fp)
  808070:	1085883a 	add	r2,r2,r2
  808074:	1085883a 	add	r2,r2,r2
  808078:	10c5883a 	add	r2,r2,r3
  80807c:	10800104 	addi	r2,r2,4
  808080:	10800017 	ldw	r2,0(r2)
  808084:	11000817 	ldw	r4,32(r2)
  808088:	e0bfff17 	ldw	r2,-4(fp)
  80808c:	11400017 	ldw	r5,0(r2)
  808090:	08105c40 	call	8105c4 <isContain>
  808094:	1005003a 	cmpeq	r2,r2,zero
  808098:	10001d1e 	bne	r2,zero,808110 <checkButtonCollision+0x230>
			this->selectedObj->isSelected = 0;
  80809c:	e0bfff17 	ldw	r2,-4(fp)
  8080a0:	10800a17 	ldw	r2,40(r2)
  8080a4:	10001215 	stw	zero,72(r2)
			this->selectedObj = this->super;
  8080a8:	e0bfff17 	ldw	r2,-4(fp)
  8080ac:	10c00017 	ldw	r3,0(r2)
  8080b0:	e0bfff17 	ldw	r2,-4(fp)
  8080b4:	10c00a15 	stw	r3,40(r2)
			this->pageButtons[i]->super->collide(((void*)(this->pageButtons[i]->super)), (void*)(this->super), NULL);
  8080b8:	e0bffe17 	ldw	r2,-8(fp)
  8080bc:	e0ffff17 	ldw	r3,-4(fp)
  8080c0:	1085883a 	add	r2,r2,r2
  8080c4:	1085883a 	add	r2,r2,r2
  8080c8:	10c5883a 	add	r2,r2,r3
  8080cc:	10800104 	addi	r2,r2,4
  8080d0:	10800017 	ldw	r2,0(r2)
  8080d4:	10800017 	ldw	r2,0(r2)
  8080d8:	11c01a17 	ldw	r7,104(r2)
  8080dc:	e0bffe17 	ldw	r2,-8(fp)
  8080e0:	e0ffff17 	ldw	r3,-4(fp)
  8080e4:	1085883a 	add	r2,r2,r2
  8080e8:	1085883a 	add	r2,r2,r2
  8080ec:	10c5883a 	add	r2,r2,r3
  8080f0:	10800104 	addi	r2,r2,4
  8080f4:	10800017 	ldw	r2,0(r2)
  8080f8:	11000017 	ldw	r4,0(r2)
  8080fc:	e0bfff17 	ldw	r2,-4(fp)
  808100:	11400017 	ldw	r5,0(r2)
  808104:	000d883a 	mov	r6,zero
  808108:	383ee83a 	callr	r7
			return;
  80810c:	00003b06 	br	8081fc <checkButtonCollision+0x31c>
	}
	if(this->selectedObj->class == button) {
		return;
	}
	this->r->x = this->super->x; this->r->y = this->super->y;
	for(i = 0; i < this->page_button_size; i++) {
  808110:	e0bffe17 	ldw	r2,-8(fp)
  808114:	10800044 	addi	r2,r2,1
  808118:	e0bffe15 	stw	r2,-8(fp)
  80811c:	e0bfff17 	ldw	r2,-4(fp)
  808120:	10c01017 	ldw	r3,64(r2)
  808124:	e0bffe17 	ldw	r2,-8(fp)
  808128:	10ffcf16 	blt	r2,r3,808068 <checkButtonCollision+0x188>
			this->selectedObj = this->super;
			this->pageButtons[i]->super->collide(((void*)(this->pageButtons[i]->super)), (void*)(this->super), NULL);
			return;
		}
	}
	if(this->curr_page == NULL) return;
  80812c:	e0bfff17 	ldw	r2,-4(fp)
  808130:	10800917 	ldw	r2,36(r2)
  808134:	1005003a 	cmpeq	r2,r2,zero
  808138:	1000301e 	bne	r2,zero,8081fc <checkButtonCollision+0x31c>
	for(i = 0; i < this->curr_page->buttons_size; i++) {
  80813c:	e03ffe15 	stw	zero,-8(fp)
  808140:	00002906 	br	8081e8 <checkButtonCollision+0x308>
		if(inBoundary(this->curr_page->buttons[i]->r, this->super)) {
  808144:	e0bfff17 	ldw	r2,-4(fp)
  808148:	10800917 	ldw	r2,36(r2)
  80814c:	10c00917 	ldw	r3,36(r2)
  808150:	e0bffe17 	ldw	r2,-8(fp)
  808154:	1085883a 	add	r2,r2,r2
  808158:	1085883a 	add	r2,r2,r2
  80815c:	1885883a 	add	r2,r3,r2
  808160:	10800017 	ldw	r2,0(r2)
  808164:	11000817 	ldw	r4,32(r2)
  808168:	e0bfff17 	ldw	r2,-4(fp)
  80816c:	11400017 	ldw	r5,0(r2)
  808170:	08104f00 	call	8104f0 <inBoundary>
  808174:	1005003a 	cmpeq	r2,r2,zero
  808178:	1000181e 	bne	r2,zero,8081dc <checkButtonCollision+0x2fc>
			//collideButton(this, this->curr_page->buttons[i]);
			this->curr_page->buttons[i]->super->collide(((void*)(this->curr_page->buttons[i]->super)), (void*)(this->super), NULL);
  80817c:	e0bfff17 	ldw	r2,-4(fp)
  808180:	10800917 	ldw	r2,36(r2)
  808184:	10c00917 	ldw	r3,36(r2)
  808188:	e0bffe17 	ldw	r2,-8(fp)
  80818c:	1085883a 	add	r2,r2,r2
  808190:	1085883a 	add	r2,r2,r2
  808194:	1885883a 	add	r2,r3,r2
  808198:	10800017 	ldw	r2,0(r2)
  80819c:	10800017 	ldw	r2,0(r2)
  8081a0:	11c01a17 	ldw	r7,104(r2)
  8081a4:	e0bfff17 	ldw	r2,-4(fp)
  8081a8:	10800917 	ldw	r2,36(r2)
  8081ac:	10c00917 	ldw	r3,36(r2)
  8081b0:	e0bffe17 	ldw	r2,-8(fp)
  8081b4:	1085883a 	add	r2,r2,r2
  8081b8:	1085883a 	add	r2,r2,r2
  8081bc:	1885883a 	add	r2,r3,r2
  8081c0:	10800017 	ldw	r2,0(r2)
  8081c4:	11000017 	ldw	r4,0(r2)
  8081c8:	e0bfff17 	ldw	r2,-4(fp)
  8081cc:	11400017 	ldw	r5,0(r2)
  8081d0:	000d883a 	mov	r6,zero
  8081d4:	383ee83a 	callr	r7
			return;
  8081d8:	00000806 	br	8081fc <checkButtonCollision+0x31c>
			this->pageButtons[i]->super->collide(((void*)(this->pageButtons[i]->super)), (void*)(this->super), NULL);
			return;
		}
	}
	if(this->curr_page == NULL) return;
	for(i = 0; i < this->curr_page->buttons_size; i++) {
  8081dc:	e0bffe17 	ldw	r2,-8(fp)
  8081e0:	10800044 	addi	r2,r2,1
  8081e4:	e0bffe15 	stw	r2,-8(fp)
  8081e8:	e0bfff17 	ldw	r2,-4(fp)
  8081ec:	10800917 	ldw	r2,36(r2)
  8081f0:	10c00717 	ldw	r3,28(r2)
  8081f4:	e0bffe17 	ldw	r2,-8(fp)
  8081f8:	10ffd216 	blt	r2,r3,808144 <checkButtonCollision+0x264>
			//collideButton(this, this->curr_page->buttons[i]);
			this->curr_page->buttons[i]->super->collide(((void*)(this->curr_page->buttons[i]->super)), (void*)(this->super), NULL);
			return;
		}
	}
}
  8081fc:	e037883a 	mov	sp,fp
  808200:	dfc00117 	ldw	ra,4(sp)
  808204:	df000017 	ldw	fp,0(sp)
  808208:	dec00204 	addi	sp,sp,8
  80820c:	f800283a 	ret

00808210 <setFrameToCursor>:
void setFrameToCursor(struct Cursor* this, struct Frame* f) {
  808210:	defffd04 	addi	sp,sp,-12
  808214:	df000215 	stw	fp,8(sp)
  808218:	df000204 	addi	fp,sp,8
  80821c:	e13ffe15 	stw	r4,-8(fp)
  808220:	e17fff15 	stw	r5,-4(fp)
	this->curr_page = f;
  808224:	e0fffe17 	ldw	r3,-8(fp)
  808228:	e0bfff17 	ldw	r2,-4(fp)
  80822c:	18800915 	stw	r2,36(r3)
}
  808230:	e037883a 	mov	sp,fp
  808234:	df000017 	ldw	fp,0(sp)
  808238:	dec00104 	addi	sp,sp,4
  80823c:	f800283a 	ret

00808240 <setPanelToCursor>:
void setPanelToCursor(struct Cursor* this, struct Frame* f) {
  808240:	defffc04 	addi	sp,sp,-16
  808244:	df000315 	stw	fp,12(sp)
  808248:	df000304 	addi	fp,sp,12
  80824c:	e13ffe15 	stw	r4,-8(fp)
  808250:	e17fff15 	stw	r5,-4(fp)
	int i;
	for(i = 0; i < f->total_elements_size; i++) {
  808254:	e03ffd15 	stw	zero,-12(fp)
  808258:	00001606 	br	8082b4 <setPanelToCursor+0x74>
		this->pages[i] = f->elements[i];
  80825c:	e13ffd17 	ldw	r4,-12(fp)
  808260:	e0bfff17 	ldw	r2,-4(fp)
  808264:	10c00d17 	ldw	r3,52(r2)
  808268:	e0bffd17 	ldw	r2,-12(fp)
  80826c:	1085883a 	add	r2,r2,r2
  808270:	1085883a 	add	r2,r2,r2
  808274:	1885883a 	add	r2,r3,r2
  808278:	11400017 	ldw	r5,0(r2)
  80827c:	e0fffe17 	ldw	r3,-8(fp)
  808280:	2105883a 	add	r2,r4,r4
  808284:	1085883a 	add	r2,r2,r2
  808288:	10c5883a 	add	r2,r2,r3
  80828c:	10800404 	addi	r2,r2,16
  808290:	11400015 	stw	r5,0(r2)
		this->page_size++;
  808294:	e0bffe17 	ldw	r2,-8(fp)
  808298:	10801117 	ldw	r2,68(r2)
  80829c:	10c00044 	addi	r3,r2,1
  8082a0:	e0bffe17 	ldw	r2,-8(fp)
  8082a4:	10c01115 	stw	r3,68(r2)
void setFrameToCursor(struct Cursor* this, struct Frame* f) {
	this->curr_page = f;
}
void setPanelToCursor(struct Cursor* this, struct Frame* f) {
	int i;
	for(i = 0; i < f->total_elements_size; i++) {
  8082a8:	e0bffd17 	ldw	r2,-12(fp)
  8082ac:	10800044 	addi	r2,r2,1
  8082b0:	e0bffd15 	stw	r2,-12(fp)
  8082b4:	e0bfff17 	ldw	r2,-4(fp)
  8082b8:	10c00817 	ldw	r3,32(r2)
  8082bc:	e0bffd17 	ldw	r2,-12(fp)
  8082c0:	10ffe616 	blt	r2,r3,80825c <setPanelToCursor+0x1c>
		this->pages[i] = f->elements[i];
		this->page_size++;
	} this->curr_page = f->elements[1];
  8082c4:	e0bfff17 	ldw	r2,-4(fp)
  8082c8:	10800d17 	ldw	r2,52(r2)
  8082cc:	10800104 	addi	r2,r2,4
  8082d0:	10c00017 	ldw	r3,0(r2)
  8082d4:	e0bffe17 	ldw	r2,-8(fp)
  8082d8:	10c00915 	stw	r3,36(r2)
	for(i = 0; i < f->buttons_size; i++) {
  8082dc:	e03ffd15 	stw	zero,-12(fp)
  8082e0:	00001606 	br	80833c <setPanelToCursor+0xfc>
		this->pageButtons[i] = f->buttons[i];
  8082e4:	e13ffd17 	ldw	r4,-12(fp)
  8082e8:	e0bfff17 	ldw	r2,-4(fp)
  8082ec:	10c00917 	ldw	r3,36(r2)
  8082f0:	e0bffd17 	ldw	r2,-12(fp)
  8082f4:	1085883a 	add	r2,r2,r2
  8082f8:	1085883a 	add	r2,r2,r2
  8082fc:	1885883a 	add	r2,r3,r2
  808300:	11400017 	ldw	r5,0(r2)
  808304:	e0fffe17 	ldw	r3,-8(fp)
  808308:	2105883a 	add	r2,r4,r4
  80830c:	1085883a 	add	r2,r2,r2
  808310:	10c5883a 	add	r2,r2,r3
  808314:	10800104 	addi	r2,r2,4
  808318:	11400015 	stw	r5,0(r2)
		this->page_button_size++;
  80831c:	e0bffe17 	ldw	r2,-8(fp)
  808320:	10801017 	ldw	r2,64(r2)
  808324:	10c00044 	addi	r3,r2,1
  808328:	e0bffe17 	ldw	r2,-8(fp)
  80832c:	10c01015 	stw	r3,64(r2)
	int i;
	for(i = 0; i < f->total_elements_size; i++) {
		this->pages[i] = f->elements[i];
		this->page_size++;
	} this->curr_page = f->elements[1];
	for(i = 0; i < f->buttons_size; i++) {
  808330:	e0bffd17 	ldw	r2,-12(fp)
  808334:	10800044 	addi	r2,r2,1
  808338:	e0bffd15 	stw	r2,-12(fp)
  80833c:	e0bfff17 	ldw	r2,-4(fp)
  808340:	10c00717 	ldw	r3,28(r2)
  808344:	e0bffd17 	ldw	r2,-12(fp)
  808348:	10ffe616 	blt	r2,r3,8082e4 <setPanelToCursor+0xa4>
		this->pageButtons[i] = f->buttons[i];
		this->page_button_size++;
	}
}
  80834c:	e037883a 	mov	sp,fp
  808350:	df000017 	ldw	fp,0(sp)
  808354:	dec00104 	addi	sp,sp,4
  808358:	f800283a 	ret

0080835c <clearPanelFromCursor>:

void clearPanelFromCursor(struct Cursor* this) {
  80835c:	defffd04 	addi	sp,sp,-12
  808360:	df000215 	stw	fp,8(sp)
  808364:	df000204 	addi	fp,sp,8
  808368:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = this->page_size-1; i >= 0; i--) {
  80836c:	e0bfff17 	ldw	r2,-4(fp)
  808370:	10801117 	ldw	r2,68(r2)
  808374:	10bfffc4 	addi	r2,r2,-1
  808378:	e0bffe15 	stw	r2,-8(fp)
  80837c:	00000a06 	br	8083a8 <clearPanelFromCursor+0x4c>
		this->pages[i] = NULL;
  808380:	e0bffe17 	ldw	r2,-8(fp)
  808384:	e0ffff17 	ldw	r3,-4(fp)
  808388:	1085883a 	add	r2,r2,r2
  80838c:	1085883a 	add	r2,r2,r2
  808390:	10c5883a 	add	r2,r2,r3
  808394:	10800404 	addi	r2,r2,16
  808398:	10000015 	stw	zero,0(r2)
	}
}

void clearPanelFromCursor(struct Cursor* this) {
	int i;
	for(i = this->page_size-1; i >= 0; i--) {
  80839c:	e0bffe17 	ldw	r2,-8(fp)
  8083a0:	10bfffc4 	addi	r2,r2,-1
  8083a4:	e0bffe15 	stw	r2,-8(fp)
  8083a8:	e0bffe17 	ldw	r2,-8(fp)
  8083ac:	1004403a 	cmpge	r2,r2,zero
  8083b0:	103ff31e 	bne	r2,zero,808380 <clearPanelFromCursor+0x24>
		this->pages[i] = NULL;
	} this->curr_page = NULL;
  8083b4:	e0bfff17 	ldw	r2,-4(fp)
  8083b8:	10000915 	stw	zero,36(r2)
	for(i = this->page_button_size-1; i >= 0; i--) {
  8083bc:	e0bfff17 	ldw	r2,-4(fp)
  8083c0:	10801017 	ldw	r2,64(r2)
  8083c4:	10bfffc4 	addi	r2,r2,-1
  8083c8:	e0bffe15 	stw	r2,-8(fp)
  8083cc:	00000a06 	br	8083f8 <clearPanelFromCursor+0x9c>
		this->pageButtons[i] = NULL;
  8083d0:	e0bffe17 	ldw	r2,-8(fp)
  8083d4:	e0ffff17 	ldw	r3,-4(fp)
  8083d8:	1085883a 	add	r2,r2,r2
  8083dc:	1085883a 	add	r2,r2,r2
  8083e0:	10c5883a 	add	r2,r2,r3
  8083e4:	10800104 	addi	r2,r2,4
  8083e8:	10000015 	stw	zero,0(r2)
void clearPanelFromCursor(struct Cursor* this) {
	int i;
	for(i = this->page_size-1; i >= 0; i--) {
		this->pages[i] = NULL;
	} this->curr_page = NULL;
	for(i = this->page_button_size-1; i >= 0; i--) {
  8083ec:	e0bffe17 	ldw	r2,-8(fp)
  8083f0:	10bfffc4 	addi	r2,r2,-1
  8083f4:	e0bffe15 	stw	r2,-8(fp)
  8083f8:	e0bffe17 	ldw	r2,-8(fp)
  8083fc:	1004403a 	cmpge	r2,r2,zero
  808400:	103ff31e 	bne	r2,zero,8083d0 <clearPanelFromCursor+0x74>
		this->pageButtons[i] = NULL;
	}
	this->page_size = this->page_button_size = 0;
  808404:	e0bfff17 	ldw	r2,-4(fp)
  808408:	10001015 	stw	zero,64(r2)
  80840c:	e0bfff17 	ldw	r2,-4(fp)
  808410:	10c01017 	ldw	r3,64(r2)
  808414:	e0bfff17 	ldw	r2,-4(fp)
  808418:	10c01115 	stw	r3,68(r2)
	this->selectedObj = this->super;
  80841c:	e0bfff17 	ldw	r2,-4(fp)
  808420:	10c00017 	ldw	r3,0(r2)
  808424:	e0bfff17 	ldw	r2,-4(fp)
  808428:	10c00a15 	stw	r3,40(r2)
}
  80842c:	e037883a 	mov	sp,fp
  808430:	df000017 	ldw	fp,0(sp)
  808434:	dec00104 	addi	sp,sp,4
  808438:	f800283a 	ret

0080843c <initCursorController>:
#define START_SPEED (float) 0.1
#define CHANGE_IN_SPEED (float) 0.0001
//#include "altera_avalon_pio_regs.h"
#include "CursorController.h"

struct CursorController* initCursorController( struct Object* cursor, struct SwitchController* switchController, struct KeyController* keyController ) {
  80843c:	defff904 	addi	sp,sp,-28
  808440:	dfc00615 	stw	ra,24(sp)
  808444:	df000515 	stw	fp,20(sp)
  808448:	dc000415 	stw	r16,16(sp)
  80844c:	df000404 	addi	fp,sp,16
  808450:	e13ffd15 	stw	r4,-12(fp)
  808454:	e17ffe15 	stw	r5,-8(fp)
  808458:	e1bfff15 	stw	r6,-4(fp)
	struct CursorController* this = (struct CursorController*)malloc(sizeof(struct CursorController));
  80845c:	01000604 	movi	r4,24
  808460:	0814f580 	call	814f58 <malloc>
  808464:	e0bffc15 	stw	r2,-16(fp)
	//this->movingLeft = this->movingRight = this->movingUp = this->movingDown = false;
	this->cursor = cursor;
  808468:	e0fffd17 	ldw	r3,-12(fp)
  80846c:	e0bffc17 	ldw	r2,-16(fp)
  808470:	10c00015 	stw	r3,0(r2)
	this->cursor_x = 0;
  808474:	e0bffc17 	ldw	r2,-16(fp)
  808478:	10000215 	stw	zero,8(r2)
	this->cursor_y = 0;
  80847c:	e0bffc17 	ldw	r2,-16(fp)
  808480:	10000315 	stw	zero,12(r2)
	this->y_speed = 0;
  808484:	e0bffc17 	ldw	r2,-16(fp)
  808488:	10000515 	stw	zero,20(r2)
	this->x_speed = 0;
  80848c:	e0bffc17 	ldw	r2,-16(fp)
  808490:	10000415 	stw	zero,16(r2)
	setXY( cursor, this->cursor_x, this->cursor_y );
  808494:	e0bffc17 	ldw	r2,-16(fp)
  808498:	10800217 	ldw	r2,8(r2)
  80849c:	1009883a 	mov	r4,r2
  8084a0:	081363c0 	call	81363c <__fixsfsi>
  8084a4:	1021883a 	mov	r16,r2
  8084a8:	e0bffc17 	ldw	r2,-16(fp)
  8084ac:	10800317 	ldw	r2,12(r2)
  8084b0:	1009883a 	mov	r4,r2
  8084b4:	081363c0 	call	81363c <__fixsfsi>
  8084b8:	100d883a 	mov	r6,r2
  8084bc:	e13ffd17 	ldw	r4,-12(fp)
  8084c0:	800b883a 	mov	r5,r16
  8084c4:	081016c0 	call	81016c <setXY>
	//addSwitchListener( switchController, (void *) mouse_click_listener, this, 0x1 );
	//addKeyListener(keyController, (void *)mouse_movement_listener, this, 0xF);
	return this;
  8084c8:	e0bffc17 	ldw	r2,-16(fp)
}
  8084cc:	e037883a 	mov	sp,fp
  8084d0:	dfc00217 	ldw	ra,8(sp)
  8084d4:	df000117 	ldw	fp,4(sp)
  8084d8:	dc000017 	ldw	r16,0(sp)
  8084dc:	dec00304 	addi	sp,sp,12
  8084e0:	f800283a 	ret

008084e4 <updateCursorController>:
char byte1,byte2,byte3;
/**
 * TODO: Once objects can receive float numbers the speed should be multiplied by
 * dt, so that the movement isn't depending on the loops per second
 */
void updateCursorController( struct CursorController* cursorController, float dt ) {
  8084e4:	defffa04 	addi	sp,sp,-24
  8084e8:	dfc00515 	stw	ra,20(sp)
  8084ec:	df000415 	stw	fp,16(sp)
  8084f0:	dc400315 	stw	r17,12(sp)
  8084f4:	dc000215 	stw	r16,8(sp)
  8084f8:	df000204 	addi	fp,sp,8
  8084fc:	e13ffe15 	stw	r4,-8(fp)
  808500:	e17fff15 	stw	r5,-4(fp)


	if(alt_up_ps2_read_data_byte(ps2, &byte1) ==0) {
  808504:	008020f4 	movhi	r2,131
  808508:	109c8804 	addi	r2,r2,29216
  80850c:	11000017 	ldw	r4,0(r2)
  808510:	d17c2384 	addi	r5,gp,-3954
  808514:	08213100 	call	821310 <alt_up_ps2_read_data_byte>
  808518:	1004c03a 	cmpne	r2,r2,zero
  80851c:	10008d1e 	bne	r2,zero,808754 <updateCursorController+0x270>
					//printf("b1=%d\n",byte1) ;//read 1 byte
		//IOWR_8DIRECT(LEDS_BASE, 0, byte1);
		if( isBitSet( byte1, 0 ) )
  808520:	d0bc2383 	ldbu	r2,-3954(gp)
  808524:	11003fcc 	andi	r4,r2,255
  808528:	2100201c 	xori	r4,r4,128
  80852c:	213fe004 	addi	r4,r4,-128
  808530:	000b883a 	mov	r5,zero
  808534:	080174c0 	call	80174c <isBitSet>
  808538:	10803fcc 	andi	r2,r2,255
  80853c:	1005003a 	cmpeq	r2,r2,zero
  808540:	1000031e 	bne	r2,zero,808550 <updateCursorController+0x6c>
			leftMousePressed( cursorController );
  808544:	e13ffe17 	ldw	r4,-8(fp)
  808548:	08088f40 	call	8088f4 <leftMousePressed>
  80854c:	00000206 	br	808558 <updateCursorController+0x74>
		else
			leftMouseReleased( cursorController );
  808550:	e13ffe17 	ldw	r4,-8(fp)
  808554:	08088c40 	call	8088c4 <leftMouseReleased>

					//leep(5);
		while(alt_up_ps2_read_data_byte(ps2, &byte2) != 0) {
  808558:	008020f4 	movhi	r2,131
  80855c:	109c8804 	addi	r2,r2,29216
  808560:	11000017 	ldw	r4,0(r2)
  808564:	d17c2304 	addi	r5,gp,-3956
  808568:	08213100 	call	821310 <alt_up_ps2_read_data_byte>
  80856c:	1004c03a 	cmpne	r2,r2,zero
  808570:	103ff91e 	bne	r2,zero,808558 <updateCursorController+0x74>
			//IOWR_8DIRECT(LEDR_BASE, 0, byte2);
				//printf("b2=%d\n",byte2);
		}
		while(alt_up_ps2_read_data_byte(ps2, &byte3) !=0 ){
  808574:	008020f4 	movhi	r2,131
  808578:	109c8804 	addi	r2,r2,29216
  80857c:	11000017 	ldw	r4,0(r2)
  808580:	d17c2344 	addi	r5,gp,-3955
  808584:	08213100 	call	821310 <alt_up_ps2_read_data_byte>
  808588:	1004c03a 	cmpne	r2,r2,zero
  80858c:	103ff91e 	bne	r2,zero,808574 <updateCursorController+0x90>

		}


					//printf("b3=%d\n",byte3);
		if (byte2<=8 )
  808590:	d0bc2303 	ldbu	r2,-3956(gp)
  808594:	10803fcc 	andi	r2,r2,255
  808598:	1080201c 	xori	r2,r2,128
  80859c:	10bfe004 	addi	r2,r2,-128
  8085a0:	10800248 	cmpgei	r2,r2,9
  8085a4:	1000091e 	bne	r2,zero,8085cc <updateCursorController+0xe8>
			cursorController->x_speed = (int)byte2;
  8085a8:	d0bc2303 	ldbu	r2,-3956(gp)
  8085ac:	11003fcc 	andi	r4,r2,255
  8085b0:	2100201c 	xori	r4,r4,128
  8085b4:	213fe004 	addi	r4,r4,-128
  8085b8:	08135a40 	call	8135a4 <__floatsisf>
  8085bc:	1007883a 	mov	r3,r2
  8085c0:	e0bffe17 	ldw	r2,-8(fp)
  8085c4:	10c00415 	stw	r3,16(r2)
  8085c8:	00000206 	br	8085d4 <updateCursorController+0xf0>
		else
			cursorController->x_speed = 0;
  8085cc:	e0bffe17 	ldw	r2,-8(fp)
  8085d0:	10000415 	stw	zero,16(r2)
		if (byte3<=8 )
  8085d4:	d0bc2343 	ldbu	r2,-3955(gp)
  8085d8:	10803fcc 	andi	r2,r2,255
  8085dc:	1080201c 	xori	r2,r2,128
  8085e0:	10bfe004 	addi	r2,r2,-128
  8085e4:	10800248 	cmpgei	r2,r2,9
  8085e8:	1000091e 	bne	r2,zero,808610 <updateCursorController+0x12c>
			cursorController->y_speed = (int)byte3;
  8085ec:	d0bc2343 	ldbu	r2,-3955(gp)
  8085f0:	11003fcc 	andi	r4,r2,255
  8085f4:	2100201c 	xori	r4,r4,128
  8085f8:	213fe004 	addi	r4,r4,-128
  8085fc:	08135a40 	call	8135a4 <__floatsisf>
  808600:	1007883a 	mov	r3,r2
  808604:	e0bffe17 	ldw	r2,-8(fp)
  808608:	10c00515 	stw	r3,20(r2)
  80860c:	00000206 	br	808618 <updateCursorController+0x134>
		else {
			cursorController->y_speed = 0;
  808610:	e0bffe17 	ldw	r2,-8(fp)
  808614:	10000515 	stw	zero,20(r2)
	}
	else {
		cursorController->y_speed = 0;
	}*/

	cursorController->cursor_x += cursorController->x_speed;
  808618:	e0bffe17 	ldw	r2,-8(fp)
  80861c:	10c00217 	ldw	r3,8(r2)
  808620:	e0bffe17 	ldw	r2,-8(fp)
  808624:	10800417 	ldw	r2,16(r2)
  808628:	1809883a 	mov	r4,r3
  80862c:	100b883a 	mov	r5,r2
  808630:	081300c0 	call	81300c <__addsf3>
  808634:	1007883a 	mov	r3,r2
  808638:	e0bffe17 	ldw	r2,-8(fp)
  80863c:	10c00215 	stw	r3,8(r2)
	cursorController->cursor_y -= cursorController->y_speed;
  808640:	e0bffe17 	ldw	r2,-8(fp)
  808644:	10c00317 	ldw	r3,12(r2)
  808648:	e0bffe17 	ldw	r2,-8(fp)
  80864c:	10800517 	ldw	r2,20(r2)
  808650:	1809883a 	mov	r4,r3
  808654:	100b883a 	mov	r5,r2
  808658:	0812f9c0 	call	812f9c <__subsf3>
  80865c:	1007883a 	mov	r3,r2
  808660:	e0bffe17 	ldw	r2,-8(fp)
  808664:	10c00315 	stw	r3,12(r2)

	if(cursorController->cursor_x > 310)
  808668:	e0bffe17 	ldw	r2,-8(fp)
  80866c:	10800217 	ldw	r2,8(r2)
  808670:	1009883a 	mov	r4,r2
  808674:	0150e6f4 	movhi	r5,17307
  808678:	08133c40 	call	8133c4 <__gtsf2>
  80867c:	10800048 	cmpgei	r2,r2,1
  808680:	1000011e 	bne	r2,zero,808688 <updateCursorController+0x1a4>
  808684:	00000306 	br	808694 <updateCursorController+0x1b0>
		cursorController->cursor_x = 310;
  808688:	e0fffe17 	ldw	r3,-8(fp)
  80868c:	0090e6f4 	movhi	r2,17307
  808690:	18800215 	stw	r2,8(r3)
	if(cursorController->cursor_x <0)
  808694:	e0bffe17 	ldw	r2,-8(fp)
  808698:	10800217 	ldw	r2,8(r2)
  80869c:	1009883a 	mov	r4,r2
  8086a0:	000b883a 	mov	r5,zero
  8086a4:	08134b40 	call	8134b4 <__ltsf2>
  8086a8:	1004803a 	cmplt	r2,r2,zero
  8086ac:	1000011e 	bne	r2,zero,8086b4 <updateCursorController+0x1d0>
  8086b0:	00000206 	br	8086bc <updateCursorController+0x1d8>
		cursorController->cursor_x = 0;
  8086b4:	e0bffe17 	ldw	r2,-8(fp)
  8086b8:	10000215 	stw	zero,8(r2)
	if( cursorController->cursor_y > 235)
  8086bc:	e0bffe17 	ldw	r2,-8(fp)
  8086c0:	10800317 	ldw	r2,12(r2)
  8086c4:	1009883a 	mov	r4,r2
  8086c8:	0150daf4 	movhi	r5,17259
  8086cc:	08133c40 	call	8133c4 <__gtsf2>
  8086d0:	10800048 	cmpgei	r2,r2,1
  8086d4:	1000011e 	bne	r2,zero,8086dc <updateCursorController+0x1f8>
  8086d8:	00000306 	br	8086e8 <updateCursorController+0x204>
		cursorController->cursor_y = 235;
  8086dc:	e0fffe17 	ldw	r3,-8(fp)
  8086e0:	0090daf4 	movhi	r2,17259
  8086e4:	18800315 	stw	r2,12(r3)
	if( cursorController->cursor_y < 0)
  8086e8:	e0bffe17 	ldw	r2,-8(fp)
  8086ec:	10800317 	ldw	r2,12(r2)
  8086f0:	1009883a 	mov	r4,r2
  8086f4:	000b883a 	mov	r5,zero
  8086f8:	08134b40 	call	8134b4 <__ltsf2>
  8086fc:	1004803a 	cmplt	r2,r2,zero
  808700:	1000011e 	bne	r2,zero,808708 <updateCursorController+0x224>
  808704:	00000206 	br	808710 <updateCursorController+0x22c>
		cursorController->cursor_y = 0;
  808708:	e0bffe17 	ldw	r2,-8(fp)
  80870c:	10000315 	stw	zero,12(r2)
	update((struct Cursor*)(cursorController->cursor->subObject), (int) ( cursorController->cursor_x ), (int) ( cursorController->cursor_y ) );
  808710:	e0bffe17 	ldw	r2,-8(fp)
  808714:	10800017 	ldw	r2,0(r2)
  808718:	10801817 	ldw	r2,96(r2)
  80871c:	1023883a 	mov	r17,r2
  808720:	e0bffe17 	ldw	r2,-8(fp)
  808724:	10800217 	ldw	r2,8(r2)
  808728:	1009883a 	mov	r4,r2
  80872c:	081363c0 	call	81363c <__fixsfsi>
  808730:	1021883a 	mov	r16,r2
  808734:	e0bffe17 	ldw	r2,-8(fp)
  808738:	10800317 	ldw	r2,12(r2)
  80873c:	1009883a 	mov	r4,r2
  808740:	081363c0 	call	81363c <__fixsfsi>
  808744:	100d883a 	mov	r6,r2
  808748:	8809883a 	mov	r4,r17
  80874c:	800b883a 	mov	r5,r16
  808750:	08077f00 	call	8077f0 <update>
	}
}
  808754:	e037883a 	mov	sp,fp
  808758:	dfc00317 	ldw	ra,12(sp)
  80875c:	df000217 	ldw	fp,8(sp)
  808760:	dc400117 	ldw	r17,4(sp)
  808764:	dc000017 	ldw	r16,0(sp)
  808768:	dec00404 	addi	sp,sp,16
  80876c:	f800283a 	ret

00808770 <mouse_movement_listener>:

void mouse_movement_listener( struct KeyController* keyController, struct CursorController* cursorController )
{
  808770:	defffc04 	addi	sp,sp,-16
  808774:	dfc00315 	stw	ra,12(sp)
  808778:	df000215 	stw	fp,8(sp)
  80877c:	df000204 	addi	fp,sp,8
  808780:	e13ffe15 	stw	r4,-8(fp)
  808784:	e17fff15 	stw	r5,-4(fp)
	cursorController->movingLeft = !isBitSet(keyController->keys, 3);
  808788:	e0bffe17 	ldw	r2,-8(fp)
  80878c:	10800217 	ldw	r2,8(r2)
  808790:	11003fcc 	andi	r4,r2,255
  808794:	2100201c 	xori	r4,r4,128
  808798:	213fe004 	addi	r4,r4,-128
  80879c:	014000c4 	movi	r5,3
  8087a0:	080174c0 	call	80174c <isBitSet>
  8087a4:	10803fcc 	andi	r2,r2,255
  8087a8:	1080005c 	xori	r2,r2,1
  8087ac:	1007883a 	mov	r3,r2
  8087b0:	e0bfff17 	ldw	r2,-4(fp)
  8087b4:	10c00105 	stb	r3,4(r2)
	cursorController->movingRight = !isBitSet(keyController->keys, 2);
  8087b8:	e0bffe17 	ldw	r2,-8(fp)
  8087bc:	10800217 	ldw	r2,8(r2)
  8087c0:	11003fcc 	andi	r4,r2,255
  8087c4:	2100201c 	xori	r4,r4,128
  8087c8:	213fe004 	addi	r4,r4,-128
  8087cc:	01400084 	movi	r5,2
  8087d0:	080174c0 	call	80174c <isBitSet>
  8087d4:	10803fcc 	andi	r2,r2,255
  8087d8:	1080005c 	xori	r2,r2,1
  8087dc:	1007883a 	mov	r3,r2
  8087e0:	e0bfff17 	ldw	r2,-4(fp)
  8087e4:	10c00145 	stb	r3,5(r2)
	cursorController->movingDown = !isBitSet(keyController->keys, 1);
  8087e8:	e0bffe17 	ldw	r2,-8(fp)
  8087ec:	10800217 	ldw	r2,8(r2)
  8087f0:	11003fcc 	andi	r4,r2,255
  8087f4:	2100201c 	xori	r4,r4,128
  8087f8:	213fe004 	addi	r4,r4,-128
  8087fc:	01400044 	movi	r5,1
  808800:	080174c0 	call	80174c <isBitSet>
  808804:	10803fcc 	andi	r2,r2,255
  808808:	1080005c 	xori	r2,r2,1
  80880c:	1007883a 	mov	r3,r2
  808810:	e0bfff17 	ldw	r2,-4(fp)
  808814:	10c001c5 	stb	r3,7(r2)
	cursorController->movingUp = !isBitSet(keyController->keys, 0);
  808818:	e0bffe17 	ldw	r2,-8(fp)
  80881c:	10800217 	ldw	r2,8(r2)
  808820:	11003fcc 	andi	r4,r2,255
  808824:	2100201c 	xori	r4,r4,128
  808828:	213fe004 	addi	r4,r4,-128
  80882c:	000b883a 	mov	r5,zero
  808830:	080174c0 	call	80174c <isBitSet>
  808834:	10803fcc 	andi	r2,r2,255
  808838:	1080005c 	xori	r2,r2,1
  80883c:	1007883a 	mov	r3,r2
  808840:	e0bfff17 	ldw	r2,-4(fp)
  808844:	10c00185 	stb	r3,6(r2)
}
  808848:	e037883a 	mov	sp,fp
  80884c:	dfc00117 	ldw	ra,4(sp)
  808850:	df000017 	ldw	fp,0(sp)
  808854:	dec00204 	addi	sp,sp,8
  808858:	f800283a 	ret

0080885c <mouse_click_listener>:

void mouse_click_listener(struct SwitchController* switchController, struct CursorController* cursorController)
{
  80885c:	defffc04 	addi	sp,sp,-16
  808860:	dfc00315 	stw	ra,12(sp)
  808864:	df000215 	stw	fp,8(sp)
  808868:	df000204 	addi	fp,sp,8
  80886c:	e13ffe15 	stw	r4,-8(fp)
  808870:	e17fff15 	stw	r5,-4(fp)
	if( isBitSet(switchController->switches, 0 ) )
  808874:	e0bffe17 	ldw	r2,-8(fp)
  808878:	10800217 	ldw	r2,8(r2)
  80887c:	11003fcc 	andi	r4,r2,255
  808880:	2100201c 	xori	r4,r4,128
  808884:	213fe004 	addi	r4,r4,-128
  808888:	000b883a 	mov	r5,zero
  80888c:	080174c0 	call	80174c <isBitSet>
  808890:	10803fcc 	andi	r2,r2,255
  808894:	1005003a 	cmpeq	r2,r2,zero
  808898:	1000031e 	bne	r2,zero,8088a8 <mouse_click_listener+0x4c>
		leftMousePressed( cursorController );
  80889c:	e13fff17 	ldw	r4,-4(fp)
  8088a0:	08088f40 	call	8088f4 <leftMousePressed>
  8088a4:	00000206 	br	8088b0 <mouse_click_listener+0x54>
	else
		leftMouseReleased( cursorController );
  8088a8:	e13fff17 	ldw	r4,-4(fp)
  8088ac:	08088c40 	call	8088c4 <leftMouseReleased>
}
  8088b0:	e037883a 	mov	sp,fp
  8088b4:	dfc00117 	ldw	ra,4(sp)
  8088b8:	df000017 	ldw	fp,0(sp)
  8088bc:	dec00204 	addi	sp,sp,8
  8088c0:	f800283a 	ret

008088c4 <leftMouseReleased>:

void leftMouseReleased(struct CursorController* cursorController) {
  8088c4:	defffe04 	addi	sp,sp,-8
  8088c8:	df000115 	stw	fp,4(sp)
  8088cc:	df000104 	addi	fp,sp,4
  8088d0:	e13fff15 	stw	r4,-4(fp)
	((struct Cursor*)(cursorController->cursor->subObject))->hit = 0;
  8088d4:	e0bfff17 	ldw	r2,-4(fp)
  8088d8:	10800017 	ldw	r2,0(r2)
  8088dc:	10801817 	ldw	r2,96(r2)
  8088e0:	10000c15 	stw	zero,48(r2)
}
  8088e4:	e037883a 	mov	sp,fp
  8088e8:	df000017 	ldw	fp,0(sp)
  8088ec:	dec00104 	addi	sp,sp,4
  8088f0:	f800283a 	ret

008088f4 <leftMousePressed>:

void leftMousePressed(struct CursorController* cursorController) {
  8088f4:	defffd04 	addi	sp,sp,-12
  8088f8:	dfc00215 	stw	ra,8(sp)
  8088fc:	df000115 	stw	fp,4(sp)
  808900:	df000104 	addi	fp,sp,4
  808904:	e13fff15 	stw	r4,-4(fp)
	if( ((struct Cursor*)(cursorController->cursor->subObject))->hit == 1 )
  808908:	e0bfff17 	ldw	r2,-4(fp)
  80890c:	10800017 	ldw	r2,0(r2)
  808910:	10801817 	ldw	r2,96(r2)
  808914:	10800c17 	ldw	r2,48(r2)
  808918:	10800060 	cmpeqi	r2,r2,1
  80891c:	10000c1e 	bne	r2,zero,808950 <leftMousePressed+0x5c>
		return;
	playSoundById(audioController, LASER_SOUND, 0);
  808920:	008020f4 	movhi	r2,131
  808924:	109c8004 	addi	r2,r2,29184
  808928:	11000017 	ldw	r4,0(r2)
  80892c:	014001c4 	movi	r5,7
  808930:	000d883a 	mov	r6,zero
  808934:	08015d80 	call	8015d8 <playSoundById>
	((struct Cursor*)(cursorController->cursor->subObject))->hit = 1;
  808938:	e0bfff17 	ldw	r2,-4(fp)
  80893c:	10800017 	ldw	r2,0(r2)
  808940:	10801817 	ldw	r2,96(r2)
  808944:	1007883a 	mov	r3,r2
  808948:	00800044 	movi	r2,1
  80894c:	18800c15 	stw	r2,48(r3)
}
  808950:	e037883a 	mov	sp,fp
  808954:	dfc00117 	ldw	ra,4(sp)
  808958:	df000017 	ldw	fp,0(sp)
  80895c:	dec00204 	addi	sp,sp,8
  808960:	f800283a 	ret

00808964 <initEnv>:
#include "Env.h"
/*
 The attribute o stores all objects that exist in the environment.
 The capacity is now set to 30, which we may require more space later.
 */
struct Env* initEnv() {
  808964:	defffd04 	addi	sp,sp,-12
  808968:	dfc00215 	stw	ra,8(sp)
  80896c:	df000115 	stw	fp,4(sp)
  808970:	df000104 	addi	fp,sp,4
	struct Env* env = (struct Env*)malloc(sizeof(struct Env));
  808974:	01000704 	movi	r4,28
  808978:	0814f580 	call	814f58 <malloc>
  80897c:	e0bfff15 	stw	r2,-4(fp)
	env->o = (struct Object**)malloc(350*sizeof(struct Object*));
  808980:	01015e04 	movi	r4,1400
  808984:	0814f580 	call	814f58 <malloc>
  808988:	1007883a 	mov	r3,r2
  80898c:	e0bfff17 	ldw	r2,-4(fp)
  808990:	10c00015 	stw	r3,0(r2)
	env->size = 0;
  808994:	e0bfff17 	ldw	r2,-4(fp)
  808998:	10000115 	stw	zero,4(r2)
	env->coord[0] = env->coord[1] = 150;
  80899c:	e0ffff17 	ldw	r3,-4(fp)
  8089a0:	00802584 	movi	r2,150
  8089a4:	18800315 	stw	r2,12(r3)
  8089a8:	e0bfff17 	ldw	r2,-4(fp)
  8089ac:	10c00317 	ldw	r3,12(r2)
  8089b0:	e0bfff17 	ldw	r2,-4(fp)
  8089b4:	10c00215 	stw	r3,8(r2)
	env->redraw = false;
  8089b8:	e0bfff17 	ldw	r2,-4(fp)
  8089bc:	10000605 	stb	zero,24(r2)
	env->m = NULL;
  8089c0:	e0bfff17 	ldw	r2,-4(fp)
  8089c4:	10000515 	stw	zero,20(r2)
	return env;
  8089c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8089cc:	e037883a 	mov	sp,fp
  8089d0:	dfc00117 	ldw	ra,4(sp)
  8089d4:	df000017 	ldw	fp,0(sp)
  8089d8:	dec00204 	addi	sp,sp,8
  8089dc:	f800283a 	ret

008089e0 <setCursor>:
void setCursor(struct Env* env, struct Cursor* c) {
  8089e0:	defffd04 	addi	sp,sp,-12
  8089e4:	df000215 	stw	fp,8(sp)
  8089e8:	df000204 	addi	fp,sp,8
  8089ec:	e13ffe15 	stw	r4,-8(fp)
  8089f0:	e17fff15 	stw	r5,-4(fp)
	env->m = c;
  8089f4:	e0fffe17 	ldw	r3,-8(fp)
  8089f8:	e0bfff17 	ldw	r2,-4(fp)
  8089fc:	18800515 	stw	r2,20(r3)
}
  808a00:	e037883a 	mov	sp,fp
  808a04:	df000017 	ldw	fp,0(sp)
  808a08:	dec00104 	addi	sp,sp,4
  808a0c:	f800283a 	ret

00808a10 <addToEnv>:
/*
 * Adding an object to the environment so the object will be shown on the screen and
 * interacting with other objects
 */
void addToEnv(struct Env* e, struct Object* obj) {
  808a10:	defffc04 	addi	sp,sp,-16
  808a14:	dfc00315 	stw	ra,12(sp)
  808a18:	df000215 	stw	fp,8(sp)
  808a1c:	df000204 	addi	fp,sp,8
  808a20:	e13ffe15 	stw	r4,-8(fp)
  808a24:	e17fff15 	stw	r5,-4(fp)
	addToEnvNR(e, obj);
  808a28:	e13ffe17 	ldw	r4,-8(fp)
  808a2c:	e17fff17 	ldw	r5,-4(fp)
  808a30:	0808a540 	call	808a54 <addToEnvNR>
	obj->isRunable = 1;
  808a34:	e0ffff17 	ldw	r3,-4(fp)
  808a38:	00800044 	movi	r2,1
  808a3c:	18801715 	stw	r2,92(r3)
	//printf("objs in env: %d\n", e->size);
}
  808a40:	e037883a 	mov	sp,fp
  808a44:	dfc00117 	ldw	ra,4(sp)
  808a48:	df000017 	ldw	fp,0(sp)
  808a4c:	dec00204 	addi	sp,sp,8
  808a50:	f800283a 	ret

00808a54 <addToEnvNR>:

void addToEnvNR(struct Env* e, struct Object* obj) {
  808a54:	defffd04 	addi	sp,sp,-12
  808a58:	df000215 	stw	fp,8(sp)
  808a5c:	df000204 	addi	fp,sp,8
  808a60:	e13ffe15 	stw	r4,-8(fp)
  808a64:	e17fff15 	stw	r5,-4(fp)
	if(obj == NULL || e == NULL) return;
  808a68:	e0bfff17 	ldw	r2,-4(fp)
  808a6c:	1005003a 	cmpeq	r2,r2,zero
  808a70:	1000121e 	bne	r2,zero,808abc <addToEnvNR+0x68>
  808a74:	e0bffe17 	ldw	r2,-8(fp)
  808a78:	1004c03a 	cmpne	r2,r2,zero
  808a7c:	1000011e 	bne	r2,zero,808a84 <addToEnvNR+0x30>
  808a80:	00000e06 	br	808abc <addToEnvNR+0x68>
	e->o[e->size] = obj;
  808a84:	e0bffe17 	ldw	r2,-8(fp)
  808a88:	10c00017 	ldw	r3,0(r2)
  808a8c:	e0bffe17 	ldw	r2,-8(fp)
  808a90:	10800117 	ldw	r2,4(r2)
  808a94:	1085883a 	add	r2,r2,r2
  808a98:	1085883a 	add	r2,r2,r2
  808a9c:	1887883a 	add	r3,r3,r2
  808aa0:	e0bfff17 	ldw	r2,-4(fp)
  808aa4:	18800015 	stw	r2,0(r3)
	e->size++;
  808aa8:	e0bffe17 	ldw	r2,-8(fp)
  808aac:	10800117 	ldw	r2,4(r2)
  808ab0:	10c00044 	addi	r3,r2,1
  808ab4:	e0bffe17 	ldw	r2,-8(fp)
  808ab8:	10c00115 	stw	r3,4(r2)
	//printf("objs in env: %d\n", e->size);
}
  808abc:	e037883a 	mov	sp,fp
  808ac0:	df000017 	ldw	fp,0(sp)
  808ac4:	dec00104 	addi	sp,sp,4
  808ac8:	f800283a 	ret

00808acc <removeFromEnv>:
/*
 * Removing an object from the environment, which will stop the interaction and animation of
 * the object and clear the memory
 */
void removeFromEnv(struct Env* env, struct Object* obj) {
  808acc:	defffa04 	addi	sp,sp,-24
  808ad0:	dfc00515 	stw	ra,20(sp)
  808ad4:	df000415 	stw	fp,16(sp)
  808ad8:	df000404 	addi	fp,sp,16
  808adc:	e13ffe15 	stw	r4,-8(fp)
  808ae0:	e17fff15 	stw	r5,-4(fp)
	if(obj == NULL) {
  808ae4:	e0bfff17 	ldw	r2,-4(fp)
  808ae8:	1004c03a 	cmpne	r2,r2,zero
  808aec:	1000041e 	bne	r2,zero,808b00 <removeFromEnv+0x34>
		printf("remove null env obj\n");
  808af0:	010020f4 	movhi	r4,131
  808af4:	21211204 	addi	r4,r4,-31672
  808af8:	08158640 	call	815864 <puts>
		return;
  808afc:	00004806 	br	808c20 <removeFromEnv+0x154>
	}
	int i, found = 0;
  808b00:	e03ffc15 	stw	zero,-16(fp)
	for(i = 0; i < env->size; i++) {
  808b04:	e03ffd15 	stw	zero,-12(fp)
  808b08:	00002906 	br	808bb0 <removeFromEnv+0xe4>
		if(found == 1) {
  808b0c:	e0bffc17 	ldw	r2,-16(fp)
  808b10:	10800058 	cmpnei	r2,r2,1
  808b14:	1000101e 	bne	r2,zero,808b58 <removeFromEnv+0x8c>
			env->o[i-1] = env->o[i];
  808b18:	e0bffe17 	ldw	r2,-8(fp)
  808b1c:	10c00017 	ldw	r3,0(r2)
  808b20:	e0bffd17 	ldw	r2,-12(fp)
  808b24:	1085883a 	add	r2,r2,r2
  808b28:	1085883a 	add	r2,r2,r2
  808b2c:	1885883a 	add	r2,r3,r2
  808b30:	10ffff04 	addi	r3,r2,-4
  808b34:	e0bffe17 	ldw	r2,-8(fp)
  808b38:	11000017 	ldw	r4,0(r2)
  808b3c:	e0bffd17 	ldw	r2,-12(fp)
  808b40:	1085883a 	add	r2,r2,r2
  808b44:	1085883a 	add	r2,r2,r2
  808b48:	2085883a 	add	r2,r4,r2
  808b4c:	10800017 	ldw	r2,0(r2)
  808b50:	18800015 	stw	r2,0(r3)
  808b54:	00001306 	br	808ba4 <removeFromEnv+0xd8>
		} else if(env->o[i] == obj) {
  808b58:	e0bffe17 	ldw	r2,-8(fp)
  808b5c:	10c00017 	ldw	r3,0(r2)
  808b60:	e0bffd17 	ldw	r2,-12(fp)
  808b64:	1085883a 	add	r2,r2,r2
  808b68:	1085883a 	add	r2,r2,r2
  808b6c:	1885883a 	add	r2,r3,r2
  808b70:	10c00017 	ldw	r3,0(r2)
  808b74:	e0bfff17 	ldw	r2,-4(fp)
  808b78:	18800a1e 	bne	r3,r2,808ba4 <removeFromEnv+0xd8>
			found = 1;
  808b7c:	00800044 	movi	r2,1
  808b80:	e0bffc15 	stw	r2,-16(fp)
			env->o[i]->isRunable = 0;
  808b84:	e0bffe17 	ldw	r2,-8(fp)
  808b88:	10c00017 	ldw	r3,0(r2)
  808b8c:	e0bffd17 	ldw	r2,-12(fp)
  808b90:	1085883a 	add	r2,r2,r2
  808b94:	1085883a 	add	r2,r2,r2
  808b98:	1885883a 	add	r2,r3,r2
  808b9c:	10800017 	ldw	r2,0(r2)
  808ba0:	10001715 	stw	zero,92(r2)
	if(obj == NULL) {
		printf("remove null env obj\n");
		return;
	}
	int i, found = 0;
	for(i = 0; i < env->size; i++) {
  808ba4:	e0bffd17 	ldw	r2,-12(fp)
  808ba8:	10800044 	addi	r2,r2,1
  808bac:	e0bffd15 	stw	r2,-12(fp)
  808bb0:	e0bffe17 	ldw	r2,-8(fp)
  808bb4:	10c00117 	ldw	r3,4(r2)
  808bb8:	e0bffd17 	ldw	r2,-12(fp)
  808bbc:	10ffd316 	blt	r2,r3,808b0c <removeFromEnv+0x40>
		} else if(env->o[i] == obj) {
			found = 1;
			env->o[i]->isRunable = 0;
		}
	}
	if(found == 1) {
  808bc0:	e0bffc17 	ldw	r2,-16(fp)
  808bc4:	10800058 	cmpnei	r2,r2,1
  808bc8:	10000e1e 	bne	r2,zero,808c04 <removeFromEnv+0x138>
		env->size--;
  808bcc:	e0bffe17 	ldw	r2,-8(fp)
  808bd0:	10800117 	ldw	r2,4(r2)
  808bd4:	10ffffc4 	addi	r3,r2,-1
  808bd8:	e0bffe17 	ldw	r2,-8(fp)
  808bdc:	10c00115 	stw	r3,4(r2)
		env->o[env->size] = NULL;
  808be0:	e0bffe17 	ldw	r2,-8(fp)
  808be4:	10c00017 	ldw	r3,0(r2)
  808be8:	e0bffe17 	ldw	r2,-8(fp)
  808bec:	10800117 	ldw	r2,4(r2)
  808bf0:	1085883a 	add	r2,r2,r2
  808bf4:	1085883a 	add	r2,r2,r2
  808bf8:	1885883a 	add	r2,r3,r2
  808bfc:	10000015 	stw	zero,0(r2)
  808c00:	00000506 	br	808c18 <removeFromEnv+0x14c>
	} else {
		printf("objs in env: %d\n", env->size);
  808c04:	e0bffe17 	ldw	r2,-8(fp)
  808c08:	11400117 	ldw	r5,4(r2)
  808c0c:	010020f4 	movhi	r4,131
  808c10:	21211704 	addi	r4,r4,-31652
  808c14:	081574c0 	call	81574c <printf>
	}
	killObject(obj);
  808c18:	e13fff17 	ldw	r4,-4(fp)
  808c1c:	08100380 	call	810038 <killObject>
}
  808c20:	e037883a 	mov	sp,fp
  808c24:	dfc00117 	ldw	ra,4(sp)
  808c28:	df000017 	ldw	fp,0(sp)
  808c2c:	dec00204 	addi	sp,sp,8
  808c30:	f800283a 	ret

00808c34 <removeFromEnvOnly>:

void removeFromEnvOnly(struct Env* env, struct Object* this){
  808c34:	defff704 	addi	sp,sp,-36
  808c38:	dfc00815 	stw	ra,32(sp)
  808c3c:	df000715 	stw	fp,28(sp)
  808c40:	df000704 	addi	fp,sp,28
  808c44:	e13ffe15 	stw	r4,-8(fp)
  808c48:	e17fff15 	stw	r5,-4(fp)
	if(this == NULL) {
  808c4c:	e0bfff17 	ldw	r2,-4(fp)
  808c50:	1004c03a 	cmpne	r2,r2,zero
  808c54:	1000041e 	bne	r2,zero,808c68 <removeFromEnvOnly+0x34>
		printf("remove null env obj\n");
  808c58:	010020f4 	movhi	r4,131
  808c5c:	21211204 	addi	r4,r4,-31672
  808c60:	08158640 	call	815864 <puts>
		return;
  808c64:	00005b06 	br	808dd4 <removeFromEnvOnly+0x1a0>
	}
	int i, found = 0;
  808c68:	e03ffc15 	stw	zero,-16(fp)
	for(i = 0; i < env->size; i++) {
  808c6c:	e03ffd15 	stw	zero,-12(fp)
  808c70:	00002906 	br	808d18 <removeFromEnvOnly+0xe4>
		if(found == 1) {
  808c74:	e0bffc17 	ldw	r2,-16(fp)
  808c78:	10800058 	cmpnei	r2,r2,1
  808c7c:	1000101e 	bne	r2,zero,808cc0 <removeFromEnvOnly+0x8c>
			env->o[i-1] = env->o[i];
  808c80:	e0bffe17 	ldw	r2,-8(fp)
  808c84:	10c00017 	ldw	r3,0(r2)
  808c88:	e0bffd17 	ldw	r2,-12(fp)
  808c8c:	1085883a 	add	r2,r2,r2
  808c90:	1085883a 	add	r2,r2,r2
  808c94:	1885883a 	add	r2,r3,r2
  808c98:	10ffff04 	addi	r3,r2,-4
  808c9c:	e0bffe17 	ldw	r2,-8(fp)
  808ca0:	11000017 	ldw	r4,0(r2)
  808ca4:	e0bffd17 	ldw	r2,-12(fp)
  808ca8:	1085883a 	add	r2,r2,r2
  808cac:	1085883a 	add	r2,r2,r2
  808cb0:	2085883a 	add	r2,r4,r2
  808cb4:	10800017 	ldw	r2,0(r2)
  808cb8:	18800015 	stw	r2,0(r3)
  808cbc:	00001306 	br	808d0c <removeFromEnvOnly+0xd8>
		} else if(env->o[i] == this) {
  808cc0:	e0bffe17 	ldw	r2,-8(fp)
  808cc4:	10c00017 	ldw	r3,0(r2)
  808cc8:	e0bffd17 	ldw	r2,-12(fp)
  808ccc:	1085883a 	add	r2,r2,r2
  808cd0:	1085883a 	add	r2,r2,r2
  808cd4:	1885883a 	add	r2,r3,r2
  808cd8:	10c00017 	ldw	r3,0(r2)
  808cdc:	e0bfff17 	ldw	r2,-4(fp)
  808ce0:	18800a1e 	bne	r3,r2,808d0c <removeFromEnvOnly+0xd8>
			found = 1;
  808ce4:	00800044 	movi	r2,1
  808ce8:	e0bffc15 	stw	r2,-16(fp)
			env->o[i]->isRunable = 0;
  808cec:	e0bffe17 	ldw	r2,-8(fp)
  808cf0:	10c00017 	ldw	r3,0(r2)
  808cf4:	e0bffd17 	ldw	r2,-12(fp)
  808cf8:	1085883a 	add	r2,r2,r2
  808cfc:	1085883a 	add	r2,r2,r2
  808d00:	1885883a 	add	r2,r3,r2
  808d04:	10800017 	ldw	r2,0(r2)
  808d08:	10001715 	stw	zero,92(r2)
	if(this == NULL) {
		printf("remove null env obj\n");
		return;
	}
	int i, found = 0;
	for(i = 0; i < env->size; i++) {
  808d0c:	e0bffd17 	ldw	r2,-12(fp)
  808d10:	10800044 	addi	r2,r2,1
  808d14:	e0bffd15 	stw	r2,-12(fp)
  808d18:	e0bffe17 	ldw	r2,-8(fp)
  808d1c:	10c00117 	ldw	r3,4(r2)
  808d20:	e0bffd17 	ldw	r2,-12(fp)
  808d24:	10ffd316 	blt	r2,r3,808c74 <removeFromEnvOnly+0x40>
		} else if(env->o[i] == this) {
			found = 1;
			env->o[i]->isRunable = 0;
		}
	}
	if(found == 1) {
  808d28:	e0bffc17 	ldw	r2,-16(fp)
  808d2c:	10800058 	cmpnei	r2,r2,1
  808d30:	10000e1e 	bne	r2,zero,808d6c <removeFromEnvOnly+0x138>
		env->size--;
  808d34:	e0bffe17 	ldw	r2,-8(fp)
  808d38:	10800117 	ldw	r2,4(r2)
  808d3c:	10ffffc4 	addi	r3,r2,-1
  808d40:	e0bffe17 	ldw	r2,-8(fp)
  808d44:	10c00115 	stw	r3,4(r2)
		env->o[env->size] = NULL;
  808d48:	e0bffe17 	ldw	r2,-8(fp)
  808d4c:	10c00017 	ldw	r3,0(r2)
  808d50:	e0bffe17 	ldw	r2,-8(fp)
  808d54:	10800117 	ldw	r2,4(r2)
  808d58:	1085883a 	add	r2,r2,r2
  808d5c:	1085883a 	add	r2,r2,r2
  808d60:	1885883a 	add	r2,r3,r2
  808d64:	10000015 	stw	zero,0(r2)
  808d68:	00000506 	br	808d80 <removeFromEnvOnly+0x14c>
	} else {
	printf("objs in env: %d\n", env->size);}
  808d6c:	e0bffe17 	ldw	r2,-8(fp)
  808d70:	11400117 	ldw	r5,4(r2)
  808d74:	010020f4 	movhi	r4,131
  808d78:	21211704 	addi	r4,r4,-31652
  808d7c:	081574c0 	call	81574c <printf>
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer,this->x, this->y, this->x+this->scale, this->y+this->scale, 0x0000, 0);
  808d80:	008020f4 	movhi	r2,131
  808d84:	109c8a04 	addi	r2,r2,29224
  808d88:	11000017 	ldw	r4,0(r2)
  808d8c:	e0bfff17 	ldw	r2,-4(fp)
  808d90:	11400017 	ldw	r5,0(r2)
  808d94:	e0bfff17 	ldw	r2,-4(fp)
  808d98:	11800117 	ldw	r6,4(r2)
  808d9c:	e0bfff17 	ldw	r2,-4(fp)
  808da0:	10c00017 	ldw	r3,0(r2)
  808da4:	e0bfff17 	ldw	r2,-4(fp)
  808da8:	10800217 	ldw	r2,8(r2)
  808dac:	188f883a 	add	r7,r3,r2
  808db0:	e0bfff17 	ldw	r2,-4(fp)
  808db4:	10c00117 	ldw	r3,4(r2)
  808db8:	e0bfff17 	ldw	r2,-4(fp)
  808dbc:	10800217 	ldw	r2,8(r2)
  808dc0:	1885883a 	add	r2,r3,r2
  808dc4:	d8800015 	stw	r2,0(sp)
  808dc8:	d8000115 	stw	zero,4(sp)
  808dcc:	d8000215 	stw	zero,8(sp)
  808dd0:	0821c940 	call	821c94 <alt_up_pixel_buffer_dma_draw_box>
}
  808dd4:	e037883a 	mov	sp,fp
  808dd8:	dfc00117 	ldw	ra,4(sp)
  808ddc:	df000017 	ldw	fp,0(sp)
  808de0:	dec00204 	addi	sp,sp,8
  808de4:	f800283a 	ret

00808de8 <addCollisionToEnv>:
void addCollisionToEnv(struct Env* this, struct Collidable* col) {
  808de8:	defffd04 	addi	sp,sp,-12
  808dec:	df000215 	stw	fp,8(sp)
  808df0:	df000204 	addi	fp,sp,8
  808df4:	e13ffe15 	stw	r4,-8(fp)
  808df8:	e17fff15 	stw	r5,-4(fp)
	this->col = col;
  808dfc:	e0fffe17 	ldw	r3,-8(fp)
  808e00:	e0bfff17 	ldw	r2,-4(fp)
  808e04:	18800415 	stw	r2,16(r3)
}
  808e08:	e037883a 	mov	sp,fp
  808e0c:	df000017 	ldw	fp,0(sp)
  808e10:	dec00104 	addi	sp,sp,4
  808e14:	f800283a 	ret

00808e18 <initFrame>:
 *      Author: Danny
 */

#include "Frame.h"

struct Frame* initFrame(int x1, int y1, int x2, int y2, struct Env* e) {
  808e18:	defff904 	addi	sp,sp,-28
  808e1c:	dfc00615 	stw	ra,24(sp)
  808e20:	df000515 	stw	fp,20(sp)
  808e24:	df000504 	addi	fp,sp,20
  808e28:	e13ffc15 	stw	r4,-16(fp)
  808e2c:	e17ffd15 	stw	r5,-12(fp)
  808e30:	e1bffe15 	stw	r6,-8(fp)
  808e34:	e1ffff15 	stw	r7,-4(fp)
	struct Frame* f = (struct Frame*)malloc(sizeof(struct Frame));
  808e38:	01001004 	movi	r4,64
  808e3c:	0814f580 	call	814f58 <malloc>
  808e40:	e0bffb15 	stw	r2,-20(fp)
	f->super = NULL;
  808e44:	e0bffb17 	ldw	r2,-20(fp)
  808e48:	10000c15 	stw	zero,48(r2)
	f->ltx = x1;
  808e4c:	e0fffb17 	ldw	r3,-20(fp)
  808e50:	e0bffc17 	ldw	r2,-16(fp)
  808e54:	18800015 	stw	r2,0(r3)
	f->lty = y1;
  808e58:	e0fffb17 	ldw	r3,-20(fp)
  808e5c:	e0bffd17 	ldw	r2,-12(fp)
  808e60:	18800115 	stw	r2,4(r3)
	f->rbx = x2;
  808e64:	e0fffb17 	ldw	r3,-20(fp)
  808e68:	e0bffe17 	ldw	r2,-8(fp)
  808e6c:	18800215 	stw	r2,8(r3)
	f->rby = y2;
  808e70:	e0fffb17 	ldw	r3,-20(fp)
  808e74:	e0bfff17 	ldw	r2,-4(fp)
  808e78:	18800315 	stw	r2,12(r3)
	f->prev_line = 0;
  808e7c:	e0bffb17 	ldw	r2,-20(fp)
  808e80:	10000515 	stw	zero,20(r2)
	f->statesLine = 0;
  808e84:	e0bffb17 	ldw	r2,-20(fp)
  808e88:	10000415 	stw	zero,16(r2)
	f->elements_size = f->buttons_size = 0;
  808e8c:	e0bffb17 	ldw	r2,-20(fp)
  808e90:	10000715 	stw	zero,28(r2)
  808e94:	e0bffb17 	ldw	r2,-20(fp)
  808e98:	10c00717 	ldw	r3,28(r2)
  808e9c:	e0bffb17 	ldw	r2,-20(fp)
  808ea0:	10c00615 	stw	r3,24(r2)
	f->total_elements_size = 0;
  808ea4:	e0bffb17 	ldw	r2,-20(fp)
  808ea8:	10000815 	stw	zero,32(r2)
	f->elements = NULL;
  808eac:	e0bffb17 	ldw	r2,-20(fp)
  808eb0:	10000d15 	stw	zero,52(r2)
	f->redrawing = false;
  808eb4:	e0bffb17 	ldw	r2,-20(fp)
  808eb8:	10000b05 	stb	zero,44(r2)
	f->env = e;
  808ebc:	e0fffb17 	ldw	r3,-20(fp)
  808ec0:	e0800217 	ldw	r2,8(fp)
  808ec4:	18800e15 	stw	r2,56(r3)
	f->buttons = NULL;
  808ec8:	e0bffb17 	ldw	r2,-20(fp)
  808ecc:	10000915 	stw	zero,36(r2)
	return f;
  808ed0:	e0bffb17 	ldw	r2,-20(fp)
}
  808ed4:	e037883a 	mov	sp,fp
  808ed8:	dfc00117 	ldw	ra,4(sp)
  808edc:	df000017 	ldw	fp,0(sp)
  808ee0:	dec00204 	addi	sp,sp,8
  808ee4:	f800283a 	ret

00808ee8 <initMainMenu>:
struct Frame* initMainMenu(struct Env* p, struct Box3D* box, struct Box3D* box1, struct Box3D* box2, struct Cursor* mouse) {
  808ee8:	defff004 	addi	sp,sp,-64
  808eec:	dfc00f15 	stw	ra,60(sp)
  808ef0:	df000e15 	stw	fp,56(sp)
  808ef4:	dcc00d15 	stw	r19,52(sp)
  808ef8:	dc800c15 	stw	r18,48(sp)
  808efc:	dc400b15 	stw	r17,44(sp)
  808f00:	dc000a15 	stw	r16,40(sp)
  808f04:	df000a04 	addi	fp,sp,40
  808f08:	e13ffc15 	stw	r4,-16(fp)
  808f0c:	e17ffd15 	stw	r5,-12(fp)
  808f10:	e1bffe15 	stw	r6,-8(fp)
  808f14:	e1ffff15 	stw	r7,-4(fp)
	struct Frame* f = initFrame(0, 0, 320, 240, p);
  808f18:	e0bffc17 	ldw	r2,-16(fp)
  808f1c:	d8800015 	stw	r2,0(sp)
  808f20:	0009883a 	mov	r4,zero
  808f24:	000b883a 	mov	r5,zero
  808f28:	01805004 	movi	r6,320
  808f2c:	01c03c04 	movi	r7,240
  808f30:	0808e180 	call	808e18 <initFrame>
  808f34:	e0bffb15 	stw	r2,-20(fp)
	f->buttons = (struct Buttons**)malloc(sizeof(struct Button*)*3);
  808f38:	01000304 	movi	r4,12
  808f3c:	0814f580 	call	814f58 <malloc>
  808f40:	1007883a 	mov	r3,r2
  808f44:	e0bffb17 	ldw	r2,-20(fp)
  808f48:	10c00915 	stw	r3,36(r2)
	f->buttons[0]= initButton(cameraX + (box->x-cameraX)*cameraZ/(cameraZ+box->z), cameraY - (cameraY-box->y)*cameraZ/(cameraZ+box->z), 10, NULL, NULL, p);
  808f4c:	e0bffb17 	ldw	r2,-20(fp)
  808f50:	14400917 	ldw	r17,36(r2)
  808f54:	008020f4 	movhi	r2,131
  808f58:	109c8404 	addi	r2,r2,29200
  808f5c:	11000017 	ldw	r4,0(r2)
  808f60:	08135a40 	call	8135a4 <__floatsisf>
  808f64:	1025883a 	mov	r18,r2
  808f68:	e0bffd17 	ldw	r2,-12(fp)
  808f6c:	14000017 	ldw	r16,0(r2)
  808f70:	008020f4 	movhi	r2,131
  808f74:	109c8404 	addi	r2,r2,29200
  808f78:	11000017 	ldw	r4,0(r2)
  808f7c:	08135a40 	call	8135a4 <__floatsisf>
  808f80:	8009883a 	mov	r4,r16
  808f84:	100b883a 	mov	r5,r2
  808f88:	0812f9c0 	call	812f9c <__subsf3>
  808f8c:	1021883a 	mov	r16,r2
  808f90:	008020f4 	movhi	r2,131
  808f94:	109c8904 	addi	r2,r2,29220
  808f98:	11000017 	ldw	r4,0(r2)
  808f9c:	08135a40 	call	8135a4 <__floatsisf>
  808fa0:	8009883a 	mov	r4,r16
  808fa4:	100b883a 	mov	r5,r2
  808fa8:	08130700 	call	813070 <__mulsf3>
  808fac:	1021883a 	mov	r16,r2
  808fb0:	008020f4 	movhi	r2,131
  808fb4:	109c8904 	addi	r2,r2,29220
  808fb8:	11000017 	ldw	r4,0(r2)
  808fbc:	08135a40 	call	8135a4 <__floatsisf>
  808fc0:	1007883a 	mov	r3,r2
  808fc4:	e0bffd17 	ldw	r2,-12(fp)
  808fc8:	10800217 	ldw	r2,8(r2)
  808fcc:	1809883a 	mov	r4,r3
  808fd0:	100b883a 	mov	r5,r2
  808fd4:	081300c0 	call	81300c <__addsf3>
  808fd8:	8009883a 	mov	r4,r16
  808fdc:	100b883a 	mov	r5,r2
  808fe0:	08132500 	call	813250 <__divsf3>
  808fe4:	9009883a 	mov	r4,r18
  808fe8:	100b883a 	mov	r5,r2
  808fec:	081300c0 	call	81300c <__addsf3>
  808ff0:	1009883a 	mov	r4,r2
  808ff4:	081363c0 	call	81363c <__fixsfsi>
  808ff8:	1025883a 	mov	r18,r2
  808ffc:	008020f4 	movhi	r2,131
  809000:	109c8d04 	addi	r2,r2,29236
  809004:	11000017 	ldw	r4,0(r2)
  809008:	08135a40 	call	8135a4 <__floatsisf>
  80900c:	1027883a 	mov	r19,r2
  809010:	008020f4 	movhi	r2,131
  809014:	109c8d04 	addi	r2,r2,29236
  809018:	11000017 	ldw	r4,0(r2)
  80901c:	08135a40 	call	8135a4 <__floatsisf>
  809020:	1007883a 	mov	r3,r2
  809024:	e0bffd17 	ldw	r2,-12(fp)
  809028:	10800117 	ldw	r2,4(r2)
  80902c:	1809883a 	mov	r4,r3
  809030:	100b883a 	mov	r5,r2
  809034:	0812f9c0 	call	812f9c <__subsf3>
  809038:	1021883a 	mov	r16,r2
  80903c:	008020f4 	movhi	r2,131
  809040:	109c8904 	addi	r2,r2,29220
  809044:	11000017 	ldw	r4,0(r2)
  809048:	08135a40 	call	8135a4 <__floatsisf>
  80904c:	8009883a 	mov	r4,r16
  809050:	100b883a 	mov	r5,r2
  809054:	08130700 	call	813070 <__mulsf3>
  809058:	1021883a 	mov	r16,r2
  80905c:	008020f4 	movhi	r2,131
  809060:	109c8904 	addi	r2,r2,29220
  809064:	11000017 	ldw	r4,0(r2)
  809068:	08135a40 	call	8135a4 <__floatsisf>
  80906c:	1007883a 	mov	r3,r2
  809070:	e0bffd17 	ldw	r2,-12(fp)
  809074:	10800217 	ldw	r2,8(r2)
  809078:	1809883a 	mov	r4,r3
  80907c:	100b883a 	mov	r5,r2
  809080:	081300c0 	call	81300c <__addsf3>
  809084:	8009883a 	mov	r4,r16
  809088:	100b883a 	mov	r5,r2
  80908c:	08132500 	call	813250 <__divsf3>
  809090:	9809883a 	mov	r4,r19
  809094:	100b883a 	mov	r5,r2
  809098:	0812f9c0 	call	812f9c <__subsf3>
  80909c:	1009883a 	mov	r4,r2
  8090a0:	081363c0 	call	81363c <__fixsfsi>
  8090a4:	100b883a 	mov	r5,r2
  8090a8:	d8000015 	stw	zero,0(sp)
  8090ac:	e0bffc17 	ldw	r2,-16(fp)
  8090b0:	d8800115 	stw	r2,4(sp)
  8090b4:	9009883a 	mov	r4,r18
  8090b8:	01800284 	movi	r6,10
  8090bc:	000f883a 	mov	r7,zero
  8090c0:	0805f780 	call	805f78 <initButton>
  8090c4:	88800015 	stw	r2,0(r17)
	f->buttons[0]->obj1 = box;
  8090c8:	e0bffb17 	ldw	r2,-20(fp)
  8090cc:	10800917 	ldw	r2,36(r2)
  8090d0:	10c00017 	ldw	r3,0(r2)
  8090d4:	e0bffd17 	ldw	r2,-12(fp)
  8090d8:	18800315 	stw	r2,12(r3)
	int i;
	setTxtButton(f->buttons[0], 13, 20, 15, "Start", 0, 0, 0);
  8090dc:	e0bffb17 	ldw	r2,-20(fp)
  8090e0:	10800917 	ldw	r2,36(r2)
  8090e4:	11000017 	ldw	r4,0(r2)
  8090e8:	008020f4 	movhi	r2,131
  8090ec:	10a11c04 	addi	r2,r2,-31632
  8090f0:	d8800015 	stw	r2,0(sp)
  8090f4:	d8000115 	stw	zero,4(sp)
  8090f8:	d8000215 	stw	zero,8(sp)
  8090fc:	d8000315 	stw	zero,12(sp)
  809100:	01400344 	movi	r5,13
  809104:	01800504 	movi	r6,20
  809108:	01c003c4 	movi	r7,15
  80910c:	08061940 	call	806194 <setTxtButton>
	f->buttons[1] = initButton(cameraX + (box1->x-cameraX)*cameraZ/(cameraZ+box1->z), cameraY - (cameraY-box1->y)*cameraZ/(cameraZ+box1->z), 10, NULL, NULL, p);
  809110:	e0bffb17 	ldw	r2,-20(fp)
  809114:	10800917 	ldw	r2,36(r2)
  809118:	14400104 	addi	r17,r2,4
  80911c:	008020f4 	movhi	r2,131
  809120:	109c8404 	addi	r2,r2,29200
  809124:	11000017 	ldw	r4,0(r2)
  809128:	08135a40 	call	8135a4 <__floatsisf>
  80912c:	1025883a 	mov	r18,r2
  809130:	e0bffe17 	ldw	r2,-8(fp)
  809134:	14000017 	ldw	r16,0(r2)
  809138:	008020f4 	movhi	r2,131
  80913c:	109c8404 	addi	r2,r2,29200
  809140:	11000017 	ldw	r4,0(r2)
  809144:	08135a40 	call	8135a4 <__floatsisf>
  809148:	8009883a 	mov	r4,r16
  80914c:	100b883a 	mov	r5,r2
  809150:	0812f9c0 	call	812f9c <__subsf3>
  809154:	1021883a 	mov	r16,r2
  809158:	008020f4 	movhi	r2,131
  80915c:	109c8904 	addi	r2,r2,29220
  809160:	11000017 	ldw	r4,0(r2)
  809164:	08135a40 	call	8135a4 <__floatsisf>
  809168:	8009883a 	mov	r4,r16
  80916c:	100b883a 	mov	r5,r2
  809170:	08130700 	call	813070 <__mulsf3>
  809174:	1021883a 	mov	r16,r2
  809178:	008020f4 	movhi	r2,131
  80917c:	109c8904 	addi	r2,r2,29220
  809180:	11000017 	ldw	r4,0(r2)
  809184:	08135a40 	call	8135a4 <__floatsisf>
  809188:	1007883a 	mov	r3,r2
  80918c:	e0bffe17 	ldw	r2,-8(fp)
  809190:	10800217 	ldw	r2,8(r2)
  809194:	1809883a 	mov	r4,r3
  809198:	100b883a 	mov	r5,r2
  80919c:	081300c0 	call	81300c <__addsf3>
  8091a0:	8009883a 	mov	r4,r16
  8091a4:	100b883a 	mov	r5,r2
  8091a8:	08132500 	call	813250 <__divsf3>
  8091ac:	9009883a 	mov	r4,r18
  8091b0:	100b883a 	mov	r5,r2
  8091b4:	081300c0 	call	81300c <__addsf3>
  8091b8:	1009883a 	mov	r4,r2
  8091bc:	081363c0 	call	81363c <__fixsfsi>
  8091c0:	1025883a 	mov	r18,r2
  8091c4:	008020f4 	movhi	r2,131
  8091c8:	109c8d04 	addi	r2,r2,29236
  8091cc:	11000017 	ldw	r4,0(r2)
  8091d0:	08135a40 	call	8135a4 <__floatsisf>
  8091d4:	1027883a 	mov	r19,r2
  8091d8:	008020f4 	movhi	r2,131
  8091dc:	109c8d04 	addi	r2,r2,29236
  8091e0:	11000017 	ldw	r4,0(r2)
  8091e4:	08135a40 	call	8135a4 <__floatsisf>
  8091e8:	1007883a 	mov	r3,r2
  8091ec:	e0bffe17 	ldw	r2,-8(fp)
  8091f0:	10800117 	ldw	r2,4(r2)
  8091f4:	1809883a 	mov	r4,r3
  8091f8:	100b883a 	mov	r5,r2
  8091fc:	0812f9c0 	call	812f9c <__subsf3>
  809200:	1021883a 	mov	r16,r2
  809204:	008020f4 	movhi	r2,131
  809208:	109c8904 	addi	r2,r2,29220
  80920c:	11000017 	ldw	r4,0(r2)
  809210:	08135a40 	call	8135a4 <__floatsisf>
  809214:	8009883a 	mov	r4,r16
  809218:	100b883a 	mov	r5,r2
  80921c:	08130700 	call	813070 <__mulsf3>
  809220:	1021883a 	mov	r16,r2
  809224:	008020f4 	movhi	r2,131
  809228:	109c8904 	addi	r2,r2,29220
  80922c:	11000017 	ldw	r4,0(r2)
  809230:	08135a40 	call	8135a4 <__floatsisf>
  809234:	1007883a 	mov	r3,r2
  809238:	e0bffe17 	ldw	r2,-8(fp)
  80923c:	10800217 	ldw	r2,8(r2)
  809240:	1809883a 	mov	r4,r3
  809244:	100b883a 	mov	r5,r2
  809248:	081300c0 	call	81300c <__addsf3>
  80924c:	8009883a 	mov	r4,r16
  809250:	100b883a 	mov	r5,r2
  809254:	08132500 	call	813250 <__divsf3>
  809258:	9809883a 	mov	r4,r19
  80925c:	100b883a 	mov	r5,r2
  809260:	0812f9c0 	call	812f9c <__subsf3>
  809264:	1009883a 	mov	r4,r2
  809268:	081363c0 	call	81363c <__fixsfsi>
  80926c:	100b883a 	mov	r5,r2
  809270:	d8000015 	stw	zero,0(sp)
  809274:	e0bffc17 	ldw	r2,-16(fp)
  809278:	d8800115 	stw	r2,4(sp)
  80927c:	9009883a 	mov	r4,r18
  809280:	01800284 	movi	r6,10
  809284:	000f883a 	mov	r7,zero
  809288:	0805f780 	call	805f78 <initButton>
  80928c:	88800015 	stw	r2,0(r17)
	f->buttons[1]->obj1 = box1;
  809290:	e0bffb17 	ldw	r2,-20(fp)
  809294:	10800917 	ldw	r2,36(r2)
  809298:	10800104 	addi	r2,r2,4
  80929c:	10c00017 	ldw	r3,0(r2)
  8092a0:	e0bffe17 	ldw	r2,-8(fp)
  8092a4:	18800315 	stw	r2,12(r3)
	setTxtButton(f->buttons[1], 14, 20, 15, "Score", 0, 0, 0);
  8092a8:	e0bffb17 	ldw	r2,-20(fp)
  8092ac:	10800917 	ldw	r2,36(r2)
  8092b0:	10800104 	addi	r2,r2,4
  8092b4:	11000017 	ldw	r4,0(r2)
  8092b8:	008020f4 	movhi	r2,131
  8092bc:	10a11e04 	addi	r2,r2,-31624
  8092c0:	d8800015 	stw	r2,0(sp)
  8092c4:	d8000115 	stw	zero,4(sp)
  8092c8:	d8000215 	stw	zero,8(sp)
  8092cc:	d8000315 	stw	zero,12(sp)
  8092d0:	01400384 	movi	r5,14
  8092d4:	01800504 	movi	r6,20
  8092d8:	01c003c4 	movi	r7,15
  8092dc:	08061940 	call	806194 <setTxtButton>
	f->buttons[2] = initButton(cameraX + (box2->x-cameraX)*cameraZ/(cameraZ+box2->z), cameraY - (cameraY-box2->y)*cameraZ/(cameraZ+box2->z), 10, NULL, NULL, p);
  8092e0:	e0bffb17 	ldw	r2,-20(fp)
  8092e4:	10800917 	ldw	r2,36(r2)
  8092e8:	14400204 	addi	r17,r2,8
  8092ec:	008020f4 	movhi	r2,131
  8092f0:	109c8404 	addi	r2,r2,29200
  8092f4:	11000017 	ldw	r4,0(r2)
  8092f8:	08135a40 	call	8135a4 <__floatsisf>
  8092fc:	1025883a 	mov	r18,r2
  809300:	e0bfff17 	ldw	r2,-4(fp)
  809304:	14000017 	ldw	r16,0(r2)
  809308:	008020f4 	movhi	r2,131
  80930c:	109c8404 	addi	r2,r2,29200
  809310:	11000017 	ldw	r4,0(r2)
  809314:	08135a40 	call	8135a4 <__floatsisf>
  809318:	8009883a 	mov	r4,r16
  80931c:	100b883a 	mov	r5,r2
  809320:	0812f9c0 	call	812f9c <__subsf3>
  809324:	1021883a 	mov	r16,r2
  809328:	008020f4 	movhi	r2,131
  80932c:	109c8904 	addi	r2,r2,29220
  809330:	11000017 	ldw	r4,0(r2)
  809334:	08135a40 	call	8135a4 <__floatsisf>
  809338:	8009883a 	mov	r4,r16
  80933c:	100b883a 	mov	r5,r2
  809340:	08130700 	call	813070 <__mulsf3>
  809344:	1021883a 	mov	r16,r2
  809348:	008020f4 	movhi	r2,131
  80934c:	109c8904 	addi	r2,r2,29220
  809350:	11000017 	ldw	r4,0(r2)
  809354:	08135a40 	call	8135a4 <__floatsisf>
  809358:	1007883a 	mov	r3,r2
  80935c:	e0bfff17 	ldw	r2,-4(fp)
  809360:	10800217 	ldw	r2,8(r2)
  809364:	1809883a 	mov	r4,r3
  809368:	100b883a 	mov	r5,r2
  80936c:	081300c0 	call	81300c <__addsf3>
  809370:	8009883a 	mov	r4,r16
  809374:	100b883a 	mov	r5,r2
  809378:	08132500 	call	813250 <__divsf3>
  80937c:	9009883a 	mov	r4,r18
  809380:	100b883a 	mov	r5,r2
  809384:	081300c0 	call	81300c <__addsf3>
  809388:	1009883a 	mov	r4,r2
  80938c:	081363c0 	call	81363c <__fixsfsi>
  809390:	1025883a 	mov	r18,r2
  809394:	008020f4 	movhi	r2,131
  809398:	109c8d04 	addi	r2,r2,29236
  80939c:	11000017 	ldw	r4,0(r2)
  8093a0:	08135a40 	call	8135a4 <__floatsisf>
  8093a4:	1027883a 	mov	r19,r2
  8093a8:	008020f4 	movhi	r2,131
  8093ac:	109c8d04 	addi	r2,r2,29236
  8093b0:	11000017 	ldw	r4,0(r2)
  8093b4:	08135a40 	call	8135a4 <__floatsisf>
  8093b8:	1007883a 	mov	r3,r2
  8093bc:	e0bfff17 	ldw	r2,-4(fp)
  8093c0:	10800117 	ldw	r2,4(r2)
  8093c4:	1809883a 	mov	r4,r3
  8093c8:	100b883a 	mov	r5,r2
  8093cc:	0812f9c0 	call	812f9c <__subsf3>
  8093d0:	1021883a 	mov	r16,r2
  8093d4:	008020f4 	movhi	r2,131
  8093d8:	109c8904 	addi	r2,r2,29220
  8093dc:	11000017 	ldw	r4,0(r2)
  8093e0:	08135a40 	call	8135a4 <__floatsisf>
  8093e4:	8009883a 	mov	r4,r16
  8093e8:	100b883a 	mov	r5,r2
  8093ec:	08130700 	call	813070 <__mulsf3>
  8093f0:	1021883a 	mov	r16,r2
  8093f4:	008020f4 	movhi	r2,131
  8093f8:	109c8904 	addi	r2,r2,29220
  8093fc:	11000017 	ldw	r4,0(r2)
  809400:	08135a40 	call	8135a4 <__floatsisf>
  809404:	1007883a 	mov	r3,r2
  809408:	e0bfff17 	ldw	r2,-4(fp)
  80940c:	10800217 	ldw	r2,8(r2)
  809410:	1809883a 	mov	r4,r3
  809414:	100b883a 	mov	r5,r2
  809418:	081300c0 	call	81300c <__addsf3>
  80941c:	8009883a 	mov	r4,r16
  809420:	100b883a 	mov	r5,r2
  809424:	08132500 	call	813250 <__divsf3>
  809428:	9809883a 	mov	r4,r19
  80942c:	100b883a 	mov	r5,r2
  809430:	0812f9c0 	call	812f9c <__subsf3>
  809434:	1009883a 	mov	r4,r2
  809438:	081363c0 	call	81363c <__fixsfsi>
  80943c:	100b883a 	mov	r5,r2
  809440:	d8000015 	stw	zero,0(sp)
  809444:	e0bffc17 	ldw	r2,-16(fp)
  809448:	d8800115 	stw	r2,4(sp)
  80944c:	9009883a 	mov	r4,r18
  809450:	01800284 	movi	r6,10
  809454:	000f883a 	mov	r7,zero
  809458:	0805f780 	call	805f78 <initButton>
  80945c:	88800015 	stw	r2,0(r17)
	f->buttons[2]->obj1 = box2;
  809460:	e0bffb17 	ldw	r2,-20(fp)
  809464:	10800917 	ldw	r2,36(r2)
  809468:	10800204 	addi	r2,r2,8
  80946c:	10c00017 	ldw	r3,0(r2)
  809470:	e0bfff17 	ldw	r2,-4(fp)
  809474:	18800315 	stw	r2,12(r3)
	setTxtButton(f->buttons[2], 15, 20, 15, "Instruction", 0, 0, 0);
  809478:	e0bffb17 	ldw	r2,-20(fp)
  80947c:	10800917 	ldw	r2,36(r2)
  809480:	10800204 	addi	r2,r2,8
  809484:	11000017 	ldw	r4,0(r2)
  809488:	008020f4 	movhi	r2,131
  80948c:	10a12004 	addi	r2,r2,-31616
  809490:	d8800015 	stw	r2,0(sp)
  809494:	d8000115 	stw	zero,4(sp)
  809498:	d8000215 	stw	zero,8(sp)
  80949c:	d8000315 	stw	zero,12(sp)
  8094a0:	014003c4 	movi	r5,15
  8094a4:	01800504 	movi	r6,20
  8094a8:	01c003c4 	movi	r7,15
  8094ac:	08061940 	call	806194 <setTxtButton>
	f->buttons_size = 3;
  8094b0:	e0fffb17 	ldw	r3,-20(fp)
  8094b4:	008000c4 	movi	r2,3
  8094b8:	18800715 	stw	r2,28(r3)
	for(i = 0; i < 3; i++) {
  8094bc:	e03ffa15 	stw	zero,-24(fp)
  8094c0:	00000c06 	br	8094f4 <initMainMenu+0x60c>
		drawTxtButton(f->buttons[i], mouse);
  8094c4:	e0bffb17 	ldw	r2,-20(fp)
  8094c8:	10c00917 	ldw	r3,36(r2)
  8094cc:	e0bffa17 	ldw	r2,-24(fp)
  8094d0:	1085883a 	add	r2,r2,r2
  8094d4:	1085883a 	add	r2,r2,r2
  8094d8:	1885883a 	add	r2,r3,r2
  8094dc:	11000017 	ldw	r4,0(r2)
  8094e0:	e1400617 	ldw	r5,24(fp)
  8094e4:	08062ac0 	call	8062ac <drawTxtButton>
	setTxtButton(f->buttons[1], 14, 20, 15, "Score", 0, 0, 0);
	f->buttons[2] = initButton(cameraX + (box2->x-cameraX)*cameraZ/(cameraZ+box2->z), cameraY - (cameraY-box2->y)*cameraZ/(cameraZ+box2->z), 10, NULL, NULL, p);
	f->buttons[2]->obj1 = box2;
	setTxtButton(f->buttons[2], 15, 20, 15, "Instruction", 0, 0, 0);
	f->buttons_size = 3;
	for(i = 0; i < 3; i++) {
  8094e8:	e0bffa17 	ldw	r2,-24(fp)
  8094ec:	10800044 	addi	r2,r2,1
  8094f0:	e0bffa15 	stw	r2,-24(fp)
  8094f4:	e0bffa17 	ldw	r2,-24(fp)
  8094f8:	108000d0 	cmplti	r2,r2,3
  8094fc:	103ff11e 	bne	r2,zero,8094c4 <initMainMenu+0x5dc>
		drawTxtButton(f->buttons[i], mouse);
	} return f;
  809500:	e0bffb17 	ldw	r2,-20(fp)
}
  809504:	e037883a 	mov	sp,fp
  809508:	dfc00517 	ldw	ra,20(sp)
  80950c:	df000417 	ldw	fp,16(sp)
  809510:	dcc00317 	ldw	r19,12(sp)
  809514:	dc800217 	ldw	r18,8(sp)
  809518:	dc400117 	ldw	r17,4(sp)
  80951c:	dc000017 	ldw	r16,0(sp)
  809520:	dec00604 	addi	sp,sp,24
  809524:	f800283a 	ret

00809528 <removeFrame>:
void removeFrame(struct Frame* this) {
  809528:	defffc04 	addi	sp,sp,-16
  80952c:	dfc00315 	stw	ra,12(sp)
  809530:	df000215 	stw	fp,8(sp)
  809534:	df000204 	addi	fp,sp,8
  809538:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 0; i < this->elements_size; i++) {
  80953c:	e03ffe15 	stw	zero,-8(fp)
  809540:	00000b06 	br	809570 <removeFrame+0x48>
		removeFrame(this->elements[i]);
  809544:	e0bfff17 	ldw	r2,-4(fp)
  809548:	10c00d17 	ldw	r3,52(r2)
  80954c:	e0bffe17 	ldw	r2,-8(fp)
  809550:	1085883a 	add	r2,r2,r2
  809554:	1085883a 	add	r2,r2,r2
  809558:	1885883a 	add	r2,r3,r2
  80955c:	11000017 	ldw	r4,0(r2)
  809560:	08095280 	call	809528 <removeFrame>
		drawTxtButton(f->buttons[i], mouse);
	} return f;
}
void removeFrame(struct Frame* this) {
	int i;
	for(i = 0; i < this->elements_size; i++) {
  809564:	e0bffe17 	ldw	r2,-8(fp)
  809568:	10800044 	addi	r2,r2,1
  80956c:	e0bffe15 	stw	r2,-8(fp)
  809570:	e0bfff17 	ldw	r2,-4(fp)
  809574:	10c00617 	ldw	r3,24(r2)
  809578:	e0bffe17 	ldw	r2,-8(fp)
  80957c:	10fff116 	blt	r2,r3,809544 <removeFrame+0x1c>
		removeFrame(this->elements[i]);
	}
	for(i = 0; i < this->buttons_size; i ++) {
  809580:	e03ffe15 	stw	zero,-8(fp)
  809584:	00000b06 	br	8095b4 <removeFrame+0x8c>
		killButton(this->buttons[i]);
  809588:	e0bfff17 	ldw	r2,-4(fp)
  80958c:	10c00917 	ldw	r3,36(r2)
  809590:	e0bffe17 	ldw	r2,-8(fp)
  809594:	1085883a 	add	r2,r2,r2
  809598:	1085883a 	add	r2,r2,r2
  80959c:	1885883a 	add	r2,r3,r2
  8095a0:	11000017 	ldw	r4,0(r2)
  8095a4:	080606c0 	call	80606c <killButton>
void removeFrame(struct Frame* this) {
	int i;
	for(i = 0; i < this->elements_size; i++) {
		removeFrame(this->elements[i]);
	}
	for(i = 0; i < this->buttons_size; i ++) {
  8095a8:	e0bffe17 	ldw	r2,-8(fp)
  8095ac:	10800044 	addi	r2,r2,1
  8095b0:	e0bffe15 	stw	r2,-8(fp)
  8095b4:	e0bfff17 	ldw	r2,-4(fp)
  8095b8:	10c00717 	ldw	r3,28(r2)
  8095bc:	e0bffe17 	ldw	r2,-8(fp)
  8095c0:	10fff116 	blt	r2,r3,809588 <removeFrame+0x60>
		killButton(this->buttons[i]);
	} free(this);
  8095c4:	e13fff17 	ldw	r4,-4(fp)
  8095c8:	0814f440 	call	814f44 <free>
	this= NULL;
  8095cc:	e03fff15 	stw	zero,-4(fp)
}
  8095d0:	e037883a 	mov	sp,fp
  8095d4:	dfc00117 	ldw	ra,4(sp)
  8095d8:	df000017 	ldw	fp,0(sp)
  8095dc:	dec00204 	addi	sp,sp,8
  8095e0:	f800283a 	ret

008095e4 <initGamePanel>:
struct Frame* initGamePanel(int x1, int y1, int x2, int y2, struct Env* e, struct animation** a) {
  8095e4:	defff404 	addi	sp,sp,-48
  8095e8:	dfc00b15 	stw	ra,44(sp)
  8095ec:	df000a15 	stw	fp,40(sp)
  8095f0:	dc000915 	stw	r16,36(sp)
  8095f4:	df000904 	addi	fp,sp,36
  8095f8:	e13ffc15 	stw	r4,-16(fp)
  8095fc:	e17ffd15 	stw	r5,-12(fp)
  809600:	e1bffe15 	stw	r6,-8(fp)
  809604:	e1ffff15 	stw	r7,-4(fp)

	struct Frame* f = initFrame(x1, y1, x2, y2, e);
  809608:	e0800317 	ldw	r2,12(fp)
  80960c:	d8800015 	stw	r2,0(sp)
  809610:	e13ffc17 	ldw	r4,-16(fp)
  809614:	e17ffd17 	ldw	r5,-12(fp)
  809618:	e1bffe17 	ldw	r6,-8(fp)
  80961c:	e1ffff17 	ldw	r7,-4(fp)
  809620:	0808e180 	call	808e18 <initFrame>
  809624:	e0bffb15 	stw	r2,-20(fp)
	f->redrawing = true;
  809628:	e0fffb17 	ldw	r3,-20(fp)
  80962c:	00800044 	movi	r2,1
  809630:	18800b05 	stb	r2,44(r3)
	f->elements = (struct Frame**)malloc(sizeof(struct Frame*)*5);
  809634:	01000504 	movi	r4,20
  809638:	0814f580 	call	814f58 <malloc>
  80963c:	1007883a 	mov	r3,r2
  809640:	e0bffb17 	ldw	r2,-20(fp)
  809644:	10c00d15 	stw	r3,52(r2)
	f->elements[0] = initScoreBoard(255, 5, 315, 28);
  809648:	e0bffb17 	ldw	r2,-20(fp)
  80964c:	14000d17 	ldw	r16,52(r2)
  809650:	01003fc4 	movi	r4,255
  809654:	01400144 	movi	r5,5
  809658:	01804ec4 	movi	r6,315
  80965c:	01c00704 	movi	r7,28
  809660:	08099640 	call	809964 <initScoreBoard>
  809664:	80800015 	stw	r2,0(r16)
	f->elements[0]->redrawImg = redrawSBoard;
  809668:	e0bffb17 	ldw	r2,-20(fp)
  80966c:	10800d17 	ldw	r2,52(r2)
  809670:	10c00017 	ldw	r3,0(r2)
  809674:	00802074 	movhi	r2,129
  809678:	10aaf004 	addi	r2,r2,-21568
  80967c:	18800f15 	stw	r2,60(r3)
	f->elements[1] = initCtrlPanel(255, 40, 315, 170, e, a);
  809680:	e0bffb17 	ldw	r2,-20(fp)
  809684:	10800d17 	ldw	r2,52(r2)
  809688:	14000104 	addi	r16,r2,4
  80968c:	e0800317 	ldw	r2,12(fp)
  809690:	d8800015 	stw	r2,0(sp)
  809694:	e0800417 	ldw	r2,16(fp)
  809698:	d8800115 	stw	r2,4(sp)
  80969c:	01003fc4 	movi	r4,255
  8096a0:	01400a04 	movi	r5,40
  8096a4:	01804ec4 	movi	r6,315
  8096a8:	01c02a84 	movi	r7,170
  8096ac:	08099c40 	call	8099c4 <initCtrlPanel>
  8096b0:	80800015 	stw	r2,0(r16)
	f->elements[1]->redrawImg = redrawCPanel;
  8096b4:	e0bffb17 	ldw	r2,-20(fp)
  8096b8:	10800d17 	ldw	r2,52(r2)
  8096bc:	10800104 	addi	r2,r2,4
  8096c0:	10c00017 	ldw	r3,0(r2)
  8096c4:	00802074 	movhi	r2,129
  8096c8:	10ab1e04 	addi	r2,r2,-21384
  8096cc:	18800f15 	stw	r2,60(r3)
	f->elements[2] = initMsgBoard(255, 180, 315, 235);
  8096d0:	e0bffb17 	ldw	r2,-20(fp)
  8096d4:	10800d17 	ldw	r2,52(r2)
  8096d8:	14000204 	addi	r16,r2,8
  8096dc:	01003fc4 	movi	r4,255
  8096e0:	01402d04 	movi	r5,180
  8096e4:	01804ec4 	movi	r6,315
  8096e8:	01c03ac4 	movi	r7,235
  8096ec:	080a0300 	call	80a030 <initMsgBoard>
  8096f0:	80800015 	stw	r2,0(r16)
	f->elements[2]->redrawImg = redrawMBoard;
  8096f4:	e0bffb17 	ldw	r2,-20(fp)
  8096f8:	10800d17 	ldw	r2,52(r2)
  8096fc:	10800204 	addi	r2,r2,8
  809700:	10c00017 	ldw	r3,0(r2)
  809704:	00802074 	movhi	r2,129
  809708:	10ab9904 	addi	r2,r2,-20892
  80970c:	18800f15 	stw	r2,60(r3)
	f->elements_size = 5;
  809710:	e0fffb17 	ldw	r3,-20(fp)
  809714:	00800144 	movi	r2,5
  809718:	18800615 	stw	r2,24(r3)
	f->total_elements_size = 5;
  80971c:	e0fffb17 	ldw	r3,-20(fp)
  809720:	00800144 	movi	r2,5
  809724:	18800815 	stw	r2,32(r3)
	f->elements[3] = initStatsPanel(255, 40, 315, 170, e, a);
  809728:	e0bffb17 	ldw	r2,-20(fp)
  80972c:	10800d17 	ldw	r2,52(r2)
  809730:	14000304 	addi	r16,r2,12
  809734:	e0800317 	ldw	r2,12(fp)
  809738:	d8800015 	stw	r2,0(sp)
  80973c:	e0800417 	ldw	r2,16(fp)
  809740:	d8800115 	stw	r2,4(sp)
  809744:	01003fc4 	movi	r4,255
  809748:	01400a04 	movi	r5,40
  80974c:	01804ec4 	movi	r6,315
  809750:	01c02a84 	movi	r7,170
  809754:	0809de80 	call	809de8 <initStatsPanel>
  809758:	80800015 	stw	r2,0(r16)
	f->elements[3]->redrawImg = redrawSPanel;
  80975c:	e0bffb17 	ldw	r2,-20(fp)
  809760:	10800d17 	ldw	r2,52(r2)
  809764:	10800304 	addi	r2,r2,12
  809768:	10c00017 	ldw	r3,0(r2)
  80976c:	00802074 	movhi	r2,129
  809770:	10ab4704 	addi	r2,r2,-21220
  809774:	18800f15 	stw	r2,60(r3)
	f->elements[4] = initMenuPanel(255, 40, 315, 170, e, a);
  809778:	e0bffb17 	ldw	r2,-20(fp)
  80977c:	10800d17 	ldw	r2,52(r2)
  809780:	14000404 	addi	r16,r2,16
  809784:	e0800317 	ldw	r2,12(fp)
  809788:	d8800015 	stw	r2,0(sp)
  80978c:	e0800417 	ldw	r2,16(fp)
  809790:	d8800115 	stw	r2,4(sp)
  809794:	01003fc4 	movi	r4,255
  809798:	01400a04 	movi	r5,40
  80979c:	01804ec4 	movi	r6,315
  8097a0:	01c02a84 	movi	r7,170
  8097a4:	0809f100 	call	809f10 <initMenuPanel>
  8097a8:	80800015 	stw	r2,0(r16)
	f->elements[4]->redrawImg = redrawMPanel;
  8097ac:	e0bffb17 	ldw	r2,-20(fp)
  8097b0:	10800d17 	ldw	r2,52(r2)
  8097b4:	10800404 	addi	r2,r2,16
  8097b8:	10c00017 	ldw	r3,0(r2)
  8097bc:	00802074 	movhi	r2,129
  8097c0:	10ab7004 	addi	r2,r2,-21056
  8097c4:	18800f15 	stw	r2,60(r3)
	f->buttons = (struct Buttons**)malloc(sizeof(struct Button*)*3);
  8097c8:	01000304 	movi	r4,12
  8097cc:	0814f580 	call	814f58 <malloc>
  8097d0:	1007883a 	mov	r3,r2
  8097d4:	e0bffb17 	ldw	r2,-20(fp)
  8097d8:	10c00915 	stw	r3,36(r2)
	f->buttons[0] = initButton(255, 32, 20, NULL, NULL, e);
  8097dc:	e0bffb17 	ldw	r2,-20(fp)
  8097e0:	14000917 	ldw	r16,36(r2)
  8097e4:	d8000015 	stw	zero,0(sp)
  8097e8:	e0800317 	ldw	r2,12(fp)
  8097ec:	d8800115 	stw	r2,4(sp)
  8097f0:	01003fc4 	movi	r4,255
  8097f4:	01400804 	movi	r5,32
  8097f8:	01800504 	movi	r6,20
  8097fc:	000f883a 	mov	r7,zero
  809800:	0805f780 	call	805f78 <initButton>
  809804:	80800015 	stw	r2,0(r16)
	setTxtButton(f->buttons[0], 10, 8, 18, "Ctrl", 0x80, 0x80, 0x80);
  809808:	e0bffb17 	ldw	r2,-20(fp)
  80980c:	10800917 	ldw	r2,36(r2)
  809810:	11000017 	ldw	r4,0(r2)
  809814:	008020f4 	movhi	r2,131
  809818:	10a12304 	addi	r2,r2,-31604
  80981c:	d8800015 	stw	r2,0(sp)
  809820:	00802004 	movi	r2,128
  809824:	d8800115 	stw	r2,4(sp)
  809828:	00802004 	movi	r2,128
  80982c:	d8800215 	stw	r2,8(sp)
  809830:	00802004 	movi	r2,128
  809834:	d8800315 	stw	r2,12(sp)
  809838:	01400284 	movi	r5,10
  80983c:	01800204 	movi	r6,8
  809840:	01c00484 	movi	r7,18
  809844:	08061940 	call	806194 <setTxtButton>
	f->buttons[1] = initButton(273, 32, 20, NULL, NULL, e);
  809848:	e0bffb17 	ldw	r2,-20(fp)
  80984c:	10800917 	ldw	r2,36(r2)
  809850:	14000104 	addi	r16,r2,4
  809854:	d8000015 	stw	zero,0(sp)
  809858:	e0800317 	ldw	r2,12(fp)
  80985c:	d8800115 	stw	r2,4(sp)
  809860:	01004444 	movi	r4,273
  809864:	01400804 	movi	r5,32
  809868:	01800504 	movi	r6,20
  80986c:	000f883a 	mov	r7,zero
  809870:	0805f780 	call	805f78 <initButton>
  809874:	80800015 	stw	r2,0(r16)
	setTxtButton(f->buttons[1], 11, 8, 23, "Stats", 0x48, 0x3a, 0x3a);
  809878:	e0bffb17 	ldw	r2,-20(fp)
  80987c:	10800917 	ldw	r2,36(r2)
  809880:	10800104 	addi	r2,r2,4
  809884:	11000017 	ldw	r4,0(r2)
  809888:	008020f4 	movhi	r2,131
  80988c:	10a12504 	addi	r2,r2,-31596
  809890:	d8800015 	stw	r2,0(sp)
  809894:	00801204 	movi	r2,72
  809898:	d8800115 	stw	r2,4(sp)
  80989c:	00800e84 	movi	r2,58
  8098a0:	d8800215 	stw	r2,8(sp)
  8098a4:	00800e84 	movi	r2,58
  8098a8:	d8800315 	stw	r2,12(sp)
  8098ac:	014002c4 	movi	r5,11
  8098b0:	01800204 	movi	r6,8
  8098b4:	01c005c4 	movi	r7,23
  8098b8:	08061940 	call	806194 <setTxtButton>
	f->buttons[2] = initButton(296, 32, 20, NULL, NULL, e);
  8098bc:	e0bffb17 	ldw	r2,-20(fp)
  8098c0:	10800917 	ldw	r2,36(r2)
  8098c4:	14000204 	addi	r16,r2,8
  8098c8:	d8000015 	stw	zero,0(sp)
  8098cc:	e0800317 	ldw	r2,12(fp)
  8098d0:	d8800115 	stw	r2,4(sp)
  8098d4:	01004a04 	movi	r4,296
  8098d8:	01400804 	movi	r5,32
  8098dc:	01800504 	movi	r6,20
  8098e0:	000f883a 	mov	r7,zero
  8098e4:	0805f780 	call	805f78 <initButton>
  8098e8:	80800015 	stw	r2,0(r16)
	setTxtButton(f->buttons[2], 12, 8, 18, "Menu", 0xA9, 0xA9, 0xA9);
  8098ec:	e0bffb17 	ldw	r2,-20(fp)
  8098f0:	10800917 	ldw	r2,36(r2)
  8098f4:	10800204 	addi	r2,r2,8
  8098f8:	11000017 	ldw	r4,0(r2)
  8098fc:	008020f4 	movhi	r2,131
  809900:	10a12704 	addi	r2,r2,-31588
  809904:	d8800015 	stw	r2,0(sp)
  809908:	00802a44 	movi	r2,169
  80990c:	d8800115 	stw	r2,4(sp)
  809910:	00802a44 	movi	r2,169
  809914:	d8800215 	stw	r2,8(sp)
  809918:	00802a44 	movi	r2,169
  80991c:	d8800315 	stw	r2,12(sp)
  809920:	01400304 	movi	r5,12
  809924:	01800204 	movi	r6,8
  809928:	01c00484 	movi	r7,18
  80992c:	08061940 	call	806194 <setTxtButton>
	f->buttons_size = 3;
  809930:	e0fffb17 	ldw	r3,-20(fp)
  809934:	008000c4 	movi	r2,3
  809938:	18800715 	stw	r2,28(r3)

	e->redraw = true;
  80993c:	e0c00317 	ldw	r3,12(fp)
  809940:	00800044 	movi	r2,1
  809944:	18800615 	stw	r2,24(r3)
	return f;
  809948:	e0bffb17 	ldw	r2,-20(fp)
}
  80994c:	e037883a 	mov	sp,fp
  809950:	dfc00217 	ldw	ra,8(sp)
  809954:	df000117 	ldw	fp,4(sp)
  809958:	dc000017 	ldw	r16,0(sp)
  80995c:	dec00304 	addi	sp,sp,12
  809960:	f800283a 	ret

00809964 <initScoreBoard>:

struct Frame* initScoreBoard(int x1, int y1, int x2, int y2) {
  809964:	defff804 	addi	sp,sp,-32
  809968:	dfc00715 	stw	ra,28(sp)
  80996c:	df000615 	stw	fp,24(sp)
  809970:	df000604 	addi	fp,sp,24
  809974:	e13ffc15 	stw	r4,-16(fp)
  809978:	e17ffd15 	stw	r5,-12(fp)
  80997c:	e1bffe15 	stw	r6,-8(fp)
  809980:	e1ffff15 	stw	r7,-4(fp)

	struct Frame* f = initFrame(x1, y1, x2, y2, NULL);
  809984:	d8000015 	stw	zero,0(sp)
  809988:	e13ffc17 	ldw	r4,-16(fp)
  80998c:	e17ffd17 	ldw	r5,-12(fp)
  809990:	e1bffe17 	ldw	r6,-8(fp)
  809994:	e1ffff17 	ldw	r7,-4(fp)
  809998:	0808e180 	call	808e18 <initFrame>
  80999c:	e0bffb15 	stw	r2,-20(fp)
	f->redrawing = true;
  8099a0:	e0fffb17 	ldw	r3,-20(fp)
  8099a4:	00800044 	movi	r2,1
  8099a8:	18800b05 	stb	r2,44(r3)
	return f;
  8099ac:	e0bffb17 	ldw	r2,-20(fp)
}
  8099b0:	e037883a 	mov	sp,fp
  8099b4:	dfc00117 	ldw	ra,4(sp)
  8099b8:	df000017 	ldw	fp,0(sp)
  8099bc:	dec00204 	addi	sp,sp,8
  8099c0:	f800283a 	ret

008099c4 <initCtrlPanel>:

struct Frame* initCtrlPanel(int x1, int y1, int x2, int y2, struct Env* e, struct animation** a) {
  8099c4:	deffe604 	addi	sp,sp,-104
  8099c8:	dfc01915 	stw	ra,100(sp)
  8099cc:	df001815 	stw	fp,96(sp)
  8099d0:	dcc01715 	stw	r19,92(sp)
  8099d4:	dc801615 	stw	r18,88(sp)
  8099d8:	dc401515 	stw	r17,84(sp)
  8099dc:	dc001415 	stw	r16,80(sp)
  8099e0:	df001404 	addi	fp,sp,80
  8099e4:	e13ffc15 	stw	r4,-16(fp)
  8099e8:	e17ffd15 	stw	r5,-12(fp)
  8099ec:	e1bffe15 	stw	r6,-8(fp)
  8099f0:	e1ffff15 	stw	r7,-4(fp)
	int i;
	int* b0, b0p, b1, b1p, b2, b2p, b3, b3p, b4, b4p;
	loadSDImage("S125.BMP", &b0);
  8099f4:	e17ff204 	addi	r5,fp,-56
  8099f8:	010020f4 	movhi	r4,131
  8099fc:	21212904 	addi	r4,r4,-31580
  809a00:	080b5040 	call	80b504 <loadSDImage>
	loadSDImage("S10P.BMP", &b0p);
  809a04:	e17ff304 	addi	r5,fp,-52
  809a08:	010020f4 	movhi	r4,131
  809a0c:	21212c04 	addi	r4,r4,-31568
  809a10:	080b5040 	call	80b504 <loadSDImage>
	loadSDImage("S014.BMP", &b1);
  809a14:	e17ff404 	addi	r5,fp,-48
  809a18:	010020f4 	movhi	r4,131
  809a1c:	21212f04 	addi	r4,r4,-31556
  809a20:	080b5040 	call	80b504 <loadSDImage>
	loadSDImage("S00P.BMP", &b1p);
  809a24:	e17ff504 	addi	r5,fp,-44
  809a28:	010020f4 	movhi	r4,131
  809a2c:	21213204 	addi	r4,r4,-31544
  809a30:	080b5040 	call	80b504 <loadSDImage>
	loadSDImage("S20.BMP", &b2);
  809a34:	e17ff604 	addi	r5,fp,-40
  809a38:	010020f4 	movhi	r4,131
  809a3c:	21213504 	addi	r4,r4,-31532
  809a40:	080b5040 	call	80b504 <loadSDImage>
	loadSDImage("S20P.BMP", &b2p);
  809a44:	e17ff704 	addi	r5,fp,-36
  809a48:	010020f4 	movhi	r4,131
  809a4c:	21213704 	addi	r4,r4,-31524
  809a50:	080b5040 	call	80b504 <loadSDImage>
	loadSDImage("S313.BMP", &b3);
  809a54:	e17ff804 	addi	r5,fp,-32
  809a58:	010020f4 	movhi	r4,131
  809a5c:	21213a04 	addi	r4,r4,-31512
  809a60:	080b5040 	call	80b504 <loadSDImage>
	loadSDImage("S30P.BMP", &b3p);
  809a64:	e17ff904 	addi	r5,fp,-28
  809a68:	010020f4 	movhi	r4,131
  809a6c:	21213d04 	addi	r4,r4,-31500
  809a70:	080b5040 	call	80b504 <loadSDImage>
	loadSDImage("S40.BMP", &b4);
  809a74:	e17ffa04 	addi	r5,fp,-24
  809a78:	010020f4 	movhi	r4,131
  809a7c:	21214004 	addi	r4,r4,-31488
  809a80:	080b5040 	call	80b504 <loadSDImage>
	loadSDImage("S40P.BMP", &b4p);
  809a84:	e17ffb04 	addi	r5,fp,-20
  809a88:	010020f4 	movhi	r4,131
  809a8c:	21214204 	addi	r4,r4,-31480
  809a90:	080b5040 	call	80b504 <loadSDImage>

	struct Frame* f = initFrame(x1, y1, x2, y2, e);
  809a94:	e0800617 	ldw	r2,24(fp)
  809a98:	d8800015 	stw	r2,0(sp)
  809a9c:	e13ffc17 	ldw	r4,-16(fp)
  809aa0:	e17ffd17 	ldw	r5,-12(fp)
  809aa4:	e1bffe17 	ldw	r6,-8(fp)
  809aa8:	e1ffff17 	ldw	r7,-4(fp)
  809aac:	0808e180 	call	808e18 <initFrame>
  809ab0:	e0bff015 	stw	r2,-64(fp)
	f->redrawing = true;
  809ab4:	e0fff017 	ldw	r3,-64(fp)
  809ab8:	00800044 	movi	r2,1
  809abc:	18800b05 	stb	r2,44(r3)
	f->buttons = (struct Button**)malloc(sizeof(struct Button*)*5);
  809ac0:	01000504 	movi	r4,20
  809ac4:	0814f580 	call	814f58 <malloc>
  809ac8:	1007883a 	mov	r3,r2
  809acc:	e0bff017 	ldw	r2,-64(fp)
  809ad0:	10c00915 	stw	r3,36(r2)
	f->buttons[0] = initButton(x1+5, y1+20, 20, initAnimation(b1, 1), initAnimation(b1p, 1), e);
  809ad4:	e0bff017 	ldw	r2,-64(fp)
  809ad8:	14000917 	ldw	r16,36(r2)
  809adc:	e0bffc17 	ldw	r2,-16(fp)
  809ae0:	14400144 	addi	r17,r2,5
  809ae4:	e0bffd17 	ldw	r2,-12(fp)
  809ae8:	14800504 	addi	r18,r2,20
  809aec:	e0bff417 	ldw	r2,-48(fp)
  809af0:	1009883a 	mov	r4,r2
  809af4:	01400044 	movi	r5,1
  809af8:	0811d7c0 	call	811d7c <initAnimation>
  809afc:	1027883a 	mov	r19,r2
  809b00:	e0bff517 	ldw	r2,-44(fp)
  809b04:	1009883a 	mov	r4,r2
  809b08:	01400044 	movi	r5,1
  809b0c:	0811d7c0 	call	811d7c <initAnimation>
  809b10:	d8800015 	stw	r2,0(sp)
  809b14:	e0800617 	ldw	r2,24(fp)
  809b18:	d8800115 	stw	r2,4(sp)
  809b1c:	8809883a 	mov	r4,r17
  809b20:	900b883a 	mov	r5,r18
  809b24:	01800504 	movi	r6,20
  809b28:	980f883a 	mov	r7,r19
  809b2c:	0805f780 	call	805f78 <initButton>
  809b30:	80800015 	stw	r2,0(r16)
	f->buttons[1] = initButton(x1+30, y1+20, 20, initAnimation(b0, 1), initAnimation(b0p, 1), e);
  809b34:	e0bff017 	ldw	r2,-64(fp)
  809b38:	10800917 	ldw	r2,36(r2)
  809b3c:	14000104 	addi	r16,r2,4
  809b40:	e0bffc17 	ldw	r2,-16(fp)
  809b44:	14400784 	addi	r17,r2,30
  809b48:	e0bffd17 	ldw	r2,-12(fp)
  809b4c:	14800504 	addi	r18,r2,20
  809b50:	e13ff217 	ldw	r4,-56(fp)
  809b54:	01400044 	movi	r5,1
  809b58:	0811d7c0 	call	811d7c <initAnimation>
  809b5c:	1027883a 	mov	r19,r2
  809b60:	e0bff317 	ldw	r2,-52(fp)
  809b64:	1009883a 	mov	r4,r2
  809b68:	01400044 	movi	r5,1
  809b6c:	0811d7c0 	call	811d7c <initAnimation>
  809b70:	d8800015 	stw	r2,0(sp)
  809b74:	e0800617 	ldw	r2,24(fp)
  809b78:	d8800115 	stw	r2,4(sp)
  809b7c:	8809883a 	mov	r4,r17
  809b80:	900b883a 	mov	r5,r18
  809b84:	01800504 	movi	r6,20
  809b88:	980f883a 	mov	r7,r19
  809b8c:	0805f780 	call	805f78 <initButton>
  809b90:	80800015 	stw	r2,0(r16)
	f->buttons[2] = initButton(x1+5, y1+45, 20, initAnimation(b2, 1), initAnimation(b2p, 1), e);
  809b94:	e0bff017 	ldw	r2,-64(fp)
  809b98:	10800917 	ldw	r2,36(r2)
  809b9c:	14000204 	addi	r16,r2,8
  809ba0:	e0bffc17 	ldw	r2,-16(fp)
  809ba4:	14400144 	addi	r17,r2,5
  809ba8:	e0bffd17 	ldw	r2,-12(fp)
  809bac:	14800b44 	addi	r18,r2,45
  809bb0:	e0bff617 	ldw	r2,-40(fp)
  809bb4:	1009883a 	mov	r4,r2
  809bb8:	01400044 	movi	r5,1
  809bbc:	0811d7c0 	call	811d7c <initAnimation>
  809bc0:	1027883a 	mov	r19,r2
  809bc4:	e0bff717 	ldw	r2,-36(fp)
  809bc8:	1009883a 	mov	r4,r2
  809bcc:	01400044 	movi	r5,1
  809bd0:	0811d7c0 	call	811d7c <initAnimation>
  809bd4:	d8800015 	stw	r2,0(sp)
  809bd8:	e0800617 	ldw	r2,24(fp)
  809bdc:	d8800115 	stw	r2,4(sp)
  809be0:	8809883a 	mov	r4,r17
  809be4:	900b883a 	mov	r5,r18
  809be8:	01800504 	movi	r6,20
  809bec:	980f883a 	mov	r7,r19
  809bf0:	0805f780 	call	805f78 <initButton>
  809bf4:	80800015 	stw	r2,0(r16)
	f->buttons[3] = initButton(x1+30, y1+45, 20, initAnimation(b3, 1), initAnimation(b3p, 1), e);
  809bf8:	e0bff017 	ldw	r2,-64(fp)
  809bfc:	10800917 	ldw	r2,36(r2)
  809c00:	14000304 	addi	r16,r2,12
  809c04:	e0bffc17 	ldw	r2,-16(fp)
  809c08:	14400784 	addi	r17,r2,30
  809c0c:	e0bffd17 	ldw	r2,-12(fp)
  809c10:	14800b44 	addi	r18,r2,45
  809c14:	e0bff817 	ldw	r2,-32(fp)
  809c18:	1009883a 	mov	r4,r2
  809c1c:	01400044 	movi	r5,1
  809c20:	0811d7c0 	call	811d7c <initAnimation>
  809c24:	1027883a 	mov	r19,r2
  809c28:	e0bff917 	ldw	r2,-28(fp)
  809c2c:	1009883a 	mov	r4,r2
  809c30:	01400044 	movi	r5,1
  809c34:	0811d7c0 	call	811d7c <initAnimation>
  809c38:	d8800015 	stw	r2,0(sp)
  809c3c:	e0800617 	ldw	r2,24(fp)
  809c40:	d8800115 	stw	r2,4(sp)
  809c44:	8809883a 	mov	r4,r17
  809c48:	900b883a 	mov	r5,r18
  809c4c:	01800504 	movi	r6,20
  809c50:	980f883a 	mov	r7,r19
  809c54:	0805f780 	call	805f78 <initButton>
  809c58:	80800015 	stw	r2,0(r16)
	f->buttons[4] = initButton(x1+5, y1+70, 20, initAnimation(b4, 1), initAnimation(b4p, 1), e);
  809c5c:	e0bff017 	ldw	r2,-64(fp)
  809c60:	10800917 	ldw	r2,36(r2)
  809c64:	14000404 	addi	r16,r2,16
  809c68:	e0bffc17 	ldw	r2,-16(fp)
  809c6c:	14400144 	addi	r17,r2,5
  809c70:	e0bffd17 	ldw	r2,-12(fp)
  809c74:	14801184 	addi	r18,r2,70
  809c78:	e0bffa17 	ldw	r2,-24(fp)
  809c7c:	1009883a 	mov	r4,r2
  809c80:	01400044 	movi	r5,1
  809c84:	0811d7c0 	call	811d7c <initAnimation>
  809c88:	1027883a 	mov	r19,r2
  809c8c:	e0bffb17 	ldw	r2,-20(fp)
  809c90:	1009883a 	mov	r4,r2
  809c94:	01400044 	movi	r5,1
  809c98:	0811d7c0 	call	811d7c <initAnimation>
  809c9c:	d8800015 	stw	r2,0(sp)
  809ca0:	e0800617 	ldw	r2,24(fp)
  809ca4:	d8800115 	stw	r2,4(sp)
  809ca8:	8809883a 	mov	r4,r17
  809cac:	900b883a 	mov	r5,r18
  809cb0:	01800504 	movi	r6,20
  809cb4:	980f883a 	mov	r7,r19
  809cb8:	0805f780 	call	805f78 <initButton>
  809cbc:	80800015 	stw	r2,0(r16)
	f->buttons_size = 6;
  809cc0:	e0fff017 	ldw	r3,-64(fp)
  809cc4:	00800184 	movi	r2,6
  809cc8:	18800715 	stw	r2,28(r3)
	for(i = 0; i < f->buttons_size - 1; i++) {
  809ccc:	e03ff115 	stw	zero,-60(fp)
  809cd0:	00000d06 	br	809d08 <initCtrlPanel+0x344>
		setBuyButton(f->buttons[i], i, a);
  809cd4:	e0bff017 	ldw	r2,-64(fp)
  809cd8:	10c00917 	ldw	r3,36(r2)
  809cdc:	e0bff117 	ldw	r2,-60(fp)
  809ce0:	1085883a 	add	r2,r2,r2
  809ce4:	1085883a 	add	r2,r2,r2
  809ce8:	1885883a 	add	r2,r3,r2
  809cec:	11000017 	ldw	r4,0(r2)
  809cf0:	e17ff117 	ldw	r5,-60(fp)
  809cf4:	e1800717 	ldw	r6,28(fp)
  809cf8:	08060f80 	call	8060f8 <setBuyButton>
	f->buttons[1] = initButton(x1+30, y1+20, 20, initAnimation(b0, 1), initAnimation(b0p, 1), e);
	f->buttons[2] = initButton(x1+5, y1+45, 20, initAnimation(b2, 1), initAnimation(b2p, 1), e);
	f->buttons[3] = initButton(x1+30, y1+45, 20, initAnimation(b3, 1), initAnimation(b3p, 1), e);
	f->buttons[4] = initButton(x1+5, y1+70, 20, initAnimation(b4, 1), initAnimation(b4p, 1), e);
	f->buttons_size = 6;
	for(i = 0; i < f->buttons_size - 1; i++) {
  809cfc:	e0bff117 	ldw	r2,-60(fp)
  809d00:	10800044 	addi	r2,r2,1
  809d04:	e0bff115 	stw	r2,-60(fp)
  809d08:	e0bff017 	ldw	r2,-64(fp)
  809d0c:	10800717 	ldw	r2,28(r2)
  809d10:	10ffffc4 	addi	r3,r2,-1
  809d14:	e0bff117 	ldw	r2,-60(fp)
  809d18:	10ffee16 	blt	r2,r3,809cd4 <initCtrlPanel+0x310>
		setBuyButton(f->buttons[i], i, a);
	}//setBuyButton(f->buttons[4], 3, a);
	f->buttons[5] = initButton(x1+5, y1+118, 20, NULL, NULL, e);
  809d1c:	e0bff017 	ldw	r2,-64(fp)
  809d20:	10800917 	ldw	r2,36(r2)
  809d24:	14000504 	addi	r16,r2,20
  809d28:	e0bffc17 	ldw	r2,-16(fp)
  809d2c:	11000144 	addi	r4,r2,5
  809d30:	e0bffd17 	ldw	r2,-12(fp)
  809d34:	11401d84 	addi	r5,r2,118
  809d38:	d8000015 	stw	zero,0(sp)
  809d3c:	e0800617 	ldw	r2,24(fp)
  809d40:	d8800115 	stw	r2,4(sp)
  809d44:	01800504 	movi	r6,20
  809d48:	000f883a 	mov	r7,zero
  809d4c:	0805f780 	call	805f78 <initButton>
  809d50:	80800015 	stw	r2,0(r16)
	setTxtButton(f->buttons[5], 21, 10, 30, "Start", 0, 0, 0);
  809d54:	e0bff017 	ldw	r2,-64(fp)
  809d58:	10800917 	ldw	r2,36(r2)
  809d5c:	10800504 	addi	r2,r2,20
  809d60:	11000017 	ldw	r4,0(r2)
  809d64:	008020f4 	movhi	r2,131
  809d68:	10a11c04 	addi	r2,r2,-31632
  809d6c:	d8800015 	stw	r2,0(sp)
  809d70:	d8000115 	stw	zero,4(sp)
  809d74:	d8000215 	stw	zero,8(sp)
  809d78:	d8000315 	stw	zero,12(sp)
  809d7c:	01400544 	movi	r5,21
  809d80:	01800284 	movi	r6,10
  809d84:	01c00784 	movi	r7,30
  809d88:	08061940 	call	806194 <setTxtButton>
	f->buttons[5]->super->collide = startGameButtonCollide;
  809d8c:	e0bff017 	ldw	r2,-64(fp)
  809d90:	10800917 	ldw	r2,36(r2)
  809d94:	10800504 	addi	r2,r2,20
  809d98:	10800017 	ldw	r2,0(r2)
  809d9c:	10c00017 	ldw	r3,0(r2)
  809da0:	00802034 	movhi	r2,128
  809da4:	109ba404 	addi	r2,r2,28304
  809da8:	18801a15 	stw	r2,104(r3)
	f->buttons[5]->redrawing = false;
  809dac:	e0bff017 	ldw	r2,-64(fp)
  809db0:	10800917 	ldw	r2,36(r2)
  809db4:	10800504 	addi	r2,r2,20
  809db8:	10800017 	ldw	r2,0(r2)
  809dbc:	10000a15 	stw	zero,40(r2)
	return f;
  809dc0:	e0bff017 	ldw	r2,-64(fp)
}
  809dc4:	e037883a 	mov	sp,fp
  809dc8:	dfc00517 	ldw	ra,20(sp)
  809dcc:	df000417 	ldw	fp,16(sp)
  809dd0:	dcc00317 	ldw	r19,12(sp)
  809dd4:	dc800217 	ldw	r18,8(sp)
  809dd8:	dc400117 	ldw	r17,4(sp)
  809ddc:	dc000017 	ldw	r16,0(sp)
  809de0:	dec00604 	addi	sp,sp,24
  809de4:	f800283a 	ret

00809de8 <initStatsPanel>:

struct Frame* initStatsPanel(int x1, int y1, int x2, int y2, struct Env* e, struct animation** a) {
  809de8:	defff304 	addi	sp,sp,-52
  809dec:	dfc00c15 	stw	ra,48(sp)
  809df0:	df000b15 	stw	fp,44(sp)
  809df4:	dc000a15 	stw	r16,40(sp)
  809df8:	df000a04 	addi	fp,sp,40
  809dfc:	e13ffc15 	stw	r4,-16(fp)
  809e00:	e17ffd15 	stw	r5,-12(fp)
  809e04:	e1bffe15 	stw	r6,-8(fp)
  809e08:	e1ffff15 	stw	r7,-4(fp)
	int i;

	struct Frame* f = initFrame(x1, y1, x2, y2, e);
  809e0c:	e0800317 	ldw	r2,12(fp)
  809e10:	d8800015 	stw	r2,0(sp)
  809e14:	e13ffc17 	ldw	r4,-16(fp)
  809e18:	e17ffd17 	ldw	r5,-12(fp)
  809e1c:	e1bffe17 	ldw	r6,-8(fp)
  809e20:	e1ffff17 	ldw	r7,-4(fp)
  809e24:	0808e180 	call	808e18 <initFrame>
  809e28:	e0bffa15 	stw	r2,-24(fp)
	f->redrawing = false;
  809e2c:	e0bffa17 	ldw	r2,-24(fp)
  809e30:	10000b05 	stb	zero,44(r2)
	f->buttons = (struct Button**)malloc(sizeof(struct Button*)*3);
  809e34:	01000304 	movi	r4,12
  809e38:	0814f580 	call	814f58 <malloc>
  809e3c:	1007883a 	mov	r3,r2
  809e40:	e0bffa17 	ldw	r2,-24(fp)
  809e44:	10c00915 	stw	r3,36(r2)
	f->buttons[0] = initButton(x1+5, y1+20, 20, NULL, NULL, e);
  809e48:	e0bffa17 	ldw	r2,-24(fp)
  809e4c:	14000917 	ldw	r16,36(r2)
  809e50:	e0bffc17 	ldw	r2,-16(fp)
  809e54:	11000144 	addi	r4,r2,5
  809e58:	e0bffd17 	ldw	r2,-12(fp)
  809e5c:	11400504 	addi	r5,r2,20
  809e60:	d8000015 	stw	zero,0(sp)
  809e64:	e0800317 	ldw	r2,12(fp)
  809e68:	d8800115 	stw	r2,4(sp)
  809e6c:	01800504 	movi	r6,20
  809e70:	000f883a 	mov	r7,zero
  809e74:	0805f780 	call	805f78 <initButton>
  809e78:	80800015 	stw	r2,0(r16)
//	f->buttons[1] = initButton(x1+30, y1+20, 20, initAnimation(b0, 1), initAnimation(b0p, 1), e);
//	f->buttons[2] = initButton(x1+5, y1+45, 20, initAnimation(b2, 1), initAnimation(b2p, 1), e);
//	f->buttons[3] = initButton(x1+30, y1+45, 20, initAnimation(b3, 1), initAnimation(b3p, 1), e);
//	f->buttons[4] = initButton(x1+5, y1+70, 20, initAnimation(b3, 1), initAnimation(b3p, 1), e);
	f->buttons_size = 1;
  809e7c:	e0fffa17 	ldw	r3,-24(fp)
  809e80:	00800044 	movi	r2,1
  809e84:	18800715 	stw	r2,28(r3)
		setTxtButton(f->buttons[0], 20, 10, 20, "Upgrade", 0x48, 0x3a, 0x3a);
  809e88:	e0bffa17 	ldw	r2,-24(fp)
  809e8c:	10800917 	ldw	r2,36(r2)
  809e90:	11000017 	ldw	r4,0(r2)
  809e94:	008020f4 	movhi	r2,131
  809e98:	10a14504 	addi	r2,r2,-31468
  809e9c:	d8800015 	stw	r2,0(sp)
  809ea0:	00801204 	movi	r2,72
  809ea4:	d8800115 	stw	r2,4(sp)
  809ea8:	00800e84 	movi	r2,58
  809eac:	d8800215 	stw	r2,8(sp)
  809eb0:	00800e84 	movi	r2,58
  809eb4:	d8800315 	stw	r2,12(sp)
  809eb8:	01400504 	movi	r5,20
  809ebc:	01800284 	movi	r6,10
  809ec0:	01c00504 	movi	r7,20
  809ec4:	08061940 	call	806194 <setTxtButton>
		f->buttons[0]->super->collide = upgradeButtonCollide;
  809ec8:	e0bffa17 	ldw	r2,-24(fp)
  809ecc:	10800917 	ldw	r2,36(r2)
  809ed0:	10800017 	ldw	r2,0(r2)
  809ed4:	10c00017 	ldw	r3,0(r2)
  809ed8:	00802034 	movhi	r2,128
  809edc:	109b6304 	addi	r2,r2,28044
  809ee0:	18801a15 	stw	r2,104(r3)
		f->buttons[0]->redrawing = false;
  809ee4:	e0bffa17 	ldw	r2,-24(fp)
  809ee8:	10800917 	ldw	r2,36(r2)
  809eec:	10800017 	ldw	r2,0(r2)
  809ef0:	10000a15 	stw	zero,40(r2)
	return f;
  809ef4:	e0bffa17 	ldw	r2,-24(fp)
}
  809ef8:	e037883a 	mov	sp,fp
  809efc:	dfc00217 	ldw	ra,8(sp)
  809f00:	df000117 	ldw	fp,4(sp)
  809f04:	dc000017 	ldw	r16,0(sp)
  809f08:	dec00304 	addi	sp,sp,12
  809f0c:	f800283a 	ret

00809f10 <initMenuPanel>:
struct Frame* initMenuPanel(int x1, int y1, int x2, int y2, struct Env* e, struct animation** a) {
  809f10:	defff404 	addi	sp,sp,-48
  809f14:	dfc00b15 	stw	ra,44(sp)
  809f18:	df000a15 	stw	fp,40(sp)
  809f1c:	dc000915 	stw	r16,36(sp)
  809f20:	df000904 	addi	fp,sp,36
  809f24:	e13ffc15 	stw	r4,-16(fp)
  809f28:	e17ffd15 	stw	r5,-12(fp)
  809f2c:	e1bffe15 	stw	r6,-8(fp)
  809f30:	e1ffff15 	stw	r7,-4(fp)

	struct Frame* f = initFrame(x1, y1, x2, y2, e);
  809f34:	e0800317 	ldw	r2,12(fp)
  809f38:	d8800015 	stw	r2,0(sp)
  809f3c:	e13ffc17 	ldw	r4,-16(fp)
  809f40:	e17ffd17 	ldw	r5,-12(fp)
  809f44:	e1bffe17 	ldw	r6,-8(fp)
  809f48:	e1ffff17 	ldw	r7,-4(fp)
  809f4c:	0808e180 	call	808e18 <initFrame>
  809f50:	e0bffb15 	stw	r2,-20(fp)
	f->redrawing = false;
  809f54:	e0bffb17 	ldw	r2,-20(fp)
  809f58:	10000b05 	stb	zero,44(r2)
	f->buttons = (struct Button**)malloc(sizeof(struct Button*));
  809f5c:	01000104 	movi	r4,4
  809f60:	0814f580 	call	814f58 <malloc>
  809f64:	1007883a 	mov	r3,r2
  809f68:	e0bffb17 	ldw	r2,-20(fp)
  809f6c:	10c00915 	stw	r3,36(r2)
	f->buttons[0] = initButton(x1+5, y1+20, 20, NULL, NULL, e);
  809f70:	e0bffb17 	ldw	r2,-20(fp)
  809f74:	14000917 	ldw	r16,36(r2)
  809f78:	e0bffc17 	ldw	r2,-16(fp)
  809f7c:	11000144 	addi	r4,r2,5
  809f80:	e0bffd17 	ldw	r2,-12(fp)
  809f84:	11400504 	addi	r5,r2,20
  809f88:	d8000015 	stw	zero,0(sp)
  809f8c:	e0800317 	ldw	r2,12(fp)
  809f90:	d8800115 	stw	r2,4(sp)
  809f94:	01800504 	movi	r6,20
  809f98:	000f883a 	mov	r7,zero
  809f9c:	0805f780 	call	805f78 <initButton>
  809fa0:	80800015 	stw	r2,0(r16)
	f->buttons_size = 1;
  809fa4:	e0fffb17 	ldw	r3,-20(fp)
  809fa8:	00800044 	movi	r2,1
  809fac:	18800715 	stw	r2,28(r3)
	setTxtButton(f->buttons[0], 21, 10, 40, "End Game", 0xFF, 0, 0);
  809fb0:	e0bffb17 	ldw	r2,-20(fp)
  809fb4:	10800917 	ldw	r2,36(r2)
  809fb8:	11000017 	ldw	r4,0(r2)
  809fbc:	008020f4 	movhi	r2,131
  809fc0:	10a14704 	addi	r2,r2,-31460
  809fc4:	d8800015 	stw	r2,0(sp)
  809fc8:	00803fc4 	movi	r2,255
  809fcc:	d8800115 	stw	r2,4(sp)
  809fd0:	d8000215 	stw	zero,8(sp)
  809fd4:	d8000315 	stw	zero,12(sp)
  809fd8:	01400544 	movi	r5,21
  809fdc:	01800284 	movi	r6,10
  809fe0:	01c00a04 	movi	r7,40
  809fe4:	08061940 	call	806194 <setTxtButton>
	f->buttons[0]->super->collide = endGameButtonCollide;
  809fe8:	e0bffb17 	ldw	r2,-20(fp)
  809fec:	10800917 	ldw	r2,36(r2)
  809ff0:	10800017 	ldw	r2,0(r2)
  809ff4:	10c00017 	ldw	r3,0(r2)
  809ff8:	00802034 	movhi	r2,128
  809ffc:	109b8a04 	addi	r2,r2,28200
  80a000:	18801a15 	stw	r2,104(r3)
	f->buttons[0]->redrawing = false;
  80a004:	e0bffb17 	ldw	r2,-20(fp)
  80a008:	10800917 	ldw	r2,36(r2)
  80a00c:	10800017 	ldw	r2,0(r2)
  80a010:	10000a15 	stw	zero,40(r2)
	return f;
  80a014:	e0bffb17 	ldw	r2,-20(fp)
}
  80a018:	e037883a 	mov	sp,fp
  80a01c:	dfc00217 	ldw	ra,8(sp)
  80a020:	df000117 	ldw	fp,4(sp)
  80a024:	dc000017 	ldw	r16,0(sp)
  80a028:	dec00304 	addi	sp,sp,12
  80a02c:	f800283a 	ret

0080a030 <initMsgBoard>:
struct Frame* initMsgBoard(int x1, int y1, int x2, int y2) {
  80a030:	defff804 	addi	sp,sp,-32
  80a034:	dfc00715 	stw	ra,28(sp)
  80a038:	df000615 	stw	fp,24(sp)
  80a03c:	df000604 	addi	fp,sp,24
  80a040:	e13ffc15 	stw	r4,-16(fp)
  80a044:	e17ffd15 	stw	r5,-12(fp)
  80a048:	e1bffe15 	stw	r6,-8(fp)
  80a04c:	e1ffff15 	stw	r7,-4(fp)
	struct Frame* f = initFrame(x1, y1, x2, y2, NULL);
  80a050:	d8000015 	stw	zero,0(sp)
  80a054:	e13ffc17 	ldw	r4,-16(fp)
  80a058:	e17ffd17 	ldw	r5,-12(fp)
  80a05c:	e1bffe17 	ldw	r6,-8(fp)
  80a060:	e1ffff17 	ldw	r7,-4(fp)
  80a064:	0808e180 	call	808e18 <initFrame>
  80a068:	e0bffb15 	stw	r2,-20(fp)
	f->redrawing = true;
  80a06c:	e0fffb17 	ldw	r3,-20(fp)
  80a070:	00800044 	movi	r2,1
  80a074:	18800b05 	stb	r2,44(r3)
	f->str = (char*)malloc(sizeof(char)*30);
  80a078:	01000784 	movi	r4,30
  80a07c:	0814f580 	call	814f58 <malloc>
  80a080:	1007883a 	mov	r3,r2
  80a084:	e0bffb17 	ldw	r2,-20(fp)
  80a088:	10c00a15 	stw	r3,40(r2)
	return f;
  80a08c:	e0bffb17 	ldw	r2,-20(fp)
}
  80a090:	e037883a 	mov	sp,fp
  80a094:	dfc00117 	ldw	ra,4(sp)
  80a098:	df000017 	ldw	fp,0(sp)
  80a09c:	dec00204 	addi	sp,sp,8
  80a0a0:	f800283a 	ret

0080a0a4 <updateScoreFrame>:

/*Update the score board with current score*/
void updateScoreFrame() {
  80a0a4:	deffe704 	addi	sp,sp,-100
  80a0a8:	dfc01815 	stw	ra,96(sp)
  80a0ac:	df001715 	stw	fp,92(sp)
  80a0b0:	df001704 	addi	fp,sp,92
	char string[30], currency[30], invaded[30];
	sprintf(string, "Score %d ", info.score);
  80a0b4:	008020f4 	movhi	r2,131
  80a0b8:	109cb404 	addi	r2,r2,29392
  80a0bc:	11800017 	ldw	r6,0(r2)
  80a0c0:	e13fe904 	addi	r4,fp,-92
  80a0c4:	014020f4 	movhi	r5,131
  80a0c8:	29614a04 	addi	r5,r5,-31448
  80a0cc:	081597c0 	call	81597c <sprintf>
	sprintf(currency, "$$ -> %d ", info.currency);
  80a0d0:	008020f4 	movhi	r2,131
  80a0d4:	109cb404 	addi	r2,r2,29392
  80a0d8:	11800117 	ldw	r6,4(r2)
  80a0dc:	e13ff084 	addi	r4,fp,-62
  80a0e0:	014020f4 	movhi	r5,131
  80a0e4:	29614d04 	addi	r5,r5,-31436
  80a0e8:	081597c0 	call	81597c <sprintf>
	sprintf(invaded, "Aliens %d ", info.invadedAlien);
  80a0ec:	008020f4 	movhi	r2,131
  80a0f0:	109cb404 	addi	r2,r2,29392
  80a0f4:	11800317 	ldw	r6,12(r2)
  80a0f8:	e13ff804 	addi	r4,fp,-32
  80a0fc:	014020f4 	movhi	r5,131
  80a100:	29615004 	addi	r5,r5,-31424
  80a104:	081597c0 	call	81597c <sprintf>
	alt_up_char_buffer_string(char_buffer, string, 65, 2);
  80a108:	d13c2217 	ldw	r4,-3960(gp)
  80a10c:	e17fe904 	addi	r5,fp,-92
  80a110:	01801044 	movi	r6,65
  80a114:	01c00084 	movi	r7,2
  80a118:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, currency, 65, 4);
  80a11c:	d13c2217 	ldw	r4,-3960(gp)
  80a120:	e17ff084 	addi	r5,fp,-62
  80a124:	01801044 	movi	r6,65
  80a128:	01c00104 	movi	r7,4
  80a12c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, invaded, 65, 6);
  80a130:	d13c2217 	ldw	r4,-3960(gp)
  80a134:	e17ff804 	addi	r5,fp,-32
  80a138:	01801044 	movi	r6,65
  80a13c:	01c00184 	movi	r7,6
  80a140:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
}
  80a144:	e037883a 	mov	sp,fp
  80a148:	dfc00117 	ldw	ra,4(sp)
  80a14c:	df000017 	ldw	fp,0(sp)
  80a150:	dec00204 	addi	sp,sp,8
  80a154:	f800283a 	ret

0080a158 <writeMSG>:

void writeMSG(char* str) {
  80a158:	defffd04 	addi	sp,sp,-12
  80a15c:	dfc00215 	stw	ra,8(sp)
  80a160:	df000115 	stw	fp,4(sp)
  80a164:	df000104 	addi	fp,sp,4
  80a168:	e13fff15 	stw	r4,-4(fp)
	updateMSG(gamePanel.elements[2], str);
  80a16c:	008020f4 	movhi	r2,131
  80a170:	109cc404 	addi	r2,r2,29456
  80a174:	10800d17 	ldw	r2,52(r2)
  80a178:	10800204 	addi	r2,r2,8
  80a17c:	11000017 	ldw	r4,0(r2)
  80a180:	e17fff17 	ldw	r5,-4(fp)
  80a184:	080a3040 	call	80a304 <updateMSG>
}
  80a188:	e037883a 	mov	sp,fp
  80a18c:	dfc00117 	ldw	ra,4(sp)
  80a190:	df000017 	ldw	fp,0(sp)
  80a194:	dec00204 	addi	sp,sp,8
  80a198:	f800283a 	ret

0080a19c <strsep_>:
/*Update the message board with message; will warp words to next line
 * if message has already displayed, it will reprint it on the same line
 *
 * */
int strsep_(char* string, char sep, char** arr) {
  80a19c:	defff604 	addi	sp,sp,-40
  80a1a0:	dfc00915 	stw	ra,36(sp)
  80a1a4:	df000815 	stw	fp,32(sp)
  80a1a8:	dc000715 	stw	r16,28(sp)
  80a1ac:	df000704 	addi	fp,sp,28
  80a1b0:	e13ffd15 	stw	r4,-12(fp)
  80a1b4:	e1bfff15 	stw	r6,-4(fp)
  80a1b8:	e17ffe05 	stb	r5,-8(fp)
	int i, j = 0, index = 0;
  80a1bc:	e03ffb15 	stw	zero,-20(fp)
  80a1c0:	e03ffa15 	stw	zero,-24(fp)
	int len = strlen(string);
  80a1c4:	e13ffd17 	ldw	r4,-12(fp)
  80a1c8:	0815adc0 	call	815adc <strlen>
  80a1cc:	e0bff915 	stw	r2,-28(fp)
	arr[0] = (char*)malloc(sizeof(char)*15);
  80a1d0:	010003c4 	movi	r4,15
  80a1d4:	0814f580 	call	814f58 <malloc>
  80a1d8:	1007883a 	mov	r3,r2
  80a1dc:	e0bfff17 	ldw	r2,-4(fp)
  80a1e0:	10c00015 	stw	r3,0(r2)
	for(i = 0; i < len; i++) {
  80a1e4:	e03ffc15 	stw	zero,-16(fp)
  80a1e8:	00003b06 	br	80a2d8 <strsep_+0x13c>
		if(string[i] == sep && i < len-1) {
  80a1ec:	e0bffc17 	ldw	r2,-16(fp)
  80a1f0:	1007883a 	mov	r3,r2
  80a1f4:	e0bffd17 	ldw	r2,-12(fp)
  80a1f8:	1885883a 	add	r2,r3,r2
  80a1fc:	10800003 	ldbu	r2,0(r2)
  80a200:	10c03fcc 	andi	r3,r2,255
  80a204:	18c0201c 	xori	r3,r3,128
  80a208:	18ffe004 	addi	r3,r3,-128
  80a20c:	e0bffe07 	ldb	r2,-8(fp)
  80a210:	18801c1e 	bne	r3,r2,80a284 <strsep_+0xe8>
  80a214:	e0bff917 	ldw	r2,-28(fp)
  80a218:	10ffffc4 	addi	r3,r2,-1
  80a21c:	e0bffc17 	ldw	r2,-16(fp)
  80a220:	10c0180e 	bge	r2,r3,80a284 <strsep_+0xe8>
			arr[index][j] = '\0';
  80a224:	e0bffa17 	ldw	r2,-24(fp)
  80a228:	1085883a 	add	r2,r2,r2
  80a22c:	1085883a 	add	r2,r2,r2
  80a230:	1007883a 	mov	r3,r2
  80a234:	e0bfff17 	ldw	r2,-4(fp)
  80a238:	1885883a 	add	r2,r3,r2
  80a23c:	10c00017 	ldw	r3,0(r2)
  80a240:	e0bffb17 	ldw	r2,-20(fp)
  80a244:	1885883a 	add	r2,r3,r2
  80a248:	10000005 	stb	zero,0(r2)
			j = 0;
  80a24c:	e03ffb15 	stw	zero,-20(fp)
			index++;
  80a250:	e0bffa17 	ldw	r2,-24(fp)
  80a254:	10800044 	addi	r2,r2,1
  80a258:	e0bffa15 	stw	r2,-24(fp)
			arr[index] = (char*)malloc(sizeof(char)*15);
  80a25c:	e0bffa17 	ldw	r2,-24(fp)
  80a260:	1085883a 	add	r2,r2,r2
  80a264:	1085883a 	add	r2,r2,r2
  80a268:	1007883a 	mov	r3,r2
  80a26c:	e0bfff17 	ldw	r2,-4(fp)
  80a270:	18a1883a 	add	r16,r3,r2
  80a274:	010003c4 	movi	r4,15
  80a278:	0814f580 	call	814f58 <malloc>
  80a27c:	80800015 	stw	r2,0(r16)
int strsep_(char* string, char sep, char** arr) {
	int i, j = 0, index = 0;
	int len = strlen(string);
	arr[0] = (char*)malloc(sizeof(char)*15);
	for(i = 0; i < len; i++) {
		if(string[i] == sep && i < len-1) {
  80a280:	00001206 	br	80a2cc <strsep_+0x130>
			arr[index][j] = '\0';
			j = 0;
			index++;
			arr[index] = (char*)malloc(sizeof(char)*15);
		} else {
			arr[index][j] = string[i];
  80a284:	e0bffa17 	ldw	r2,-24(fp)
  80a288:	1085883a 	add	r2,r2,r2
  80a28c:	1085883a 	add	r2,r2,r2
  80a290:	1007883a 	mov	r3,r2
  80a294:	e0bfff17 	ldw	r2,-4(fp)
  80a298:	1885883a 	add	r2,r3,r2
  80a29c:	10c00017 	ldw	r3,0(r2)
  80a2a0:	e0bffb17 	ldw	r2,-20(fp)
  80a2a4:	1889883a 	add	r4,r3,r2
  80a2a8:	e0bffc17 	ldw	r2,-16(fp)
  80a2ac:	1007883a 	mov	r3,r2
  80a2b0:	e0bffd17 	ldw	r2,-12(fp)
  80a2b4:	1885883a 	add	r2,r3,r2
  80a2b8:	10800003 	ldbu	r2,0(r2)
  80a2bc:	20800005 	stb	r2,0(r4)
			j++;
  80a2c0:	e0bffb17 	ldw	r2,-20(fp)
  80a2c4:	10800044 	addi	r2,r2,1
  80a2c8:	e0bffb15 	stw	r2,-20(fp)
 * */
int strsep_(char* string, char sep, char** arr) {
	int i, j = 0, index = 0;
	int len = strlen(string);
	arr[0] = (char*)malloc(sizeof(char)*15);
	for(i = 0; i < len; i++) {
  80a2cc:	e0bffc17 	ldw	r2,-16(fp)
  80a2d0:	10800044 	addi	r2,r2,1
  80a2d4:	e0bffc15 	stw	r2,-16(fp)
  80a2d8:	e0fffc17 	ldw	r3,-16(fp)
  80a2dc:	e0bff917 	ldw	r2,-28(fp)
  80a2e0:	18bfc216 	blt	r3,r2,80a1ec <strsep_+0x50>
		} else {
			arr[index][j] = string[i];
			j++;
		}
	}
	return index+1;
  80a2e4:	e0bffa17 	ldw	r2,-24(fp)
  80a2e8:	10800044 	addi	r2,r2,1
}
  80a2ec:	e037883a 	mov	sp,fp
  80a2f0:	dfc00217 	ldw	ra,8(sp)
  80a2f4:	df000117 	ldw	fp,4(sp)
  80a2f8:	dc000017 	ldw	r16,0(sp)
  80a2fc:	dec00304 	addi	sp,sp,12
  80a300:	f800283a 	ret

0080a304 <updateMSG>:
void updateMSG(struct Frame* f, char* msg) {
  80a304:	defff404 	addi	sp,sp,-48
  80a308:	dfc00b15 	stw	ra,44(sp)
  80a30c:	df000a15 	stw	fp,40(sp)
  80a310:	dc000915 	stw	r16,36(sp)
  80a314:	df000904 	addi	fp,sp,36
  80a318:	e13ffe15 	stw	r4,-8(fp)
  80a31c:	e17fff15 	stw	r5,-4(fp)

	if(f->statesLine > 10) {
  80a320:	e0bffe17 	ldw	r2,-8(fp)
  80a324:	10800417 	ldw	r2,16(r2)
  80a328:	108002d0 	cmplti	r2,r2,11
  80a32c:	1000011e 	bne	r2,zero,80a334 <updateMSG+0x30>
		clearMBoard();
  80a330:	080a6640 	call	80a664 <clearMBoard>
	}
	int i = 0, len = 15, len1 = 0, len2 = 0, j = 0;
  80a334:	e03ffb15 	stw	zero,-20(fp)
  80a338:	008003c4 	movi	r2,15
  80a33c:	e0bffa15 	stw	r2,-24(fp)
  80a340:	e03ff915 	stw	zero,-28(fp)
  80a344:	e03ff815 	stw	zero,-32(fp)
  80a348:	e03ff715 	stw	zero,-36(fp)
	char* line = (char*)malloc(sizeof(char)*30);
  80a34c:	01000784 	movi	r4,30
  80a350:	0814f580 	call	814f58 <malloc>
  80a354:	e0bffc15 	stw	r2,-16(fp)
	line[0] = '\0';
  80a358:	e0bffc17 	ldw	r2,-16(fp)
  80a35c:	10000005 	stb	zero,0(r2)
	char** str;
	if((str = (char**)malloc(sizeof(char*)*40))==NULL) printf("NULL!!!\n");
  80a360:	01002804 	movi	r4,160
  80a364:	0814f580 	call	814f58 <malloc>
  80a368:	e0bffd15 	stw	r2,-12(fp)
  80a36c:	e0bffd17 	ldw	r2,-12(fp)
  80a370:	1004c03a 	cmpne	r2,r2,zero
  80a374:	1000031e 	bne	r2,zero,80a384 <updateMSG+0x80>
  80a378:	010020f4 	movhi	r4,131
  80a37c:	21215304 	addi	r4,r4,-31412
  80a380:	08158640 	call	815864 <puts>
	if((len1 = strsep_(msg, ' ', str)) > 40) printf("MEMORY Overflow!\n");
  80a384:	e1bffd17 	ldw	r6,-12(fp)
  80a388:	e13fff17 	ldw	r4,-4(fp)
  80a38c:	01400804 	movi	r5,32
  80a390:	080a19c0 	call	80a19c <strsep_>
  80a394:	e0bff915 	stw	r2,-28(fp)
  80a398:	e0bff917 	ldw	r2,-28(fp)
  80a39c:	10800a50 	cmplti	r2,r2,41
  80a3a0:	1000031e 	bne	r2,zero,80a3b0 <updateMSG+0xac>
  80a3a4:	010020f4 	movhi	r4,131
  80a3a8:	21215504 	addi	r4,r4,-31404
  80a3ac:	08158640 	call	815864 <puts>
	for(i = 0; i < len1; i++) {
  80a3b0:	e03ffb15 	stw	zero,-20(fp)
  80a3b4:	00006006 	br	80a538 <updateMSG+0x234>
		len2 = strlen(str[i]);
  80a3b8:	e0bffb17 	ldw	r2,-20(fp)
  80a3bc:	1085883a 	add	r2,r2,r2
  80a3c0:	1085883a 	add	r2,r2,r2
  80a3c4:	1007883a 	mov	r3,r2
  80a3c8:	e0bffd17 	ldw	r2,-12(fp)
  80a3cc:	1885883a 	add	r2,r3,r2
  80a3d0:	11000017 	ldw	r4,0(r2)
  80a3d4:	0815adc0 	call	815adc <strlen>
  80a3d8:	e0bff815 	stw	r2,-32(fp)
		if((len -= len2+1)>0 ) {
  80a3dc:	e0fffa17 	ldw	r3,-24(fp)
  80a3e0:	e0bff817 	ldw	r2,-32(fp)
  80a3e4:	1885c83a 	sub	r2,r3,r2
  80a3e8:	10bfffc4 	addi	r2,r2,-1
  80a3ec:	e0bffa15 	stw	r2,-24(fp)
  80a3f0:	e0bffa17 	ldw	r2,-24(fp)
  80a3f4:	10800050 	cmplti	r2,r2,1
  80a3f8:	1000131e 	bne	r2,zero,80a448 <updateMSG+0x144>
			strncat(line, str[i], len2);
  80a3fc:	e13ffc17 	ldw	r4,-16(fp)
  80a400:	e0bffb17 	ldw	r2,-20(fp)
  80a404:	1085883a 	add	r2,r2,r2
  80a408:	1085883a 	add	r2,r2,r2
  80a40c:	1007883a 	mov	r3,r2
  80a410:	e0bffd17 	ldw	r2,-12(fp)
  80a414:	1885883a 	add	r2,r3,r2
  80a418:	11400017 	ldw	r5,0(r2)
  80a41c:	e1bff817 	ldw	r6,-32(fp)
  80a420:	0815b500 	call	815b50 <strncat>
			strncat(line, " ", 1);
  80a424:	e43ffc17 	ldw	r16,-16(fp)
  80a428:	8009883a 	mov	r4,r16
  80a42c:	0815adc0 	call	815adc <strlen>
  80a430:	1405883a 	add	r2,r2,r16
  80a434:	1007883a 	mov	r3,r2
  80a438:	00800804 	movi	r2,32
  80a43c:	18800005 	stb	r2,0(r3)
  80a440:	18000045 	stb	zero,1(r3)
  80a444:	00003906 	br	80a52c <updateMSG+0x228>
		} else {
			for(j = 0; j <= len+len2; j++) {
  80a448:	e03ff715 	stw	zero,-36(fp)
  80a44c:	00000b06 	br	80a47c <updateMSG+0x178>
				strncat(line, " ", 1);
  80a450:	e43ffc17 	ldw	r16,-16(fp)
  80a454:	8009883a 	mov	r4,r16
  80a458:	0815adc0 	call	815adc <strlen>
  80a45c:	1405883a 	add	r2,r2,r16
  80a460:	1007883a 	mov	r3,r2
  80a464:	00800804 	movi	r2,32
  80a468:	18800005 	stb	r2,0(r3)
  80a46c:	18000045 	stb	zero,1(r3)
		len2 = strlen(str[i]);
		if((len -= len2+1)>0 ) {
			strncat(line, str[i], len2);
			strncat(line, " ", 1);
		} else {
			for(j = 0; j <= len+len2; j++) {
  80a470:	e0bff717 	ldw	r2,-36(fp)
  80a474:	10800044 	addi	r2,r2,1
  80a478:	e0bff715 	stw	r2,-36(fp)
  80a47c:	e0fffa17 	ldw	r3,-24(fp)
  80a480:	e0bff817 	ldw	r2,-32(fp)
  80a484:	1887883a 	add	r3,r3,r2
  80a488:	e0bff717 	ldw	r2,-36(fp)
  80a48c:	18bff00e 	bge	r3,r2,80a450 <updateMSG+0x14c>
				strncat(line, " ", 1);
			}
			alt_up_char_buffer_string(char_buffer, line, 64, 46+f->statesLine);
  80a490:	d13c2217 	ldw	r4,-3960(gp)
  80a494:	e17ffc17 	ldw	r5,-16(fp)
  80a498:	e0bffe17 	ldw	r2,-8(fp)
  80a49c:	10800417 	ldw	r2,16(r2)
  80a4a0:	10800b84 	addi	r2,r2,46
  80a4a4:	100f883a 	mov	r7,r2
  80a4a8:	01801004 	movi	r6,64
  80a4ac:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
			f->statesLine++;
  80a4b0:	e0bffe17 	ldw	r2,-8(fp)
  80a4b4:	10800417 	ldw	r2,16(r2)
  80a4b8:	10c00044 	addi	r3,r2,1
  80a4bc:	e0bffe17 	ldw	r2,-8(fp)
  80a4c0:	10c00415 	stw	r3,16(r2)
			len = 15 - len2 - 1;
  80a4c4:	00c00384 	movi	r3,14
  80a4c8:	e0bff817 	ldw	r2,-32(fp)
  80a4cc:	1885c83a 	sub	r2,r3,r2
  80a4d0:	e0bffa15 	stw	r2,-24(fp)
			strncpy(line, str[i], len2);
  80a4d4:	e13ffc17 	ldw	r4,-16(fp)
  80a4d8:	e0bffb17 	ldw	r2,-20(fp)
  80a4dc:	1085883a 	add	r2,r2,r2
  80a4e0:	1085883a 	add	r2,r2,r2
  80a4e4:	1007883a 	mov	r3,r2
  80a4e8:	e0bffd17 	ldw	r2,-12(fp)
  80a4ec:	1885883a 	add	r2,r3,r2
  80a4f0:	11400017 	ldw	r5,0(r2)
  80a4f4:	e1bff817 	ldw	r6,-32(fp)
  80a4f8:	0815c000 	call	815c00 <strncpy>
			line[len2] = '\0';
  80a4fc:	e0fffc17 	ldw	r3,-16(fp)
  80a500:	e0bff817 	ldw	r2,-32(fp)
  80a504:	1885883a 	add	r2,r3,r2
  80a508:	10000005 	stb	zero,0(r2)
			strncat(line, " ", 1);
  80a50c:	e43ffc17 	ldw	r16,-16(fp)
  80a510:	8009883a 	mov	r4,r16
  80a514:	0815adc0 	call	815adc <strlen>
  80a518:	1405883a 	add	r2,r2,r16
  80a51c:	1007883a 	mov	r3,r2
  80a520:	00800804 	movi	r2,32
  80a524:	18800005 	stb	r2,0(r3)
  80a528:	18000045 	stb	zero,1(r3)
	char* line = (char*)malloc(sizeof(char)*30);
	line[0] = '\0';
	char** str;
	if((str = (char**)malloc(sizeof(char*)*40))==NULL) printf("NULL!!!\n");
	if((len1 = strsep_(msg, ' ', str)) > 40) printf("MEMORY Overflow!\n");
	for(i = 0; i < len1; i++) {
  80a52c:	e0bffb17 	ldw	r2,-20(fp)
  80a530:	10800044 	addi	r2,r2,1
  80a534:	e0bffb15 	stw	r2,-20(fp)
  80a538:	e0fffb17 	ldw	r3,-20(fp)
  80a53c:	e0bff917 	ldw	r2,-28(fp)
  80a540:	18bf9d16 	blt	r3,r2,80a3b8 <updateMSG+0xb4>
			len = 15 - len2 - 1;
			strncpy(line, str[i], len2);
			line[len2] = '\0';
			strncat(line, " ", 1);
		}
	}for(j = 0; j <= len; j++) {
  80a544:	e03ff715 	stw	zero,-36(fp)
  80a548:	00000b06 	br	80a578 <updateMSG+0x274>
		strncat(line, " ", 1);
  80a54c:	e43ffc17 	ldw	r16,-16(fp)
  80a550:	8009883a 	mov	r4,r16
  80a554:	0815adc0 	call	815adc <strlen>
  80a558:	1405883a 	add	r2,r2,r16
  80a55c:	1007883a 	mov	r3,r2
  80a560:	00800804 	movi	r2,32
  80a564:	18800005 	stb	r2,0(r3)
  80a568:	18000045 	stb	zero,1(r3)
			len = 15 - len2 - 1;
			strncpy(line, str[i], len2);
			line[len2] = '\0';
			strncat(line, " ", 1);
		}
	}for(j = 0; j <= len; j++) {
  80a56c:	e0bff717 	ldw	r2,-36(fp)
  80a570:	10800044 	addi	r2,r2,1
  80a574:	e0bff715 	stw	r2,-36(fp)
  80a578:	e0fff717 	ldw	r3,-36(fp)
  80a57c:	e0bffa17 	ldw	r2,-24(fp)
  80a580:	10fff20e 	bge	r2,r3,80a54c <updateMSG+0x248>
		} i++;
	}
	for(j = 0; j < len; j++) {
		strncat(line, " ", 1);
	}*/
	alt_up_char_buffer_string(char_buffer, line, 64, 46+f->statesLine++);
  80a584:	d13c2217 	ldw	r4,-3960(gp)
  80a588:	e17ffc17 	ldw	r5,-16(fp)
  80a58c:	e0bffe17 	ldw	r2,-8(fp)
  80a590:	10c00417 	ldw	r3,16(r2)
  80a594:	18800b84 	addi	r2,r3,46
  80a598:	100f883a 	mov	r7,r2
  80a59c:	18c00044 	addi	r3,r3,1
  80a5a0:	e0bffe17 	ldw	r2,-8(fp)
  80a5a4:	10c00415 	stw	r3,16(r2)
  80a5a8:	01801004 	movi	r6,64
  80a5ac:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "               ", 64, 46+f->statesLine++);
  80a5b0:	d13c2217 	ldw	r4,-3960(gp)
  80a5b4:	e0bffe17 	ldw	r2,-8(fp)
  80a5b8:	10c00417 	ldw	r3,16(r2)
  80a5bc:	18800b84 	addi	r2,r3,46
  80a5c0:	100f883a 	mov	r7,r2
  80a5c4:	18c00044 	addi	r3,r3,1
  80a5c8:	e0bffe17 	ldw	r2,-8(fp)
  80a5cc:	10c00415 	stw	r3,16(r2)
  80a5d0:	014020f4 	movhi	r5,131
  80a5d4:	29615a04 	addi	r5,r5,-31384
  80a5d8:	01801004 	movi	r6,64
  80a5dc:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	for(j = 0; j < len1; j++) {
  80a5e0:	e03ff715 	stw	zero,-36(fp)
  80a5e4:	00001206 	br	80a630 <updateMSG+0x32c>
		free(str[j]);
  80a5e8:	e0bff717 	ldw	r2,-36(fp)
  80a5ec:	1085883a 	add	r2,r2,r2
  80a5f0:	1085883a 	add	r2,r2,r2
  80a5f4:	1007883a 	mov	r3,r2
  80a5f8:	e0bffd17 	ldw	r2,-12(fp)
  80a5fc:	1885883a 	add	r2,r3,r2
  80a600:	11000017 	ldw	r4,0(r2)
  80a604:	0814f440 	call	814f44 <free>
		str[j] = NULL;
  80a608:	e0bff717 	ldw	r2,-36(fp)
  80a60c:	1085883a 	add	r2,r2,r2
  80a610:	1085883a 	add	r2,r2,r2
  80a614:	1007883a 	mov	r3,r2
  80a618:	e0bffd17 	ldw	r2,-12(fp)
  80a61c:	1885883a 	add	r2,r3,r2
  80a620:	10000015 	stw	zero,0(r2)
	for(j = 0; j < len; j++) {
		strncat(line, " ", 1);
	}*/
	alt_up_char_buffer_string(char_buffer, line, 64, 46+f->statesLine++);
	alt_up_char_buffer_string(char_buffer, "               ", 64, 46+f->statesLine++);
	for(j = 0; j < len1; j++) {
  80a624:	e0bff717 	ldw	r2,-36(fp)
  80a628:	10800044 	addi	r2,r2,1
  80a62c:	e0bff715 	stw	r2,-36(fp)
  80a630:	e0fff717 	ldw	r3,-36(fp)
  80a634:	e0bff917 	ldw	r2,-28(fp)
  80a638:	18bfeb16 	blt	r3,r2,80a5e8 <updateMSG+0x2e4>
		free(str[j]);
		str[j] = NULL;
	}

	safefree(&str);
  80a63c:	e13ffd04 	addi	r4,fp,-12
  80a640:	080af080 	call	80af08 <safefree>
	safefree(&line);
  80a644:	e13ffc04 	addi	r4,fp,-16
  80a648:	080af080 	call	80af08 <safefree>
	//safefree(&temp);
//	free(msg);
//	msg = NULL;
}
  80a64c:	e037883a 	mov	sp,fp
  80a650:	dfc00217 	ldw	ra,8(sp)
  80a654:	df000117 	ldw	fp,4(sp)
  80a658:	dc000017 	ldw	r16,0(sp)
  80a65c:	dec00304 	addi	sp,sp,12
  80a660:	f800283a 	ret

0080a664 <clearMBoard>:

void clearMBoard() {
  80a664:	defffd04 	addi	sp,sp,-12
  80a668:	dfc00215 	stw	ra,8(sp)
  80a66c:	df000115 	stw	fp,4(sp)
  80a670:	df000104 	addi	fp,sp,4
	int i;
	for(i = 0; i < 14; i++) {
  80a674:	e03fff15 	stw	zero,-4(fp)
  80a678:	00000b06 	br	80a6a8 <clearMBoard+0x44>
		alt_up_char_buffer_string(char_buffer, "               ", 64, 46+i);
  80a67c:	d13c2217 	ldw	r4,-3960(gp)
  80a680:	e0bfff17 	ldw	r2,-4(fp)
  80a684:	10800b84 	addi	r2,r2,46
  80a688:	100f883a 	mov	r7,r2
  80a68c:	014020f4 	movhi	r5,131
  80a690:	29615a04 	addi	r5,r5,-31384
  80a694:	01801004 	movi	r6,64
  80a698:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
//	msg = NULL;
}

void clearMBoard() {
	int i;
	for(i = 0; i < 14; i++) {
  80a69c:	e0bfff17 	ldw	r2,-4(fp)
  80a6a0:	10800044 	addi	r2,r2,1
  80a6a4:	e0bfff15 	stw	r2,-4(fp)
  80a6a8:	e0bfff17 	ldw	r2,-4(fp)
  80a6ac:	10800390 	cmplti	r2,r2,14
  80a6b0:	103ff21e 	bne	r2,zero,80a67c <clearMBoard+0x18>
		alt_up_char_buffer_string(char_buffer, "               ", 64, 46+i);
	} gamePanel.elements[2]->statesLine = 0;
  80a6b4:	008020f4 	movhi	r2,131
  80a6b8:	109cc404 	addi	r2,r2,29456
  80a6bc:	10800d17 	ldw	r2,52(r2)
  80a6c0:	10800204 	addi	r2,r2,8
  80a6c4:	10800017 	ldw	r2,0(r2)
  80a6c8:	10000415 	stw	zero,16(r2)
}
  80a6cc:	e037883a 	mov	sp,fp
  80a6d0:	dfc00117 	ldw	ra,4(sp)
  80a6d4:	df000017 	ldw	fp,0(sp)
  80a6d8:	dec00204 	addi	sp,sp,8
  80a6dc:	f800283a 	ret

0080a6e0 <redraw>:
void redraw(struct Cursor* c) {
  80a6e0:	defff804 	addi	sp,sp,-32
  80a6e4:	dfc00715 	stw	ra,28(sp)
  80a6e8:	df000615 	stw	fp,24(sp)
  80a6ec:	df000604 	addi	fp,sp,24
  80a6f0:	e13fff15 	stw	r4,-4(fp)
	int i, j;
	if(gamePanel.redrawing){
  80a6f4:	008020f4 	movhi	r2,131
  80a6f8:	109cc404 	addi	r2,r2,29456
  80a6fc:	10800b03 	ldbu	r2,44(r2)
  80a700:	10803fcc 	andi	r2,r2,255
  80a704:	1005003a 	cmpeq	r2,r2,zero
  80a708:	1000201e 	bne	r2,zero,80a78c <redraw+0xac>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 250, 0, 320, 240, 0x7BEF, 0);
  80a70c:	008020f4 	movhi	r2,131
  80a710:	109c8a04 	addi	r2,r2,29224
  80a714:	11000017 	ldw	r4,0(r2)
  80a718:	00803c04 	movi	r2,240
  80a71c:	d8800015 	stw	r2,0(sp)
  80a720:	009efbc4 	movi	r2,31727
  80a724:	d8800115 	stw	r2,4(sp)
  80a728:	d8000215 	stw	zero,8(sp)
  80a72c:	01403e84 	movi	r5,250
  80a730:	000d883a 	mov	r6,zero
  80a734:	01c05004 	movi	r7,320
  80a738:	0821c940 	call	821c94 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 253, 3, 317, 237, 0xBDF7, 0);
  80a73c:	008020f4 	movhi	r2,131
  80a740:	109c8a04 	addi	r2,r2,29224
  80a744:	11000017 	ldw	r4,0(r2)
  80a748:	00803b44 	movi	r2,237
  80a74c:	d8800015 	stw	r2,0(sp)
  80a750:	00af7dd4 	movui	r2,48631
  80a754:	d8800115 	stw	r2,4(sp)
  80a758:	d8000215 	stw	zero,8(sp)
  80a75c:	01403f44 	movi	r5,253
  80a760:	018000c4 	movi	r6,3
  80a764:	01c04f44 	movi	r7,317
  80a768:	0821c940 	call	821c94 <alt_up_pixel_buffer_dma_draw_box>
		redraw_(&gamePanel, c);
  80a76c:	010020f4 	movhi	r4,131
  80a770:	211cc404 	addi	r4,r4,29456
  80a774:	e17fff17 	ldw	r5,-4(fp)
  80a778:	080aa340 	call	80aa34 <redraw_>
		gamePanel.redrawing = false;
  80a77c:	008020f4 	movhi	r2,131
  80a780:	109cc404 	addi	r2,r2,29456
  80a784:	10000b05 	stb	zero,44(r2)
  80a788:	0000a506 	br	80aa20 <redraw+0x340>
	}
	else {
		for(i = 0; i < gamePanel.buttons_size; i++) {
  80a78c:	e03ffe15 	stw	zero,-8(fp)
  80a790:	00002a06 	br	80a83c <redraw+0x15c>
			if(gamePanel.buttons[i]->redrawing) {
  80a794:	008020f4 	movhi	r2,131
  80a798:	109cc404 	addi	r2,r2,29456
  80a79c:	10c00917 	ldw	r3,36(r2)
  80a7a0:	e0bffe17 	ldw	r2,-8(fp)
  80a7a4:	1085883a 	add	r2,r2,r2
  80a7a8:	1085883a 	add	r2,r2,r2
  80a7ac:	1885883a 	add	r2,r3,r2
  80a7b0:	10800017 	ldw	r2,0(r2)
  80a7b4:	10800a17 	ldw	r2,40(r2)
  80a7b8:	1005003a 	cmpeq	r2,r2,zero
  80a7bc:	10001c1e 	bne	r2,zero,80a830 <redraw+0x150>
				gamePanel.buttons[i]->redrawImg(gamePanel.buttons[i], c);
  80a7c0:	008020f4 	movhi	r2,131
  80a7c4:	109cc404 	addi	r2,r2,29456
  80a7c8:	10c00917 	ldw	r3,36(r2)
  80a7cc:	e0bffe17 	ldw	r2,-8(fp)
  80a7d0:	1085883a 	add	r2,r2,r2
  80a7d4:	1085883a 	add	r2,r2,r2
  80a7d8:	1885883a 	add	r2,r3,r2
  80a7dc:	10800017 	ldw	r2,0(r2)
  80a7e0:	11800c17 	ldw	r6,48(r2)
  80a7e4:	008020f4 	movhi	r2,131
  80a7e8:	109cc404 	addi	r2,r2,29456
  80a7ec:	10c00917 	ldw	r3,36(r2)
  80a7f0:	e0bffe17 	ldw	r2,-8(fp)
  80a7f4:	1085883a 	add	r2,r2,r2
  80a7f8:	1085883a 	add	r2,r2,r2
  80a7fc:	1885883a 	add	r2,r3,r2
  80a800:	11000017 	ldw	r4,0(r2)
  80a804:	e17fff17 	ldw	r5,-4(fp)
  80a808:	303ee83a 	callr	r6
				gamePanel.buttons[i]->redrawing = false;
  80a80c:	008020f4 	movhi	r2,131
  80a810:	109cc404 	addi	r2,r2,29456
  80a814:	10c00917 	ldw	r3,36(r2)
  80a818:	e0bffe17 	ldw	r2,-8(fp)
  80a81c:	1085883a 	add	r2,r2,r2
  80a820:	1085883a 	add	r2,r2,r2
  80a824:	1885883a 	add	r2,r3,r2
  80a828:	10800017 	ldw	r2,0(r2)
  80a82c:	10000a15 	stw	zero,40(r2)
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 253, 3, 317, 237, 0xBDF7, 0);
		redraw_(&gamePanel, c);
		gamePanel.redrawing = false;
	}
	else {
		for(i = 0; i < gamePanel.buttons_size; i++) {
  80a830:	e0bffe17 	ldw	r2,-8(fp)
  80a834:	10800044 	addi	r2,r2,1
  80a838:	e0bffe15 	stw	r2,-8(fp)
  80a83c:	008020f4 	movhi	r2,131
  80a840:	109cc404 	addi	r2,r2,29456
  80a844:	10c00717 	ldw	r3,28(r2)
  80a848:	e0bffe17 	ldw	r2,-8(fp)
  80a84c:	10ffd116 	blt	r2,r3,80a794 <redraw+0xb4>
			if(gamePanel.buttons[i]->redrawing) {
				gamePanel.buttons[i]->redrawImg(gamePanel.buttons[i], c);
				gamePanel.buttons[i]->redrawing = false;
			}
		}
		for(i = 0; i <gamePanel.elements_size; i++) {
  80a850:	e03ffe15 	stw	zero,-8(fp)
  80a854:	00006d06 	br	80aa0c <redraw+0x32c>
			if(gamePanel.elements[i]->redrawing) {
  80a858:	008020f4 	movhi	r2,131
  80a85c:	109cc404 	addi	r2,r2,29456
  80a860:	10c00d17 	ldw	r3,52(r2)
  80a864:	e0bffe17 	ldw	r2,-8(fp)
  80a868:	1085883a 	add	r2,r2,r2
  80a86c:	1085883a 	add	r2,r2,r2
  80a870:	1885883a 	add	r2,r3,r2
  80a874:	10800017 	ldw	r2,0(r2)
  80a878:	10800b03 	ldbu	r2,44(r2)
  80a87c:	10803fcc 	andi	r2,r2,255
  80a880:	1005003a 	cmpeq	r2,r2,zero
  80a884:	10001e1e 	bne	r2,zero,80a900 <redraw+0x220>
				gamePanel.elements[i]->redrawImg(gamePanel.elements[i], c);
  80a888:	008020f4 	movhi	r2,131
  80a88c:	109cc404 	addi	r2,r2,29456
  80a890:	10c00d17 	ldw	r3,52(r2)
  80a894:	e0bffe17 	ldw	r2,-8(fp)
  80a898:	1085883a 	add	r2,r2,r2
  80a89c:	1085883a 	add	r2,r2,r2
  80a8a0:	1885883a 	add	r2,r3,r2
  80a8a4:	10800017 	ldw	r2,0(r2)
  80a8a8:	11800f17 	ldw	r6,60(r2)
  80a8ac:	008020f4 	movhi	r2,131
  80a8b0:	109cc404 	addi	r2,r2,29456
  80a8b4:	10c00d17 	ldw	r3,52(r2)
  80a8b8:	e0bffe17 	ldw	r2,-8(fp)
  80a8bc:	1085883a 	add	r2,r2,r2
  80a8c0:	1085883a 	add	r2,r2,r2
  80a8c4:	1885883a 	add	r2,r3,r2
  80a8c8:	11000017 	ldw	r4,0(r2)
  80a8cc:	e17fff17 	ldw	r5,-4(fp)
  80a8d0:	303ee83a 	callr	r6
				redraw_(gamePanel.elements[i], c);
  80a8d4:	008020f4 	movhi	r2,131
  80a8d8:	109cc404 	addi	r2,r2,29456
  80a8dc:	10c00d17 	ldw	r3,52(r2)
  80a8e0:	e0bffe17 	ldw	r2,-8(fp)
  80a8e4:	1085883a 	add	r2,r2,r2
  80a8e8:	1085883a 	add	r2,r2,r2
  80a8ec:	1885883a 	add	r2,r3,r2
  80a8f0:	11000017 	ldw	r4,0(r2)
  80a8f4:	e17fff17 	ldw	r5,-4(fp)
  80a8f8:	080aa340 	call	80aa34 <redraw_>
  80a8fc:	00004006 	br	80aa00 <redraw+0x320>
			} else {
				for(j = 0; j < gamePanel.elements[i]->buttons_size; j++) {
  80a900:	e03ffd15 	stw	zero,-12(fp)
  80a904:	00003306 	br	80a9d4 <redraw+0x2f4>
					if(gamePanel.elements[i]->buttons[j]->redrawing) {
  80a908:	008020f4 	movhi	r2,131
  80a90c:	109cc404 	addi	r2,r2,29456
  80a910:	10c00d17 	ldw	r3,52(r2)
  80a914:	e0bffe17 	ldw	r2,-8(fp)
  80a918:	1085883a 	add	r2,r2,r2
  80a91c:	1085883a 	add	r2,r2,r2
  80a920:	1885883a 	add	r2,r3,r2
  80a924:	10800017 	ldw	r2,0(r2)
  80a928:	10c00917 	ldw	r3,36(r2)
  80a92c:	e0bffd17 	ldw	r2,-12(fp)
  80a930:	1085883a 	add	r2,r2,r2
  80a934:	1085883a 	add	r2,r2,r2
  80a938:	1885883a 	add	r2,r3,r2
  80a93c:	10800017 	ldw	r2,0(r2)
  80a940:	10800a17 	ldw	r2,40(r2)
  80a944:	1005003a 	cmpeq	r2,r2,zero
  80a948:	10001f1e 	bne	r2,zero,80a9c8 <redraw+0x2e8>
						gamePanel.elements[i]->buttons[j]->redrawImg(gamePanel.elements[i]->buttons[j], c);
  80a94c:	008020f4 	movhi	r2,131
  80a950:	109cc404 	addi	r2,r2,29456
  80a954:	10c00d17 	ldw	r3,52(r2)
  80a958:	e0bffe17 	ldw	r2,-8(fp)
  80a95c:	1085883a 	add	r2,r2,r2
  80a960:	1085883a 	add	r2,r2,r2
  80a964:	1885883a 	add	r2,r3,r2
  80a968:	10800017 	ldw	r2,0(r2)
  80a96c:	10c00917 	ldw	r3,36(r2)
  80a970:	e0bffd17 	ldw	r2,-12(fp)
  80a974:	1085883a 	add	r2,r2,r2
  80a978:	1085883a 	add	r2,r2,r2
  80a97c:	1885883a 	add	r2,r3,r2
  80a980:	10800017 	ldw	r2,0(r2)
  80a984:	11800c17 	ldw	r6,48(r2)
  80a988:	008020f4 	movhi	r2,131
  80a98c:	109cc404 	addi	r2,r2,29456
  80a990:	10c00d17 	ldw	r3,52(r2)
  80a994:	e0bffe17 	ldw	r2,-8(fp)
  80a998:	1085883a 	add	r2,r2,r2
  80a99c:	1085883a 	add	r2,r2,r2
  80a9a0:	1885883a 	add	r2,r3,r2
  80a9a4:	10800017 	ldw	r2,0(r2)
  80a9a8:	10c00917 	ldw	r3,36(r2)
  80a9ac:	e0bffd17 	ldw	r2,-12(fp)
  80a9b0:	1085883a 	add	r2,r2,r2
  80a9b4:	1085883a 	add	r2,r2,r2
  80a9b8:	1885883a 	add	r2,r3,r2
  80a9bc:	11000017 	ldw	r4,0(r2)
  80a9c0:	e17fff17 	ldw	r5,-4(fp)
  80a9c4:	303ee83a 	callr	r6
		for(i = 0; i <gamePanel.elements_size; i++) {
			if(gamePanel.elements[i]->redrawing) {
				gamePanel.elements[i]->redrawImg(gamePanel.elements[i], c);
				redraw_(gamePanel.elements[i], c);
			} else {
				for(j = 0; j < gamePanel.elements[i]->buttons_size; j++) {
  80a9c8:	e0bffd17 	ldw	r2,-12(fp)
  80a9cc:	10800044 	addi	r2,r2,1
  80a9d0:	e0bffd15 	stw	r2,-12(fp)
  80a9d4:	008020f4 	movhi	r2,131
  80a9d8:	109cc404 	addi	r2,r2,29456
  80a9dc:	10c00d17 	ldw	r3,52(r2)
  80a9e0:	e0bffe17 	ldw	r2,-8(fp)
  80a9e4:	1085883a 	add	r2,r2,r2
  80a9e8:	1085883a 	add	r2,r2,r2
  80a9ec:	1885883a 	add	r2,r3,r2
  80a9f0:	10800017 	ldw	r2,0(r2)
  80a9f4:	10c00717 	ldw	r3,28(r2)
  80a9f8:	e0bffd17 	ldw	r2,-12(fp)
  80a9fc:	10ffc216 	blt	r2,r3,80a908 <redraw+0x228>
			if(gamePanel.buttons[i]->redrawing) {
				gamePanel.buttons[i]->redrawImg(gamePanel.buttons[i], c);
				gamePanel.buttons[i]->redrawing = false;
			}
		}
		for(i = 0; i <gamePanel.elements_size; i++) {
  80aa00:	e0bffe17 	ldw	r2,-8(fp)
  80aa04:	10800044 	addi	r2,r2,1
  80aa08:	e0bffe15 	stw	r2,-8(fp)
  80aa0c:	008020f4 	movhi	r2,131
  80aa10:	109cc404 	addi	r2,r2,29456
  80aa14:	10c00617 	ldw	r3,24(r2)
  80aa18:	e0bffe17 	ldw	r2,-8(fp)
  80aa1c:	10ff8e16 	blt	r2,r3,80a858 <redraw+0x178>
					}
				}
			}
		}
	}
}
  80aa20:	e037883a 	mov	sp,fp
  80aa24:	dfc00117 	ldw	ra,4(sp)
  80aa28:	df000017 	ldw	fp,0(sp)
  80aa2c:	dec00204 	addi	sp,sp,8
  80aa30:	f800283a 	ret

0080aa34 <redraw_>:

void redraw_(struct Frame* f, struct Cursor* c) {
  80aa34:	defffb04 	addi	sp,sp,-20
  80aa38:	dfc00415 	stw	ra,16(sp)
  80aa3c:	df000315 	stw	fp,12(sp)
  80aa40:	df000304 	addi	fp,sp,12
  80aa44:	e13ffe15 	stw	r4,-8(fp)
  80aa48:	e17fff15 	stw	r5,-4(fp)
	int i;
	for(i = 0; i < f->elements_size; i++) {
  80aa4c:	e03ffd15 	stw	zero,-12(fp)
  80aa50:	00003006 	br	80ab14 <redraw_+0xe0>
		if(f->elements[i]->redrawing) {
  80aa54:	e0bffe17 	ldw	r2,-8(fp)
  80aa58:	10c00d17 	ldw	r3,52(r2)
  80aa5c:	e0bffd17 	ldw	r2,-12(fp)
  80aa60:	1085883a 	add	r2,r2,r2
  80aa64:	1085883a 	add	r2,r2,r2
  80aa68:	1885883a 	add	r2,r3,r2
  80aa6c:	10800017 	ldw	r2,0(r2)
  80aa70:	10800b03 	ldbu	r2,44(r2)
  80aa74:	10803fcc 	andi	r2,r2,255
  80aa78:	1005003a 	cmpeq	r2,r2,zero
  80aa7c:	1000221e 	bne	r2,zero,80ab08 <redraw_+0xd4>
			f->elements[i]->redrawImg(f->elements[i], c);
  80aa80:	e0bffe17 	ldw	r2,-8(fp)
  80aa84:	10c00d17 	ldw	r3,52(r2)
  80aa88:	e0bffd17 	ldw	r2,-12(fp)
  80aa8c:	1085883a 	add	r2,r2,r2
  80aa90:	1085883a 	add	r2,r2,r2
  80aa94:	1885883a 	add	r2,r3,r2
  80aa98:	10800017 	ldw	r2,0(r2)
  80aa9c:	11800f17 	ldw	r6,60(r2)
  80aaa0:	e0bffe17 	ldw	r2,-8(fp)
  80aaa4:	10c00d17 	ldw	r3,52(r2)
  80aaa8:	e0bffd17 	ldw	r2,-12(fp)
  80aaac:	1085883a 	add	r2,r2,r2
  80aab0:	1085883a 	add	r2,r2,r2
  80aab4:	1885883a 	add	r2,r3,r2
  80aab8:	11000017 	ldw	r4,0(r2)
  80aabc:	e17fff17 	ldw	r5,-4(fp)
  80aac0:	303ee83a 	callr	r6
			redraw_(f->elements[i], c);
  80aac4:	e0bffe17 	ldw	r2,-8(fp)
  80aac8:	10c00d17 	ldw	r3,52(r2)
  80aacc:	e0bffd17 	ldw	r2,-12(fp)
  80aad0:	1085883a 	add	r2,r2,r2
  80aad4:	1085883a 	add	r2,r2,r2
  80aad8:	1885883a 	add	r2,r3,r2
  80aadc:	11000017 	ldw	r4,0(r2)
  80aae0:	e17fff17 	ldw	r5,-4(fp)
  80aae4:	080aa340 	call	80aa34 <redraw_>
			f->elements[i]->redrawing = false;
  80aae8:	e0bffe17 	ldw	r2,-8(fp)
  80aaec:	10c00d17 	ldw	r3,52(r2)
  80aaf0:	e0bffd17 	ldw	r2,-12(fp)
  80aaf4:	1085883a 	add	r2,r2,r2
  80aaf8:	1085883a 	add	r2,r2,r2
  80aafc:	1885883a 	add	r2,r3,r2
  80ab00:	10800017 	ldw	r2,0(r2)
  80ab04:	10000b05 	stb	zero,44(r2)
	}
}

void redraw_(struct Frame* f, struct Cursor* c) {
	int i;
	for(i = 0; i < f->elements_size; i++) {
  80ab08:	e0bffd17 	ldw	r2,-12(fp)
  80ab0c:	10800044 	addi	r2,r2,1
  80ab10:	e0bffd15 	stw	r2,-12(fp)
  80ab14:	e0bffe17 	ldw	r2,-8(fp)
  80ab18:	10c00617 	ldw	r3,24(r2)
  80ab1c:	e0bffd17 	ldw	r2,-12(fp)
  80ab20:	10ffcc16 	blt	r2,r3,80aa54 <redraw_+0x20>
			f->elements[i]->redrawImg(f->elements[i], c);
			redraw_(f->elements[i], c);
			f->elements[i]->redrawing = false;
		}
	}
	for(i = 0; i < f->buttons_size; i++) {
  80ab24:	e03ffd15 	stw	zero,-12(fp)
  80ab28:	00001c06 	br	80ab9c <redraw_+0x168>
		f->buttons[i]->redrawImg(f->buttons[i], c);
  80ab2c:	e0bffe17 	ldw	r2,-8(fp)
  80ab30:	10c00917 	ldw	r3,36(r2)
  80ab34:	e0bffd17 	ldw	r2,-12(fp)
  80ab38:	1085883a 	add	r2,r2,r2
  80ab3c:	1085883a 	add	r2,r2,r2
  80ab40:	1885883a 	add	r2,r3,r2
  80ab44:	10800017 	ldw	r2,0(r2)
  80ab48:	11800c17 	ldw	r6,48(r2)
  80ab4c:	e0bffe17 	ldw	r2,-8(fp)
  80ab50:	10c00917 	ldw	r3,36(r2)
  80ab54:	e0bffd17 	ldw	r2,-12(fp)
  80ab58:	1085883a 	add	r2,r2,r2
  80ab5c:	1085883a 	add	r2,r2,r2
  80ab60:	1885883a 	add	r2,r3,r2
  80ab64:	11000017 	ldw	r4,0(r2)
  80ab68:	e17fff17 	ldw	r5,-4(fp)
  80ab6c:	303ee83a 	callr	r6
		f->buttons[i]->redrawing = false;
  80ab70:	e0bffe17 	ldw	r2,-8(fp)
  80ab74:	10c00917 	ldw	r3,36(r2)
  80ab78:	e0bffd17 	ldw	r2,-12(fp)
  80ab7c:	1085883a 	add	r2,r2,r2
  80ab80:	1085883a 	add	r2,r2,r2
  80ab84:	1885883a 	add	r2,r3,r2
  80ab88:	10800017 	ldw	r2,0(r2)
  80ab8c:	10000a15 	stw	zero,40(r2)
			f->elements[i]->redrawImg(f->elements[i], c);
			redraw_(f->elements[i], c);
			f->elements[i]->redrawing = false;
		}
	}
	for(i = 0; i < f->buttons_size; i++) {
  80ab90:	e0bffd17 	ldw	r2,-12(fp)
  80ab94:	10800044 	addi	r2,r2,1
  80ab98:	e0bffd15 	stw	r2,-12(fp)
  80ab9c:	e0bffe17 	ldw	r2,-8(fp)
  80aba0:	10c00717 	ldw	r3,28(r2)
  80aba4:	e0bffd17 	ldw	r2,-12(fp)
  80aba8:	10ffe016 	blt	r2,r3,80ab2c <redraw_+0xf8>
		f->buttons[i]->redrawImg(f->buttons[i], c);
		f->buttons[i]->redrawing = false;
	}
}
  80abac:	e037883a 	mov	sp,fp
  80abb0:	dfc00117 	ldw	ra,4(sp)
  80abb4:	df000017 	ldw	fp,0(sp)
  80abb8:	dec00204 	addi	sp,sp,8
  80abbc:	f800283a 	ret

0080abc0 <redrawSBoard>:
void redrawSBoard(struct Frame* f, struct Cursor* c) {
  80abc0:	defff404 	addi	sp,sp,-48
  80abc4:	dfc00b15 	stw	ra,44(sp)
  80abc8:	df000a15 	stw	fp,40(sp)
  80abcc:	dd000915 	stw	r20,36(sp)
  80abd0:	dcc00815 	stw	r19,32(sp)
  80abd4:	dc800715 	stw	r18,28(sp)
  80abd8:	dc400615 	stw	r17,24(sp)
  80abdc:	dc000515 	stw	r16,20(sp)
  80abe0:	df000504 	addi	fp,sp,20
  80abe4:	e13ffe15 	stw	r4,-8(fp)
  80abe8:	e17fff15 	stw	r5,-4(fp)
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, f->ltx, f->lty, f->rbx, f->rby, getColor(0x77, 0xb5, 0xfe), 0);
  80abec:	008020f4 	movhi	r2,131
  80abf0:	109c8a04 	addi	r2,r2,29224
  80abf4:	14400017 	ldw	r17,0(r2)
  80abf8:	e0bffe17 	ldw	r2,-8(fp)
  80abfc:	14800017 	ldw	r18,0(r2)
  80ac00:	e0bffe17 	ldw	r2,-8(fp)
  80ac04:	14c00117 	ldw	r19,4(r2)
  80ac08:	e0bffe17 	ldw	r2,-8(fp)
  80ac0c:	15000217 	ldw	r20,8(r2)
  80ac10:	e0bffe17 	ldw	r2,-8(fp)
  80ac14:	14000317 	ldw	r16,12(r2)
  80ac18:	01001dc4 	movi	r4,119
  80ac1c:	01402d44 	movi	r5,181
  80ac20:	01803f84 	movi	r6,254
  80ac24:	0812c580 	call	812c58 <getColor>
  80ac28:	dc000015 	stw	r16,0(sp)
  80ac2c:	d8800115 	stw	r2,4(sp)
  80ac30:	d8000215 	stw	zero,8(sp)
  80ac34:	8809883a 	mov	r4,r17
  80ac38:	900b883a 	mov	r5,r18
  80ac3c:	980d883a 	mov	r6,r19
  80ac40:	a00f883a 	mov	r7,r20
  80ac44:	0821c940 	call	821c94 <alt_up_pixel_buffer_dma_draw_box>
	f->redrawing = false;
  80ac48:	e0bffe17 	ldw	r2,-8(fp)
  80ac4c:	10000b05 	stb	zero,44(r2)
}
  80ac50:	e037883a 	mov	sp,fp
  80ac54:	dfc00617 	ldw	ra,24(sp)
  80ac58:	df000517 	ldw	fp,20(sp)
  80ac5c:	dd000417 	ldw	r20,16(sp)
  80ac60:	dcc00317 	ldw	r19,12(sp)
  80ac64:	dc800217 	ldw	r18,8(sp)
  80ac68:	dc400117 	ldw	r17,4(sp)
  80ac6c:	dc000017 	ldw	r16,0(sp)
  80ac70:	dec00704 	addi	sp,sp,28
  80ac74:	f800283a 	ret

0080ac78 <redrawCPanel>:

void redrawCPanel(struct Frame* f, struct Cursor* c) {
  80ac78:	defff604 	addi	sp,sp,-40
  80ac7c:	dfc00915 	stw	ra,36(sp)
  80ac80:	df000815 	stw	fp,32(sp)
  80ac84:	dcc00715 	stw	r19,28(sp)
  80ac88:	dc800615 	stw	r18,24(sp)
  80ac8c:	dc400515 	stw	r17,20(sp)
  80ac90:	dc000415 	stw	r16,16(sp)
  80ac94:	df000404 	addi	fp,sp,16
  80ac98:	e13ffe15 	stw	r4,-8(fp)
  80ac9c:	e17fff15 	stw	r5,-4(fp)
	drawBox(f->ltx, f->lty, f->rbx, f->rby, getColor(0x80, 0x80, 0x80), c);
  80aca0:	e0bffe17 	ldw	r2,-8(fp)
  80aca4:	14000017 	ldw	r16,0(r2)
  80aca8:	e0bffe17 	ldw	r2,-8(fp)
  80acac:	14400117 	ldw	r17,4(r2)
  80acb0:	e0bffe17 	ldw	r2,-8(fp)
  80acb4:	14800217 	ldw	r18,8(r2)
  80acb8:	e0bffe17 	ldw	r2,-8(fp)
  80acbc:	14c00317 	ldw	r19,12(r2)
  80acc0:	01002004 	movi	r4,128
  80acc4:	01402004 	movi	r5,128
  80acc8:	01802004 	movi	r6,128
  80accc:	0812c580 	call	812c58 <getColor>
  80acd0:	d8800015 	stw	r2,0(sp)
  80acd4:	e0bfff17 	ldw	r2,-4(fp)
  80acd8:	d8800115 	stw	r2,4(sp)
  80acdc:	8009883a 	mov	r4,r16
  80ace0:	880b883a 	mov	r5,r17
  80ace4:	900d883a 	mov	r6,r18
  80ace8:	980f883a 	mov	r7,r19
  80acec:	08122300 	call	812230 <drawBox>
	f->redrawing = false;
  80acf0:	e0bffe17 	ldw	r2,-8(fp)
  80acf4:	10000b05 	stb	zero,44(r2)
}
  80acf8:	e037883a 	mov	sp,fp
  80acfc:	dfc00517 	ldw	ra,20(sp)
  80ad00:	df000417 	ldw	fp,16(sp)
  80ad04:	dcc00317 	ldw	r19,12(sp)
  80ad08:	dc800217 	ldw	r18,8(sp)
  80ad0c:	dc400117 	ldw	r17,4(sp)
  80ad10:	dc000017 	ldw	r16,0(sp)
  80ad14:	dec00604 	addi	sp,sp,24
  80ad18:	f800283a 	ret

0080ad1c <redrawSPanel>:
void redrawSPanel(struct Frame* f, struct Cursor* c) {
  80ad1c:	defff604 	addi	sp,sp,-40
  80ad20:	dfc00915 	stw	ra,36(sp)
  80ad24:	df000815 	stw	fp,32(sp)
  80ad28:	dcc00715 	stw	r19,28(sp)
  80ad2c:	dc800615 	stw	r18,24(sp)
  80ad30:	dc400515 	stw	r17,20(sp)
  80ad34:	dc000415 	stw	r16,16(sp)
  80ad38:	df000404 	addi	fp,sp,16
  80ad3c:	e13ffe15 	stw	r4,-8(fp)
  80ad40:	e17fff15 	stw	r5,-4(fp)
	drawBox(f->ltx, f->lty, f->rbx, f->rby, getColor(0x48, 0x3a, 0x3a), c);
  80ad44:	e0bffe17 	ldw	r2,-8(fp)
  80ad48:	14000017 	ldw	r16,0(r2)
  80ad4c:	e0bffe17 	ldw	r2,-8(fp)
  80ad50:	14400117 	ldw	r17,4(r2)
  80ad54:	e0bffe17 	ldw	r2,-8(fp)
  80ad58:	14800217 	ldw	r18,8(r2)
  80ad5c:	e0bffe17 	ldw	r2,-8(fp)
  80ad60:	14c00317 	ldw	r19,12(r2)
  80ad64:	01001204 	movi	r4,72
  80ad68:	01400e84 	movi	r5,58
  80ad6c:	01800e84 	movi	r6,58
  80ad70:	0812c580 	call	812c58 <getColor>
  80ad74:	d8800015 	stw	r2,0(sp)
  80ad78:	e0bfff17 	ldw	r2,-4(fp)
  80ad7c:	d8800115 	stw	r2,4(sp)
  80ad80:	8009883a 	mov	r4,r16
  80ad84:	880b883a 	mov	r5,r17
  80ad88:	900d883a 	mov	r6,r18
  80ad8c:	980f883a 	mov	r7,r19
  80ad90:	08122300 	call	812230 <drawBox>
	f->redrawing = false;
  80ad94:	e0bffe17 	ldw	r2,-8(fp)
  80ad98:	10000b05 	stb	zero,44(r2)
}
  80ad9c:	e037883a 	mov	sp,fp
  80ada0:	dfc00517 	ldw	ra,20(sp)
  80ada4:	df000417 	ldw	fp,16(sp)
  80ada8:	dcc00317 	ldw	r19,12(sp)
  80adac:	dc800217 	ldw	r18,8(sp)
  80adb0:	dc400117 	ldw	r17,4(sp)
  80adb4:	dc000017 	ldw	r16,0(sp)
  80adb8:	dec00604 	addi	sp,sp,24
  80adbc:	f800283a 	ret

0080adc0 <redrawMPanel>:
void redrawMPanel(struct Frame* f, struct Cursor* c) {
  80adc0:	defff604 	addi	sp,sp,-40
  80adc4:	dfc00915 	stw	ra,36(sp)
  80adc8:	df000815 	stw	fp,32(sp)
  80adcc:	dcc00715 	stw	r19,28(sp)
  80add0:	dc800615 	stw	r18,24(sp)
  80add4:	dc400515 	stw	r17,20(sp)
  80add8:	dc000415 	stw	r16,16(sp)
  80addc:	df000404 	addi	fp,sp,16
  80ade0:	e13ffe15 	stw	r4,-8(fp)
  80ade4:	e17fff15 	stw	r5,-4(fp)
	drawBox(f->ltx, f->lty, f->rbx, f->rby, getColor(0xA9, 0xA9, 0xA9), c);
  80ade8:	e0bffe17 	ldw	r2,-8(fp)
  80adec:	14000017 	ldw	r16,0(r2)
  80adf0:	e0bffe17 	ldw	r2,-8(fp)
  80adf4:	14400117 	ldw	r17,4(r2)
  80adf8:	e0bffe17 	ldw	r2,-8(fp)
  80adfc:	14800217 	ldw	r18,8(r2)
  80ae00:	e0bffe17 	ldw	r2,-8(fp)
  80ae04:	14c00317 	ldw	r19,12(r2)
  80ae08:	01002a44 	movi	r4,169
  80ae0c:	01402a44 	movi	r5,169
  80ae10:	01802a44 	movi	r6,169
  80ae14:	0812c580 	call	812c58 <getColor>
  80ae18:	d8800015 	stw	r2,0(sp)
  80ae1c:	e0bfff17 	ldw	r2,-4(fp)
  80ae20:	d8800115 	stw	r2,4(sp)
  80ae24:	8009883a 	mov	r4,r16
  80ae28:	880b883a 	mov	r5,r17
  80ae2c:	900d883a 	mov	r6,r18
  80ae30:	980f883a 	mov	r7,r19
  80ae34:	08122300 	call	812230 <drawBox>
	f->redrawing = false;
  80ae38:	e0bffe17 	ldw	r2,-8(fp)
  80ae3c:	10000b05 	stb	zero,44(r2)
}
  80ae40:	e037883a 	mov	sp,fp
  80ae44:	dfc00517 	ldw	ra,20(sp)
  80ae48:	df000417 	ldw	fp,16(sp)
  80ae4c:	dcc00317 	ldw	r19,12(sp)
  80ae50:	dc800217 	ldw	r18,8(sp)
  80ae54:	dc400117 	ldw	r17,4(sp)
  80ae58:	dc000017 	ldw	r16,0(sp)
  80ae5c:	dec00604 	addi	sp,sp,24
  80ae60:	f800283a 	ret

0080ae64 <redrawMBoard>:
void redrawMBoard(struct Frame* f, struct Cursor* c) {
  80ae64:	defff604 	addi	sp,sp,-40
  80ae68:	dfc00915 	stw	ra,36(sp)
  80ae6c:	df000815 	stw	fp,32(sp)
  80ae70:	dcc00715 	stw	r19,28(sp)
  80ae74:	dc800615 	stw	r18,24(sp)
  80ae78:	dc400515 	stw	r17,20(sp)
  80ae7c:	dc000415 	stw	r16,16(sp)
  80ae80:	df000404 	addi	fp,sp,16
  80ae84:	e13ffe15 	stw	r4,-8(fp)
  80ae88:	e17fff15 	stw	r5,-4(fp)
	drawBox(f->ltx, f->lty, f->rbx, f->rby, getColor(0x48, 0x3a, 0x3a), c);
  80ae8c:	e0bffe17 	ldw	r2,-8(fp)
  80ae90:	14000017 	ldw	r16,0(r2)
  80ae94:	e0bffe17 	ldw	r2,-8(fp)
  80ae98:	14400117 	ldw	r17,4(r2)
  80ae9c:	e0bffe17 	ldw	r2,-8(fp)
  80aea0:	14800217 	ldw	r18,8(r2)
  80aea4:	e0bffe17 	ldw	r2,-8(fp)
  80aea8:	14c00317 	ldw	r19,12(r2)
  80aeac:	01001204 	movi	r4,72
  80aeb0:	01400e84 	movi	r5,58
  80aeb4:	01800e84 	movi	r6,58
  80aeb8:	0812c580 	call	812c58 <getColor>
  80aebc:	d8800015 	stw	r2,0(sp)
  80aec0:	e0bfff17 	ldw	r2,-4(fp)
  80aec4:	d8800115 	stw	r2,4(sp)
  80aec8:	8009883a 	mov	r4,r16
  80aecc:	880b883a 	mov	r5,r17
  80aed0:	900d883a 	mov	r6,r18
  80aed4:	980f883a 	mov	r7,r19
  80aed8:	08122300 	call	812230 <drawBox>
	f->redrawing = false;
  80aedc:	e0bffe17 	ldw	r2,-8(fp)
  80aee0:	10000b05 	stb	zero,44(r2)
}
  80aee4:	e037883a 	mov	sp,fp
  80aee8:	dfc00517 	ldw	ra,20(sp)
  80aeec:	df000417 	ldw	fp,16(sp)
  80aef0:	dcc00317 	ldw	r19,12(sp)
  80aef4:	dc800217 	ldw	r18,8(sp)
  80aef8:	dc400117 	ldw	r17,4(sp)
  80aefc:	dc000017 	ldw	r16,0(sp)
  80af00:	dec00604 	addi	sp,sp,24
  80af04:	f800283a 	ret

0080af08 <safefree>:
alt_up_character_lcd_dev * char_lcd_dev;
/* Alternative version for 'free()'
 * This function is memory safe
 */
void safefree(void **pp)
{
  80af08:	defffd04 	addi	sp,sp,-12
  80af0c:	dfc00215 	stw	ra,8(sp)
  80af10:	df000115 	stw	fp,4(sp)
  80af14:	df000104 	addi	fp,sp,4
  80af18:	e13fff15 	stw	r4,-4(fp)
    if (pp != NULL) {               /* safety check */
  80af1c:	e0bfff17 	ldw	r2,-4(fp)
  80af20:	1005003a 	cmpeq	r2,r2,zero
  80af24:	1000051e 	bne	r2,zero,80af3c <safefree+0x34>
        free(*pp);                  /* deallocate chunk, note that free(NULL) is valid */
  80af28:	e0bfff17 	ldw	r2,-4(fp)
  80af2c:	11000017 	ldw	r4,0(r2)
  80af30:	0814f440 	call	814f44 <free>
        *pp = NULL;                 /* reset original pointer */
  80af34:	e0bfff17 	ldw	r2,-4(fp)
  80af38:	10000015 	stw	zero,0(r2)
    }
}
  80af3c:	e037883a 	mov	sp,fp
  80af40:	dfc00117 	ldw	ra,4(sp)
  80af44:	df000017 	ldw	fp,0(sp)
  80af48:	dec00204 	addi	sp,sp,8
  80af4c:	f800283a 	ret

0080af50 <my_alarm_callback>:

/*
 * System clock that run the animation for all objects in the environment
 */
alt_u32 my_alarm_callback (void* paras)
{
  80af50:	defff804 	addi	sp,sp,-32
  80af54:	dfc00715 	stw	ra,28(sp)
  80af58:	df000615 	stw	fp,24(sp)
  80af5c:	df000604 	addi	fp,sp,24
  80af60:	e13ffe15 	stw	r4,-8(fp)
	if(lock == 1) return alt_ticks_per_second()/1000;
  80af64:	d0bc2417 	ldw	r2,-3952(gp)
  80af68:	10800058 	cmpnei	r2,r2,1
  80af6c:	1000081e 	bne	r2,zero,80af90 <my_alarm_callback+0x40>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80af70:	008020f4 	movhi	r2,131
  80af74:	109c9904 	addi	r2,r2,29284
  80af78:	10800017 	ldw	r2,0(r2)
  80af7c:	1009883a 	mov	r4,r2
  80af80:	0140fa04 	movi	r5,1000
  80af84:	08146bc0 	call	8146bc <__udivsi3>
  80af88:	e0bfff15 	stw	r2,-4(fp)
  80af8c:	00010c06 	br	80b3c0 <my_alarm_callback+0x470>
	int i;
	for(i = 0; i < ((struct Env*)paras)->size; i++) {
  80af90:	e03ffd15 	stw	zero,-12(fp)
  80af94:	0000f606 	br	80b370 <my_alarm_callback+0x420>
		if((*(((struct Env*)paras)->o+i))->isRunable == 1 ) {
  80af98:	e0bffe17 	ldw	r2,-8(fp)
  80af9c:	10c00017 	ldw	r3,0(r2)
  80afa0:	e0bffd17 	ldw	r2,-12(fp)
  80afa4:	1085883a 	add	r2,r2,r2
  80afa8:	1085883a 	add	r2,r2,r2
  80afac:	1885883a 	add	r2,r3,r2
  80afb0:	10800017 	ldw	r2,0(r2)
  80afb4:	10801717 	ldw	r2,92(r2)
  80afb8:	10800058 	cmpnei	r2,r2,1
  80afbc:	1000e91e 	bne	r2,zero,80b364 <my_alarm_callback+0x414>
			(*(((struct Env*)paras)->o+i))->animate(&((*(((struct Env*)paras)->o+i))->currImg),
  80afc0:	e0bffe17 	ldw	r2,-8(fp)
  80afc4:	10c00017 	ldw	r3,0(r2)
  80afc8:	e0bffd17 	ldw	r2,-12(fp)
  80afcc:	1085883a 	add	r2,r2,r2
  80afd0:	1085883a 	add	r2,r2,r2
  80afd4:	1885883a 	add	r2,r3,r2
  80afd8:	10800017 	ldw	r2,0(r2)
  80afdc:	12001917 	ldw	r8,100(r2)
  80afe0:	e0bffe17 	ldw	r2,-8(fp)
  80afe4:	10c00017 	ldw	r3,0(r2)
  80afe8:	e0bffd17 	ldw	r2,-12(fp)
  80afec:	1085883a 	add	r2,r2,r2
  80aff0:	1085883a 	add	r2,r2,r2
  80aff4:	1885883a 	add	r2,r3,r2
  80aff8:	10800017 	ldw	r2,0(r2)
  80affc:	11400c04 	addi	r5,r2,48
  80b000:	e0bffe17 	ldw	r2,-8(fp)
  80b004:	10c00017 	ldw	r3,0(r2)
  80b008:	e0bffd17 	ldw	r2,-12(fp)
  80b00c:	1085883a 	add	r2,r2,r2
  80b010:	1085883a 	add	r2,r2,r2
  80b014:	1885883a 	add	r2,r3,r2
  80b018:	10800017 	ldw	r2,0(r2)
  80b01c:	11800017 	ldw	r6,0(r2)
  80b020:	e0bffe17 	ldw	r2,-8(fp)
  80b024:	10c00017 	ldw	r3,0(r2)
  80b028:	e0bffd17 	ldw	r2,-12(fp)
  80b02c:	1085883a 	add	r2,r2,r2
  80b030:	1085883a 	add	r2,r2,r2
  80b034:	1885883a 	add	r2,r3,r2
  80b038:	10800017 	ldw	r2,0(r2)
  80b03c:	11c00117 	ldw	r7,4(r2)
  80b040:	e0bffe17 	ldw	r2,-8(fp)
  80b044:	10c00017 	ldw	r3,0(r2)
  80b048:	e0bffd17 	ldw	r2,-12(fp)
  80b04c:	1085883a 	add	r2,r2,r2
  80b050:	1085883a 	add	r2,r2,r2
  80b054:	1885883a 	add	r2,r3,r2
  80b058:	10800017 	ldw	r2,0(r2)
  80b05c:	12400217 	ldw	r9,8(r2)
  80b060:	e0bffe17 	ldw	r2,-8(fp)
  80b064:	10c00017 	ldw	r3,0(r2)
  80b068:	e0bffd17 	ldw	r2,-12(fp)
  80b06c:	1085883a 	add	r2,r2,r2
  80b070:	1085883a 	add	r2,r2,r2
  80b074:	1885883a 	add	r2,r3,r2
  80b078:	10c00017 	ldw	r3,0(r2)
  80b07c:	e0bffe17 	ldw	r2,-8(fp)
  80b080:	11000517 	ldw	r4,20(r2)
  80b084:	00800044 	movi	r2,1
  80b088:	d8800015 	stw	r2,0(sp)
  80b08c:	d8c00115 	stw	r3,4(sp)
  80b090:	d9000215 	stw	r4,8(sp)
  80b094:	2809883a 	mov	r4,r5
  80b098:	300b883a 	mov	r5,r6
  80b09c:	380d883a 	mov	r6,r7
  80b0a0:	480f883a 	mov	r7,r9
  80b0a4:	403ee83a 	callr	r8
						(*(((struct Env*)paras)->o+i))->x, (*(((struct Env*)paras)->o+i))->y, (*(((struct Env*)paras)->o+i))->scale, 1,
						*(((struct Env*)paras)->o+i), ((struct Env*)paras)->m);
			if((*(((struct Env*)paras)->o+i))->curr_frame < 40000000)
  80b0a8:	e0bffe17 	ldw	r2,-8(fp)
  80b0ac:	10c00017 	ldw	r3,0(r2)
  80b0b0:	e0bffd17 	ldw	r2,-12(fp)
  80b0b4:	1085883a 	add	r2,r2,r2
  80b0b8:	1085883a 	add	r2,r2,r2
  80b0bc:	1885883a 	add	r2,r3,r2
  80b0c0:	10800017 	ldw	r2,0(r2)
  80b0c4:	10c01617 	ldw	r3,88(r2)
  80b0c8:	008098b4 	movhi	r2,610
  80b0cc:	10967fc4 	addi	r2,r2,23039
  80b0d0:	10c00b16 	blt	r2,r3,80b100 <my_alarm_callback+0x1b0>
				(*(((struct Env*)paras)->o+i))->curr_frame++;
  80b0d4:	e0bffe17 	ldw	r2,-8(fp)
  80b0d8:	10c00017 	ldw	r3,0(r2)
  80b0dc:	e0bffd17 	ldw	r2,-12(fp)
  80b0e0:	1085883a 	add	r2,r2,r2
  80b0e4:	1085883a 	add	r2,r2,r2
  80b0e8:	1885883a 	add	r2,r3,r2
  80b0ec:	10c00017 	ldw	r3,0(r2)
  80b0f0:	18801617 	ldw	r2,88(r3)
  80b0f4:	10800044 	addi	r2,r2,1
  80b0f8:	18801615 	stw	r2,88(r3)
  80b0fc:	00000906 	br	80b124 <my_alarm_callback+0x1d4>
			else
				(*(((struct Env*)paras)->o+i))->curr_frame = 1;
  80b100:	e0bffe17 	ldw	r2,-8(fp)
  80b104:	10c00017 	ldw	r3,0(r2)
  80b108:	e0bffd17 	ldw	r2,-12(fp)
  80b10c:	1085883a 	add	r2,r2,r2
  80b110:	1085883a 	add	r2,r2,r2
  80b114:	1885883a 	add	r2,r3,r2
  80b118:	10c00017 	ldw	r3,0(r2)
  80b11c:	00800044 	movi	r2,1
  80b120:	18801615 	stw	r2,88(r3)
			if((*(((struct Env*)paras)->o+i))->curr_frame > (*(((struct Env*)paras)->o+i))->end_frame)
  80b124:	e0bffe17 	ldw	r2,-8(fp)
  80b128:	10c00017 	ldw	r3,0(r2)
  80b12c:	e0bffd17 	ldw	r2,-12(fp)
  80b130:	1085883a 	add	r2,r2,r2
  80b134:	1085883a 	add	r2,r2,r2
  80b138:	1885883a 	add	r2,r3,r2
  80b13c:	10800017 	ldw	r2,0(r2)
  80b140:	11001617 	ldw	r4,88(r2)
  80b144:	e0bffe17 	ldw	r2,-8(fp)
  80b148:	10c00017 	ldw	r3,0(r2)
  80b14c:	e0bffd17 	ldw	r2,-12(fp)
  80b150:	1085883a 	add	r2,r2,r2
  80b154:	1085883a 	add	r2,r2,r2
  80b158:	1885883a 	add	r2,r3,r2
  80b15c:	10800017 	ldw	r2,0(r2)
  80b160:	10801317 	ldw	r2,76(r2)
  80b164:	1100100e 	bge	r2,r4,80b1a8 <my_alarm_callback+0x258>
				(*(((struct Env*)paras)->o+i))->action((void*)(((struct Env*)paras)->o[i]));
  80b168:	e0bffe17 	ldw	r2,-8(fp)
  80b16c:	10c00017 	ldw	r3,0(r2)
  80b170:	e0bffd17 	ldw	r2,-12(fp)
  80b174:	1085883a 	add	r2,r2,r2
  80b178:	1085883a 	add	r2,r2,r2
  80b17c:	1885883a 	add	r2,r3,r2
  80b180:	10800017 	ldw	r2,0(r2)
  80b184:	11401b17 	ldw	r5,108(r2)
  80b188:	e0bffe17 	ldw	r2,-8(fp)
  80b18c:	10c00017 	ldw	r3,0(r2)
  80b190:	e0bffd17 	ldw	r2,-12(fp)
  80b194:	1085883a 	add	r2,r2,r2
  80b198:	1085883a 	add	r2,r2,r2
  80b19c:	1885883a 	add	r2,r3,r2
  80b1a0:	11000017 	ldw	r4,0(r2)
  80b1a4:	283ee83a 	callr	r5
			if((*(((struct Env*)paras)->o+i))->curr_frame == (*(((struct Env*)paras)->o+i))->end_frame) {
  80b1a8:	e0bffe17 	ldw	r2,-8(fp)
  80b1ac:	10c00017 	ldw	r3,0(r2)
  80b1b0:	e0bffd17 	ldw	r2,-12(fp)
  80b1b4:	1085883a 	add	r2,r2,r2
  80b1b8:	1085883a 	add	r2,r2,r2
  80b1bc:	1885883a 	add	r2,r3,r2
  80b1c0:	10800017 	ldw	r2,0(r2)
  80b1c4:	11001617 	ldw	r4,88(r2)
  80b1c8:	e0bffe17 	ldw	r2,-8(fp)
  80b1cc:	10c00017 	ldw	r3,0(r2)
  80b1d0:	e0bffd17 	ldw	r2,-12(fp)
  80b1d4:	1085883a 	add	r2,r2,r2
  80b1d8:	1085883a 	add	r2,r2,r2
  80b1dc:	1885883a 	add	r2,r3,r2
  80b1e0:	10800017 	ldw	r2,0(r2)
  80b1e4:	10801317 	ldw	r2,76(r2)
  80b1e8:	2080441e 	bne	r4,r2,80b2fc <my_alarm_callback+0x3ac>
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer,(*(((struct Env*)paras)->o+i))->x, (*(((struct Env*)paras)->o+i))->y, (*(((struct Env*)paras)->o+i))->x+(*(((struct Env*)paras)->o+i))->scale+10, (*(((struct Env*)paras)->o+i))->y+(*(((struct Env*)paras)->o+i))->scale+10, 0x0000, 0);
  80b1ec:	d13c3317 	ldw	r4,-3892(gp)
  80b1f0:	e0bffe17 	ldw	r2,-8(fp)
  80b1f4:	10c00017 	ldw	r3,0(r2)
  80b1f8:	e0bffd17 	ldw	r2,-12(fp)
  80b1fc:	1085883a 	add	r2,r2,r2
  80b200:	1085883a 	add	r2,r2,r2
  80b204:	1885883a 	add	r2,r3,r2
  80b208:	10800017 	ldw	r2,0(r2)
  80b20c:	11400017 	ldw	r5,0(r2)
  80b210:	e0bffe17 	ldw	r2,-8(fp)
  80b214:	10c00017 	ldw	r3,0(r2)
  80b218:	e0bffd17 	ldw	r2,-12(fp)
  80b21c:	1085883a 	add	r2,r2,r2
  80b220:	1085883a 	add	r2,r2,r2
  80b224:	1885883a 	add	r2,r3,r2
  80b228:	10800017 	ldw	r2,0(r2)
  80b22c:	11800117 	ldw	r6,4(r2)
  80b230:	e0bffe17 	ldw	r2,-8(fp)
  80b234:	10c00017 	ldw	r3,0(r2)
  80b238:	e0bffd17 	ldw	r2,-12(fp)
  80b23c:	1085883a 	add	r2,r2,r2
  80b240:	1085883a 	add	r2,r2,r2
  80b244:	1885883a 	add	r2,r3,r2
  80b248:	10800017 	ldw	r2,0(r2)
  80b24c:	11c00017 	ldw	r7,0(r2)
  80b250:	e0bffe17 	ldw	r2,-8(fp)
  80b254:	10c00017 	ldw	r3,0(r2)
  80b258:	e0bffd17 	ldw	r2,-12(fp)
  80b25c:	1085883a 	add	r2,r2,r2
  80b260:	1085883a 	add	r2,r2,r2
  80b264:	1885883a 	add	r2,r3,r2
  80b268:	10800017 	ldw	r2,0(r2)
  80b26c:	10800217 	ldw	r2,8(r2)
  80b270:	3885883a 	add	r2,r7,r2
  80b274:	11c00284 	addi	r7,r2,10
  80b278:	e0bffe17 	ldw	r2,-8(fp)
  80b27c:	10c00017 	ldw	r3,0(r2)
  80b280:	e0bffd17 	ldw	r2,-12(fp)
  80b284:	1085883a 	add	r2,r2,r2
  80b288:	1085883a 	add	r2,r2,r2
  80b28c:	1885883a 	add	r2,r3,r2
  80b290:	10800017 	ldw	r2,0(r2)
  80b294:	12000117 	ldw	r8,4(r2)
  80b298:	e0bffe17 	ldw	r2,-8(fp)
  80b29c:	10c00017 	ldw	r3,0(r2)
  80b2a0:	e0bffd17 	ldw	r2,-12(fp)
  80b2a4:	1085883a 	add	r2,r2,r2
  80b2a8:	1085883a 	add	r2,r2,r2
  80b2ac:	1885883a 	add	r2,r3,r2
  80b2b0:	10800017 	ldw	r2,0(r2)
  80b2b4:	10800217 	ldw	r2,8(r2)
  80b2b8:	4085883a 	add	r2,r8,r2
  80b2bc:	10800284 	addi	r2,r2,10
  80b2c0:	d8800015 	stw	r2,0(sp)
  80b2c4:	d8000115 	stw	zero,4(sp)
  80b2c8:	d8000215 	stw	zero,8(sp)
  80b2cc:	0821c940 	call	821c94 <alt_up_pixel_buffer_dma_draw_box>
				setXY_noBound(*(((struct Env*)paras)->o+i), 150, 500);
  80b2d0:	e0bffe17 	ldw	r2,-8(fp)
  80b2d4:	10c00017 	ldw	r3,0(r2)
  80b2d8:	e0bffd17 	ldw	r2,-12(fp)
  80b2dc:	1085883a 	add	r2,r2,r2
  80b2e0:	1085883a 	add	r2,r2,r2
  80b2e4:	1885883a 	add	r2,r3,r2
  80b2e8:	11000017 	ldw	r4,0(r2)
  80b2ec:	01402584 	movi	r5,150
  80b2f0:	01807d04 	movi	r6,500
  80b2f4:	08102d00 	call	8102d0 <setXY_noBound>
  80b2f8:	00001a06 	br	80b364 <my_alarm_callback+0x414>
			} else if((*(((struct Env*)paras)->o+i))->curr_frame == (*(((struct Env*)paras)->o+i))->end_frame+2) {
  80b2fc:	e0bffe17 	ldw	r2,-8(fp)
  80b300:	10c00017 	ldw	r3,0(r2)
  80b304:	e0bffd17 	ldw	r2,-12(fp)
  80b308:	1085883a 	add	r2,r2,r2
  80b30c:	1085883a 	add	r2,r2,r2
  80b310:	1885883a 	add	r2,r3,r2
  80b314:	10800017 	ldw	r2,0(r2)
  80b318:	11001617 	ldw	r4,88(r2)
  80b31c:	e0bffe17 	ldw	r2,-8(fp)
  80b320:	10c00017 	ldw	r3,0(r2)
  80b324:	e0bffd17 	ldw	r2,-12(fp)
  80b328:	1085883a 	add	r2,r2,r2
  80b32c:	1085883a 	add	r2,r2,r2
  80b330:	1885883a 	add	r2,r3,r2
  80b334:	10800017 	ldw	r2,0(r2)
  80b338:	10801317 	ldw	r2,76(r2)
  80b33c:	10800084 	addi	r2,r2,2
  80b340:	2080081e 	bne	r4,r2,80b364 <my_alarm_callback+0x414>
				(*(((struct Env*)paras)->o+i))->isRunable = 0;
  80b344:	e0bffe17 	ldw	r2,-8(fp)
  80b348:	10c00017 	ldw	r3,0(r2)
  80b34c:	e0bffd17 	ldw	r2,-12(fp)
  80b350:	1085883a 	add	r2,r2,r2
  80b354:	1085883a 	add	r2,r2,r2
  80b358:	1885883a 	add	r2,r3,r2
  80b35c:	10800017 	ldw	r2,0(r2)
  80b360:	10001715 	stw	zero,92(r2)
 */
alt_u32 my_alarm_callback (void* paras)
{
	if(lock == 1) return alt_ticks_per_second()/1000;
	int i;
	for(i = 0; i < ((struct Env*)paras)->size; i++) {
  80b364:	e0bffd17 	ldw	r2,-12(fp)
  80b368:	10800044 	addi	r2,r2,1
  80b36c:	e0bffd15 	stw	r2,-12(fp)
  80b370:	e0bffe17 	ldw	r2,-8(fp)
  80b374:	10c00117 	ldw	r3,4(r2)
  80b378:	e0bffd17 	ldw	r2,-12(fp)
  80b37c:	10ff0616 	blt	r2,r3,80af98 <my_alarm_callback+0x48>
				(*(((struct Env*)paras)->o+i))->isRunable = 0;
			}
		}

	}
	if(((struct Env*)paras)->redraw) {
  80b380:	e0bffe17 	ldw	r2,-8(fp)
  80b384:	10800617 	ldw	r2,24(r2)
  80b388:	1005003a 	cmpeq	r2,r2,zero
  80b38c:	1000051e 	bne	r2,zero,80b3a4 <my_alarm_callback+0x454>
		redraw(((struct Env*)paras)->m);
  80b390:	e0bffe17 	ldw	r2,-8(fp)
  80b394:	11000517 	ldw	r4,20(r2)
  80b398:	080a6e00 	call	80a6e0 <redraw>
		((struct Env*)paras)->redraw = false;
  80b39c:	e0bffe17 	ldw	r2,-8(fp)
  80b3a0:	10000615 	stw	zero,24(r2)
  80b3a4:	008020f4 	movhi	r2,131
  80b3a8:	109c9904 	addi	r2,r2,29284
  80b3ac:	10800017 	ldw	r2,0(r2)
  80b3b0:	1009883a 	mov	r4,r2
	}
	return alt_ticks_per_second()/15; //100ms
  80b3b4:	014003c4 	movi	r5,15
  80b3b8:	08146bc0 	call	8146bc <__udivsi3>
  80b3bc:	e0bfff15 	stw	r2,-4(fp)
  80b3c0:	e0bfff17 	ldw	r2,-4(fp)
}
  80b3c4:	e037883a 	mov	sp,fp
  80b3c8:	dfc00117 	ldw	ra,4(sp)
  80b3cc:	df000017 	ldw	fp,0(sp)
  80b3d0:	dec00204 	addi	sp,sp,8
  80b3d4:	f800283a 	ret

0080b3d8 <initVGA>:
/*
 * this function clear the screen and set up pixel buffers for graphics
 */
void initVGA() {
  80b3d8:	defffc04 	addi	sp,sp,-16
  80b3dc:	dfc00315 	stw	ra,12(sp)
  80b3e0:	df000215 	stw	fp,8(sp)
  80b3e4:	df000204 	addi	fp,sp,8

	  // Set the background buffer address � Although we don�t use thebackground,
	  // they only provide a function to change the background buffer address, so
	  // we must set that, and then swap it to the foreground.
	  unsigned int pixel_buffer_addr1 = PIXEL_BUFFER_BASE;
  80b3e8:	00804034 	movhi	r2,256
  80b3ec:	e0bfff15 	stw	r2,-4(fp)
	  unsigned int pixel_buffer_addr2 = PIXEL_BUFFER_BASE + (320*240*2);
  80b3f0:	008040b4 	movhi	r2,258
  80b3f4:	10960004 	addi	r2,r2,22528
  80b3f8:	e0bffe15 	stw	r2,-8(fp)

	  alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer,pixel_buffer_addr1);
  80b3fc:	d13c3317 	ldw	r4,-3892(gp)
  80b400:	e17fff17 	ldw	r5,-4(fp)
  80b404:	0821a4c0 	call	821a4c <alt_up_pixel_buffer_dma_change_back_buffer_address>
	  // Swap background and foreground buffers
	  alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  80b408:	d13c3317 	ldw	r4,-3892(gp)
  80b40c:	0821aa40 	call	821aa4 <alt_up_pixel_buffer_dma_swap_buffers>
	  // Wait for the swap to complete
	  while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  80b410:	d13c3317 	ldw	r4,-3892(gp)
  80b414:	0821afc0 	call	821afc <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  80b418:	1004c03a 	cmpne	r2,r2,zero
  80b41c:	103ffc1e 	bne	r2,zero,80b410 <initVGA+0x38>

	  alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer,pixel_buffer_addr2);
  80b420:	d13c3317 	ldw	r4,-3892(gp)
  80b424:	e17ffe17 	ldw	r5,-8(fp)
  80b428:	0821a4c0 	call	821a4c <alt_up_pixel_buffer_dma_change_back_buffer_address>
	  // Clear the screen
	  alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80b42c:	d13c3317 	ldw	r4,-3892(gp)
  80b430:	000b883a 	mov	r5,zero
  80b434:	0821b300 	call	821b30 <alt_up_pixel_buffer_dma_clear_screen>
	  alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 1);
  80b438:	d13c3317 	ldw	r4,-3892(gp)
  80b43c:	01400044 	movi	r5,1
  80b440:	0821b300 	call	821b30 <alt_up_pixel_buffer_dma_clear_screen>

	 // alt_up_pixel_buffer_dma_draw_line(pixel_buffer, 0, 0, 320, 240, 0xFFFF,1);
	   //Swap background and foreground buffers
	  	  alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
  80b444:	d13c3317 	ldw	r4,-3892(gp)
  80b448:	0821aa40 	call	821aa4 <alt_up_pixel_buffer_dma_swap_buffers>
	  	   //Wait for the swap to complete
	  	  while(alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
  80b44c:	d13c3317 	ldw	r4,-3892(gp)
  80b450:	0821afc0 	call	821afc <alt_up_pixel_buffer_dma_check_swap_buffers_status>
  80b454:	1004c03a 	cmpne	r2,r2,zero
  80b458:	103ffc1e 	bne	r2,zero,80b44c <initVGA+0x74>
	  //	  return pixel_buffer;
}
  80b45c:	e037883a 	mov	sp,fp
  80b460:	dfc00117 	ldw	ra,4(sp)
  80b464:	df000017 	ldw	fp,0(sp)
  80b468:	dec00204 	addi	sp,sp,8
  80b46c:	f800283a 	ret

0080b470 <loadSDCard>:

bool loadSDCard(alt_up_sd_card_dev* device) {
  80b470:	defffc04 	addi	sp,sp,-16
  80b474:	dfc00315 	stw	ra,12(sp)
  80b478:	df000215 	stw	fp,8(sp)
  80b47c:	df000204 	addi	fp,sp,8
  80b480:	e13ffe15 	stw	r4,-8(fp)
	if((device = alt_up_sd_card_open_dev("/dev/SD_Card")) != NULL) {
  80b484:	010020f4 	movhi	r4,131
  80b488:	21215e04 	addi	r4,r4,-31368
  80b48c:	0825b400 	call	825b40 <alt_up_sd_card_open_dev>
  80b490:	e0bffe15 	stw	r2,-8(fp)
  80b494:	e0bffe17 	ldw	r2,-8(fp)
  80b498:	1005003a 	cmpeq	r2,r2,zero
  80b49c:	1000121e 	bne	r2,zero,80b4e8 <loadSDCard+0x78>
		if (alt_up_sd_card_is_Present()) {
  80b4a0:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  80b4a4:	1005003a 	cmpeq	r2,r2,zero
  80b4a8:	10000f1e 	bne	r2,zero,80b4e8 <loadSDCard+0x78>
			printf("Card connected.\n");
  80b4ac:	010020f4 	movhi	r4,131
  80b4b0:	21216204 	addi	r4,r4,-31352
  80b4b4:	08158640 	call	815864 <puts>
			if (alt_up_sd_card_is_FAT16()) {
  80b4b8:	0825ccc0 	call	825ccc <alt_up_sd_card_is_FAT16>
  80b4bc:	1005003a 	cmpeq	r2,r2,zero
  80b4c0:	1000061e 	bne	r2,zero,80b4dc <loadSDCard+0x6c>
				printf("FAT16 file system detected.\n");
  80b4c4:	010020f4 	movhi	r4,131
  80b4c8:	21216604 	addi	r4,r4,-31336
  80b4cc:	08158640 	call	815864 <puts>
				return true;
  80b4d0:	00800044 	movi	r2,1
  80b4d4:	e0bfff15 	stw	r2,-4(fp)
  80b4d8:	00000406 	br	80b4ec <loadSDCard+0x7c>
			} else {
				printf("Unknown file system.\n");
  80b4dc:	010020f4 	movhi	r4,131
  80b4e0:	21216d04 	addi	r4,r4,-31308
  80b4e4:	08158640 	call	815864 <puts>
			}
		}
	}
	return false;
  80b4e8:	e03fff15 	stw	zero,-4(fp)
  80b4ec:	e0bfff17 	ldw	r2,-4(fp)
}
  80b4f0:	e037883a 	mov	sp,fp
  80b4f4:	dfc00117 	ldw	ra,4(sp)
  80b4f8:	df000017 	ldw	fp,0(sp)
  80b4fc:	dec00204 	addi	sp,sp,8
  80b500:	f800283a 	ret

0080b504 <loadSDImage>:

/*
 * Load bitmap image from SD card.  Fixed problem with color coding
 * file name is required to be upper-case and bitmap pixels has to be even size x even size
 */
bool loadSDImage(char* filename, int** destination) {
  80b504:	defff204 	addi	sp,sp,-56
  80b508:	dfc00d15 	stw	ra,52(sp)
  80b50c:	df000c15 	stw	fp,48(sp)
  80b510:	df000c04 	addi	fp,sp,48
  80b514:	e13ffd15 	stw	r4,-12(fp)
  80b518:	e17ffe15 	stw	r5,-8(fp)
	int i, j, bytes = 0, offset = 0, size = 0, byte = 0;
  80b51c:	e03ffa15 	stw	zero,-24(fp)
  80b520:	e03ff915 	stw	zero,-28(fp)
  80b524:	e03ff815 	stw	zero,-32(fp)
  80b528:	e03ff715 	stw	zero,-36(fp)
	int a, b;
	int file_pointer = alt_up_sd_card_fopen(filename, false);
  80b52c:	e13ffd17 	ldw	r4,-12(fp)
  80b530:	000b883a 	mov	r5,zero
  80b534:	08261c40 	call	8261c4 <alt_up_sd_card_fopen>
  80b538:	10bfffcc 	andi	r2,r2,65535
  80b53c:	10a0001c 	xori	r2,r2,32768
  80b540:	10a00004 	addi	r2,r2,-32768
  80b544:	e0bff415 	stw	r2,-48(fp)
	if(file_pointer < 0) {
  80b548:	e0bff417 	ldw	r2,-48(fp)
  80b54c:	1004403a 	cmpge	r2,r2,zero
  80b550:	10001b1e 	bne	r2,zero,80b5c0 <loadSDImage+0xbc>
		alt_up_sd_card_fclose(file_pointer); //close the file
  80b554:	e0bff417 	ldw	r2,-48(fp)
  80b558:	113fffcc 	andi	r4,r2,65535
  80b55c:	2120001c 	xori	r4,r4,32768
  80b560:	21200004 	addi	r4,r4,-32768
  80b564:	08270400 	call	827040 <alt_up_sd_card_fclose>
		return false;
  80b568:	e03fff15 	stw	zero,-4(fp)
  80b56c:	0000bb06 	br	80b85c <loadSDImage+0x358>
	}

	//Start reading the bitmap header
	while(bytes < 10) {
		if(alt_up_sd_card_read(file_pointer) < 0) {
  80b570:	e0bff417 	ldw	r2,-48(fp)
  80b574:	113fffcc 	andi	r4,r2,65535
  80b578:	2120001c 	xori	r4,r4,32768
  80b57c:	21200004 	addi	r4,r4,-32768
  80b580:	08266880 	call	826688 <alt_up_sd_card_read>
  80b584:	10bfffcc 	andi	r2,r2,65535
  80b588:	10a0001c 	xori	r2,r2,32768
  80b58c:	10a00004 	addi	r2,r2,-32768
  80b590:	1004403a 	cmpge	r2,r2,zero
  80b594:	1000071e 	bne	r2,zero,80b5b4 <loadSDImage+0xb0>
			alt_up_sd_card_fclose(file_pointer);
  80b598:	e0bff417 	ldw	r2,-48(fp)
  80b59c:	113fffcc 	andi	r4,r2,65535
  80b5a0:	2120001c 	xori	r4,r4,32768
  80b5a4:	21200004 	addi	r4,r4,-32768
  80b5a8:	08270400 	call	827040 <alt_up_sd_card_fclose>
			return false;
  80b5ac:	e03fff15 	stw	zero,-4(fp)
  80b5b0:	0000aa06 	br	80b85c <loadSDImage+0x358>
		}
		bytes++;
  80b5b4:	e0bffa17 	ldw	r2,-24(fp)
  80b5b8:	10800044 	addi	r2,r2,1
  80b5bc:	e0bffa15 	stw	r2,-24(fp)
		alt_up_sd_card_fclose(file_pointer); //close the file
		return false;
	}

	//Start reading the bitmap header
	while(bytes < 10) {
  80b5c0:	e0bffa17 	ldw	r2,-24(fp)
  80b5c4:	10800290 	cmplti	r2,r2,10
  80b5c8:	103fe91e 	bne	r2,zero,80b570 <loadSDImage+0x6c>
			alt_up_sd_card_fclose(file_pointer);
			return false;
		}
		bytes++;
	}
	if((offset = alt_up_sd_card_read(file_pointer))< 0) {
  80b5cc:	e0bff417 	ldw	r2,-48(fp)
  80b5d0:	113fffcc 	andi	r4,r2,65535
  80b5d4:	2120001c 	xori	r4,r4,32768
  80b5d8:	21200004 	addi	r4,r4,-32768
  80b5dc:	08266880 	call	826688 <alt_up_sd_card_read>
  80b5e0:	10bfffcc 	andi	r2,r2,65535
  80b5e4:	10a0001c 	xori	r2,r2,32768
  80b5e8:	10a00004 	addi	r2,r2,-32768
  80b5ec:	e0bff915 	stw	r2,-28(fp)
  80b5f0:	e0bff917 	ldw	r2,-28(fp)
  80b5f4:	1004403a 	cmpge	r2,r2,zero
  80b5f8:	10003e1e 	bne	r2,zero,80b6f4 <loadSDImage+0x1f0>
		alt_up_sd_card_fclose(file_pointer);
  80b5fc:	e0bff417 	ldw	r2,-48(fp)
  80b600:	113fffcc 	andi	r4,r2,65535
  80b604:	2120001c 	xori	r4,r4,32768
  80b608:	21200004 	addi	r4,r4,-32768
  80b60c:	08270400 	call	827040 <alt_up_sd_card_fclose>
		return false;
  80b610:	e03fff15 	stw	zero,-4(fp)
  80b614:	00009106 	br	80b85c <loadSDImage+0x358>
	}
	while(bytes < offset-1){
		if(bytes == 21) {
  80b618:	e0bffa17 	ldw	r2,-24(fp)
  80b61c:	10800558 	cmpnei	r2,r2,21
  80b620:	10001e1e 	bne	r2,zero,80b69c <loadSDImage+0x198>
			if((size = alt_up_sd_card_read(file_pointer))< 0) {
  80b624:	e0bff417 	ldw	r2,-48(fp)
  80b628:	113fffcc 	andi	r4,r2,65535
  80b62c:	2120001c 	xori	r4,r4,32768
  80b630:	21200004 	addi	r4,r4,-32768
  80b634:	08266880 	call	826688 <alt_up_sd_card_read>
  80b638:	10bfffcc 	andi	r2,r2,65535
  80b63c:	10a0001c 	xori	r2,r2,32768
  80b640:	10a00004 	addi	r2,r2,-32768
  80b644:	e0bff815 	stw	r2,-32(fp)
  80b648:	e0bff817 	ldw	r2,-32(fp)
  80b64c:	1004403a 	cmpge	r2,r2,zero
  80b650:	1000071e 	bne	r2,zero,80b670 <loadSDImage+0x16c>
				alt_up_sd_card_fclose(file_pointer);
  80b654:	e0bff417 	ldw	r2,-48(fp)
  80b658:	113fffcc 	andi	r4,r2,65535
  80b65c:	2120001c 	xori	r4,r4,32768
  80b660:	21200004 	addi	r4,r4,-32768
  80b664:	08270400 	call	827040 <alt_up_sd_card_fclose>
				return false;
  80b668:	e03fff15 	stw	zero,-4(fp)
  80b66c:	00007b06 	br	80b85c <loadSDImage+0x358>
			}
			*destination = (int*)malloc(size*size*sizeof(int));
  80b670:	e0fff817 	ldw	r3,-32(fp)
  80b674:	e0bff817 	ldw	r2,-32(fp)
  80b678:	1885383a 	mul	r2,r3,r2
  80b67c:	1085883a 	add	r2,r2,r2
  80b680:	1085883a 	add	r2,r2,r2
  80b684:	1009883a 	mov	r4,r2
  80b688:	0814f580 	call	814f58 <malloc>
  80b68c:	1007883a 	mov	r3,r2
  80b690:	e0bffe17 	ldw	r2,-8(fp)
  80b694:	10c00015 	stw	r3,0(r2)
  80b698:	00001306 	br	80b6e8 <loadSDImage+0x1e4>
		} else if( alt_up_sd_card_read(file_pointer) < 0) {
  80b69c:	e0bff417 	ldw	r2,-48(fp)
  80b6a0:	113fffcc 	andi	r4,r2,65535
  80b6a4:	2120001c 	xori	r4,r4,32768
  80b6a8:	21200004 	addi	r4,r4,-32768
  80b6ac:	08266880 	call	826688 <alt_up_sd_card_read>
  80b6b0:	10bfffcc 	andi	r2,r2,65535
  80b6b4:	10a0001c 	xori	r2,r2,32768
  80b6b8:	10a00004 	addi	r2,r2,-32768
  80b6bc:	1004403a 	cmpge	r2,r2,zero
  80b6c0:	1000091e 	bne	r2,zero,80b6e8 <loadSDImage+0x1e4>
			safefree(destination);
  80b6c4:	e13ffe17 	ldw	r4,-8(fp)
  80b6c8:	080af080 	call	80af08 <safefree>
			alt_up_sd_card_fclose(file_pointer);
  80b6cc:	e0bff417 	ldw	r2,-48(fp)
  80b6d0:	113fffcc 	andi	r4,r2,65535
  80b6d4:	2120001c 	xori	r4,r4,32768
  80b6d8:	21200004 	addi	r4,r4,-32768
  80b6dc:	08270400 	call	827040 <alt_up_sd_card_fclose>
			return false;
  80b6e0:	e03fff15 	stw	zero,-4(fp)
  80b6e4:	00005d06 	br	80b85c <loadSDImage+0x358>
		}
		bytes++;
  80b6e8:	e0bffa17 	ldw	r2,-24(fp)
  80b6ec:	10800044 	addi	r2,r2,1
  80b6f0:	e0bffa15 	stw	r2,-24(fp)
	}
	if((offset = alt_up_sd_card_read(file_pointer))< 0) {
		alt_up_sd_card_fclose(file_pointer);
		return false;
	}
	while(bytes < offset-1){
  80b6f4:	e0bff917 	ldw	r2,-28(fp)
  80b6f8:	10ffffc4 	addi	r3,r2,-1
  80b6fc:	e0bffa17 	ldw	r2,-24(fp)
  80b700:	10ffc516 	blt	r2,r3,80b618 <loadSDImage+0x114>
			return false;
		}
		bytes++;
	}
	//Start reading the pixel data
	for(j = size-1; j >= 0; j--) {
  80b704:	e0bff817 	ldw	r2,-32(fp)
  80b708:	10bfffc4 	addi	r2,r2,-1
  80b70c:	e0bffb15 	stw	r2,-20(fp)
  80b710:	00004806 	br	80b834 <loadSDImage+0x330>
		for(i = 0; i < size; i++) {
  80b714:	e03ffc15 	stw	zero,-16(fp)
  80b718:	00004006 	br	80b81c <loadSDImage+0x318>
			a = alt_up_sd_card_read(file_pointer);
  80b71c:	e0bff417 	ldw	r2,-48(fp)
  80b720:	113fffcc 	andi	r4,r2,65535
  80b724:	2120001c 	xori	r4,r4,32768
  80b728:	21200004 	addi	r4,r4,-32768
  80b72c:	08266880 	call	826688 <alt_up_sd_card_read>
  80b730:	10bfffcc 	andi	r2,r2,65535
  80b734:	10a0001c 	xori	r2,r2,32768
  80b738:	10a00004 	addi	r2,r2,-32768
  80b73c:	e0bff615 	stw	r2,-40(fp)
			b = alt_up_sd_card_read(file_pointer);
  80b740:	e0bff417 	ldw	r2,-48(fp)
  80b744:	113fffcc 	andi	r4,r2,65535
  80b748:	2120001c 	xori	r4,r4,32768
  80b74c:	21200004 	addi	r4,r4,-32768
  80b750:	08266880 	call	826688 <alt_up_sd_card_read>
  80b754:	10bfffcc 	andi	r2,r2,65535
  80b758:	10a0001c 	xori	r2,r2,32768
  80b75c:	10a00004 	addi	r2,r2,-32768
  80b760:	e0bff515 	stw	r2,-44(fp)
			if(a < 0 || b < 0) {
  80b764:	e0bff617 	ldw	r2,-40(fp)
  80b768:	1004803a 	cmplt	r2,r2,zero
  80b76c:	1000031e 	bne	r2,zero,80b77c <loadSDImage+0x278>
  80b770:	e0bff517 	ldw	r2,-44(fp)
  80b774:	1004403a 	cmpge	r2,r2,zero
  80b778:	1000121e 	bne	r2,zero,80b7c4 <loadSDImage+0x2c0>
				free(*destination);
  80b77c:	e0bffe17 	ldw	r2,-8(fp)
  80b780:	11000017 	ldw	r4,0(r2)
  80b784:	0814f440 	call	814f44 <free>
				*destination = NULL;
  80b788:	e0bffe17 	ldw	r2,-8(fp)
  80b78c:	10000015 	stw	zero,0(r2)
				printf("%s invalid at pixel[%d, %d]!\n", filename, i, j);
  80b790:	010020f4 	movhi	r4,131
  80b794:	21217304 	addi	r4,r4,-31284
  80b798:	e17ffd17 	ldw	r5,-12(fp)
  80b79c:	e1bffc17 	ldw	r6,-16(fp)
  80b7a0:	e1fffb17 	ldw	r7,-20(fp)
  80b7a4:	081574c0 	call	81574c <printf>
				alt_up_sd_card_fclose(file_pointer);
  80b7a8:	e0bff417 	ldw	r2,-48(fp)
  80b7ac:	113fffcc 	andi	r4,r2,65535
  80b7b0:	2120001c 	xori	r4,r4,32768
  80b7b4:	21200004 	addi	r4,r4,-32768
  80b7b8:	08270400 	call	827040 <alt_up_sd_card_fclose>
				return false;
  80b7bc:	e03fff15 	stw	zero,-4(fp)
  80b7c0:	00002606 	br	80b85c <loadSDImage+0x358>
			}
			byte = getColor555(b*256+a);
  80b7c4:	e0bff517 	ldw	r2,-44(fp)
  80b7c8:	1006923a 	slli	r3,r2,8
  80b7cc:	e0bff617 	ldw	r2,-40(fp)
  80b7d0:	1889883a 	add	r4,r3,r2
  80b7d4:	0812ca80 	call	812ca8 <getColor555>
  80b7d8:	e0bff715 	stw	r2,-36(fp)
			*(*destination + j*size+i) = byte;
  80b7dc:	e0bffe17 	ldw	r2,-8(fp)
  80b7e0:	11000017 	ldw	r4,0(r2)
  80b7e4:	e0fffb17 	ldw	r3,-20(fp)
  80b7e8:	e0bff817 	ldw	r2,-32(fp)
  80b7ec:	1885383a 	mul	r2,r3,r2
  80b7f0:	1007883a 	mov	r3,r2
  80b7f4:	e0bffc17 	ldw	r2,-16(fp)
  80b7f8:	1885883a 	add	r2,r3,r2
  80b7fc:	1085883a 	add	r2,r2,r2
  80b800:	1085883a 	add	r2,r2,r2
  80b804:	2087883a 	add	r3,r4,r2
  80b808:	e0bff717 	ldw	r2,-36(fp)
  80b80c:	18800015 	stw	r2,0(r3)
		}
		bytes++;
	}
	//Start reading the pixel data
	for(j = size-1; j >= 0; j--) {
		for(i = 0; i < size; i++) {
  80b810:	e0bffc17 	ldw	r2,-16(fp)
  80b814:	10800044 	addi	r2,r2,1
  80b818:	e0bffc15 	stw	r2,-16(fp)
  80b81c:	e0fffc17 	ldw	r3,-16(fp)
  80b820:	e0bff817 	ldw	r2,-32(fp)
  80b824:	18bfbd16 	blt	r3,r2,80b71c <loadSDImage+0x218>
			return false;
		}
		bytes++;
	}
	//Start reading the pixel data
	for(j = size-1; j >= 0; j--) {
  80b828:	e0bffb17 	ldw	r2,-20(fp)
  80b82c:	10bfffc4 	addi	r2,r2,-1
  80b830:	e0bffb15 	stw	r2,-20(fp)
  80b834:	e0bffb17 	ldw	r2,-20(fp)
  80b838:	1004403a 	cmpge	r2,r2,zero
  80b83c:	103fb51e 	bne	r2,zero,80b714 <loadSDImage+0x210>
			}
			byte = getColor555(b*256+a);
			*(*destination + j*size+i) = byte;
		}
	}
	alt_up_sd_card_fclose(file_pointer);
  80b840:	e0bff417 	ldw	r2,-48(fp)
  80b844:	113fffcc 	andi	r4,r2,65535
  80b848:	2120001c 	xori	r4,r4,32768
  80b84c:	21200004 	addi	r4,r4,-32768
  80b850:	08270400 	call	827040 <alt_up_sd_card_fclose>
	return true;
  80b854:	00800044 	movi	r2,1
  80b858:	e0bfff15 	stw	r2,-4(fp)
  80b85c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b860:	e037883a 	mov	sp,fp
  80b864:	dfc00117 	ldw	ra,4(sp)
  80b868:	df000017 	ldw	fp,0(sp)
  80b86c:	dec00204 	addi	sp,sp,8
  80b870:	f800283a 	ret

0080b874 <loadSDImageSeq>:
/*
 * An abstract function that allows to load all images with same prefix
 *	index is the number of characters that are prefix
 */
struct animation* loadSDImageSeq(char* filename, int index, int size) {
  80b874:	deffe104 	addi	sp,sp,-124
  80b878:	dfc01e15 	stw	ra,120(sp)
  80b87c:	df001d15 	stw	fp,116(sp)
  80b880:	df001d04 	addi	fp,sp,116
  80b884:	e13ffd15 	stw	r4,-12(fp)
  80b888:	e17ffe15 	stw	r5,-8(fp)
  80b88c:	e1bfff15 	stw	r6,-4(fp)
	int i = 0, j = 0;
  80b890:	e03fe715 	stw	zero,-100(fp)
  80b894:	e03fe615 	stw	zero,-104(fp)
	swap = 0;
  80b898:	d03c2615 	stw	zero,-3944(gp)
	char temp[30],buffer[30];
	char buff[20];
	char* prefix = (char*)malloc(sizeof(char)*(index+1));
  80b89c:	e0bffe17 	ldw	r2,-8(fp)
  80b8a0:	10800044 	addi	r2,r2,1
  80b8a4:	1009883a 	mov	r4,r2
  80b8a8:	0814f580 	call	814f58 <malloc>
  80b8ac:	e0bfe515 	stw	r2,-108(fp)
	prefix[index] = '\0';
  80b8b0:	e0bffe17 	ldw	r2,-8(fp)
  80b8b4:	1007883a 	mov	r3,r2
  80b8b8:	e0bfe517 	ldw	r2,-108(fp)
  80b8bc:	1885883a 	add	r2,r3,r2
  80b8c0:	10000005 	stb	zero,0(r2)
	int* ptr = NULL;
  80b8c4:	e03ffc15 	stw	zero,-16(fp)

	strncpy(prefix, filename, index);
  80b8c8:	e1bffe17 	ldw	r6,-8(fp)
  80b8cc:	e13fe517 	ldw	r4,-108(fp)
  80b8d0:	e17ffd17 	ldw	r5,-12(fp)
  80b8d4:	0815c000 	call	815c00 <strncpy>
	struct animation* a = NULL;
  80b8d8:	e03fe415 	stw	zero,-112(fp)
	struct animation* b = NULL;
  80b8dc:	e03fe315 	stw	zero,-116(fp)
	while(i < size) {
  80b8e0:	0000b306 	br	80bbb0 <loadSDImageSeq+0x33c>
		strcpy(temp, prefix);
  80b8e4:	e13fe804 	addi	r4,fp,-96
  80b8e8:	e17fe517 	ldw	r5,-108(fp)
  80b8ec:	0815a500 	call	815a50 <strcpy>
		buffer[0] = 0;
  80b8f0:	e03fef85 	stb	zero,-66(fp)
		sprintf(buffer, "%d.BMP ", i);
  80b8f4:	e13fef84 	addi	r4,fp,-66
  80b8f8:	014020f4 	movhi	r5,131
  80b8fc:	29617b04 	addi	r5,r5,-31252
  80b900:	e1bfe717 	ldw	r6,-100(fp)
  80b904:	081597c0 	call	81597c <sprintf>
		if(i < 10) {
  80b908:	e0bfe717 	ldw	r2,-100(fp)
  80b90c:	10800288 	cmpgei	r2,r2,10
  80b910:	1000421e 	bne	r2,zero,80ba1c <loadSDImageSeq+0x1a8>
			strncat(temp, buffer, 5);
  80b914:	e13fe804 	addi	r4,fp,-96
  80b918:	e17fef84 	addi	r5,fp,-66
  80b91c:	01800144 	movi	r6,5
  80b920:	0815b500 	call	815b50 <strncat>
			strcpy(buff, temp);
  80b924:	e13ff704 	addi	r4,fp,-36
  80b928:	e17fe804 	addi	r5,fp,-96
  80b92c:	0815a500 	call	815a50 <strcpy>
			for(j = 0; j < i%5; j++) {
  80b930:	e03fe615 	stw	zero,-104(fp)
  80b934:	00000b06 	br	80b964 <loadSDImageSeq+0xf0>
				buff[index+5+j] = '.';
  80b938:	e0fffe17 	ldw	r3,-8(fp)
  80b93c:	e0bfe617 	ldw	r2,-104(fp)
  80b940:	1885883a 	add	r2,r3,r2
  80b944:	10c00144 	addi	r3,r2,5
  80b948:	e0bff704 	addi	r2,fp,-36
  80b94c:	10c7883a 	add	r3,r2,r3
  80b950:	00800b84 	movi	r2,46
  80b954:	18800005 	stb	r2,0(r3)
		buffer[0] = 0;
		sprintf(buffer, "%d.BMP ", i);
		if(i < 10) {
			strncat(temp, buffer, 5);
			strcpy(buff, temp);
			for(j = 0; j < i%5; j++) {
  80b958:	e0bfe617 	ldw	r2,-104(fp)
  80b95c:	10800044 	addi	r2,r2,1
  80b960:	e0bfe615 	stw	r2,-104(fp)
  80b964:	e13fe717 	ldw	r4,-100(fp)
  80b968:	01400144 	movi	r5,5
  80b96c:	081465c0 	call	81465c <__modsi3>
  80b970:	1007883a 	mov	r3,r2
  80b974:	e0bfe617 	ldw	r2,-104(fp)
  80b978:	10ffef16 	blt	r2,r3,80b938 <loadSDImageSeq+0xc4>
				buff[index+5+j] = '.';
			} buff[index+5+j] = ' ';buff[index+6+j] = ' ';buff[index+7+j] = ' ';buff[index+8+j] = ' ';buff[index+9+j] = '\0';
  80b97c:	e0fffe17 	ldw	r3,-8(fp)
  80b980:	e0bfe617 	ldw	r2,-104(fp)
  80b984:	1885883a 	add	r2,r3,r2
  80b988:	10c00144 	addi	r3,r2,5
  80b98c:	e0bff704 	addi	r2,fp,-36
  80b990:	10c7883a 	add	r3,r2,r3
  80b994:	00800804 	movi	r2,32
  80b998:	18800005 	stb	r2,0(r3)
  80b99c:	e0fffe17 	ldw	r3,-8(fp)
  80b9a0:	e0bfe617 	ldw	r2,-104(fp)
  80b9a4:	1885883a 	add	r2,r3,r2
  80b9a8:	10c00184 	addi	r3,r2,6
  80b9ac:	e0bff704 	addi	r2,fp,-36
  80b9b0:	10c7883a 	add	r3,r2,r3
  80b9b4:	00800804 	movi	r2,32
  80b9b8:	18800005 	stb	r2,0(r3)
  80b9bc:	e0fffe17 	ldw	r3,-8(fp)
  80b9c0:	e0bfe617 	ldw	r2,-104(fp)
  80b9c4:	1885883a 	add	r2,r3,r2
  80b9c8:	10c001c4 	addi	r3,r2,7
  80b9cc:	e0bff704 	addi	r2,fp,-36
  80b9d0:	10c7883a 	add	r3,r2,r3
  80b9d4:	00800804 	movi	r2,32
  80b9d8:	18800005 	stb	r2,0(r3)
  80b9dc:	e0fffe17 	ldw	r3,-8(fp)
  80b9e0:	e0bfe617 	ldw	r2,-104(fp)
  80b9e4:	1885883a 	add	r2,r3,r2
  80b9e8:	10c00204 	addi	r3,r2,8
  80b9ec:	e0bff704 	addi	r2,fp,-36
  80b9f0:	10c7883a 	add	r3,r2,r3
  80b9f4:	00800804 	movi	r2,32
  80b9f8:	18800005 	stb	r2,0(r3)
  80b9fc:	e0fffe17 	ldw	r3,-8(fp)
  80ba00:	e0bfe617 	ldw	r2,-104(fp)
  80ba04:	1885883a 	add	r2,r3,r2
  80ba08:	10c00244 	addi	r3,r2,9
  80ba0c:	e0bff704 	addi	r2,fp,-36
  80ba10:	10c5883a 	add	r2,r2,r3
  80ba14:	10000005 	stb	zero,0(r2)
  80ba18:	00003906 	br	80bb00 <loadSDImageSeq+0x28c>
		}else {
			strncat(temp, buffer, 6);
  80ba1c:	e13fe804 	addi	r4,fp,-96
  80ba20:	e17fef84 	addi	r5,fp,-66
  80ba24:	01800184 	movi	r6,6
  80ba28:	0815b500 	call	815b50 <strncat>
			strcpy(buff, temp);
  80ba2c:	e13ff704 	addi	r4,fp,-36
  80ba30:	e17fe804 	addi	r5,fp,-96
  80ba34:	0815a500 	call	815a50 <strcpy>
			for(j = 0; j < i%5; j++) {
  80ba38:	e03fe615 	stw	zero,-104(fp)
  80ba3c:	00000b06 	br	80ba6c <loadSDImageSeq+0x1f8>
				buff[index+6+j] = '.';
  80ba40:	e0fffe17 	ldw	r3,-8(fp)
  80ba44:	e0bfe617 	ldw	r2,-104(fp)
  80ba48:	1885883a 	add	r2,r3,r2
  80ba4c:	10c00184 	addi	r3,r2,6
  80ba50:	e0bff704 	addi	r2,fp,-36
  80ba54:	10c7883a 	add	r3,r2,r3
  80ba58:	00800b84 	movi	r2,46
  80ba5c:	18800005 	stb	r2,0(r3)
				buff[index+5+j] = '.';
			} buff[index+5+j] = ' ';buff[index+6+j] = ' ';buff[index+7+j] = ' ';buff[index+8+j] = ' ';buff[index+9+j] = '\0';
		}else {
			strncat(temp, buffer, 6);
			strcpy(buff, temp);
			for(j = 0; j < i%5; j++) {
  80ba60:	e0bfe617 	ldw	r2,-104(fp)
  80ba64:	10800044 	addi	r2,r2,1
  80ba68:	e0bfe615 	stw	r2,-104(fp)
  80ba6c:	e13fe717 	ldw	r4,-100(fp)
  80ba70:	01400144 	movi	r5,5
  80ba74:	081465c0 	call	81465c <__modsi3>
  80ba78:	1007883a 	mov	r3,r2
  80ba7c:	e0bfe617 	ldw	r2,-104(fp)
  80ba80:	10ffef16 	blt	r2,r3,80ba40 <loadSDImageSeq+0x1cc>
				buff[index+6+j] = '.';
			}
			buff[index+6+j] = ' ';buff[index+6+j+1] = ' ';buff[index+6+j+2] = ' ';buff[index+9+j] = '\0';
  80ba84:	e0fffe17 	ldw	r3,-8(fp)
  80ba88:	e0bfe617 	ldw	r2,-104(fp)
  80ba8c:	1885883a 	add	r2,r3,r2
  80ba90:	10c00184 	addi	r3,r2,6
  80ba94:	e0bff704 	addi	r2,fp,-36
  80ba98:	10c7883a 	add	r3,r2,r3
  80ba9c:	00800804 	movi	r2,32
  80baa0:	18800005 	stb	r2,0(r3)
  80baa4:	e0fffe17 	ldw	r3,-8(fp)
  80baa8:	e0bfe617 	ldw	r2,-104(fp)
  80baac:	1885883a 	add	r2,r3,r2
  80bab0:	10c001c4 	addi	r3,r2,7
  80bab4:	e0bff704 	addi	r2,fp,-36
  80bab8:	10c7883a 	add	r3,r2,r3
  80babc:	00800804 	movi	r2,32
  80bac0:	18800005 	stb	r2,0(r3)
  80bac4:	e0fffe17 	ldw	r3,-8(fp)
  80bac8:	e0bfe617 	ldw	r2,-104(fp)
  80bacc:	1885883a 	add	r2,r3,r2
  80bad0:	10c00204 	addi	r3,r2,8
  80bad4:	e0bff704 	addi	r2,fp,-36
  80bad8:	10c7883a 	add	r3,r2,r3
  80badc:	00800804 	movi	r2,32
  80bae0:	18800005 	stb	r2,0(r3)
  80bae4:	e0fffe17 	ldw	r3,-8(fp)
  80bae8:	e0bfe617 	ldw	r2,-104(fp)
  80baec:	1885883a 	add	r2,r3,r2
  80baf0:	10c00244 	addi	r3,r2,9
  80baf4:	e0bff704 	addi	r2,fp,-36
  80baf8:	10c5883a 	add	r2,r2,r3
  80bafc:	10000005 	stb	zero,0(r2)
		}
		if(info.start == 1) {
  80bb00:	008020f4 	movhi	r2,131
  80bb04:	109cb404 	addi	r2,r2,29392
  80bb08:	10800617 	ldw	r2,24(r2)
  80bb0c:	10800058 	cmpnei	r2,r2,1
  80bb10:	10000a1e 	bne	r2,zero,80bb3c <loadSDImageSeq+0x2c8>
			alt_up_char_buffer_string(char_buffer, buff, 48, 30); //show reading file name because we are in loading page
  80bb14:	d13c2217 	ldw	r4,-3960(gp)
  80bb18:	e17ff704 	addi	r5,fp,-36
  80bb1c:	01800c04 	movi	r6,48
  80bb20:	01c00784 	movi	r7,30
  80bb24:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		}
		while(!loadSDImage(temp, &ptr)){
  80bb28:	00000406 	br	80bb3c <loadSDImageSeq+0x2c8>
			printf("Loading File Error: %s\n", temp);
  80bb2c:	e17fe804 	addi	r5,fp,-96
  80bb30:	010020f4 	movhi	r4,131
  80bb34:	21217d04 	addi	r4,r4,-31244
  80bb38:	081574c0 	call	81574c <printf>
			buff[index+6+j] = ' ';buff[index+6+j+1] = ' ';buff[index+6+j+2] = ' ';buff[index+9+j] = '\0';
		}
		if(info.start == 1) {
			alt_up_char_buffer_string(char_buffer, buff, 48, 30); //show reading file name because we are in loading page
		}
		while(!loadSDImage(temp, &ptr)){
  80bb3c:	e13fe804 	addi	r4,fp,-96
  80bb40:	e17ffc04 	addi	r5,fp,-16
  80bb44:	080b5040 	call	80b504 <loadSDImage>
  80bb48:	1080005c 	xori	r2,r2,1
  80bb4c:	10803fcc 	andi	r2,r2,255
  80bb50:	1004c03a 	cmpne	r2,r2,zero
  80bb54:	103ff51e 	bne	r2,zero,80bb2c <loadSDImageSeq+0x2b8>
			printf("Loading File Error: %s\n", temp);
		}
		if(i == 0) {
  80bb58:	e0bfe717 	ldw	r2,-100(fp)
  80bb5c:	1004c03a 	cmpne	r2,r2,zero
  80bb60:	1000071e 	bne	r2,zero,80bb80 <loadSDImageSeq+0x30c>
			a = initAnimation(ptr, 1);
  80bb64:	e13ffc17 	ldw	r4,-16(fp)
  80bb68:	01400044 	movi	r5,1
  80bb6c:	0811d7c0 	call	811d7c <initAnimation>
  80bb70:	e0bfe415 	stw	r2,-112(fp)
			imageInDisk(a);
  80bb74:	e13fe417 	ldw	r4,-112(fp)
  80bb78:	0811e480 	call	811e48 <imageInDisk>
  80bb7c:	00000906 	br	80bba4 <loadSDImageSeq+0x330>
		}
		else {
			b = initAnimation(ptr, 0);
  80bb80:	e13ffc17 	ldw	r4,-16(fp)
  80bb84:	000b883a 	mov	r5,zero
  80bb88:	0811d7c0 	call	811d7c <initAnimation>
  80bb8c:	e0bfe315 	stw	r2,-116(fp)
			imageInDisk(b);
  80bb90:	e13fe317 	ldw	r4,-116(fp)
  80bb94:	0811e480 	call	811e48 <imageInDisk>
			addImage(a, b);
  80bb98:	e13fe417 	ldw	r4,-112(fp)
  80bb9c:	e17fe317 	ldw	r5,-116(fp)
  80bba0:	0811f180 	call	811f18 <addImage>
		}
		i++;
  80bba4:	e0bfe717 	ldw	r2,-100(fp)
  80bba8:	10800044 	addi	r2,r2,1
  80bbac:	e0bfe715 	stw	r2,-100(fp)
	int* ptr = NULL;

	strncpy(prefix, filename, index);
	struct animation* a = NULL;
	struct animation* b = NULL;
	while(i < size) {
  80bbb0:	e0ffe717 	ldw	r3,-100(fp)
  80bbb4:	e0bfff17 	ldw	r2,-4(fp)
  80bbb8:	18bf4a16 	blt	r3,r2,80b8e4 <loadSDImageSeq+0x70>
			imageInDisk(b);
			addImage(a, b);
		}
		i++;
	}
	free(prefix); prefix = NULL;
  80bbbc:	e13fe517 	ldw	r4,-108(fp)
  80bbc0:	0814f440 	call	814f44 <free>
  80bbc4:	e03fe515 	stw	zero,-108(fp)
	return a;
  80bbc8:	e0bfe417 	ldw	r2,-112(fp)
}
  80bbcc:	e037883a 	mov	sp,fp
  80bbd0:	dfc00117 	ldw	ra,4(sp)
  80bbd4:	df000017 	ldw	fp,0(sp)
  80bbd8:	dec00204 	addi	sp,sp,8
  80bbdc:	f800283a 	ret

0080bbe0 <backgroundImage>:
/*
 * Draw some static images on the background before the game is starting
 */
void backgroundImage() {
  80bbe0:	defffd04 	addi	sp,sp,-12
  80bbe4:	dfc00215 	stw	ra,8(sp)
  80bbe8:	df000115 	stw	fp,4(sp)
  80bbec:	df000104 	addi	fp,sp,4

	int* pic = NULL;
  80bbf0:	e03fff15 	stw	zero,-4(fp)
	while(!loadSDImage("E.BMP", &pic));
  80bbf4:	010020f4 	movhi	r4,131
  80bbf8:	21218304 	addi	r4,r4,-31220
  80bbfc:	e17fff04 	addi	r5,fp,-4
  80bc00:	080b5040 	call	80b504 <loadSDImage>
  80bc04:	1080005c 	xori	r2,r2,1
  80bc08:	10803fcc 	andi	r2,r2,255
  80bc0c:	1004c03a 	cmpne	r2,r2,zero
  80bc10:	103ff81e 	bne	r2,zero,80bbf4 <backgroundImage+0x14>
	draw(210, 200, pic, 64);
  80bc14:	e1bfff17 	ldw	r6,-4(fp)
  80bc18:	01003484 	movi	r4,210
  80bc1c:	01403204 	movi	r5,200
  80bc20:	01c01004 	movi	r7,64
  80bc24:	0811f980 	call	811f98 <draw>
	free(pic); pic = NULL;
  80bc28:	e13fff17 	ldw	r4,-4(fp)
  80bc2c:	0814f440 	call	814f44 <free>
  80bc30:	e03fff15 	stw	zero,-4(fp)
}
  80bc34:	e037883a 	mov	sp,fp
  80bc38:	dfc00117 	ldw	ra,4(sp)
  80bc3c:	df000017 	ldw	fp,0(sp)
  80bc40:	dec00204 	addi	sp,sp,8
  80bc44:	f800283a 	ret

0080bc48 <displayString>:

/*
 * Helper method that will print the string on the display
 */
void displayString(char* string, int x, int y) {
  80bc48:	defffb04 	addi	sp,sp,-20
  80bc4c:	dfc00415 	stw	ra,16(sp)
  80bc50:	df000315 	stw	fp,12(sp)
  80bc54:	df000304 	addi	fp,sp,12
  80bc58:	e13ffd15 	stw	r4,-12(fp)
  80bc5c:	e17ffe15 	stw	r5,-8(fp)
  80bc60:	e1bfff15 	stw	r6,-4(fp)
	alt_up_char_buffer_clear(char_buffer);
  80bc64:	d13c2217 	ldw	r4,-3960(gp)
  80bc68:	08218100 	call	821810 <alt_up_char_buffer_clear>
	alt_up_char_buffer_string(char_buffer, string, x, y);
  80bc6c:	d13c2217 	ldw	r4,-3960(gp)
  80bc70:	e1bffe17 	ldw	r6,-8(fp)
  80bc74:	e1ffff17 	ldw	r7,-4(fp)
  80bc78:	e17ffd17 	ldw	r5,-12(fp)
  80bc7c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
}
  80bc80:	e037883a 	mov	sp,fp
  80bc84:	dfc00117 	ldw	ra,4(sp)
  80bc88:	df000017 	ldw	fp,0(sp)
  80bc8c:	dec00204 	addi	sp,sp,8
  80bc90:	f800283a 	ret

0080bc94 <promptSDcard>:
void promptSDcard(struct Env* p, alt_up_sd_card_dev* device_reference) {
  80bc94:	defff804 	addi	sp,sp,-32
  80bc98:	dfc00715 	stw	ra,28(sp)
  80bc9c:	df000615 	stw	fp,24(sp)
  80bca0:	df000604 	addi	fp,sp,24
  80bca4:	e13ffe15 	stw	r4,-8(fp)
  80bca8:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Loading Screen if SD card is not presented
	 */

	int frame = 25;
  80bcac:	00800644 	movi	r2,25
  80bcb0:	e0bffd15 	stw	r2,-12(fp)
	struct animation* b = initAnimation((int*)pacman01, 1);
  80bcb4:	010020f4 	movhi	r4,131
  80bcb8:	2127dd04 	addi	r4,r4,-24716
  80bcbc:	01400044 	movi	r5,1
  80bcc0:	0811d7c0 	call	811d7c <initAnimation>
  80bcc4:	e0bffc15 	stw	r2,-16(fp)
	addImage(b, initAnimation((int*)pacman02, 0));
  80bcc8:	010020f4 	movhi	r4,131
  80bccc:	21284104 	addi	r4,r4,-24316
  80bcd0:	000b883a 	mov	r5,zero
  80bcd4:	0811d7c0 	call	811d7c <initAnimation>
  80bcd8:	100b883a 	mov	r5,r2
  80bcdc:	e13ffc17 	ldw	r4,-16(fp)
  80bce0:	0811f180 	call	811f18 <addImage>
	addImage(b, initAnimation((int*)pacman03, 0));
  80bce4:	010020f4 	movhi	r4,131
  80bce8:	2128a504 	addi	r4,r4,-23916
  80bcec:	000b883a 	mov	r5,zero
  80bcf0:	0811d7c0 	call	811d7c <initAnimation>
  80bcf4:	100b883a 	mov	r5,r2
  80bcf8:	e13ffc17 	ldw	r4,-16(fp)
  80bcfc:	0811f180 	call	811f18 <addImage>
	addImage(b, initAnimation((int*)pacman04, 0));
  80bd00:	010020f4 	movhi	r4,131
  80bd04:	21290904 	addi	r4,r4,-23516
  80bd08:	000b883a 	mov	r5,zero
  80bd0c:	0811d7c0 	call	811d7c <initAnimation>
  80bd10:	100b883a 	mov	r5,r2
  80bd14:	e13ffc17 	ldw	r4,-16(fp)
  80bd18:	0811f180 	call	811f18 <addImage>
	struct Object *face;
	face= initObject(80, 120, 10, b, NULL);
  80bd1c:	d8000015 	stw	zero,0(sp)
  80bd20:	01001404 	movi	r4,80
  80bd24:	01401e04 	movi	r5,120
  80bd28:	01800284 	movi	r6,10
  80bd2c:	e1fffc17 	ldw	r7,-16(fp)
  80bd30:	080fe780 	call	80fe78 <initObject>
  80bd34:	e0bffb15 	stw	r2,-20(fp)
	addToEnv(p, face);
  80bd38:	e13ffe17 	ldw	r4,-8(fp)
  80bd3c:	e17ffb17 	ldw	r5,-20(fp)
  80bd40:	0808a100 	call	808a10 <addToEnv>
  80bd44:	008020f4 	movhi	r2,131
  80bd48:	109c9904 	addi	r2,r2,29284
  80bd4c:	10800017 	ldw	r2,0(r2)
  80bd50:	100b883a 	mov	r5,r2

	alt_alarm_start (&alarm,alt_ticks_per_second(),my_alarm_callback,(void*)p);
  80bd54:	010020f4 	movhi	r4,131
  80bd58:	211cbe04 	addi	r4,r4,29432
  80bd5c:	01802074 	movhi	r6,129
  80bd60:	31abd404 	addi	r6,r6,-20656
  80bd64:	e1fffe17 	ldw	r7,-8(fp)
  80bd68:	081d8d80 	call	81d8d8 <alt_alarm_start>


	while(!loadSDCard(device_reference)) {
  80bd6c:	00001c06 	br	80bde0 <promptSDcard+0x14c>
		displayString("Please insert the SD card to start", frame, 30);
  80bd70:	010020f4 	movhi	r4,131
  80bd74:	21218504 	addi	r4,r4,-31212
  80bd78:	e17ffd17 	ldw	r5,-12(fp)
  80bd7c:	01800784 	movi	r6,30
  80bd80:	080bc480 	call	80bc48 <displayString>
		frame++;
  80bd84:	e0bffd17 	ldw	r2,-12(fp)
  80bd88:	10800044 	addi	r2,r2,1
  80bd8c:	e0bffd15 	stw	r2,-12(fp)
		setXY(face, face->x+4, face->y);
  80bd90:	e0bffb17 	ldw	r2,-20(fp)
  80bd94:	10800017 	ldw	r2,0(r2)
  80bd98:	11400104 	addi	r5,r2,4
  80bd9c:	e0bffb17 	ldw	r2,-20(fp)
  80bda0:	11800117 	ldw	r6,4(r2)
  80bda4:	e13ffb17 	ldw	r4,-20(fp)
  80bda8:	081016c0 	call	81016c <setXY>
		if(face->x >245) face->x = 0;
  80bdac:	e0bffb17 	ldw	r2,-20(fp)
  80bdb0:	10800017 	ldw	r2,0(r2)
  80bdb4:	10803d90 	cmplti	r2,r2,246
  80bdb8:	1000021e 	bne	r2,zero,80bdc4 <promptSDcard+0x130>
  80bdbc:	e0bffb17 	ldw	r2,-20(fp)
  80bdc0:	10000015 	stw	zero,0(r2)
		if(frame > 61) frame = 0;
  80bdc4:	e0bffd17 	ldw	r2,-12(fp)
  80bdc8:	10800f90 	cmplti	r2,r2,62
  80bdcc:	1000011e 	bne	r2,zero,80bdd4 <promptSDcard+0x140>
  80bdd0:	e03ffd15 	stw	zero,-12(fp)

		usleep(300000);
  80bdd4:	01000174 	movhi	r4,5
  80bdd8:	2124f804 	addi	r4,r4,-27680
  80bddc:	081e6f00 	call	81e6f0 <usleep>
	addToEnv(p, face);

	alt_alarm_start (&alarm,alt_ticks_per_second(),my_alarm_callback,(void*)p);


	while(!loadSDCard(device_reference)) {
  80bde0:	e13fff17 	ldw	r4,-4(fp)
  80bde4:	080b4700 	call	80b470 <loadSDCard>
  80bde8:	1080005c 	xori	r2,r2,1
  80bdec:	10803fcc 	andi	r2,r2,255
  80bdf0:	1004c03a 	cmpne	r2,r2,zero
  80bdf4:	103fde1e 	bne	r2,zero,80bd70 <promptSDcard+0xdc>
		setXY(face, face->x+4, face->y);
		if(face->x >245) face->x = 0;
		if(frame > 61) frame = 0;

		usleep(300000);
	}alt_up_char_buffer_clear(char_buffer);
  80bdf8:	d13c2217 	ldw	r4,-3960(gp)
  80bdfc:	08218100 	call	821810 <alt_up_char_buffer_clear>
	killAnimation(b);
  80be00:	e13ffc17 	ldw	r4,-16(fp)
  80be04:	0811e740 	call	811e74 <killAnimation>
	removeFromEnv(p, face);
  80be08:	e13ffe17 	ldw	r4,-8(fp)
  80be0c:	e17ffb17 	ldw	r5,-20(fp)
  80be10:	0808acc0 	call	808acc <removeFromEnv>
	alt_alarm_stop(&alarm);
  80be14:	010020f4 	movhi	r4,131
  80be18:	211cbe04 	addi	r4,r4,29432
  80be1c:	081e54c0 	call	81e54c <alt_alarm_stop>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80be20:	d13c3317 	ldw	r4,-3892(gp)
  80be24:	000b883a 	mov	r5,zero
  80be28:	0821b300 	call	821b30 <alt_up_pixel_buffer_dma_clear_screen>
}
  80be2c:	e037883a 	mov	sp,fp
  80be30:	dfc00117 	ldw	ra,4(sp)
  80be34:	df000017 	ldw	fp,0(sp)
  80be38:	dec00204 	addi	sp,sp,8
  80be3c:	f800283a 	ret

0080be40 <main>:
/*
 * Main Game Loop
 */
int main()
{
  80be40:	deff8b04 	addi	sp,sp,-468
  80be44:	dfc07415 	stw	ra,464(sp)
  80be48:	df007315 	stw	fp,460(sp)
  80be4c:	dc007215 	stw	r16,456(sp)
  80be50:	df007204 	addi	fp,sp,456
	// Use the name of your pixel buffer DMA core
	pixel_buffer =alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma_0");
  80be54:	010020f4 	movhi	r4,131
  80be58:	21218e04 	addi	r4,r4,-31176
  80be5c:	082186c0 	call	82186c <alt_up_pixel_buffer_dma_open_dev>
  80be60:	d0bc3315 	stw	r2,-3892(gp)

	initVGA();
  80be64:	080b3d80 	call	80b3d8 <initVGA>
	usleep(5000000);
  80be68:	01001334 	movhi	r4,76
  80be6c:	2112d004 	addi	r4,r4,19264
  80be70:	081e6f00 	call	81e6f0 <usleep>
	ps2 = alt_up_ps2_open_dev("/dev/ps2_0");
  80be74:	010020f4 	movhi	r4,131
  80be78:	21219404 	addi	r4,r4,-31152
  80be7c:	08215280 	call	821528 <alt_up_ps2_open_dev>
  80be80:	d0bc3115 	stw	r2,-3900(gp)
	ps2->timeout = 2000000;
  80be84:	d0fc3117 	ldw	r3,-3900(gp)
  80be88:	008007f4 	movhi	r2,31
  80be8c:	10a12004 	addi	r2,r2,-31616
  80be90:	18800c15 	stw	r2,48(r3)
		alt_up_ps2_clear_fifo(ps2);
  80be94:	d13c3117 	ldw	r4,-3900(gp)
  80be98:	082138c0 	call	82138c <alt_up_ps2_clear_fifo>
		alt_up_ps2_init(ps2);
  80be9c:	d13c3117 	ldw	r4,-3900(gp)
  80bea0:	0820f940 	call	820f94 <alt_up_ps2_init>

		unsigned char byte1;
		while(alt_up_ps2_read_data_byte(ps2, &byte1)!=0);
  80bea4:	d13c3117 	ldw	r4,-3900(gp)
  80bea8:	e17fb204 	addi	r5,fp,-312
  80beac:	08213100 	call	821310 <alt_up_ps2_read_data_byte>
  80beb0:	1004c03a 	cmpne	r2,r2,zero
  80beb4:	103ffb1e 	bne	r2,zero,80bea4 <main+0x64>

	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
  80beb8:	010020f4 	movhi	r4,131
  80bebc:	21219704 	addi	r4,r4,-31140
  80bec0:	0820a1c0 	call	820a1c <alt_up_character_lcd_open_dev>
  80bec4:	d0bc2b15 	stw	r2,-3924(gp)
	alt_up_character_lcd_init (char_lcd_dev);
  80bec8:	d13c2b17 	ldw	r4,-3924(gp)
  80becc:	08209e80 	call	8209e8 <alt_up_character_lcd_init>

	char_buffer  = alt_up_char_buffer_open_dev("/dev/char_drawer");
  80bed0:	010020f4 	movhi	r4,131
  80bed4:	21219d04 	addi	r4,r4,-31116
  80bed8:	08215ec0 	call	8215ec <alt_up_char_buffer_open_dev>
  80bedc:	d0bc2215 	stw	r2,-3960(gp)
	alt_up_char_buffer_init(char_buffer);
  80bee0:	d13c2217 	ldw	r4,-3960(gp)
  80bee4:	08215680 	call	821568 <alt_up_char_buffer_init>

	alt_up_sd_card_dev *device_reference = NULL;
  80bee8:	e03fb115 	stw	zero,-316(fp)
	struct Env* p = initEnv();
  80beec:	08089640 	call	808964 <initEnv>
  80bef0:	e0bfb015 	stw	r2,-320(fp)
	initGameInfo();
  80bef4:	080e3140 	call	80e314 <initGameInfo>

	struct Collidable* collisionChecker = initCollidable();
  80bef8:	08070180 	call	807018 <initCollidable>
  80befc:	e0bfaf15 	stw	r2,-324(fp)
	addCollisionToEnv(p, collisionChecker);
  80bf00:	e13fb017 	ldw	r4,-320(fp)
  80bf04:	e17faf17 	ldw	r5,-324(fp)
  80bf08:	0808de80 	call	808de8 <addCollisionToEnv>

	promptSDcard(p, device_reference);
  80bf0c:	e13fb017 	ldw	r4,-320(fp)
  80bf10:	e17fb117 	ldw	r5,-316(fp)
  80bf14:	080bc940 	call	80bc94 <promptSDcard>

	usleep(1000);
  80bf18:	0100fa04 	movi	r4,1000
  80bf1c:	081e6f00 	call	81e6f0 <usleep>
	alt_up_char_buffer_string(char_buffer, "Loading ", 40, 30);
  80bf20:	d13c2217 	ldw	r4,-3960(gp)
  80bf24:	014020f4 	movhi	r5,131
  80bf28:	2961a204 	addi	r5,r5,-31096
  80bf2c:	01800a04 	movi	r6,40
  80bf30:	01c00784 	movi	r7,30
  80bf34:	08216fc0 	call	8216fc <alt_up_char_buffer_string>

	  unsigned end_time, start_time;
	  int count = 0; lock = 0;
  80bf38:	e03fac15 	stw	zero,-336(fp)
  80bf3c:	d03c2415 	stw	zero,-3952(gp)

	struct animation* starAnimation = loadSDImageSeq("ST0.BMP", 2, 8);
  80bf40:	010020f4 	movhi	r4,131
  80bf44:	2121a504 	addi	r4,r4,-31084
  80bf48:	01400084 	movi	r5,2
  80bf4c:	01800204 	movi	r6,8
  80bf50:	080b8740 	call	80b874 <loadSDImageSeq>
  80bf54:	e0bfab15 	stw	r2,-340(fp)
	struct animation* star2Animation = loadSDImageSeq("ST00.BMP", 3, 7);
  80bf58:	010020f4 	movhi	r4,131
  80bf5c:	2121a704 	addi	r4,r4,-31076
  80bf60:	014000c4 	movi	r5,3
  80bf64:	018001c4 	movi	r6,7
  80bf68:	080b8740 	call	80b874 <loadSDImageSeq>
  80bf6c:	e0bfaa15 	stw	r2,-344(fp)
	struct animation* alien0 = loadSDImageSeq("A100.BMP", 2, 2); //2 images where first 2 characters are prefix
  80bf70:	010020f4 	movhi	r4,131
  80bf74:	2121aa04 	addi	r4,r4,-31064
  80bf78:	01400084 	movi	r5,2
  80bf7c:	01800084 	movi	r6,2
  80bf80:	080b8740 	call	80b874 <loadSDImageSeq>
  80bf84:	e0bfa915 	stw	r2,-348(fp)
	struct animation* alien1 = loadSDImageSeq("A000.BMP", 2, 15);
  80bf88:	010020f4 	movhi	r4,131
  80bf8c:	2121ad04 	addi	r4,r4,-31052
  80bf90:	01400084 	movi	r5,2
  80bf94:	018003c4 	movi	r6,15
  80bf98:	080b8740 	call	80b874 <loadSDImageSeq>
  80bf9c:	e0bfa815 	stw	r2,-352(fp)
	struct animation* ship0 = loadSDImageSeq("S00.BMP", 2, 16);
  80bfa0:	010020f4 	movhi	r4,131
  80bfa4:	2121b004 	addi	r4,r4,-31040
  80bfa8:	01400084 	movi	r5,2
  80bfac:	01800404 	movi	r6,16
  80bfb0:	080b8740 	call	80b874 <loadSDImageSeq>
  80bfb4:	e0bfa715 	stw	r2,-356(fp)
	struct animation* ship1 = loadSDImageSeq("S10.BMP", 2, 27);
  80bfb8:	010020f4 	movhi	r4,131
  80bfbc:	2121b204 	addi	r4,r4,-31032
  80bfc0:	01400084 	movi	r5,2
  80bfc4:	018006c4 	movi	r6,27
  80bfc8:	080b8740 	call	80b874 <loadSDImageSeq>
  80bfcc:	e0bfa615 	stw	r2,-360(fp)
	struct animation* bossAnimate = loadSDImageSeq("BO00.BMP", 2, 28);
  80bfd0:	010020f4 	movhi	r4,131
  80bfd4:	2121b404 	addi	r4,r4,-31024
  80bfd8:	01400084 	movi	r5,2
  80bfdc:	01800704 	movi	r6,28
  80bfe0:	080b8740 	call	80b874 <loadSDImageSeq>
  80bfe4:	e0bfa515 	stw	r2,-364(fp)
	struct animation* ship2 = loadSDImageSeq("S20.BMP", 2, 35);
  80bfe8:	010020f4 	movhi	r4,131
  80bfec:	2121b704 	addi	r4,r4,-31012
  80bff0:	01400084 	movi	r5,2
  80bff4:	018008c4 	movi	r6,35
  80bff8:	080b8740 	call	80b874 <loadSDImageSeq>
  80bffc:	e0bfa415 	stw	r2,-368(fp)
	struct animation* ship3 = loadSDImageSeq("S30.BMP", 2, 30);
  80c000:	010020f4 	movhi	r4,131
  80c004:	2121b904 	addi	r4,r4,-31004
  80c008:	01400084 	movi	r5,2
  80c00c:	01800784 	movi	r6,30
  80c010:	080b8740 	call	80b874 <loadSDImageSeq>
  80c014:	e0bfa315 	stw	r2,-372(fp)
	struct animation* ship4 = loadSDImageSeq("S40.BMP", 2, 10);
  80c018:	010020f4 	movhi	r4,131
  80c01c:	2121bb04 	addi	r4,r4,-30996
  80c020:	01400084 	movi	r5,2
  80c024:	01800284 	movi	r6,10
  80c028:	080b8740 	call	80b874 <loadSDImageSeq>
  80c02c:	e0bfa215 	stw	r2,-376(fp)

	struct animation* explode1 = initAnimation((int*)explode01, 1);
  80c030:	010020f4 	movhi	r4,131
  80c034:	2125e904 	addi	r4,r4,-26716
  80c038:	01400044 	movi	r5,1
  80c03c:	0811d7c0 	call	811d7c <initAnimation>
  80c040:	e0bfa115 	stw	r2,-380(fp)
	addImage(explode1, initAnimation((int*)explode02, 0));
  80c044:	010020f4 	movhi	r4,131
  80c048:	21258504 	addi	r4,r4,-27116
  80c04c:	000b883a 	mov	r5,zero
  80c050:	0811d7c0 	call	811d7c <initAnimation>
  80c054:	100b883a 	mov	r5,r2
  80c058:	e13fa117 	ldw	r4,-380(fp)
  80c05c:	0811f180 	call	811f18 <addImage>
	addImage(explode1, initAnimation((int*)explode03, 0));
  80c060:	010020f4 	movhi	r4,131
  80c064:	21252104 	addi	r4,r4,-27516
  80c068:	000b883a 	mov	r5,zero
  80c06c:	0811d7c0 	call	811d7c <initAnimation>
  80c070:	100b883a 	mov	r5,r2
  80c074:	e13fa117 	ldw	r4,-380(fp)
  80c078:	0811f180 	call	811f18 <addImage>
	addImage(explode1, initAnimation((int*)explode04, 0));
  80c07c:	010020f4 	movhi	r4,131
  80c080:	2124bd04 	addi	r4,r4,-27916
  80c084:	000b883a 	mov	r5,zero
  80c088:	0811d7c0 	call	811d7c <initAnimation>
  80c08c:	100b883a 	mov	r5,r2
  80c090:	e13fa117 	ldw	r4,-380(fp)
  80c094:	0811f180 	call	811f18 <addImage>
	addImage(explode1, initAnimation((int*)explode05, 0));
  80c098:	010020f4 	movhi	r4,131
  80c09c:	21245904 	addi	r4,r4,-28316
  80c0a0:	000b883a 	mov	r5,zero
  80c0a4:	0811d7c0 	call	811d7c <initAnimation>
  80c0a8:	100b883a 	mov	r5,r2
  80c0ac:	e13fa117 	ldw	r4,-380(fp)
  80c0b0:	0811f180 	call	811f18 <addImage>

	struct animation** shipAnimationCollection = (struct animation**)malloc(sizeof(struct animation*)*5);
  80c0b4:	01000504 	movi	r4,20
  80c0b8:	0814f580 	call	814f58 <malloc>
  80c0bc:	e0bfa015 	stw	r2,-384(fp)
	shipAnimationCollection[0] = ship0;
  80c0c0:	e0ffa017 	ldw	r3,-384(fp)
  80c0c4:	e0bfa717 	ldw	r2,-356(fp)
  80c0c8:	18800015 	stw	r2,0(r3)
	shipAnimationCollection[1] = ship1;
  80c0cc:	e0bfa017 	ldw	r2,-384(fp)
  80c0d0:	10c00104 	addi	r3,r2,4
  80c0d4:	e0bfa617 	ldw	r2,-360(fp)
  80c0d8:	18800015 	stw	r2,0(r3)
	shipAnimationCollection[2] = ship2;
  80c0dc:	e0bfa017 	ldw	r2,-384(fp)
  80c0e0:	10c00204 	addi	r3,r2,8
  80c0e4:	e0bfa417 	ldw	r2,-368(fp)
  80c0e8:	18800015 	stw	r2,0(r3)
	shipAnimationCollection[3] = ship3;
  80c0ec:	e0bfa017 	ldw	r2,-384(fp)
  80c0f0:	10c00304 	addi	r3,r2,12
  80c0f4:	e0bfa317 	ldw	r2,-372(fp)
  80c0f8:	18800015 	stw	r2,0(r3)
	shipAnimationCollection[4] = ship4;
  80c0fc:	e0bfa017 	ldw	r2,-384(fp)
  80c100:	10c00404 	addi	r3,r2,16
  80c104:	e0bfa217 	ldw	r2,-376(fp)
  80c108:	18800015 	stw	r2,0(r3)

	initWeapon(collisionChecker, p);
  80c10c:	e13faf17 	ldw	r4,-324(fp)
  80c110:	e17fb017 	ldw	r5,-320(fp)
  80c114:	080deec0 	call	80deec <initWeapon>

	struct Cursor* mouse = initCursor(p, collisionChecker);
  80c118:	e13fb017 	ldw	r4,-320(fp)
  80c11c:	e17faf17 	ldw	r5,-324(fp)
  80c120:	08076480 	call	807648 <initCursor>
  80c124:	e0bf9f15 	stw	r2,-388(fp)
	addToEnv(p, mouse->super);
  80c128:	e0bf9f17 	ldw	r2,-388(fp)
  80c12c:	11400017 	ldw	r5,0(r2)
  80c130:	e13fb017 	ldw	r4,-320(fp)
  80c134:	0808a100 	call	808a10 <addToEnv>
	addObjToCollide(collisionChecker, mouse->super);
  80c138:	e0bf9f17 	ldw	r2,-388(fp)
  80c13c:	11400017 	ldw	r5,0(r2)
  80c140:	e13faf17 	ldw	r4,-324(fp)
  80c144:	080707c0 	call	80707c <addObjToCollide>
	setCursor(p, mouse);
  80c148:	e13fb017 	ldw	r4,-320(fp)
  80c14c:	e17f9f17 	ldw	r5,-388(fp)
  80c150:	08089e00 	call	8089e0 <setCursor>

	struct KeyController* keyController = initKeyController();
  80c154:	080f4780 	call	80f478 <initKeyController>
  80c158:	e0bf9e15 	stw	r2,-392(fp)
	struct SwitchController* switchController = initSwitchController();
  80c15c:	08119f00 	call	8119f0 <initSwitchController>
  80c160:	e0bf9d15 	stw	r2,-396(fp)
	struct CursorController* ctrl = initCursorController(mouse->super, switchController, keyController);
  80c164:	e0bf9f17 	ldw	r2,-388(fp)
  80c168:	11000017 	ldw	r4,0(r2)
  80c16c:	e17f9d17 	ldw	r5,-396(fp)
  80c170:	e1bf9e17 	ldw	r6,-392(fp)
  80c174:	080843c0 	call	80843c <initCursorController>
  80c178:	e0bf9c15 	stw	r2,-400(fp)

	alt_up_char_buffer_string(char_buffer, "Loading Sounds            ", 30, 30);
  80c17c:	d13c2217 	ldw	r4,-3960(gp)
  80c180:	014020f4 	movhi	r5,131
  80c184:	2961bd04 	addi	r5,r5,-30988
  80c188:	01800784 	movi	r6,30
  80c18c:	01c00784 	movi	r7,30
  80c190:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	audioController = initAudioController();
  80c194:	0800da80 	call	800da8 <initAudioController>
  80c198:	d0bc2915 	stw	r2,-3932(gp)
	loadSound( audioController, LOOP_ONE );
  80c19c:	d13c2917 	ldw	r4,-3932(gp)
  80c1a0:	01400044 	movi	r5,1
  80c1a4:	0800fb80 	call	800fb8 <loadSound>
	loadSound( audioController, LASER_SOUND );
  80c1a8:	d13c2917 	ldw	r4,-3932(gp)
  80c1ac:	014001c4 	movi	r5,7
  80c1b0:	0800fb80 	call	800fb8 <loadSound>
	alt_irq_register(AUDIO_IRQ, audioController, (void*) audio_ISR);
  80c1b4:	d17c2917 	ldw	r5,-3932(gp)
  80c1b8:	01802074 	movhi	r6,129
  80c1bc:	318b3c04 	addi	r6,r6,11504
  80c1c0:	01000044 	movi	r4,1
  80c1c4:	081dce80 	call	81dce8 <alt_irq_register>
  80c1c8:	00800044 	movi	r2,1
  80c1cc:	e0bf9615 	stw	r2,-424(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c1d0:	0005303a 	rdctl	r2,status
  80c1d4:	e0bf9515 	stw	r2,-428(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c1d8:	e0ff9517 	ldw	r3,-428(fp)
  80c1dc:	00bfff84 	movi	r2,-2
  80c1e0:	1884703a 	and	r2,r3,r2
  80c1e4:	1001703a 	wrctl	status,r2
  
  return context;
  80c1e8:	e0bf9517 	ldw	r2,-428(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80c1ec:	e0bf9715 	stw	r2,-420(fp)

  alt_irq_active |= (1 << id);
  80c1f0:	e0ff9617 	ldw	r3,-424(fp)
  80c1f4:	00800044 	movi	r2,1
  80c1f8:	10c4983a 	sll	r2,r2,r3
  80c1fc:	1007883a 	mov	r3,r2
  80c200:	008020f4 	movhi	r2,131
  80c204:	109c9504 	addi	r2,r2,29268
  80c208:	10800017 	ldw	r2,0(r2)
  80c20c:	1886b03a 	or	r3,r3,r2
  80c210:	008020f4 	movhi	r2,131
  80c214:	109c9504 	addi	r2,r2,29268
  80c218:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c21c:	008020f4 	movhi	r2,131
  80c220:	109c9504 	addi	r2,r2,29268
  80c224:	10800017 	ldw	r2,0(r2)
  80c228:	100170fa 	wrctl	ienable,r2
  80c22c:	e0bf9717 	ldw	r2,-420(fp)
  80c230:	e0bf9415 	stw	r2,-432(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c234:	e0bf9417 	ldw	r2,-432(fp)
  80c238:	1001703a 	wrctl	status,r2
	alt_irq_enable(AUDIO_IRQ);
	play_background_loop( audioController, LOOP_ONE );
  80c23c:	d13c2917 	ldw	r4,-3932(gp)
  80c240:	01400044 	movi	r5,1
  80c244:	080143c0 	call	80143c <play_background_loop>
	enableAudioController( audioController );
  80c248:	d13c2917 	ldw	r4,-3932(gp)
  80c24c:	0800e340 	call	800e34 <enableAudioController>

	printhex(info.score);
  80c250:	008020f4 	movhi	r2,131
  80c254:	109cb404 	addi	r2,r2,29392
  80c258:	11000017 	ldw	r4,0(r2)
  80c25c:	080e1cc0 	call	80e1cc <printhex>

	mainMenu(mouse, ctrl, p);
  80c260:	e13f9f17 	ldw	r4,-388(fp)
  80c264:	e17f9c17 	ldw	r5,-400(fp)
  80c268:	e1bfb017 	ldw	r6,-320(fp)
  80c26c:	080d4f40 	call	80d4f4 <mainMenu>

	disableAudioController(audioController);
  80c270:	d13c2917 	ldw	r4,-3932(gp)
  80c274:	0800e680 	call	800e68 <disableAudioController>
	stop_background_loop(audioController);
  80c278:	d13c2917 	ldw	r4,-3932(gp)
  80c27c:	08015240 	call	801524 <stop_background_loop>
	unloadSoundById(audioController, LASER_SOUND);
  80c280:	d13c2917 	ldw	r4,-3932(gp)
  80c284:	014001c4 	movi	r5,7
  80c288:	08013300 	call	801330 <unloadSoundById>
	unloadSoundById(audioController, LOOP_ONE);
  80c28c:	d13c2917 	ldw	r4,-3932(gp)
  80c290:	01400044 	movi	r5,1
  80c294:	08013300 	call	801330 <unloadSoundById>
	alt_up_char_buffer_string(char_buffer, "Loading Sounds           ", 30, 30);
  80c298:	d13c2217 	ldw	r4,-3960(gp)
  80c29c:	014020f4 	movhi	r5,131
  80c2a0:	2961c404 	addi	r5,r5,-30960
  80c2a4:	01800784 	movi	r6,30
  80c2a8:	01c00784 	movi	r7,30
  80c2ac:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	//loadSound(audioController, WIN_SOUND);
	//loadSound(audioController, LOSE_SOUND);
	loadSound( audioController, TOWER_UPGRADE_SOUND );
  80c2b0:	d13c2917 	ldw	r4,-3932(gp)
  80c2b4:	01400144 	movi	r5,5
  80c2b8:	0800fb80 	call	800fb8 <loadSound>
	loadSound( audioController, LOOP_TWO );
  80c2bc:	d13c2917 	ldw	r4,-3932(gp)
  80c2c0:	01400084 	movi	r5,2
  80c2c4:	0800fb80 	call	800fb8 <loadSound>
	play_background_loop(audioController, LOOP_TWO);
  80c2c8:	d13c2917 	ldw	r4,-3932(gp)
  80c2cc:	01400084 	movi	r5,2
  80c2d0:	080143c0 	call	80143c <play_background_loop>
	enableAudioController( audioController );
  80c2d4:	d13c2917 	ldw	r4,-3932(gp)
  80c2d8:	0800e340 	call	800e34 <enableAudioController>
	alt_up_char_buffer_clear(char_buffer);
  80c2dc:	d13c2217 	ldw	r4,-3960(gp)
  80c2e0:	08218100 	call	821810 <alt_up_char_buffer_clear>
	//usleep(1000);
	struct Alien* testAlienCollection[60];
	gameSetup(p, shipAnimationCollection, mouse, starAnimation, star2Animation);
  80c2e4:	e0bfaa17 	ldw	r2,-344(fp)
  80c2e8:	d8800015 	stw	r2,0(sp)
  80c2ec:	e13fb017 	ldw	r4,-320(fp)
  80c2f0:	e17fa017 	ldw	r5,-384(fp)
  80c2f4:	e1bf9f17 	ldw	r6,-388(fp)
  80c2f8:	e1ffab17 	ldw	r7,-340(fp)
  80c2fc:	080dbe00 	call	80dbe0 <gameSetup>

	usleep(500000); //time delay for panel to be drawn
  80c300:	01000234 	movhi	r4,8
  80c304:	21284804 	addi	r4,r4,-24288
  80c308:	081e6f00 	call	81e6f0 <usleep>
//
	char LPS[50]; float lps_;

	int n = 0;
  80c30c:	e03f9a15 	stw	zero,-408(fp)

	for(n = 0; n < 20; n++) {
  80c310:	e03f9a15 	stw	zero,-408(fp)
  80c314:	00002906 	br	80c3bc <main+0x57c>
		testAlienCollection[n] =initAlien(n, 10*n, 10, alien0, explode1, "IdontKnow", 1.4, 150, 500, collisionChecker);
  80c318:	e43f9a17 	ldw	r16,-408(fp)
  80c31c:	e0bf9a17 	ldw	r2,-408(fp)
  80c320:	114002a4 	muli	r5,r2,10
  80c324:	e0bfa117 	ldw	r2,-380(fp)
  80c328:	d8800015 	stw	r2,0(sp)
  80c32c:	008020f4 	movhi	r2,131
  80c330:	10a1cb04 	addi	r2,r2,-30932
  80c334:	d8800115 	stw	r2,4(sp)
  80c338:	008fecf4 	movhi	r2,16307
  80c33c:	108cccc4 	addi	r2,r2,13107
  80c340:	d8800215 	stw	r2,8(sp)
  80c344:	0090c5b4 	movhi	r2,17174
  80c348:	d8800315 	stw	r2,12(sp)
  80c34c:	00807d04 	movi	r2,500
  80c350:	d8800415 	stw	r2,16(sp)
  80c354:	e0bfaf17 	ldw	r2,-324(fp)
  80c358:	d8800515 	stw	r2,20(sp)
  80c35c:	e13f9a17 	ldw	r4,-408(fp)
  80c360:	01800284 	movi	r6,10
  80c364:	e1ffa917 	ldw	r7,-348(fp)
  80c368:	08002040 	call	800204 <initAlien>
  80c36c:	1007883a 	mov	r3,r2
  80c370:	8405883a 	add	r2,r16,r16
  80c374:	1085883a 	add	r2,r2,r2
  80c378:	e13f9404 	addi	r4,fp,-432
  80c37c:	1105883a 	add	r2,r2,r4
  80c380:	10801f04 	addi	r2,r2,124
  80c384:	10c00015 	stw	r3,0(r2)
		addToEnvNR(p, testAlienCollection[n]->super);
  80c388:	e0bf9a17 	ldw	r2,-408(fp)
  80c38c:	1085883a 	add	r2,r2,r2
  80c390:	1085883a 	add	r2,r2,r2
  80c394:	e0ff9404 	addi	r3,fp,-432
  80c398:	10c5883a 	add	r2,r2,r3
  80c39c:	10801f04 	addi	r2,r2,124
  80c3a0:	10800017 	ldw	r2,0(r2)
  80c3a4:	11400017 	ldw	r5,0(r2)
  80c3a8:	e13fb017 	ldw	r4,-320(fp)
  80c3ac:	0808a540 	call	808a54 <addToEnvNR>
//
	char LPS[50]; float lps_;

	int n = 0;

	for(n = 0; n < 20; n++) {
  80c3b0:	e0bf9a17 	ldw	r2,-408(fp)
  80c3b4:	10800044 	addi	r2,r2,1
  80c3b8:	e0bf9a15 	stw	r2,-408(fp)
  80c3bc:	e0bf9a17 	ldw	r2,-408(fp)
  80c3c0:	10800510 	cmplti	r2,r2,20
  80c3c4:	103fd41e 	bne	r2,zero,80c318 <main+0x4d8>
		testAlienCollection[n] =initAlien(n, 10*n, 10, alien0, explode1, "IdontKnow", 1.4, 150, 500, collisionChecker);
		addToEnvNR(p, testAlienCollection[n]->super);
	}
	for(n = 0; n < 20; n++) {
  80c3c8:	e03f9a15 	stw	zero,-408(fp)
  80c3cc:	00002b06 	br	80c47c <main+0x63c>
		testAlienCollection[n+20] =initAlien(10*n, n, 10, alien1, explode1, "whatName", 1.4, 190, 850, collisionChecker);
  80c3d0:	e0bf9a17 	ldw	r2,-408(fp)
  80c3d4:	14000504 	addi	r16,r2,20
  80c3d8:	e0bf9a17 	ldw	r2,-408(fp)
  80c3dc:	110002a4 	muli	r4,r2,10
  80c3e0:	e0bfa117 	ldw	r2,-380(fp)
  80c3e4:	d8800015 	stw	r2,0(sp)
  80c3e8:	008020f4 	movhi	r2,131
  80c3ec:	10a1ce04 	addi	r2,r2,-30920
  80c3f0:	d8800115 	stw	r2,4(sp)
  80c3f4:	008fecf4 	movhi	r2,16307
  80c3f8:	108cccc4 	addi	r2,r2,13107
  80c3fc:	d8800215 	stw	r2,8(sp)
  80c400:	0090cfb4 	movhi	r2,17214
  80c404:	d8800315 	stw	r2,12(sp)
  80c408:	0080d484 	movi	r2,850
  80c40c:	d8800415 	stw	r2,16(sp)
  80c410:	e0bfaf17 	ldw	r2,-324(fp)
  80c414:	d8800515 	stw	r2,20(sp)
  80c418:	e17f9a17 	ldw	r5,-408(fp)
  80c41c:	01800284 	movi	r6,10
  80c420:	e1ffa817 	ldw	r7,-352(fp)
  80c424:	08002040 	call	800204 <initAlien>
  80c428:	1007883a 	mov	r3,r2
  80c42c:	8405883a 	add	r2,r16,r16
  80c430:	1085883a 	add	r2,r2,r2
  80c434:	e13f9404 	addi	r4,fp,-432
  80c438:	1105883a 	add	r2,r2,r4
  80c43c:	10801f04 	addi	r2,r2,124
  80c440:	10c00015 	stw	r3,0(r2)
		addToEnvNR(p, testAlienCollection[n+20]->super);
  80c444:	e0bf9a17 	ldw	r2,-408(fp)
  80c448:	10800504 	addi	r2,r2,20
  80c44c:	1085883a 	add	r2,r2,r2
  80c450:	1085883a 	add	r2,r2,r2
  80c454:	e0ff9404 	addi	r3,fp,-432
  80c458:	10c5883a 	add	r2,r2,r3
  80c45c:	10801f04 	addi	r2,r2,124
  80c460:	10800017 	ldw	r2,0(r2)
  80c464:	11400017 	ldw	r5,0(r2)
  80c468:	e13fb017 	ldw	r4,-320(fp)
  80c46c:	0808a540 	call	808a54 <addToEnvNR>

	for(n = 0; n < 20; n++) {
		testAlienCollection[n] =initAlien(n, 10*n, 10, alien0, explode1, "IdontKnow", 1.4, 150, 500, collisionChecker);
		addToEnvNR(p, testAlienCollection[n]->super);
	}
	for(n = 0; n < 20; n++) {
  80c470:	e0bf9a17 	ldw	r2,-408(fp)
  80c474:	10800044 	addi	r2,r2,1
  80c478:	e0bf9a15 	stw	r2,-408(fp)
  80c47c:	e0bf9a17 	ldw	r2,-408(fp)
  80c480:	10800510 	cmplti	r2,r2,20
  80c484:	103fd21e 	bne	r2,zero,80c3d0 <main+0x590>
		testAlienCollection[n+20] =initAlien(10*n, n, 10, alien1, explode1, "whatName", 1.4, 190, 850, collisionChecker);
		addToEnvNR(p, testAlienCollection[n+20]->super);
	}
	for(n = 0; n < 20; n++) {
  80c488:	e03f9a15 	stw	zero,-408(fp)
  80c48c:	00003506 	br	80c564 <main+0x724>
		testAlienCollection[n+40] =initAlien(10*n, n, 20, bossAnimate, explode1, "IamBoss", 1.6, 800, 1500, collisionChecker);
  80c490:	e0bf9a17 	ldw	r2,-408(fp)
  80c494:	14000a04 	addi	r16,r2,40
  80c498:	e0bf9a17 	ldw	r2,-408(fp)
  80c49c:	110002a4 	muli	r4,r2,10
  80c4a0:	e0bfa117 	ldw	r2,-380(fp)
  80c4a4:	d8800015 	stw	r2,0(sp)
  80c4a8:	008020f4 	movhi	r2,131
  80c4ac:	10a1d104 	addi	r2,r2,-30908
  80c4b0:	d8800115 	stw	r2,4(sp)
  80c4b4:	008ff374 	movhi	r2,16333
  80c4b8:	10b33344 	addi	r2,r2,-13107
  80c4bc:	d8800215 	stw	r2,8(sp)
  80c4c0:	00911234 	movhi	r2,17480
  80c4c4:	d8800315 	stw	r2,12(sp)
  80c4c8:	00817704 	movi	r2,1500
  80c4cc:	d8800415 	stw	r2,16(sp)
  80c4d0:	e0bfaf17 	ldw	r2,-324(fp)
  80c4d4:	d8800515 	stw	r2,20(sp)
  80c4d8:	e17f9a17 	ldw	r5,-408(fp)
  80c4dc:	01800504 	movi	r6,20
  80c4e0:	e1ffa517 	ldw	r7,-364(fp)
  80c4e4:	08002040 	call	800204 <initAlien>
  80c4e8:	1007883a 	mov	r3,r2
  80c4ec:	8405883a 	add	r2,r16,r16
  80c4f0:	1085883a 	add	r2,r2,r2
  80c4f4:	e13f9404 	addi	r4,fp,-432
  80c4f8:	1105883a 	add	r2,r2,r4
  80c4fc:	10801f04 	addi	r2,r2,124
  80c500:	10c00015 	stw	r3,0(r2)
		testAlienCollection[n+40]->score = 300;
  80c504:	e0bf9a17 	ldw	r2,-408(fp)
  80c508:	10800a04 	addi	r2,r2,40
  80c50c:	1085883a 	add	r2,r2,r2
  80c510:	1085883a 	add	r2,r2,r2
  80c514:	e0ff9404 	addi	r3,fp,-432
  80c518:	10c5883a 	add	r2,r2,r3
  80c51c:	10801f04 	addi	r2,r2,124
  80c520:	10c00017 	ldw	r3,0(r2)
  80c524:	00804b04 	movi	r2,300
  80c528:	18800915 	stw	r2,36(r3)
		addToEnvNR(p, testAlienCollection[n+40]->super);
  80c52c:	e0bf9a17 	ldw	r2,-408(fp)
  80c530:	10800a04 	addi	r2,r2,40
  80c534:	1085883a 	add	r2,r2,r2
  80c538:	1085883a 	add	r2,r2,r2
  80c53c:	e13f9404 	addi	r4,fp,-432
  80c540:	1105883a 	add	r2,r2,r4
  80c544:	10801f04 	addi	r2,r2,124
  80c548:	10800017 	ldw	r2,0(r2)
  80c54c:	11400017 	ldw	r5,0(r2)
  80c550:	e13fb017 	ldw	r4,-320(fp)
  80c554:	0808a540 	call	808a54 <addToEnvNR>
	}
	for(n = 0; n < 20; n++) {
		testAlienCollection[n+20] =initAlien(10*n, n, 10, alien1, explode1, "whatName", 1.4, 190, 850, collisionChecker);
		addToEnvNR(p, testAlienCollection[n+20]->super);
	}
	for(n = 0; n < 20; n++) {
  80c558:	e0bf9a17 	ldw	r2,-408(fp)
  80c55c:	10800044 	addi	r2,r2,1
  80c560:	e0bf9a15 	stw	r2,-408(fp)
  80c564:	e0bf9a17 	ldw	r2,-408(fp)
  80c568:	10800510 	cmplti	r2,r2,20
  80c56c:	103fc81e 	bne	r2,zero,80c490 <main+0x650>
		testAlienCollection[n+40] =initAlien(10*n, n, 20, bossAnimate, explode1, "IamBoss", 1.6, 800, 1500, collisionChecker);
		testAlienCollection[n+40]->score = 300;
		addToEnvNR(p, testAlienCollection[n+40]->super);
	}
	int stage = 0;
  80c570:	e03f9915 	stw	zero,-412(fp)
  80c574:	008020f4 	movhi	r2,131
  80c578:	109c9904 	addi	r2,r2,29284
  80c57c:	10800017 	ldw	r2,0(r2)
  80c580:	100b883a 	mov	r5,r2
	/*
	 * Game Starts!!!!!!
	 */
	alt_alarm_start (&alarm,alt_ticks_per_second(),my_alarm_callback,(void*)p);
  80c584:	010020f4 	movhi	r4,131
  80c588:	211cbe04 	addi	r4,r4,29432
  80c58c:	01802074 	movhi	r6,129
  80c590:	31abd404 	addi	r6,r6,-20656
  80c594:	e1ffb017 	ldw	r7,-320(fp)
  80c598:	081d8d80 	call	81d8d8 <alt_alarm_start>

	int startTimer = 0;
  80c59c:	e03f9815 	stw	zero,-416(fp)
	char second_row1[15];
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
  80c5a0:	d13c2b17 	ldw	r4,-3924(gp)
  80c5a4:	000b883a 	mov	r5,zero
  80c5a8:	01800044 	movi	r6,1
  80c5ac:	0820b980 	call	820b98 <alt_up_character_lcd_set_cursor_pos>
	  sprintf(second_row1, "wave# %d  ", stage);
  80c5b0:	e13ffb84 	addi	r4,fp,-18
  80c5b4:	014020f4 	movhi	r5,131
  80c5b8:	2961d304 	addi	r5,r5,-30900
  80c5bc:	e1bf9917 	ldw	r6,-412(fp)
  80c5c0:	081597c0 	call	81597c <sprintf>
	  alt_up_character_lcd_string(char_lcd_dev, second_row1);
  80c5c4:	d13c2b17 	ldw	r4,-3924(gp)
  80c5c8:	e17ffb84 	addi	r5,fp,-18
  80c5cc:	0820ad40 	call	820ad4 <alt_up_character_lcd_string>

  while(1) {
	  alt_timestamp_start();
  80c5d0:	081f83c0 	call	81f83c <alt_timestamp_start>
	  start_time = (unsigned)alt_timestamp();
  80c5d4:	081f8e00 	call	81f8e0 <alt_timestamp>
  80c5d8:	e0bfad15 	stw	r2,-332(fp)

/*-----------------------------------------------------------------------------------------------*/

	  checkCollision(collisionChecker); //a major function that check each collision happen between each object
  80c5dc:	e13faf17 	ldw	r4,-324(fp)
  80c5e0:	08073c00 	call	8073c0 <checkCollision>

	  updateCursorController(ctrl, 1);
  80c5e4:	e13f9c17 	ldw	r4,-400(fp)
  80c5e8:	014fe034 	movhi	r5,16256
  80c5ec:	08084e40 	call	8084e4 <updateCursorController>

	  count++;
  80c5f0:	e0bfac17 	ldw	r2,-336(fp)
  80c5f4:	10800044 	addi	r2,r2,1
  80c5f8:	e0bfac15 	stw	r2,-336(fp)

	  if (startTimer > count)
  80c5fc:	e0ff9817 	ldw	r3,-416(fp)
  80c600:	e0bfac17 	ldw	r2,-336(fp)
  80c604:	10c0040e 	bge	r2,r3,80c618 <main+0x7d8>
		  info.startButton = false;
  80c608:	008020f4 	movhi	r2,131
  80c60c:	109cb404 	addi	r2,r2,29392
  80c610:	10000915 	stw	zero,36(r2)
  80c614:	00000d06 	br	80c64c <main+0x80c>
	  else {
		  if(stage == 7)
  80c618:	e0bf9917 	ldw	r2,-412(fp)
  80c61c:	108001d8 	cmpnei	r2,r2,7
  80c620:	1000051e 	bne	r2,zero,80c638 <main+0x7f8>
			info.isWin = true;
  80c624:	00c020f4 	movhi	r3,131
  80c628:	18dcb404 	addi	r3,r3,29392
  80c62c:	00800044 	movi	r2,1
  80c630:	18800815 	stw	r2,32(r3)
  80c634:	00000506 	br	80c64c <main+0x80c>
		  else if(startTimer == count){
  80c638:	e0ff9817 	ldw	r3,-416(fp)
  80c63c:	e0bfac17 	ldw	r2,-336(fp)
  80c640:	1880021e 	bne	r3,r2,80c64c <main+0x80c>
			//play_background_loop(audioController, LOOP_TWO);
			enableAudioController( audioController );
  80c644:	d13c2917 	ldw	r4,-3932(gp)
  80c648:	0800e340 	call	800e34 <enableAudioController>
		  }
	  }
	  if (info.startButton){
  80c64c:	008020f4 	movhi	r2,131
  80c650:	109cb404 	addi	r2,r2,29392
  80c654:	10800917 	ldw	r2,36(r2)
  80c658:	1005003a 	cmpeq	r2,r2,zero
  80c65c:	10001e1e 	bne	r2,zero,80c6d8 <main+0x898>
			disableAudioController(audioController);
  80c660:	d13c2917 	ldw	r4,-3932(gp)
  80c664:	0800e680 	call	800e68 <disableAudioController>
			//stop_background_loop(audioController);
		    startTimer = count + 15000;
  80c668:	e0bfac17 	ldw	r2,-336(fp)
  80c66c:	108ea604 	addi	r2,r2,15000
  80c670:	e0bf9815 	stw	r2,-416(fp)
	  		checkStages(testAlienCollection, stage%7, collisionChecker);
  80c674:	e13f9917 	ldw	r4,-412(fp)
  80c678:	014001c4 	movi	r5,7
  80c67c:	081465c0 	call	81465c <__modsi3>
  80c680:	100b883a 	mov	r5,r2
  80c684:	e13fb304 	addi	r4,fp,-308
  80c688:	e1bfaf17 	ldw	r6,-324(fp)
  80c68c:	080c8340 	call	80c834 <checkStages>
			stage++;
  80c690:	e0bf9917 	ldw	r2,-412(fp)
  80c694:	10800044 	addi	r2,r2,1
  80c698:	e0bf9915 	stw	r2,-412(fp)
			//if(stage > 6) stage = 0;
			info.startButton = false;
  80c69c:	008020f4 	movhi	r2,131
  80c6a0:	109cb404 	addi	r2,r2,29392
  80c6a4:	10000915 	stw	zero,36(r2)
		  	  alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
  80c6a8:	d13c2b17 	ldw	r4,-3924(gp)
  80c6ac:	000b883a 	mov	r5,zero
  80c6b0:	01800044 	movi	r6,1
  80c6b4:	0820b980 	call	820b98 <alt_up_character_lcd_set_cursor_pos>
		  	  sprintf(second_row1, "wave# %d  ", stage);
  80c6b8:	e13ffb84 	addi	r4,fp,-18
  80c6bc:	014020f4 	movhi	r5,131
  80c6c0:	2961d304 	addi	r5,r5,-30900
  80c6c4:	e1bf9917 	ldw	r6,-412(fp)
  80c6c8:	081597c0 	call	81597c <sprintf>
		  	  alt_up_character_lcd_string(char_lcd_dev, second_row1);
  80c6cc:	d13c2b17 	ldw	r4,-3924(gp)
  80c6d0:	e17ffb84 	addi	r5,fp,-18
  80c6d4:	0820ad40 	call	820ad4 <alt_up_character_lcd_string>
	  }

	  if(info.isEnd || info.isWin) {
  80c6d8:	008020f4 	movhi	r2,131
  80c6dc:	109cb404 	addi	r2,r2,29392
  80c6e0:	10800717 	ldw	r2,28(r2)
  80c6e4:	1004c03a 	cmpne	r2,r2,zero
  80c6e8:	1000051e 	bne	r2,zero,80c700 <main+0x8c0>
  80c6ec:	008020f4 	movhi	r2,131
  80c6f0:	109cb404 	addi	r2,r2,29392
  80c6f4:	10800817 	ldw	r2,32(r2)
  80c6f8:	1005003a 	cmpeq	r2,r2,zero
  80c6fc:	10000d1e 	bne	r2,zero,80c734 <main+0x8f4>

			disableAudioController(audioController);
  80c700:	d13c2917 	ldw	r4,-3932(gp)
  80c704:	0800e680 	call	800e68 <disableAudioController>
			stop_background_loop(audioController);
  80c708:	d13c2917 	ldw	r4,-3932(gp)
  80c70c:	08015240 	call	801524 <stop_background_loop>
		  endGame(testAlienCollection, collisionChecker, p, mouse, ctrl, keyController);
  80c710:	e13fb304 	addi	r4,fp,-308
  80c714:	e0bf9c17 	ldw	r2,-400(fp)
  80c718:	d8800015 	stw	r2,0(sp)
  80c71c:	e0bf9e17 	ldw	r2,-392(fp)
  80c720:	d8800115 	stw	r2,4(sp)
  80c724:	e17faf17 	ldw	r5,-324(fp)
  80c728:	e1bfb017 	ldw	r6,-320(fp)
  80c72c:	e1ff9f17 	ldw	r7,-388(fp)
  80c730:	080dce40 	call	80dce4 <endGame>
	  }
/*-----------------------------------------------------------------------------------------------*/



	  end_time = (unsigned)alt_timestamp();
  80c734:	081f8e00 	call	81f8e0 <alt_timestamp>
  80c738:	e0bfae15 	stw	r2,-328(fp)
	  lps_ = (float)alt_timestamp_freq()/(float)(end_time - start_time);
  80c73c:	081f97c0 	call	81f97c <alt_timestamp_freq>
  80c740:	1009883a 	mov	r4,r2
  80c744:	08137240 	call	813724 <__floatunsisf>
  80c748:	1021883a 	mov	r16,r2
  80c74c:	e0ffae17 	ldw	r3,-328(fp)
  80c750:	e0bfad17 	ldw	r2,-332(fp)
  80c754:	1889c83a 	sub	r4,r3,r2
  80c758:	08137240 	call	813724 <__floatunsisf>
  80c75c:	8009883a 	mov	r4,r16
  80c760:	100b883a 	mov	r5,r2
  80c764:	08132500 	call	813250 <__divsf3>
  80c768:	e0bf9b15 	stw	r2,-404(fp)

	  sprintf(LPS, "The current LPS is %.2f", lps_);
  80c76c:	e13f9b17 	ldw	r4,-404(fp)
  80c770:	08136d00 	call	8136d0 <__extendsfdf2>
  80c774:	100f883a 	mov	r7,r2
  80c778:	1811883a 	mov	r8,r3
  80c77c:	e13fef04 	addi	r4,fp,-68
  80c780:	014020f4 	movhi	r5,131
  80c784:	2961d604 	addi	r5,r5,-30888
  80c788:	380d883a 	mov	r6,r7
  80c78c:	400f883a 	mov	r7,r8
  80c790:	081597c0 	call	81597c <sprintf>
	  alt_up_char_buffer_string(char_buffer, LPS, 3, 2);
  80c794:	d13c2217 	ldw	r4,-3960(gp)
  80c798:	e17fef04 	addi	r5,fp,-68
  80c79c:	018000c4 	movi	r6,3
  80c7a0:	01c00084 	movi	r7,2
  80c7a4:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
  }
  80c7a8:	003f8906 	br	80c5d0 <main+0x790>

0080c7ac <starAction>:
  return 0;
}

void starAction(void* this) {
  80c7ac:	defffb04 	addi	sp,sp,-20
  80c7b0:	dfc00415 	stw	ra,16(sp)
  80c7b4:	df000315 	stw	fp,12(sp)
  80c7b8:	dc400215 	stw	r17,8(sp)
  80c7bc:	dc000115 	stw	r16,4(sp)
  80c7c0:	df000104 	addi	fp,sp,4
  80c7c4:	e13fff15 	stw	r4,-4(fp)
	 if(((struct Object*)this)->curr_frame == 10) {
  80c7c8:	e0bfff17 	ldw	r2,-4(fp)
  80c7cc:	10801617 	ldw	r2,88(r2)
  80c7d0:	10800298 	cmpnei	r2,r2,10
  80c7d4:	1000101e 	bne	r2,zero,80c818 <starAction+0x6c>
		 setXY((struct Object*)this, rand()%210, rand()%210);
  80c7d8:	e47fff17 	ldw	r17,-4(fp)
  80c7dc:	08158940 	call	815894 <rand>
  80c7e0:	1009883a 	mov	r4,r2
  80c7e4:	01403484 	movi	r5,210
  80c7e8:	081465c0 	call	81465c <__modsi3>
  80c7ec:	1021883a 	mov	r16,r2
  80c7f0:	08158940 	call	815894 <rand>
  80c7f4:	1009883a 	mov	r4,r2
  80c7f8:	01403484 	movi	r5,210
  80c7fc:	081465c0 	call	81465c <__modsi3>
  80c800:	100d883a 	mov	r6,r2
  80c804:	8809883a 	mov	r4,r17
  80c808:	800b883a 	mov	r5,r16
  80c80c:	081016c0 	call	81016c <setXY>
		 ((struct Object*)this)->curr_frame = 0;
  80c810:	e0bfff17 	ldw	r2,-4(fp)
  80c814:	10001615 	stw	zero,88(r2)
	 }
}
  80c818:	e037883a 	mov	sp,fp
  80c81c:	dfc00317 	ldw	ra,12(sp)
  80c820:	df000217 	ldw	fp,8(sp)
  80c824:	dc400117 	ldw	r17,4(sp)
  80c828:	dc000017 	ldw	r16,0(sp)
  80c82c:	dec00404 	addi	sp,sp,16
  80c830:	f800283a 	ret

0080c834 <checkStages>:

void checkStages(struct Alien** aliens, int stage, struct Collidable* col) {
  80c834:	defff804 	addi	sp,sp,-32
  80c838:	dfc00715 	stw	ra,28(sp)
  80c83c:	df000615 	stw	fp,24(sp)
  80c840:	dc400515 	stw	r17,20(sp)
  80c844:	dc000415 	stw	r16,16(sp)
  80c848:	df000404 	addi	fp,sp,16
  80c84c:	e13ffd15 	stw	r4,-12(fp)
  80c850:	e17ffe15 	stw	r5,-8(fp)
  80c854:	e1bfff15 	stw	r6,-4(fp)
	int n;
	switch(stage) {
  80c858:	e0bffe17 	ldw	r2,-8(fp)
  80c85c:	108001e8 	cmpgeui	r2,r2,7
  80c860:	10031d1e 	bne	r2,zero,80d4d8 <checkStages+0xca4>
  80c864:	e0bffe17 	ldw	r2,-8(fp)
  80c868:	1085883a 	add	r2,r2,r2
  80c86c:	1087883a 	add	r3,r2,r2
  80c870:	00802074 	movhi	r2,129
  80c874:	10b22104 	addi	r2,r2,-14204
  80c878:	1885883a 	add	r2,r3,r2
  80c87c:	10800017 	ldw	r2,0(r2)
  80c880:	1000683a 	jmp	r2
  80c884:	0080c8a0 	cmpeqi	r2,zero,802
  80c888:	0080c918 	cmpnei	r2,zero,804
  80c88c:	0080c9e4 	muli	r2,zero,807
  80c890:	0080cad8 	cmpnei	r2,zero,811
  80c894:	0080cde8 	cmpgeui	r2,zero,823
  80c898:	0080cedc 	xori	r2,zero,827
  80c89c:	0080d2fc 	xorhi	r2,zero,843
	case 0:
		for(n = 0; n < 20; n++) {
  80c8a0:	e03ffc15 	stw	zero,-16(fp)
  80c8a4:	00001806 	br	80c908 <checkStages+0xd4>
			resetAlien(aliens[n], n, 10*n);
  80c8a8:	e0bffc17 	ldw	r2,-16(fp)
  80c8ac:	1085883a 	add	r2,r2,r2
  80c8b0:	1085883a 	add	r2,r2,r2
  80c8b4:	1007883a 	mov	r3,r2
  80c8b8:	e0bffd17 	ldw	r2,-12(fp)
  80c8bc:	1885883a 	add	r2,r3,r2
  80c8c0:	11000017 	ldw	r4,0(r2)
  80c8c4:	e0bffc17 	ldw	r2,-16(fp)
  80c8c8:	118002a4 	muli	r6,r2,10
  80c8cc:	e17ffc17 	ldw	r5,-16(fp)
  80c8d0:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n]->super);
  80c8d4:	e0bffc17 	ldw	r2,-16(fp)
  80c8d8:	1085883a 	add	r2,r2,r2
  80c8dc:	1085883a 	add	r2,r2,r2
  80c8e0:	1007883a 	mov	r3,r2
  80c8e4:	e0bffd17 	ldw	r2,-12(fp)
  80c8e8:	1885883a 	add	r2,r3,r2
  80c8ec:	10800017 	ldw	r2,0(r2)
  80c8f0:	11400017 	ldw	r5,0(r2)
  80c8f4:	e13fff17 	ldw	r4,-4(fp)
  80c8f8:	080707c0 	call	80707c <addObjToCollide>

void checkStages(struct Alien** aliens, int stage, struct Collidable* col) {
	int n;
	switch(stage) {
	case 0:
		for(n = 0; n < 20; n++) {
  80c8fc:	e0bffc17 	ldw	r2,-16(fp)
  80c900:	10800044 	addi	r2,r2,1
  80c904:	e0bffc15 	stw	r2,-16(fp)
  80c908:	e0bffc17 	ldw	r2,-16(fp)
  80c90c:	10800510 	cmplti	r2,r2,20
  80c910:	103fe51e 	bne	r2,zero,80c8a8 <checkStages+0x74>
			resetAlien(aliens[n], n, 10*n);
			addObjToCollide(col, aliens[n]->super);
		}
		break;
  80c914:	0002f006 	br	80d4d8 <checkStages+0xca4>
	case 1:
		for(n = 0; n < 20; n++) {
  80c918:	e03ffc15 	stw	zero,-16(fp)
  80c91c:	00002d06 	br	80c9d4 <checkStages+0x1a0>
			aliens[n+20]->score += 250;
  80c920:	e0bffc17 	ldw	r2,-16(fp)
  80c924:	1085883a 	add	r2,r2,r2
  80c928:	1085883a 	add	r2,r2,r2
  80c92c:	1007883a 	mov	r3,r2
  80c930:	e0bffd17 	ldw	r2,-12(fp)
  80c934:	1885883a 	add	r2,r3,r2
  80c938:	10801404 	addi	r2,r2,80
  80c93c:	11000017 	ldw	r4,0(r2)
  80c940:	e0bffc17 	ldw	r2,-16(fp)
  80c944:	1085883a 	add	r2,r2,r2
  80c948:	1085883a 	add	r2,r2,r2
  80c94c:	1007883a 	mov	r3,r2
  80c950:	e0bffd17 	ldw	r2,-12(fp)
  80c954:	1885883a 	add	r2,r3,r2
  80c958:	10801404 	addi	r2,r2,80
  80c95c:	10800017 	ldw	r2,0(r2)
  80c960:	10800917 	ldw	r2,36(r2)
  80c964:	10803e84 	addi	r2,r2,250
  80c968:	20800915 	stw	r2,36(r4)
			resetAlien(aliens[n+20], n, 10*n);
  80c96c:	e0bffc17 	ldw	r2,-16(fp)
  80c970:	1085883a 	add	r2,r2,r2
  80c974:	1085883a 	add	r2,r2,r2
  80c978:	1007883a 	mov	r3,r2
  80c97c:	e0bffd17 	ldw	r2,-12(fp)
  80c980:	1885883a 	add	r2,r3,r2
  80c984:	10801404 	addi	r2,r2,80
  80c988:	11000017 	ldw	r4,0(r2)
  80c98c:	e0bffc17 	ldw	r2,-16(fp)
  80c990:	118002a4 	muli	r6,r2,10
  80c994:	e17ffc17 	ldw	r5,-16(fp)
  80c998:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n+20]->super);
  80c99c:	e0bffc17 	ldw	r2,-16(fp)
  80c9a0:	1085883a 	add	r2,r2,r2
  80c9a4:	1085883a 	add	r2,r2,r2
  80c9a8:	1007883a 	mov	r3,r2
  80c9ac:	e0bffd17 	ldw	r2,-12(fp)
  80c9b0:	1885883a 	add	r2,r3,r2
  80c9b4:	10801404 	addi	r2,r2,80
  80c9b8:	10800017 	ldw	r2,0(r2)
  80c9bc:	11400017 	ldw	r5,0(r2)
  80c9c0:	e13fff17 	ldw	r4,-4(fp)
  80c9c4:	080707c0 	call	80707c <addObjToCollide>
			resetAlien(aliens[n], n, 10*n);
			addObjToCollide(col, aliens[n]->super);
		}
		break;
	case 1:
		for(n = 0; n < 20; n++) {
  80c9c8:	e0bffc17 	ldw	r2,-16(fp)
  80c9cc:	10800044 	addi	r2,r2,1
  80c9d0:	e0bffc15 	stw	r2,-16(fp)
  80c9d4:	e0bffc17 	ldw	r2,-16(fp)
  80c9d8:	10800510 	cmplti	r2,r2,20
  80c9dc:	103fd01e 	bne	r2,zero,80c920 <checkStages+0xec>
			aliens[n+20]->score += 250;
			resetAlien(aliens[n+20], n, 10*n);
			addObjToCollide(col, aliens[n+20]->super);
		}
		break;
  80c9e0:	0002bd06 	br	80d4d8 <checkStages+0xca4>
	case 2:
		for(n = 0; n < 15; n++) {
  80c9e4:	e03ffc15 	stw	zero,-16(fp)
  80c9e8:	00001806 	br	80ca4c <checkStages+0x218>
			resetAlien(aliens[n], n, 10*n);
  80c9ec:	e0bffc17 	ldw	r2,-16(fp)
  80c9f0:	1085883a 	add	r2,r2,r2
  80c9f4:	1085883a 	add	r2,r2,r2
  80c9f8:	1007883a 	mov	r3,r2
  80c9fc:	e0bffd17 	ldw	r2,-12(fp)
  80ca00:	1885883a 	add	r2,r3,r2
  80ca04:	11000017 	ldw	r4,0(r2)
  80ca08:	e0bffc17 	ldw	r2,-16(fp)
  80ca0c:	118002a4 	muli	r6,r2,10
  80ca10:	e17ffc17 	ldw	r5,-16(fp)
  80ca14:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n]->super);
  80ca18:	e0bffc17 	ldw	r2,-16(fp)
  80ca1c:	1085883a 	add	r2,r2,r2
  80ca20:	1085883a 	add	r2,r2,r2
  80ca24:	1007883a 	mov	r3,r2
  80ca28:	e0bffd17 	ldw	r2,-12(fp)
  80ca2c:	1885883a 	add	r2,r3,r2
  80ca30:	10800017 	ldw	r2,0(r2)
  80ca34:	11400017 	ldw	r5,0(r2)
  80ca38:	e13fff17 	ldw	r4,-4(fp)
  80ca3c:	080707c0 	call	80707c <addObjToCollide>
			resetAlien(aliens[n+20], n, 10*n);
			addObjToCollide(col, aliens[n+20]->super);
		}
		break;
	case 2:
		for(n = 0; n < 15; n++) {
  80ca40:	e0bffc17 	ldw	r2,-16(fp)
  80ca44:	10800044 	addi	r2,r2,1
  80ca48:	e0bffc15 	stw	r2,-16(fp)
  80ca4c:	e0bffc17 	ldw	r2,-16(fp)
  80ca50:	108003d0 	cmplti	r2,r2,15
  80ca54:	103fe51e 	bne	r2,zero,80c9ec <checkStages+0x1b8>
			resetAlien(aliens[n], n, 10*n);
			addObjToCollide(col, aliens[n]->super);
		}
		for(n = 0; n < 15; n++) {
  80ca58:	e03ffc15 	stw	zero,-16(fp)
  80ca5c:	00001a06 	br	80cac8 <checkStages+0x294>
			resetAlien(aliens[n+20], n*10, n);
  80ca60:	e0bffc17 	ldw	r2,-16(fp)
  80ca64:	1085883a 	add	r2,r2,r2
  80ca68:	1085883a 	add	r2,r2,r2
  80ca6c:	1007883a 	mov	r3,r2
  80ca70:	e0bffd17 	ldw	r2,-12(fp)
  80ca74:	1885883a 	add	r2,r3,r2
  80ca78:	10801404 	addi	r2,r2,80
  80ca7c:	11000017 	ldw	r4,0(r2)
  80ca80:	e0bffc17 	ldw	r2,-16(fp)
  80ca84:	114002a4 	muli	r5,r2,10
  80ca88:	e1bffc17 	ldw	r6,-16(fp)
  80ca8c:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n+20]->super);
  80ca90:	e0bffc17 	ldw	r2,-16(fp)
  80ca94:	1085883a 	add	r2,r2,r2
  80ca98:	1085883a 	add	r2,r2,r2
  80ca9c:	1007883a 	mov	r3,r2
  80caa0:	e0bffd17 	ldw	r2,-12(fp)
  80caa4:	1885883a 	add	r2,r3,r2
  80caa8:	10801404 	addi	r2,r2,80
  80caac:	10800017 	ldw	r2,0(r2)
  80cab0:	11400017 	ldw	r5,0(r2)
  80cab4:	e13fff17 	ldw	r4,-4(fp)
  80cab8:	080707c0 	call	80707c <addObjToCollide>
	case 2:
		for(n = 0; n < 15; n++) {
			resetAlien(aliens[n], n, 10*n);
			addObjToCollide(col, aliens[n]->super);
		}
		for(n = 0; n < 15; n++) {
  80cabc:	e0bffc17 	ldw	r2,-16(fp)
  80cac0:	10800044 	addi	r2,r2,1
  80cac4:	e0bffc15 	stw	r2,-16(fp)
  80cac8:	e0bffc17 	ldw	r2,-16(fp)
  80cacc:	108003d0 	cmplti	r2,r2,15
  80cad0:	103fe31e 	bne	r2,zero,80ca60 <checkStages+0x22c>
			resetAlien(aliens[n+20], n*10, n);
			addObjToCollide(col, aliens[n+20]->super);
		}
		break;
  80cad4:	00028006 	br	80d4d8 <checkStages+0xca4>
	case 3:
		for(n = 0; n < 20; n++) {
  80cad8:	e03ffc15 	stw	zero,-16(fp)
  80cadc:	00005806 	br	80cc40 <checkStages+0x40c>
			aliens[n]->score += 550;
  80cae0:	e0bffc17 	ldw	r2,-16(fp)
  80cae4:	1085883a 	add	r2,r2,r2
  80cae8:	1085883a 	add	r2,r2,r2
  80caec:	1007883a 	mov	r3,r2
  80caf0:	e0bffd17 	ldw	r2,-12(fp)
  80caf4:	1885883a 	add	r2,r3,r2
  80caf8:	11000017 	ldw	r4,0(r2)
  80cafc:	e0bffc17 	ldw	r2,-16(fp)
  80cb00:	1085883a 	add	r2,r2,r2
  80cb04:	1085883a 	add	r2,r2,r2
  80cb08:	1007883a 	mov	r3,r2
  80cb0c:	e0bffd17 	ldw	r2,-12(fp)
  80cb10:	1885883a 	add	r2,r3,r2
  80cb14:	10800017 	ldw	r2,0(r2)
  80cb18:	10800917 	ldw	r2,36(r2)
  80cb1c:	10808984 	addi	r2,r2,550
  80cb20:	20800915 	stw	r2,36(r4)
			aliens[n]->bounty += 550;
  80cb24:	e0bffc17 	ldw	r2,-16(fp)
  80cb28:	1085883a 	add	r2,r2,r2
  80cb2c:	1085883a 	add	r2,r2,r2
  80cb30:	1007883a 	mov	r3,r2
  80cb34:	e0bffd17 	ldw	r2,-12(fp)
  80cb38:	1885883a 	add	r2,r3,r2
  80cb3c:	11000017 	ldw	r4,0(r2)
  80cb40:	e0bffc17 	ldw	r2,-16(fp)
  80cb44:	1085883a 	add	r2,r2,r2
  80cb48:	1085883a 	add	r2,r2,r2
  80cb4c:	1007883a 	mov	r3,r2
  80cb50:	e0bffd17 	ldw	r2,-12(fp)
  80cb54:	1885883a 	add	r2,r3,r2
  80cb58:	10800017 	ldw	r2,0(r2)
  80cb5c:	10800817 	ldw	r2,32(r2)
  80cb60:	10808984 	addi	r2,r2,550
  80cb64:	20800815 	stw	r2,32(r4)
			aliens[n]->max_life += aliens[n]->max_life/4;
  80cb68:	e0bffc17 	ldw	r2,-16(fp)
  80cb6c:	1085883a 	add	r2,r2,r2
  80cb70:	1085883a 	add	r2,r2,r2
  80cb74:	1007883a 	mov	r3,r2
  80cb78:	e0bffd17 	ldw	r2,-12(fp)
  80cb7c:	1885883a 	add	r2,r3,r2
  80cb80:	14000017 	ldw	r16,0(r2)
  80cb84:	e0bffc17 	ldw	r2,-16(fp)
  80cb88:	1085883a 	add	r2,r2,r2
  80cb8c:	1085883a 	add	r2,r2,r2
  80cb90:	1007883a 	mov	r3,r2
  80cb94:	e0bffd17 	ldw	r2,-12(fp)
  80cb98:	1885883a 	add	r2,r3,r2
  80cb9c:	10800017 	ldw	r2,0(r2)
  80cba0:	14400317 	ldw	r17,12(r2)
  80cba4:	e0bffc17 	ldw	r2,-16(fp)
  80cba8:	1085883a 	add	r2,r2,r2
  80cbac:	1085883a 	add	r2,r2,r2
  80cbb0:	1007883a 	mov	r3,r2
  80cbb4:	e0bffd17 	ldw	r2,-12(fp)
  80cbb8:	1885883a 	add	r2,r3,r2
  80cbbc:	10800017 	ldw	r2,0(r2)
  80cbc0:	10800317 	ldw	r2,12(r2)
  80cbc4:	1009883a 	mov	r4,r2
  80cbc8:	01502034 	movhi	r5,16512
  80cbcc:	08132500 	call	813250 <__divsf3>
  80cbd0:	8809883a 	mov	r4,r17
  80cbd4:	100b883a 	mov	r5,r2
  80cbd8:	081300c0 	call	81300c <__addsf3>
  80cbdc:	80800315 	stw	r2,12(r16)
			resetAlien(aliens[n], n, 10*n);
  80cbe0:	e0bffc17 	ldw	r2,-16(fp)
  80cbe4:	1085883a 	add	r2,r2,r2
  80cbe8:	1085883a 	add	r2,r2,r2
  80cbec:	1007883a 	mov	r3,r2
  80cbf0:	e0bffd17 	ldw	r2,-12(fp)
  80cbf4:	1885883a 	add	r2,r3,r2
  80cbf8:	11000017 	ldw	r4,0(r2)
  80cbfc:	e0bffc17 	ldw	r2,-16(fp)
  80cc00:	118002a4 	muli	r6,r2,10
  80cc04:	e17ffc17 	ldw	r5,-16(fp)
  80cc08:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n]->super);
  80cc0c:	e0bffc17 	ldw	r2,-16(fp)
  80cc10:	1085883a 	add	r2,r2,r2
  80cc14:	1085883a 	add	r2,r2,r2
  80cc18:	1007883a 	mov	r3,r2
  80cc1c:	e0bffd17 	ldw	r2,-12(fp)
  80cc20:	1885883a 	add	r2,r3,r2
  80cc24:	10800017 	ldw	r2,0(r2)
  80cc28:	11400017 	ldw	r5,0(r2)
  80cc2c:	e13fff17 	ldw	r4,-4(fp)
  80cc30:	080707c0 	call	80707c <addObjToCollide>
			resetAlien(aliens[n+20], n*10, n);
			addObjToCollide(col, aliens[n+20]->super);
		}
		break;
	case 3:
		for(n = 0; n < 20; n++) {
  80cc34:	e0bffc17 	ldw	r2,-16(fp)
  80cc38:	10800044 	addi	r2,r2,1
  80cc3c:	e0bffc15 	stw	r2,-16(fp)
  80cc40:	e0bffc17 	ldw	r2,-16(fp)
  80cc44:	10800510 	cmplti	r2,r2,20
  80cc48:	103fa51e 	bne	r2,zero,80cae0 <checkStages+0x2ac>
			aliens[n]->bounty += 550;
			aliens[n]->max_life += aliens[n]->max_life/4;
			resetAlien(aliens[n], n, 10*n);
			addObjToCollide(col, aliens[n]->super);
		}
		for(n = 0; n < 5; n++) {
  80cc4c:	e03ffc15 	stw	zero,-16(fp)
  80cc50:	00006106 	br	80cdd8 <checkStages+0x5a4>
			aliens[n+20]->score += 1000;
  80cc54:	e0bffc17 	ldw	r2,-16(fp)
  80cc58:	1085883a 	add	r2,r2,r2
  80cc5c:	1085883a 	add	r2,r2,r2
  80cc60:	1007883a 	mov	r3,r2
  80cc64:	e0bffd17 	ldw	r2,-12(fp)
  80cc68:	1885883a 	add	r2,r3,r2
  80cc6c:	10801404 	addi	r2,r2,80
  80cc70:	11000017 	ldw	r4,0(r2)
  80cc74:	e0bffc17 	ldw	r2,-16(fp)
  80cc78:	1085883a 	add	r2,r2,r2
  80cc7c:	1085883a 	add	r2,r2,r2
  80cc80:	1007883a 	mov	r3,r2
  80cc84:	e0bffd17 	ldw	r2,-12(fp)
  80cc88:	1885883a 	add	r2,r3,r2
  80cc8c:	10801404 	addi	r2,r2,80
  80cc90:	10800017 	ldw	r2,0(r2)
  80cc94:	10800917 	ldw	r2,36(r2)
  80cc98:	1080fa04 	addi	r2,r2,1000
  80cc9c:	20800915 	stw	r2,36(r4)
			aliens[n+20]->bounty += 1000;
  80cca0:	e0bffc17 	ldw	r2,-16(fp)
  80cca4:	1085883a 	add	r2,r2,r2
  80cca8:	1085883a 	add	r2,r2,r2
  80ccac:	1007883a 	mov	r3,r2
  80ccb0:	e0bffd17 	ldw	r2,-12(fp)
  80ccb4:	1885883a 	add	r2,r3,r2
  80ccb8:	10801404 	addi	r2,r2,80
  80ccbc:	11000017 	ldw	r4,0(r2)
  80ccc0:	e0bffc17 	ldw	r2,-16(fp)
  80ccc4:	1085883a 	add	r2,r2,r2
  80ccc8:	1085883a 	add	r2,r2,r2
  80cccc:	1007883a 	mov	r3,r2
  80ccd0:	e0bffd17 	ldw	r2,-12(fp)
  80ccd4:	1885883a 	add	r2,r3,r2
  80ccd8:	10801404 	addi	r2,r2,80
  80ccdc:	10800017 	ldw	r2,0(r2)
  80cce0:	10800817 	ldw	r2,32(r2)
  80cce4:	1080fa04 	addi	r2,r2,1000
  80cce8:	20800815 	stw	r2,32(r4)
			aliens[n+20]->max_life += aliens[n+20]->max_life/4;
  80ccec:	e0bffc17 	ldw	r2,-16(fp)
  80ccf0:	1085883a 	add	r2,r2,r2
  80ccf4:	1085883a 	add	r2,r2,r2
  80ccf8:	1007883a 	mov	r3,r2
  80ccfc:	e0bffd17 	ldw	r2,-12(fp)
  80cd00:	1885883a 	add	r2,r3,r2
  80cd04:	10801404 	addi	r2,r2,80
  80cd08:	14000017 	ldw	r16,0(r2)
  80cd0c:	e0bffc17 	ldw	r2,-16(fp)
  80cd10:	1085883a 	add	r2,r2,r2
  80cd14:	1085883a 	add	r2,r2,r2
  80cd18:	1007883a 	mov	r3,r2
  80cd1c:	e0bffd17 	ldw	r2,-12(fp)
  80cd20:	1885883a 	add	r2,r3,r2
  80cd24:	10801404 	addi	r2,r2,80
  80cd28:	10800017 	ldw	r2,0(r2)
  80cd2c:	14400317 	ldw	r17,12(r2)
  80cd30:	e0bffc17 	ldw	r2,-16(fp)
  80cd34:	1085883a 	add	r2,r2,r2
  80cd38:	1085883a 	add	r2,r2,r2
  80cd3c:	1007883a 	mov	r3,r2
  80cd40:	e0bffd17 	ldw	r2,-12(fp)
  80cd44:	1885883a 	add	r2,r3,r2
  80cd48:	10801404 	addi	r2,r2,80
  80cd4c:	10800017 	ldw	r2,0(r2)
  80cd50:	10800317 	ldw	r2,12(r2)
  80cd54:	1009883a 	mov	r4,r2
  80cd58:	01502034 	movhi	r5,16512
  80cd5c:	08132500 	call	813250 <__divsf3>
  80cd60:	8809883a 	mov	r4,r17
  80cd64:	100b883a 	mov	r5,r2
  80cd68:	081300c0 	call	81300c <__addsf3>
  80cd6c:	80800315 	stw	r2,12(r16)
			resetAlien(aliens[n+20], n*10, n);
  80cd70:	e0bffc17 	ldw	r2,-16(fp)
  80cd74:	1085883a 	add	r2,r2,r2
  80cd78:	1085883a 	add	r2,r2,r2
  80cd7c:	1007883a 	mov	r3,r2
  80cd80:	e0bffd17 	ldw	r2,-12(fp)
  80cd84:	1885883a 	add	r2,r3,r2
  80cd88:	10801404 	addi	r2,r2,80
  80cd8c:	11000017 	ldw	r4,0(r2)
  80cd90:	e0bffc17 	ldw	r2,-16(fp)
  80cd94:	114002a4 	muli	r5,r2,10
  80cd98:	e1bffc17 	ldw	r6,-16(fp)
  80cd9c:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n+20]->super);
  80cda0:	e0bffc17 	ldw	r2,-16(fp)
  80cda4:	1085883a 	add	r2,r2,r2
  80cda8:	1085883a 	add	r2,r2,r2
  80cdac:	1007883a 	mov	r3,r2
  80cdb0:	e0bffd17 	ldw	r2,-12(fp)
  80cdb4:	1885883a 	add	r2,r3,r2
  80cdb8:	10801404 	addi	r2,r2,80
  80cdbc:	10800017 	ldw	r2,0(r2)
  80cdc0:	11400017 	ldw	r5,0(r2)
  80cdc4:	e13fff17 	ldw	r4,-4(fp)
  80cdc8:	080707c0 	call	80707c <addObjToCollide>
			aliens[n]->bounty += 550;
			aliens[n]->max_life += aliens[n]->max_life/4;
			resetAlien(aliens[n], n, 10*n);
			addObjToCollide(col, aliens[n]->super);
		}
		for(n = 0; n < 5; n++) {
  80cdcc:	e0bffc17 	ldw	r2,-16(fp)
  80cdd0:	10800044 	addi	r2,r2,1
  80cdd4:	e0bffc15 	stw	r2,-16(fp)
  80cdd8:	e0bffc17 	ldw	r2,-16(fp)
  80cddc:	10800150 	cmplti	r2,r2,5
  80cde0:	103f9c1e 	bne	r2,zero,80cc54 <checkStages+0x420>
			aliens[n+20]->bounty += 1000;
			aliens[n+20]->max_life += aliens[n+20]->max_life/4;
			resetAlien(aliens[n+20], n*10, n);
			addObjToCollide(col, aliens[n+20]->super);
		}
		break;
  80cde4:	0001bc06 	br	80d4d8 <checkStages+0xca4>
	case 4:
		for(n = 0; n < 10; n++) {
  80cde8:	e03ffc15 	stw	zero,-16(fp)
  80cdec:	00001806 	br	80ce50 <checkStages+0x61c>
			resetAlien(aliens[n], n*10, n);
  80cdf0:	e0bffc17 	ldw	r2,-16(fp)
  80cdf4:	1085883a 	add	r2,r2,r2
  80cdf8:	1085883a 	add	r2,r2,r2
  80cdfc:	1007883a 	mov	r3,r2
  80ce00:	e0bffd17 	ldw	r2,-12(fp)
  80ce04:	1885883a 	add	r2,r3,r2
  80ce08:	11000017 	ldw	r4,0(r2)
  80ce0c:	e0bffc17 	ldw	r2,-16(fp)
  80ce10:	114002a4 	muli	r5,r2,10
  80ce14:	e1bffc17 	ldw	r6,-16(fp)
  80ce18:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n]->super);
  80ce1c:	e0bffc17 	ldw	r2,-16(fp)
  80ce20:	1085883a 	add	r2,r2,r2
  80ce24:	1085883a 	add	r2,r2,r2
  80ce28:	1007883a 	mov	r3,r2
  80ce2c:	e0bffd17 	ldw	r2,-12(fp)
  80ce30:	1885883a 	add	r2,r3,r2
  80ce34:	10800017 	ldw	r2,0(r2)
  80ce38:	11400017 	ldw	r5,0(r2)
  80ce3c:	e13fff17 	ldw	r4,-4(fp)
  80ce40:	080707c0 	call	80707c <addObjToCollide>
			resetAlien(aliens[n+20], n*10, n);
			addObjToCollide(col, aliens[n+20]->super);
		}
		break;
	case 4:
		for(n = 0; n < 10; n++) {
  80ce44:	e0bffc17 	ldw	r2,-16(fp)
  80ce48:	10800044 	addi	r2,r2,1
  80ce4c:	e0bffc15 	stw	r2,-16(fp)
  80ce50:	e0bffc17 	ldw	r2,-16(fp)
  80ce54:	10800290 	cmplti	r2,r2,10
  80ce58:	103fe51e 	bne	r2,zero,80cdf0 <checkStages+0x5bc>
			resetAlien(aliens[n], n*10, n);
			addObjToCollide(col, aliens[n]->super);
		}
		for(n = 0; n < 20; n++) {
  80ce5c:	e03ffc15 	stw	zero,-16(fp)
  80ce60:	00001a06 	br	80cecc <checkStages+0x698>
			resetAlien(aliens[n+20], n, 10*n);
  80ce64:	e0bffc17 	ldw	r2,-16(fp)
  80ce68:	1085883a 	add	r2,r2,r2
  80ce6c:	1085883a 	add	r2,r2,r2
  80ce70:	1007883a 	mov	r3,r2
  80ce74:	e0bffd17 	ldw	r2,-12(fp)
  80ce78:	1885883a 	add	r2,r3,r2
  80ce7c:	10801404 	addi	r2,r2,80
  80ce80:	11000017 	ldw	r4,0(r2)
  80ce84:	e0bffc17 	ldw	r2,-16(fp)
  80ce88:	118002a4 	muli	r6,r2,10
  80ce8c:	e17ffc17 	ldw	r5,-16(fp)
  80ce90:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n+20]->super);
  80ce94:	e0bffc17 	ldw	r2,-16(fp)
  80ce98:	1085883a 	add	r2,r2,r2
  80ce9c:	1085883a 	add	r2,r2,r2
  80cea0:	1007883a 	mov	r3,r2
  80cea4:	e0bffd17 	ldw	r2,-12(fp)
  80cea8:	1885883a 	add	r2,r3,r2
  80ceac:	10801404 	addi	r2,r2,80
  80ceb0:	10800017 	ldw	r2,0(r2)
  80ceb4:	11400017 	ldw	r5,0(r2)
  80ceb8:	e13fff17 	ldw	r4,-4(fp)
  80cebc:	080707c0 	call	80707c <addObjToCollide>
	case 4:
		for(n = 0; n < 10; n++) {
			resetAlien(aliens[n], n*10, n);
			addObjToCollide(col, aliens[n]->super);
		}
		for(n = 0; n < 20; n++) {
  80cec0:	e0bffc17 	ldw	r2,-16(fp)
  80cec4:	10800044 	addi	r2,r2,1
  80cec8:	e0bffc15 	stw	r2,-16(fp)
  80cecc:	e0bffc17 	ldw	r2,-16(fp)
  80ced0:	10800510 	cmplti	r2,r2,20
  80ced4:	103fe31e 	bne	r2,zero,80ce64 <checkStages+0x630>
			resetAlien(aliens[n+20], n, 10*n);
			addObjToCollide(col, aliens[n+20]->super);
		}
		break;
  80ced8:	00017f06 	br	80d4d8 <checkStages+0xca4>
	case 5:
		for(n = 0; n < 15; n++) {
  80cedc:	e03ffc15 	stw	zero,-16(fp)
  80cee0:	00008b06 	br	80d110 <checkStages+0x8dc>
			aliens[n]->score *= 1.6;
  80cee4:	e0bffc17 	ldw	r2,-16(fp)
  80cee8:	1085883a 	add	r2,r2,r2
  80ceec:	1085883a 	add	r2,r2,r2
  80cef0:	1007883a 	mov	r3,r2
  80cef4:	e0bffd17 	ldw	r2,-12(fp)
  80cef8:	1885883a 	add	r2,r3,r2
  80cefc:	14000017 	ldw	r16,0(r2)
  80cf00:	e0bffc17 	ldw	r2,-16(fp)
  80cf04:	1085883a 	add	r2,r2,r2
  80cf08:	1085883a 	add	r2,r2,r2
  80cf0c:	1007883a 	mov	r3,r2
  80cf10:	e0bffd17 	ldw	r2,-12(fp)
  80cf14:	1885883a 	add	r2,r3,r2
  80cf18:	10800017 	ldw	r2,0(r2)
  80cf1c:	11000917 	ldw	r4,36(r2)
  80cf20:	08143040 	call	814304 <__floatsidf>
  80cf24:	100b883a 	mov	r5,r2
  80cf28:	180d883a 	mov	r6,r3
  80cf2c:	2809883a 	mov	r4,r5
  80cf30:	300b883a 	mov	r5,r6
  80cf34:	01a666b4 	movhi	r6,39322
  80cf38:	31a66684 	addi	r6,r6,-26214
  80cf3c:	01cffeb4 	movhi	r7,16378
  80cf40:	39e66644 	addi	r7,r7,-26215
  80cf44:	0813ce80 	call	813ce8 <__muldf3>
  80cf48:	1009883a 	mov	r4,r2
  80cf4c:	180b883a 	mov	r5,r3
  80cf50:	2005883a 	mov	r2,r4
  80cf54:	2807883a 	mov	r3,r5
  80cf58:	1009883a 	mov	r4,r2
  80cf5c:	180b883a 	mov	r5,r3
  80cf60:	08143fc0 	call	8143fc <__fixdfsi>
  80cf64:	80800915 	stw	r2,36(r16)
			aliens[n]->bounty *= 1.6;
  80cf68:	e0bffc17 	ldw	r2,-16(fp)
  80cf6c:	1085883a 	add	r2,r2,r2
  80cf70:	1085883a 	add	r2,r2,r2
  80cf74:	1007883a 	mov	r3,r2
  80cf78:	e0bffd17 	ldw	r2,-12(fp)
  80cf7c:	1885883a 	add	r2,r3,r2
  80cf80:	14000017 	ldw	r16,0(r2)
  80cf84:	e0bffc17 	ldw	r2,-16(fp)
  80cf88:	1085883a 	add	r2,r2,r2
  80cf8c:	1085883a 	add	r2,r2,r2
  80cf90:	1007883a 	mov	r3,r2
  80cf94:	e0bffd17 	ldw	r2,-12(fp)
  80cf98:	1885883a 	add	r2,r3,r2
  80cf9c:	10800017 	ldw	r2,0(r2)
  80cfa0:	11000817 	ldw	r4,32(r2)
  80cfa4:	08143040 	call	814304 <__floatsidf>
  80cfa8:	100b883a 	mov	r5,r2
  80cfac:	180d883a 	mov	r6,r3
  80cfb0:	2809883a 	mov	r4,r5
  80cfb4:	300b883a 	mov	r5,r6
  80cfb8:	01a666b4 	movhi	r6,39322
  80cfbc:	31a66684 	addi	r6,r6,-26214
  80cfc0:	01cffeb4 	movhi	r7,16378
  80cfc4:	39e66644 	addi	r7,r7,-26215
  80cfc8:	0813ce80 	call	813ce8 <__muldf3>
  80cfcc:	1009883a 	mov	r4,r2
  80cfd0:	180b883a 	mov	r5,r3
  80cfd4:	2005883a 	mov	r2,r4
  80cfd8:	2807883a 	mov	r3,r5
  80cfdc:	1009883a 	mov	r4,r2
  80cfe0:	180b883a 	mov	r5,r3
  80cfe4:	08143fc0 	call	8143fc <__fixdfsi>
  80cfe8:	80800815 	stw	r2,32(r16)
			aliens[n]->init_speed += 1;
  80cfec:	e0bffc17 	ldw	r2,-16(fp)
  80cff0:	1085883a 	add	r2,r2,r2
  80cff4:	1085883a 	add	r2,r2,r2
  80cff8:	1007883a 	mov	r3,r2
  80cffc:	e0bffd17 	ldw	r2,-12(fp)
  80d000:	1885883a 	add	r2,r3,r2
  80d004:	14000017 	ldw	r16,0(r2)
  80d008:	e0bffc17 	ldw	r2,-16(fp)
  80d00c:	1085883a 	add	r2,r2,r2
  80d010:	1085883a 	add	r2,r2,r2
  80d014:	1007883a 	mov	r3,r2
  80d018:	e0bffd17 	ldw	r2,-12(fp)
  80d01c:	1885883a 	add	r2,r3,r2
  80d020:	10800017 	ldw	r2,0(r2)
  80d024:	10800717 	ldw	r2,28(r2)
  80d028:	1009883a 	mov	r4,r2
  80d02c:	014fe034 	movhi	r5,16256
  80d030:	081300c0 	call	81300c <__addsf3>
  80d034:	80800715 	stw	r2,28(r16)
			aliens[n]->max_life += aliens[n]->max_life/4;
  80d038:	e0bffc17 	ldw	r2,-16(fp)
  80d03c:	1085883a 	add	r2,r2,r2
  80d040:	1085883a 	add	r2,r2,r2
  80d044:	1007883a 	mov	r3,r2
  80d048:	e0bffd17 	ldw	r2,-12(fp)
  80d04c:	1885883a 	add	r2,r3,r2
  80d050:	14000017 	ldw	r16,0(r2)
  80d054:	e0bffc17 	ldw	r2,-16(fp)
  80d058:	1085883a 	add	r2,r2,r2
  80d05c:	1085883a 	add	r2,r2,r2
  80d060:	1007883a 	mov	r3,r2
  80d064:	e0bffd17 	ldw	r2,-12(fp)
  80d068:	1885883a 	add	r2,r3,r2
  80d06c:	10800017 	ldw	r2,0(r2)
  80d070:	14400317 	ldw	r17,12(r2)
  80d074:	e0bffc17 	ldw	r2,-16(fp)
  80d078:	1085883a 	add	r2,r2,r2
  80d07c:	1085883a 	add	r2,r2,r2
  80d080:	1007883a 	mov	r3,r2
  80d084:	e0bffd17 	ldw	r2,-12(fp)
  80d088:	1885883a 	add	r2,r3,r2
  80d08c:	10800017 	ldw	r2,0(r2)
  80d090:	10800317 	ldw	r2,12(r2)
  80d094:	1009883a 	mov	r4,r2
  80d098:	01502034 	movhi	r5,16512
  80d09c:	08132500 	call	813250 <__divsf3>
  80d0a0:	8809883a 	mov	r4,r17
  80d0a4:	100b883a 	mov	r5,r2
  80d0a8:	081300c0 	call	81300c <__addsf3>
  80d0ac:	80800315 	stw	r2,12(r16)
			resetAlien(aliens[n], n, 10*n);
  80d0b0:	e0bffc17 	ldw	r2,-16(fp)
  80d0b4:	1085883a 	add	r2,r2,r2
  80d0b8:	1085883a 	add	r2,r2,r2
  80d0bc:	1007883a 	mov	r3,r2
  80d0c0:	e0bffd17 	ldw	r2,-12(fp)
  80d0c4:	1885883a 	add	r2,r3,r2
  80d0c8:	11000017 	ldw	r4,0(r2)
  80d0cc:	e0bffc17 	ldw	r2,-16(fp)
  80d0d0:	118002a4 	muli	r6,r2,10
  80d0d4:	e17ffc17 	ldw	r5,-16(fp)
  80d0d8:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n]->super);
  80d0dc:	e0bffc17 	ldw	r2,-16(fp)
  80d0e0:	1085883a 	add	r2,r2,r2
  80d0e4:	1085883a 	add	r2,r2,r2
  80d0e8:	1007883a 	mov	r3,r2
  80d0ec:	e0bffd17 	ldw	r2,-12(fp)
  80d0f0:	1885883a 	add	r2,r3,r2
  80d0f4:	10800017 	ldw	r2,0(r2)
  80d0f8:	11400017 	ldw	r5,0(r2)
  80d0fc:	e13fff17 	ldw	r4,-4(fp)
  80d100:	080707c0 	call	80707c <addObjToCollide>
			resetAlien(aliens[n+20], n, 10*n);
			addObjToCollide(col, aliens[n+20]->super);
		}
		break;
	case 5:
		for(n = 0; n < 15; n++) {
  80d104:	e0bffc17 	ldw	r2,-16(fp)
  80d108:	10800044 	addi	r2,r2,1
  80d10c:	e0bffc15 	stw	r2,-16(fp)
  80d110:	e0bffc17 	ldw	r2,-16(fp)
  80d114:	108003d0 	cmplti	r2,r2,15
  80d118:	103f721e 	bne	r2,zero,80cee4 <checkStages+0x6b0>
			aliens[n]->init_speed += 1;
			aliens[n]->max_life += aliens[n]->max_life/4;
			resetAlien(aliens[n], n, 10*n);
			addObjToCollide(col, aliens[n]->super);
		}
		for(n = 0; n < 15; n++) {
  80d11c:	e03ffc15 	stw	zero,-16(fp)
  80d120:	00007206 	br	80d2ec <checkStages+0xab8>
			aliens[n]->score *= 2;
  80d124:	e0bffc17 	ldw	r2,-16(fp)
  80d128:	1085883a 	add	r2,r2,r2
  80d12c:	1085883a 	add	r2,r2,r2
  80d130:	1007883a 	mov	r3,r2
  80d134:	e0bffd17 	ldw	r2,-12(fp)
  80d138:	1885883a 	add	r2,r3,r2
  80d13c:	11000017 	ldw	r4,0(r2)
  80d140:	e0bffc17 	ldw	r2,-16(fp)
  80d144:	1085883a 	add	r2,r2,r2
  80d148:	1085883a 	add	r2,r2,r2
  80d14c:	1007883a 	mov	r3,r2
  80d150:	e0bffd17 	ldw	r2,-12(fp)
  80d154:	1885883a 	add	r2,r3,r2
  80d158:	10800017 	ldw	r2,0(r2)
  80d15c:	10800917 	ldw	r2,36(r2)
  80d160:	1085883a 	add	r2,r2,r2
  80d164:	20800915 	stw	r2,36(r4)
			aliens[n]->bounty *= 2;
  80d168:	e0bffc17 	ldw	r2,-16(fp)
  80d16c:	1085883a 	add	r2,r2,r2
  80d170:	1085883a 	add	r2,r2,r2
  80d174:	1007883a 	mov	r3,r2
  80d178:	e0bffd17 	ldw	r2,-12(fp)
  80d17c:	1885883a 	add	r2,r3,r2
  80d180:	11000017 	ldw	r4,0(r2)
  80d184:	e0bffc17 	ldw	r2,-16(fp)
  80d188:	1085883a 	add	r2,r2,r2
  80d18c:	1085883a 	add	r2,r2,r2
  80d190:	1007883a 	mov	r3,r2
  80d194:	e0bffd17 	ldw	r2,-12(fp)
  80d198:	1885883a 	add	r2,r3,r2
  80d19c:	10800017 	ldw	r2,0(r2)
  80d1a0:	10800817 	ldw	r2,32(r2)
  80d1a4:	1085883a 	add	r2,r2,r2
  80d1a8:	20800815 	stw	r2,32(r4)
			aliens[n+20]->init_speed += 1;
  80d1ac:	e0bffc17 	ldw	r2,-16(fp)
  80d1b0:	1085883a 	add	r2,r2,r2
  80d1b4:	1085883a 	add	r2,r2,r2
  80d1b8:	1007883a 	mov	r3,r2
  80d1bc:	e0bffd17 	ldw	r2,-12(fp)
  80d1c0:	1885883a 	add	r2,r3,r2
  80d1c4:	10801404 	addi	r2,r2,80
  80d1c8:	14000017 	ldw	r16,0(r2)
  80d1cc:	e0bffc17 	ldw	r2,-16(fp)
  80d1d0:	1085883a 	add	r2,r2,r2
  80d1d4:	1085883a 	add	r2,r2,r2
  80d1d8:	1007883a 	mov	r3,r2
  80d1dc:	e0bffd17 	ldw	r2,-12(fp)
  80d1e0:	1885883a 	add	r2,r3,r2
  80d1e4:	10801404 	addi	r2,r2,80
  80d1e8:	10800017 	ldw	r2,0(r2)
  80d1ec:	10800717 	ldw	r2,28(r2)
  80d1f0:	1009883a 	mov	r4,r2
  80d1f4:	014fe034 	movhi	r5,16256
  80d1f8:	081300c0 	call	81300c <__addsf3>
  80d1fc:	80800715 	stw	r2,28(r16)
			aliens[n+20]->max_life += aliens[n+20]->max_life/4;
  80d200:	e0bffc17 	ldw	r2,-16(fp)
  80d204:	1085883a 	add	r2,r2,r2
  80d208:	1085883a 	add	r2,r2,r2
  80d20c:	1007883a 	mov	r3,r2
  80d210:	e0bffd17 	ldw	r2,-12(fp)
  80d214:	1885883a 	add	r2,r3,r2
  80d218:	10801404 	addi	r2,r2,80
  80d21c:	14000017 	ldw	r16,0(r2)
  80d220:	e0bffc17 	ldw	r2,-16(fp)
  80d224:	1085883a 	add	r2,r2,r2
  80d228:	1085883a 	add	r2,r2,r2
  80d22c:	1007883a 	mov	r3,r2
  80d230:	e0bffd17 	ldw	r2,-12(fp)
  80d234:	1885883a 	add	r2,r3,r2
  80d238:	10801404 	addi	r2,r2,80
  80d23c:	10800017 	ldw	r2,0(r2)
  80d240:	14400317 	ldw	r17,12(r2)
  80d244:	e0bffc17 	ldw	r2,-16(fp)
  80d248:	1085883a 	add	r2,r2,r2
  80d24c:	1085883a 	add	r2,r2,r2
  80d250:	1007883a 	mov	r3,r2
  80d254:	e0bffd17 	ldw	r2,-12(fp)
  80d258:	1885883a 	add	r2,r3,r2
  80d25c:	10801404 	addi	r2,r2,80
  80d260:	10800017 	ldw	r2,0(r2)
  80d264:	10800317 	ldw	r2,12(r2)
  80d268:	1009883a 	mov	r4,r2
  80d26c:	01502034 	movhi	r5,16512
  80d270:	08132500 	call	813250 <__divsf3>
  80d274:	8809883a 	mov	r4,r17
  80d278:	100b883a 	mov	r5,r2
  80d27c:	081300c0 	call	81300c <__addsf3>
  80d280:	80800315 	stw	r2,12(r16)
			resetAlien(aliens[n+20], 10*n, n);
  80d284:	e0bffc17 	ldw	r2,-16(fp)
  80d288:	1085883a 	add	r2,r2,r2
  80d28c:	1085883a 	add	r2,r2,r2
  80d290:	1007883a 	mov	r3,r2
  80d294:	e0bffd17 	ldw	r2,-12(fp)
  80d298:	1885883a 	add	r2,r3,r2
  80d29c:	10801404 	addi	r2,r2,80
  80d2a0:	11000017 	ldw	r4,0(r2)
  80d2a4:	e0bffc17 	ldw	r2,-16(fp)
  80d2a8:	114002a4 	muli	r5,r2,10
  80d2ac:	e1bffc17 	ldw	r6,-16(fp)
  80d2b0:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n+20]->super);
  80d2b4:	e0bffc17 	ldw	r2,-16(fp)
  80d2b8:	1085883a 	add	r2,r2,r2
  80d2bc:	1085883a 	add	r2,r2,r2
  80d2c0:	1007883a 	mov	r3,r2
  80d2c4:	e0bffd17 	ldw	r2,-12(fp)
  80d2c8:	1885883a 	add	r2,r3,r2
  80d2cc:	10801404 	addi	r2,r2,80
  80d2d0:	10800017 	ldw	r2,0(r2)
  80d2d4:	11400017 	ldw	r5,0(r2)
  80d2d8:	e13fff17 	ldw	r4,-4(fp)
  80d2dc:	080707c0 	call	80707c <addObjToCollide>
			aliens[n]->init_speed += 1;
			aliens[n]->max_life += aliens[n]->max_life/4;
			resetAlien(aliens[n], n, 10*n);
			addObjToCollide(col, aliens[n]->super);
		}
		for(n = 0; n < 15; n++) {
  80d2e0:	e0bffc17 	ldw	r2,-16(fp)
  80d2e4:	10800044 	addi	r2,r2,1
  80d2e8:	e0bffc15 	stw	r2,-16(fp)
  80d2ec:	e0bffc17 	ldw	r2,-16(fp)
  80d2f0:	108003d0 	cmplti	r2,r2,15
  80d2f4:	103f8b1e 	bne	r2,zero,80d124 <checkStages+0x8f0>
			aliens[n+20]->init_speed += 1;
			aliens[n+20]->max_life += aliens[n+20]->max_life/4;
			resetAlien(aliens[n+20], 10*n, n);
			addObjToCollide(col, aliens[n+20]->super);
		}
		break;
  80d2f8:	00007706 	br	80d4d8 <checkStages+0xca4>
	case 6:
		for(n = 0; n < 10; n++) {
  80d2fc:	e03ffc15 	stw	zero,-16(fp)
  80d300:	00007206 	br	80d4cc <checkStages+0xc98>
			aliens[n]->score *= 2;
  80d304:	e0bffc17 	ldw	r2,-16(fp)
  80d308:	1085883a 	add	r2,r2,r2
  80d30c:	1085883a 	add	r2,r2,r2
  80d310:	1007883a 	mov	r3,r2
  80d314:	e0bffd17 	ldw	r2,-12(fp)
  80d318:	1885883a 	add	r2,r3,r2
  80d31c:	11000017 	ldw	r4,0(r2)
  80d320:	e0bffc17 	ldw	r2,-16(fp)
  80d324:	1085883a 	add	r2,r2,r2
  80d328:	1085883a 	add	r2,r2,r2
  80d32c:	1007883a 	mov	r3,r2
  80d330:	e0bffd17 	ldw	r2,-12(fp)
  80d334:	1885883a 	add	r2,r3,r2
  80d338:	10800017 	ldw	r2,0(r2)
  80d33c:	10800917 	ldw	r2,36(r2)
  80d340:	1085883a 	add	r2,r2,r2
  80d344:	20800915 	stw	r2,36(r4)
			aliens[n]->bounty *= 2;
  80d348:	e0bffc17 	ldw	r2,-16(fp)
  80d34c:	1085883a 	add	r2,r2,r2
  80d350:	1085883a 	add	r2,r2,r2
  80d354:	1007883a 	mov	r3,r2
  80d358:	e0bffd17 	ldw	r2,-12(fp)
  80d35c:	1885883a 	add	r2,r3,r2
  80d360:	11000017 	ldw	r4,0(r2)
  80d364:	e0bffc17 	ldw	r2,-16(fp)
  80d368:	1085883a 	add	r2,r2,r2
  80d36c:	1085883a 	add	r2,r2,r2
  80d370:	1007883a 	mov	r3,r2
  80d374:	e0bffd17 	ldw	r2,-12(fp)
  80d378:	1885883a 	add	r2,r3,r2
  80d37c:	10800017 	ldw	r2,0(r2)
  80d380:	10800817 	ldw	r2,32(r2)
  80d384:	1085883a 	add	r2,r2,r2
  80d388:	20800815 	stw	r2,32(r4)
			aliens[n+40]->init_speed += 1.5;
  80d38c:	e0bffc17 	ldw	r2,-16(fp)
  80d390:	1085883a 	add	r2,r2,r2
  80d394:	1085883a 	add	r2,r2,r2
  80d398:	1007883a 	mov	r3,r2
  80d39c:	e0bffd17 	ldw	r2,-12(fp)
  80d3a0:	1885883a 	add	r2,r3,r2
  80d3a4:	10802804 	addi	r2,r2,160
  80d3a8:	14000017 	ldw	r16,0(r2)
  80d3ac:	e0bffc17 	ldw	r2,-16(fp)
  80d3b0:	1085883a 	add	r2,r2,r2
  80d3b4:	1085883a 	add	r2,r2,r2
  80d3b8:	1007883a 	mov	r3,r2
  80d3bc:	e0bffd17 	ldw	r2,-12(fp)
  80d3c0:	1885883a 	add	r2,r3,r2
  80d3c4:	10802804 	addi	r2,r2,160
  80d3c8:	10800017 	ldw	r2,0(r2)
  80d3cc:	10800717 	ldw	r2,28(r2)
  80d3d0:	1009883a 	mov	r4,r2
  80d3d4:	014ff034 	movhi	r5,16320
  80d3d8:	081300c0 	call	81300c <__addsf3>
  80d3dc:	80800715 	stw	r2,28(r16)
			aliens[n+40]->max_life += aliens[n+40]->max_life/2;
  80d3e0:	e0bffc17 	ldw	r2,-16(fp)
  80d3e4:	1085883a 	add	r2,r2,r2
  80d3e8:	1085883a 	add	r2,r2,r2
  80d3ec:	1007883a 	mov	r3,r2
  80d3f0:	e0bffd17 	ldw	r2,-12(fp)
  80d3f4:	1885883a 	add	r2,r3,r2
  80d3f8:	10802804 	addi	r2,r2,160
  80d3fc:	14000017 	ldw	r16,0(r2)
  80d400:	e0bffc17 	ldw	r2,-16(fp)
  80d404:	1085883a 	add	r2,r2,r2
  80d408:	1085883a 	add	r2,r2,r2
  80d40c:	1007883a 	mov	r3,r2
  80d410:	e0bffd17 	ldw	r2,-12(fp)
  80d414:	1885883a 	add	r2,r3,r2
  80d418:	10802804 	addi	r2,r2,160
  80d41c:	10800017 	ldw	r2,0(r2)
  80d420:	14400317 	ldw	r17,12(r2)
  80d424:	e0bffc17 	ldw	r2,-16(fp)
  80d428:	1085883a 	add	r2,r2,r2
  80d42c:	1085883a 	add	r2,r2,r2
  80d430:	1007883a 	mov	r3,r2
  80d434:	e0bffd17 	ldw	r2,-12(fp)
  80d438:	1885883a 	add	r2,r3,r2
  80d43c:	10802804 	addi	r2,r2,160
  80d440:	10800017 	ldw	r2,0(r2)
  80d444:	10800317 	ldw	r2,12(r2)
  80d448:	1009883a 	mov	r4,r2
  80d44c:	01500034 	movhi	r5,16384
  80d450:	08132500 	call	813250 <__divsf3>
  80d454:	8809883a 	mov	r4,r17
  80d458:	100b883a 	mov	r5,r2
  80d45c:	081300c0 	call	81300c <__addsf3>
  80d460:	80800315 	stw	r2,12(r16)
			resetAlien(aliens[n+40], n, 10*n);
  80d464:	e0bffc17 	ldw	r2,-16(fp)
  80d468:	1085883a 	add	r2,r2,r2
  80d46c:	1085883a 	add	r2,r2,r2
  80d470:	1007883a 	mov	r3,r2
  80d474:	e0bffd17 	ldw	r2,-12(fp)
  80d478:	1885883a 	add	r2,r3,r2
  80d47c:	10802804 	addi	r2,r2,160
  80d480:	11000017 	ldw	r4,0(r2)
  80d484:	e0bffc17 	ldw	r2,-16(fp)
  80d488:	118002a4 	muli	r6,r2,10
  80d48c:	e17ffc17 	ldw	r5,-16(fp)
  80d490:	08003400 	call	800340 <resetAlien>
			addObjToCollide(col, aliens[n+40]->super);
  80d494:	e0bffc17 	ldw	r2,-16(fp)
  80d498:	1085883a 	add	r2,r2,r2
  80d49c:	1085883a 	add	r2,r2,r2
  80d4a0:	1007883a 	mov	r3,r2
  80d4a4:	e0bffd17 	ldw	r2,-12(fp)
  80d4a8:	1885883a 	add	r2,r3,r2
  80d4ac:	10802804 	addi	r2,r2,160
  80d4b0:	10800017 	ldw	r2,0(r2)
  80d4b4:	11400017 	ldw	r5,0(r2)
  80d4b8:	e13fff17 	ldw	r4,-4(fp)
  80d4bc:	080707c0 	call	80707c <addObjToCollide>
			resetAlien(aliens[n+20], 10*n, n);
			addObjToCollide(col, aliens[n+20]->super);
		}
		break;
	case 6:
		for(n = 0; n < 10; n++) {
  80d4c0:	e0bffc17 	ldw	r2,-16(fp)
  80d4c4:	10800044 	addi	r2,r2,1
  80d4c8:	e0bffc15 	stw	r2,-16(fp)
  80d4cc:	e0bffc17 	ldw	r2,-16(fp)
  80d4d0:	10800290 	cmplti	r2,r2,10
  80d4d4:	103f8b1e 	bne	r2,zero,80d304 <checkStages+0xad0>
		}
		break;
	default:
		break;
	}
}
  80d4d8:	e037883a 	mov	sp,fp
  80d4dc:	dfc00317 	ldw	ra,12(sp)
  80d4e0:	df000217 	ldw	fp,8(sp)
  80d4e4:	dc400117 	ldw	r17,4(sp)
  80d4e8:	dc000017 	ldw	r16,0(sp)
  80d4ec:	dec00404 	addi	sp,sp,16
  80d4f0:	f800283a 	ret

0080d4f4 <mainMenu>:

void mainMenu(struct Cursor* mouse, struct CursorController* ctrl, struct Env* p) {
  80d4f4:	deffde04 	addi	sp,sp,-136
  80d4f8:	dfc02115 	stw	ra,132(sp)
  80d4fc:	df002015 	stw	fp,128(sp)
  80d500:	df002004 	addi	fp,sp,128
  80d504:	e13ffd15 	stw	r4,-12(fp)
  80d508:	e17ffe15 	stw	r5,-8(fp)
  80d50c:	e1bfff15 	stw	r6,-4(fp)
	cameraX = 160; cameraY = 120;
  80d510:	00802804 	movi	r2,160
  80d514:	d0bc2d15 	stw	r2,-3916(gp)
  80d518:	00801e04 	movi	r2,120
  80d51c:	d0bc3615 	stw	r2,-3880(gp)
	cameraZ = 320;
  80d520:	00805004 	movi	r2,320
  80d524:	d0bc3215 	stw	r2,-3896(gp)
  80d528:	008020f4 	movhi	r2,131
  80d52c:	109c9904 	addi	r2,r2,29284
  80d530:	10800017 	ldw	r2,0(r2)
  80d534:	100b883a 	mov	r5,r2
	alt_alarm_start (&alarm,alt_ticks_per_second(),my_alarm_callback,(void*)p);
  80d538:	010020f4 	movhi	r4,131
  80d53c:	211cbe04 	addi	r4,r4,29432
  80d540:	01802074 	movhi	r6,129
  80d544:	31abd404 	addi	r6,r6,-20656
  80d548:	e1ffff17 	ldw	r7,-4(fp)
  80d54c:	081d8d80 	call	81d8d8 <alt_alarm_start>

	alt_up_char_buffer_clear(char_buffer);
  80d550:	d13c2217 	ldw	r4,-3960(gp)
  80d554:	08218100 	call	821810 <alt_up_char_buffer_clear>
	alt_up_char_buffer_string(char_buffer, "Have FUN :)", 10, 5);
  80d558:	d13c2217 	ldw	r4,-3960(gp)
  80d55c:	014020f4 	movhi	r5,131
  80d560:	2961dc04 	addi	r5,r5,-30864
  80d564:	01800284 	movi	r6,10
  80d568:	01c00144 	movi	r7,5
  80d56c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>

		struct Box3D* box = initBox3D(200, 180, 20, 40, 0xCBAD);
  80d570:	00b2eb54 	movui	r2,52141
  80d574:	d8800015 	stw	r2,0(sp)
  80d578:	01003204 	movi	r4,200
  80d57c:	01402d04 	movi	r5,180
  80d580:	01800504 	movi	r6,20
  80d584:	01c00a04 	movi	r7,40
  80d588:	08017840 	call	801784 <initBox3D>
  80d58c:	e0bfe715 	stw	r2,-100(fp)
		box->animate = animateBox0;
  80d590:	e0ffe717 	ldw	r3,-100(fp)
  80d594:	00802034 	movhi	r2,128
  80d598:	108a9204 	addi	r2,r2,10824
  80d59c:	18801f15 	stw	r2,124(r3)
		struct Box3D* box1 = initBox3D(50, 80, 10, 20, 0xFF00);
  80d5a0:	00bfc014 	movui	r2,65280
  80d5a4:	d8800015 	stw	r2,0(sp)
  80d5a8:	01000c84 	movi	r4,50
  80d5ac:	01401404 	movi	r5,80
  80d5b0:	01800284 	movi	r6,10
  80d5b4:	01c00504 	movi	r7,20
  80d5b8:	08017840 	call	801784 <initBox3D>
  80d5bc:	e0bfe615 	stw	r2,-104(fp)
		box1->animate = animateBox1;
  80d5c0:	00c02034 	movhi	r3,128
  80d5c4:	18caeb04 	addi	r3,r3,11180
  80d5c8:	e0bfe617 	ldw	r2,-104(fp)
  80d5cc:	10c01f15 	stw	r3,124(r2)
		struct Box3D* box2 = initBox3D(250, 60, 5, 10, 0x0BA0);
  80d5d0:	0082e804 	movi	r2,2976
  80d5d4:	d8800015 	stw	r2,0(sp)
  80d5d8:	01003e84 	movi	r4,250
  80d5dc:	01400f04 	movi	r5,60
  80d5e0:	01800144 	movi	r6,5
  80d5e4:	01c00284 	movi	r7,10
  80d5e8:	08017840 	call	801784 <initBox3D>
  80d5ec:	e0bfe515 	stw	r2,-108(fp)
		box2->animate = animateBox2;
  80d5f0:	00c02034 	movhi	r3,128
  80d5f4:	18cb4704 	addi	r3,r3,11548
  80d5f8:	e0bfe517 	ldw	r2,-108(fp)
  80d5fc:	10c01f15 	stw	r3,124(r2)
		struct Frame* mainpage = initMainMenu(p, box, box1, box2, mouse);
  80d600:	e0bffd17 	ldw	r2,-12(fp)
  80d604:	d8800015 	stw	r2,0(sp)
  80d608:	e13fff17 	ldw	r4,-4(fp)
  80d60c:	e17fe717 	ldw	r5,-100(fp)
  80d610:	e1bfe617 	ldw	r6,-104(fp)
  80d614:	e1ffe517 	ldw	r7,-108(fp)
  80d618:	0808ee80 	call	808ee8 <initMainMenu>
  80d61c:	e0bfe415 	stw	r2,-112(fp)
		setFrameToCursor(mouse, mainpage);
  80d620:	e13ffd17 	ldw	r4,-12(fp)
  80d624:	e17fe417 	ldw	r5,-112(fp)
  80d628:	08082100 	call	808210 <setFrameToCursor>
		int k = 1;
  80d62c:	00800044 	movi	r2,1
  80d630:	e0bfe315 	stw	r2,-116(fp)
		int i;
		int* introPage;
		while(!loadSDImage("INTR.BMP", &introPage));
  80d634:	e17fe804 	addi	r5,fp,-96
  80d638:	010020f4 	movhi	r4,131
  80d63c:	2121df04 	addi	r4,r4,-30852
  80d640:	080b5040 	call	80b504 <loadSDImage>
  80d644:	1080005c 	xori	r2,r2,1
  80d648:	10803fcc 	andi	r2,r2,255
  80d64c:	1004c03a 	cmpne	r2,r2,zero
  80d650:	103ff81e 	bne	r2,zero,80d634 <mainMenu+0x140>
		while(info.start == 1){
  80d654:	00014106 	br	80db5c <mainMenu+0x668>
		  	//draw_nontransparent(mainpage->x, mainpage->y, mainpage->currImg->image,140, mouse);
		  //	mainpage->currImg = mainpage->currImg->next;
		//	i++;


		  	animateBox0(box);
  80d658:	e13fe717 	ldw	r4,-100(fp)
  80d65c:	0802a480 	call	802a48 <animateBox0>
		  	if(animateBox1(box1)) {
  80d660:	e13fe617 	ldw	r4,-104(fp)
  80d664:	0802bac0 	call	802bac <animateBox1>
  80d668:	10803fcc 	andi	r2,r2,255
  80d66c:	1005003a 	cmpeq	r2,r2,zero
  80d670:	1000731e 	bne	r2,zero,80d840 <mainMenu+0x34c>
		  		lock = 1;
  80d674:	00800044 	movi	r2,1
  80d678:	d0bc2415 	stw	r2,-3952(gp)
		  		alt_up_char_buffer_clear(char_buffer);
  80d67c:	d13c2217 	ldw	r4,-3960(gp)
  80d680:	08218100 	call	821810 <alt_up_char_buffer_clear>
		  		alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80d684:	d13c3317 	ldw	r4,-3892(gp)
  80d688:	000b883a 	mov	r5,zero
  80d68c:	0821b300 	call	821b30 <alt_up_pixel_buffer_dma_clear_screen>
		  		struct HighScore* highScores[MAX_NUM_HIGH_SCORES];
		  		int numHighScores;
		  		while((numHighScores =read_high_scores(highScores)) == -1) {
  80d690:	00000306 	br	80d6a0 <mainMenu+0x1ac>
		  			printf("reading high score fail\n");
  80d694:	010020f4 	movhi	r4,131
  80d698:	2121e204 	addi	r4,r4,-30840
  80d69c:	08158640 	call	815864 <puts>
		  		lock = 1;
		  		alt_up_char_buffer_clear(char_buffer);
		  		alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
		  		struct HighScore* highScores[MAX_NUM_HIGH_SCORES];
		  		int numHighScores;
		  		while((numHighScores =read_high_scores(highScores)) == -1) {
  80d6a0:	e13fe904 	addi	r4,fp,-92
  80d6a4:	080e8880 	call	80e888 <read_high_scores>
  80d6a8:	e0bfe115 	stw	r2,-124(fp)
  80d6ac:	e0bfe117 	ldw	r2,-124(fp)
  80d6b0:	10bfffe0 	cmpeqi	r2,r2,-1
  80d6b4:	103ff71e 	bne	r2,zero,80d694 <mainMenu+0x1a0>
		  			printf("reading high score fail\n");
		  		}
		  		show_high_scores(highScores, numHighScores);
  80d6b8:	e13fe904 	addi	r4,fp,-92
  80d6bc:	e17fe117 	ldw	r5,-124(fp)
  80d6c0:	080ed280 	call	80ed28 <show_high_scores>

		  		while(!isBitSet( byte1, 0 )) {
  80d6c4:	00001206 	br	80d710 <mainMenu+0x21c>
		  			updateCursorController(ctrl, 0);
  80d6c8:	e13ffe17 	ldw	r4,-8(fp)
  80d6cc:	000b883a 	mov	r5,zero
  80d6d0:	08084e40 	call	8084e4 <updateCursorController>
				  	IOWR_8DIRECT(LEDR_BASE, 0, k);
  80d6d4:	00c04234 	movhi	r3,264
  80d6d8:	18cd2804 	addi	r3,r3,13472
  80d6dc:	e0bfe317 	ldw	r2,-116(fp)
  80d6e0:	18800025 	stbio	r2,0(r3)
				  	usleep(10000);
  80d6e4:	0109c404 	movi	r4,10000
  80d6e8:	081e6f00 	call	81e6f0 <usleep>
				  	if(k > 65536) k = 1;
  80d6ec:	e0ffe317 	ldw	r3,-116(fp)
  80d6f0:	00800074 	movhi	r2,1
  80d6f4:	10c0030e 	bge	r2,r3,80d704 <mainMenu+0x210>
  80d6f8:	00800044 	movi	r2,1
  80d6fc:	e0bfe315 	stw	r2,-116(fp)
  80d700:	00000306 	br	80d710 <mainMenu+0x21c>
				  	else
				  		k = k << 1;
  80d704:	e0bfe317 	ldw	r2,-116(fp)
  80d708:	1085883a 	add	r2,r2,r2
  80d70c:	e0bfe315 	stw	r2,-116(fp)
		  		while((numHighScores =read_high_scores(highScores)) == -1) {
		  			printf("reading high score fail\n");
		  		}
		  		show_high_scores(highScores, numHighScores);

		  		while(!isBitSet( byte1, 0 )) {
  80d710:	008020f4 	movhi	r2,131
  80d714:	109c7a84 	addi	r2,r2,29162
  80d718:	10800003 	ldbu	r2,0(r2)
  80d71c:	11003fcc 	andi	r4,r2,255
  80d720:	2100201c 	xori	r4,r4,128
  80d724:	213fe004 	addi	r4,r4,-128
  80d728:	000b883a 	mov	r5,zero
  80d72c:	080174c0 	call	80174c <isBitSet>
  80d730:	1080005c 	xori	r2,r2,1
  80d734:	10803fcc 	andi	r2,r2,255
  80d738:	1004c03a 	cmpne	r2,r2,zero
  80d73c:	103fe21e 	bne	r2,zero,80d6c8 <mainMenu+0x1d4>
				  	usleep(10000);
				  	if(k > 65536) k = 1;
				  	else
				  		k = k << 1;
		  		}
		  		for(i = 0; i < MAX_NUM_HIGH_SCORES; i++) {
  80d740:	e03fe215 	stw	zero,-120(fp)
  80d744:	00000b06 	br	80d774 <mainMenu+0x280>
		  			safefree(&highScores[i]);
  80d748:	e0bfe217 	ldw	r2,-120(fp)
  80d74c:	1085883a 	add	r2,r2,r2
  80d750:	1085883a 	add	r2,r2,r2
  80d754:	1007883a 	mov	r3,r2
  80d758:	e0bfe904 	addi	r2,fp,-92
  80d75c:	10c5883a 	add	r2,r2,r3
  80d760:	1009883a 	mov	r4,r2
  80d764:	080af080 	call	80af08 <safefree>
				  	usleep(10000);
				  	if(k > 65536) k = 1;
				  	else
				  		k = k << 1;
		  		}
		  		for(i = 0; i < MAX_NUM_HIGH_SCORES; i++) {
  80d768:	e0bfe217 	ldw	r2,-120(fp)
  80d76c:	10800044 	addi	r2,r2,1
  80d770:	e0bfe215 	stw	r2,-120(fp)
  80d774:	e0bfe217 	ldw	r2,-120(fp)
  80d778:	10800510 	cmplti	r2,r2,20
  80d77c:	103ff21e 	bne	r2,zero,80d748 <mainMenu+0x254>
		  			safefree(&highScores[i]);
		  		}
		  		box1->endAnimate = false;
  80d780:	e0bfe617 	ldw	r2,-104(fp)
  80d784:	10001e45 	stb	zero,121(r2)
		  		box1->x = 50;
  80d788:	e0ffe617 	ldw	r3,-104(fp)
  80d78c:	00909234 	movhi	r2,16968
  80d790:	18800015 	stw	r2,0(r3)
		  		box1->y = 80;
  80d794:	e0ffe617 	ldw	r3,-104(fp)
  80d798:	0090a834 	movhi	r2,17056
  80d79c:	18800115 	stw	r2,4(r3)
		  		box1->z = 10;
  80d7a0:	e0ffe617 	ldw	r3,-104(fp)
  80d7a4:	00904834 	movhi	r2,16672
  80d7a8:	18800215 	stw	r2,8(r3)
		  		box1->vy = box1->vz = 0;
  80d7ac:	e0bfe617 	ldw	r2,-104(fp)
  80d7b0:	10000915 	stw	zero,36(r2)
  80d7b4:	e0bfe617 	ldw	r2,-104(fp)
  80d7b8:	10c00917 	ldw	r3,36(r2)
  80d7bc:	e0bfe617 	ldw	r2,-104(fp)
  80d7c0:	10c00815 	stw	r3,32(r2)
		  		alt_up_char_buffer_clear(char_buffer);
  80d7c4:	d13c2217 	ldw	r4,-3960(gp)
  80d7c8:	08218100 	call	821810 <alt_up_char_buffer_clear>
		  		alt_up_char_buffer_string(char_buffer, "Have FUN :)", 10, 5);
  80d7cc:	d13c2217 	ldw	r4,-3960(gp)
  80d7d0:	014020f4 	movhi	r5,131
  80d7d4:	2961dc04 	addi	r5,r5,-30864
  80d7d8:	01800284 	movi	r6,10
  80d7dc:	01c00144 	movi	r7,5
  80d7e0:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
		  		updateBox3D(box1);
  80d7e4:	e13fe617 	ldw	r4,-104(fp)
  80d7e8:	08020d40 	call	8020d4 <updateBox3D>
		  		lock = 0;
  80d7ec:	d03c2415 	stw	zero,-3952(gp)
			  	for(i = 0; i < mouse->curr_page->buttons_size; i++) {
  80d7f0:	e03fe215 	stw	zero,-120(fp)
  80d7f4:	00000d06 	br	80d82c <mainMenu+0x338>
		  			drawTxtButton(mouse->curr_page->buttons[i], mouse);
  80d7f8:	e0bffd17 	ldw	r2,-12(fp)
  80d7fc:	10800917 	ldw	r2,36(r2)
  80d800:	10c00917 	ldw	r3,36(r2)
  80d804:	e0bfe217 	ldw	r2,-120(fp)
  80d808:	1085883a 	add	r2,r2,r2
  80d80c:	1085883a 	add	r2,r2,r2
  80d810:	1885883a 	add	r2,r3,r2
  80d814:	11000017 	ldw	r4,0(r2)
  80d818:	e17ffd17 	ldw	r5,-12(fp)
  80d81c:	08062ac0 	call	8062ac <drawTxtButton>
		  		box1->vy = box1->vz = 0;
		  		alt_up_char_buffer_clear(char_buffer);
		  		alt_up_char_buffer_string(char_buffer, "Have FUN :)", 10, 5);
		  		updateBox3D(box1);
		  		lock = 0;
			  	for(i = 0; i < mouse->curr_page->buttons_size; i++) {
  80d820:	e0bfe217 	ldw	r2,-120(fp)
  80d824:	10800044 	addi	r2,r2,1
  80d828:	e0bfe215 	stw	r2,-120(fp)
  80d82c:	e0bffd17 	ldw	r2,-12(fp)
  80d830:	10800917 	ldw	r2,36(r2)
  80d834:	10c00717 	ldw	r3,28(r2)
  80d838:	e0bfe217 	ldw	r2,-120(fp)
  80d83c:	10ffee16 	blt	r2,r3,80d7f8 <mainMenu+0x304>
		  			drawTxtButton(mouse->curr_page->buttons[i], mouse);
		  		}
		  	}
		  if(animateBox2(box2)) {
  80d840:	e13fe517 	ldw	r4,-108(fp)
  80d844:	0802d1c0 	call	802d1c <animateBox2>
  80d848:	10803fcc 	andi	r2,r2,255
  80d84c:	1005003a 	cmpeq	r2,r2,zero
  80d850:	10005e1e 	bne	r2,zero,80d9cc <mainMenu+0x4d8>
			  lock = 1;
  80d854:	00800044 	movi	r2,1
  80d858:	d0bc2415 	stw	r2,-3952(gp)
			  alt_up_char_buffer_clear(char_buffer);
  80d85c:	d13c2217 	ldw	r4,-3960(gp)
  80d860:	08218100 	call	821810 <alt_up_char_buffer_clear>
			  alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80d864:	d13c3317 	ldw	r4,-3892(gp)
  80d868:	000b883a 	mov	r5,zero
  80d86c:	0821b300 	call	821b30 <alt_up_pixel_buffer_dma_clear_screen>

			  draw(40, 0, introPage, 240);
  80d870:	e1bfe817 	ldw	r6,-96(fp)
  80d874:	01000a04 	movi	r4,40
  80d878:	000b883a 	mov	r5,zero
  80d87c:	01c03c04 	movi	r7,240
  80d880:	0811f980 	call	811f98 <draw>
			  while(!isBitSet( byte1, 0 )) {
  80d884:	00001206 	br	80d8d0 <mainMenu+0x3dc>
			  	updateCursorController(ctrl, 0);
  80d888:	e13ffe17 	ldw	r4,-8(fp)
  80d88c:	000b883a 	mov	r5,zero
  80d890:	08084e40 	call	8084e4 <updateCursorController>
			  	IOWR_8DIRECT(LEDR_BASE, 0, k);
  80d894:	00c04234 	movhi	r3,264
  80d898:	18cd2804 	addi	r3,r3,13472
  80d89c:	e0bfe317 	ldw	r2,-116(fp)
  80d8a0:	18800025 	stbio	r2,0(r3)
			  	usleep(10000);
  80d8a4:	0109c404 	movi	r4,10000
  80d8a8:	081e6f00 	call	81e6f0 <usleep>
			  	if(k > 65536) k = 1;
  80d8ac:	e0ffe317 	ldw	r3,-116(fp)
  80d8b0:	00800074 	movhi	r2,1
  80d8b4:	10c0030e 	bge	r2,r3,80d8c4 <mainMenu+0x3d0>
  80d8b8:	00800044 	movi	r2,1
  80d8bc:	e0bfe315 	stw	r2,-116(fp)
  80d8c0:	00000306 	br	80d8d0 <mainMenu+0x3dc>
			  	else
			  		k = k << 1;
  80d8c4:	e0bfe317 	ldw	r2,-116(fp)
  80d8c8:	1085883a 	add	r2,r2,r2
  80d8cc:	e0bfe315 	stw	r2,-116(fp)
			  lock = 1;
			  alt_up_char_buffer_clear(char_buffer);
			  alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);

			  draw(40, 0, introPage, 240);
			  while(!isBitSet( byte1, 0 )) {
  80d8d0:	008020f4 	movhi	r2,131
  80d8d4:	109c7a84 	addi	r2,r2,29162
  80d8d8:	10800003 	ldbu	r2,0(r2)
  80d8dc:	11003fcc 	andi	r4,r2,255
  80d8e0:	2100201c 	xori	r4,r4,128
  80d8e4:	213fe004 	addi	r4,r4,-128
  80d8e8:	000b883a 	mov	r5,zero
  80d8ec:	080174c0 	call	80174c <isBitSet>
  80d8f0:	1080005c 	xori	r2,r2,1
  80d8f4:	10803fcc 	andi	r2,r2,255
  80d8f8:	1004c03a 	cmpne	r2,r2,zero
  80d8fc:	103fe21e 	bne	r2,zero,80d888 <mainMenu+0x394>
			  	usleep(10000);
			  	if(k > 65536) k = 1;
			  	else
			  		k = k << 1;
			  	}
			  box2->endAnimate = false;
  80d900:	e0bfe517 	ldw	r2,-108(fp)
  80d904:	10001e45 	stb	zero,121(r2)
			  box2->x = 280;
  80d908:	e0ffe517 	ldw	r3,-108(fp)
  80d90c:	0090e334 	movhi	r2,17292
  80d910:	18800015 	stw	r2,0(r3)
			  box2->y = 60;
  80d914:	e0ffe517 	ldw	r3,-108(fp)
  80d918:	00909c34 	movhi	r2,17008
  80d91c:	18800115 	stw	r2,4(r3)
			  box2->z = 5;
  80d920:	e0ffe517 	ldw	r3,-108(fp)
  80d924:	00902834 	movhi	r2,16544
  80d928:	18800215 	stw	r2,8(r3)
			  box2->vy = box2->vz = 0;
  80d92c:	e0bfe517 	ldw	r2,-108(fp)
  80d930:	10000915 	stw	zero,36(r2)
  80d934:	e0bfe517 	ldw	r2,-108(fp)
  80d938:	10c00917 	ldw	r3,36(r2)
  80d93c:	e0bfe517 	ldw	r2,-108(fp)
  80d940:	10c00815 	stw	r3,32(r2)
			  alt_up_char_buffer_clear(char_buffer);
  80d944:	d13c2217 	ldw	r4,-3960(gp)
  80d948:	08218100 	call	821810 <alt_up_char_buffer_clear>
			  alt_up_char_buffer_string(char_buffer, "Have FUN :)", 10, 5);
  80d94c:	d13c2217 	ldw	r4,-3960(gp)
  80d950:	014020f4 	movhi	r5,131
  80d954:	2961dc04 	addi	r5,r5,-30864
  80d958:	01800284 	movi	r6,10
  80d95c:	01c00144 	movi	r7,5
  80d960:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
			  alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80d964:	d13c3317 	ldw	r4,-3892(gp)
  80d968:	000b883a 	mov	r5,zero
  80d96c:	0821b300 	call	821b30 <alt_up_pixel_buffer_dma_clear_screen>
			  updateBox3D(box2);
  80d970:	e13fe517 	ldw	r4,-108(fp)
  80d974:	08020d40 	call	8020d4 <updateBox3D>
			  lock = 0;
  80d978:	d03c2415 	stw	zero,-3952(gp)
			  for(i = 0; i < mouse->curr_page->buttons_size; i++) {
  80d97c:	e03fe215 	stw	zero,-120(fp)
  80d980:	00000d06 	br	80d9b8 <mainMenu+0x4c4>
			  	drawTxtButton(mouse->curr_page->buttons[i], mouse);
  80d984:	e0bffd17 	ldw	r2,-12(fp)
  80d988:	10800917 	ldw	r2,36(r2)
  80d98c:	10c00917 	ldw	r3,36(r2)
  80d990:	e0bfe217 	ldw	r2,-120(fp)
  80d994:	1085883a 	add	r2,r2,r2
  80d998:	1085883a 	add	r2,r2,r2
  80d99c:	1885883a 	add	r2,r3,r2
  80d9a0:	11000017 	ldw	r4,0(r2)
  80d9a4:	e17ffd17 	ldw	r5,-12(fp)
  80d9a8:	08062ac0 	call	8062ac <drawTxtButton>
			  alt_up_char_buffer_clear(char_buffer);
			  alt_up_char_buffer_string(char_buffer, "Have FUN :)", 10, 5);
			  alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
			  updateBox3D(box2);
			  lock = 0;
			  for(i = 0; i < mouse->curr_page->buttons_size; i++) {
  80d9ac:	e0bfe217 	ldw	r2,-120(fp)
  80d9b0:	10800044 	addi	r2,r2,1
  80d9b4:	e0bfe215 	stw	r2,-120(fp)
  80d9b8:	e0bffd17 	ldw	r2,-12(fp)
  80d9bc:	10800917 	ldw	r2,36(r2)
  80d9c0:	10c00717 	ldw	r3,28(r2)
  80d9c4:	e0bfe217 	ldw	r2,-120(fp)
  80d9c8:	10ffee16 	blt	r2,r3,80d984 <mainMenu+0x490>
			  	drawTxtButton(mouse->curr_page->buttons[i], mouse);
			  }
		  }
		  	drawBox3D(box, 0, 0xCBAD);
  80d9cc:	e13fe717 	ldw	r4,-100(fp)
  80d9d0:	000b883a 	mov	r5,zero
  80d9d4:	01b2eb54 	movui	r6,52141
  80d9d8:	0801db80 	call	801db8 <drawBox3D>
		  	drawBox3D(box1, 0, 0xFF00);
  80d9dc:	e13fe617 	ldw	r4,-104(fp)
  80d9e0:	000b883a 	mov	r5,zero
  80d9e4:	01bfc014 	movui	r6,65280
  80d9e8:	0801db80 	call	801db8 <drawBox3D>
		  	drawBox3D(box2, 0, 0x0BA0);
  80d9ec:	e13fe517 	ldw	r4,-108(fp)
  80d9f0:	000b883a 	mov	r5,zero
  80d9f4:	0182e804 	movi	r6,2976
  80d9f8:	0801db80 	call	801db8 <drawBox3D>
		  	 updateCursorController(ctrl, 7);
  80d9fc:	e13ffe17 	ldw	r4,-8(fp)
  80da00:	01503834 	movhi	r5,16608
  80da04:	08084e40 	call	8084e4 <updateCursorController>
		  	 IOWR_8DIRECT(LEDR_BASE, 0, k);
  80da08:	00c04234 	movhi	r3,264
  80da0c:	18cd2804 	addi	r3,r3,13472
  80da10:	e0bfe317 	ldw	r2,-116(fp)
  80da14:	18800025 	stbio	r2,0(r3)
		  	 usleep(6000);
  80da18:	0105dc04 	movi	r4,6000
  80da1c:	081e6f00 	call	81e6f0 <usleep>
		  	 if(k > 65536) k = 1;
  80da20:	e0ffe317 	ldw	r3,-116(fp)
  80da24:	00800074 	movhi	r2,1
  80da28:	10c0030e 	bge	r2,r3,80da38 <mainMenu+0x544>
  80da2c:	00800044 	movi	r2,1
  80da30:	e0bfe315 	stw	r2,-116(fp)
  80da34:	00000306 	br	80da44 <mainMenu+0x550>
		  	 else
		  		 k = k << 1;
  80da38:	e0bfe317 	ldw	r2,-116(fp)
  80da3c:	1085883a 	add	r2,r2,r2
  80da40:	e0bfe315 	stw	r2,-116(fp)
			if(isKeyDown(3)){
  80da44:	010000c4 	movi	r4,3
  80da48:	080f7480 	call	80f748 <isKeyDown>
  80da4c:	10803fcc 	andi	r2,r2,255
  80da50:	1005003a 	cmpeq	r2,r2,zero
  80da54:	10000c1e 	bne	r2,zero,80da88 <mainMenu+0x594>
					if(cameraX > 5)
  80da58:	d0bc2d17 	ldw	r2,-3916(gp)
  80da5c:	10800190 	cmplti	r2,r2,6
  80da60:	1000031e 	bne	r2,zero,80da70 <mainMenu+0x57c>
						cameraX-=5;
  80da64:	d0bc2d17 	ldw	r2,-3916(gp)
  80da68:	10bffec4 	addi	r2,r2,-5
  80da6c:	d0bc2d15 	stw	r2,-3916(gp)
					updateBox3D(box);
  80da70:	e13fe717 	ldw	r4,-100(fp)
  80da74:	08020d40 	call	8020d4 <updateBox3D>
					updateBox3D(box1);
  80da78:	e13fe617 	ldw	r4,-104(fp)
  80da7c:	08020d40 	call	8020d4 <updateBox3D>
					updateBox3D(box2);
  80da80:	e13fe517 	ldw	r4,-108(fp)
  80da84:	08020d40 	call	8020d4 <updateBox3D>
				  	setXY(mouse->curr_page->buttons[1]->super, cameraX + (box1->x-cameraX)*cameraZ/(cameraZ+box1->z), cameraY - (cameraY-box1->y)*cameraZ/(cameraZ+box1->z));
				  	drawTxtButton(mouse->curr_page->buttons[1], mouse);
				  	setXY(mouse->curr_page->buttons[2]->super, cameraX + (box2->x-cameraX)*cameraZ/(cameraZ+box2->z), cameraY - (cameraY-box2->y)*cameraZ/(cameraZ+box2->z));
				  	drawTxtButton(mouse->curr_page->buttons[2], mouse);*/
				}
				if(isKeyDown(2)){
  80da88:	01000084 	movi	r4,2
  80da8c:	080f7480 	call	80f748 <isKeyDown>
  80da90:	10803fcc 	andi	r2,r2,255
  80da94:	1005003a 	cmpeq	r2,r2,zero
  80da98:	10000c1e 	bne	r2,zero,80dacc <mainMenu+0x5d8>
					if(cameraX < 315)
  80da9c:	d0bc2d17 	ldw	r2,-3916(gp)
  80daa0:	10804ec8 	cmpgei	r2,r2,315
  80daa4:	1000031e 	bne	r2,zero,80dab4 <mainMenu+0x5c0>
						cameraX+=5;
  80daa8:	d0bc2d17 	ldw	r2,-3916(gp)
  80daac:	10800144 	addi	r2,r2,5
  80dab0:	d0bc2d15 	stw	r2,-3916(gp)
					updateBox3D(box);
  80dab4:	e13fe717 	ldw	r4,-100(fp)
  80dab8:	08020d40 	call	8020d4 <updateBox3D>
					updateBox3D(box1);
  80dabc:	e13fe617 	ldw	r4,-104(fp)
  80dac0:	08020d40 	call	8020d4 <updateBox3D>
					updateBox3D(box2);
  80dac4:	e13fe517 	ldw	r4,-108(fp)
  80dac8:	08020d40 	call	8020d4 <updateBox3D>
					drawTxtButton(mouse->curr_page->buttons[1], mouse);
					setXY(mouse->curr_page->buttons[2]->super, cameraX + (box2->x-cameraX)*cameraZ/(cameraZ+box2->z), cameraY - (cameraY-box2->y)*cameraZ/(cameraZ+box2->z));
					drawTxtButton(mouse->curr_page->buttons[2], mouse);*/

				}
				if(isKeyDown(1)){
  80dacc:	01000044 	movi	r4,1
  80dad0:	080f7480 	call	80f748 <isKeyDown>
  80dad4:	10803fcc 	andi	r2,r2,255
  80dad8:	1005003a 	cmpeq	r2,r2,zero
  80dadc:	10000c1e 	bne	r2,zero,80db10 <mainMenu+0x61c>
					if(cameraY < 235)
  80dae0:	d0bc3617 	ldw	r2,-3880(gp)
  80dae4:	10803ac8 	cmpgei	r2,r2,235
  80dae8:	1000031e 	bne	r2,zero,80daf8 <mainMenu+0x604>
						cameraY+=5;
  80daec:	d0bc3617 	ldw	r2,-3880(gp)
  80daf0:	10800144 	addi	r2,r2,5
  80daf4:	d0bc3615 	stw	r2,-3880(gp)
					updateBox3D(box);
  80daf8:	e13fe717 	ldw	r4,-100(fp)
  80dafc:	08020d40 	call	8020d4 <updateBox3D>
					updateBox3D(box1);
  80db00:	e13fe617 	ldw	r4,-104(fp)
  80db04:	08020d40 	call	8020d4 <updateBox3D>
					updateBox3D(box2);
  80db08:	e13fe517 	ldw	r4,-108(fp)
  80db0c:	08020d40 	call	8020d4 <updateBox3D>
					setXY(mouse->curr_page->buttons[2]->super, cameraX + (box2->x-cameraX)*cameraZ/(cameraZ+box2->z), cameraY - (cameraY-box2->y)*cameraZ/(cameraZ+box2->z));
					drawTxtButton(mouse->curr_page->buttons[2], mouse);*/
					//setXY(startButton->super, cameraX + (box->x-cameraX)*cameraZ/(cameraZ+box->z), cameraY - (cameraY-box->y)*cameraZ/(cameraZ+box->z));

				}
				if(isKeyDown(0)){
  80db10:	0009883a 	mov	r4,zero
  80db14:	080f7480 	call	80f748 <isKeyDown>
  80db18:	10803fcc 	andi	r2,r2,255
  80db1c:	1005003a 	cmpeq	r2,r2,zero
  80db20:	10000c1e 	bne	r2,zero,80db54 <mainMenu+0x660>
					if(cameraY > 5)
  80db24:	d0bc3617 	ldw	r2,-3880(gp)
  80db28:	10800190 	cmplti	r2,r2,6
  80db2c:	1000031e 	bne	r2,zero,80db3c <mainMenu+0x648>
						cameraY-=5;
  80db30:	d0bc3617 	ldw	r2,-3880(gp)
  80db34:	10bffec4 	addi	r2,r2,-5
  80db38:	d0bc3615 	stw	r2,-3880(gp)
					updateBox3D(box);
  80db3c:	e13fe717 	ldw	r4,-100(fp)
  80db40:	08020d40 	call	8020d4 <updateBox3D>
					updateBox3D(box1);
  80db44:	e13fe617 	ldw	r4,-104(fp)
  80db48:	08020d40 	call	8020d4 <updateBox3D>
					updateBox3D(box2);
  80db4c:	e13fe517 	ldw	r4,-108(fp)
  80db50:	08020d40 	call	8020d4 <updateBox3D>
					drawTxtButton(mouse->curr_page->buttons[1], mouse);
					setXY(mouse->curr_page->buttons[2]->super, cameraX + (box2->x-cameraX)*cameraZ/(cameraZ+box2->z), cameraY - (cameraY-box2->y)*cameraZ/(cameraZ+box2->z));
					drawTxtButton(mouse->curr_page->buttons[2], mouse);*/

				}
				usleep(5000);
  80db54:	0104e204 	movi	r4,5000
  80db58:	081e6f00 	call	81e6f0 <usleep>
		setFrameToCursor(mouse, mainpage);
		int k = 1;
		int i;
		int* introPage;
		while(!loadSDImage("INTR.BMP", &introPage));
		while(info.start == 1){
  80db5c:	008020f4 	movhi	r2,131
  80db60:	109cb404 	addi	r2,r2,29392
  80db64:	10800617 	ldw	r2,24(r2)
  80db68:	10800060 	cmpeqi	r2,r2,1
  80db6c:	103eba1e 	bne	r2,zero,80d658 <mainMenu+0x164>
				}
				usleep(5000);
		}
		//killAnimation(mainpage->stats[0], mainpage->scale);
		//killObject(mainpage);
		free(introPage);
  80db70:	e13fe817 	ldw	r4,-96(fp)
  80db74:	0814f440 	call	814f44 <free>
		introPage = NULL;
  80db78:	e03fe815 	stw	zero,-96(fp)
		killBox(box);
  80db7c:	e13fe717 	ldw	r4,-100(fp)
  80db80:	08020040 	call	802004 <killBox>
		killBox(box1);
  80db84:	e13fe617 	ldw	r4,-104(fp)
  80db88:	08020040 	call	802004 <killBox>
		killBox(box2);
  80db8c:	e13fe517 	ldw	r4,-108(fp)
  80db90:	08020040 	call	802004 <killBox>
		removeFrame(mainpage);
  80db94:	e13fe417 	ldw	r4,-112(fp)
  80db98:	08095280 	call	809528 <removeFrame>
	//	usleep(5000);
		alt_up_char_buffer_clear(char_buffer); //remove menu characters
  80db9c:	d13c2217 	ldw	r4,-3960(gp)
  80dba0:	08218100 	call	821810 <alt_up_char_buffer_clear>

		swap = 0; //start using only one buffer
  80dba4:	d03c2615 	stw	zero,-3944(gp)

		alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80dba8:	d13c3317 	ldw	r4,-3892(gp)
  80dbac:	000b883a 	mov	r5,zero
  80dbb0:	0821b300 	call	821b30 <alt_up_pixel_buffer_dma_clear_screen>
		IOWR_8DIRECT(LEDR_BASE, 0, 0);
  80dbb4:	00804234 	movhi	r2,264
  80dbb8:	108d2804 	addi	r2,r2,13472
  80dbbc:	10000025 	stbio	zero,0(r2)
		alt_alarm_stop(&alarm);
  80dbc0:	010020f4 	movhi	r4,131
  80dbc4:	211cbe04 	addi	r4,r4,29432
  80dbc8:	081e54c0 	call	81e54c <alt_alarm_stop>

}
  80dbcc:	e037883a 	mov	sp,fp
  80dbd0:	dfc00117 	ldw	ra,4(sp)
  80dbd4:	df000017 	ldw	fp,0(sp)
  80dbd8:	dec00204 	addi	sp,sp,8
  80dbdc:	f800283a 	ret

0080dbe0 <gameSetup>:

void gameSetup(struct Env* p, struct animation** shipAnimationCollection, struct Cursor* mouse, struct animation* starAnimation, struct animation* star2Animation) {
  80dbe0:	defff604 	addi	sp,sp,-40
  80dbe4:	dfc00915 	stw	ra,36(sp)
  80dbe8:	df000815 	stw	fp,32(sp)
  80dbec:	df000804 	addi	fp,sp,32
  80dbf0:	e13ffc15 	stw	r4,-16(fp)
  80dbf4:	e17ffd15 	stw	r5,-12(fp)
  80dbf8:	e1bffe15 	stw	r6,-8(fp)
  80dbfc:	e1ffff15 	stw	r7,-4(fp)
	backgroundImage();
  80dc00:	080bbe00 	call	80bbe0 <backgroundImage>
	//restart the timer

	gamePanel = *initGamePanel(250, 0, 320, 240, p, shipAnimationCollection);
  80dc04:	e0bffc17 	ldw	r2,-16(fp)
  80dc08:	d8800015 	stw	r2,0(sp)
  80dc0c:	e0bffd17 	ldw	r2,-12(fp)
  80dc10:	d8800115 	stw	r2,4(sp)
  80dc14:	01003e84 	movi	r4,250
  80dc18:	000b883a 	mov	r5,zero
  80dc1c:	01805004 	movi	r6,320
  80dc20:	01c03c04 	movi	r7,240
  80dc24:	08095e40 	call	8095e4 <initGamePanel>
  80dc28:	1007883a 	mov	r3,r2
  80dc2c:	008020f4 	movhi	r2,131
  80dc30:	109cc404 	addi	r2,r2,29456
  80dc34:	1009883a 	mov	r4,r2
  80dc38:	180b883a 	mov	r5,r3
  80dc3c:	01801004 	movi	r6,64
  80dc40:	08156ac0 	call	8156ac <memcpy>
	setPanelToCursor(mouse, &gamePanel);
  80dc44:	e13ffe17 	ldw	r4,-8(fp)
  80dc48:	014020f4 	movhi	r5,131
  80dc4c:	295cc404 	addi	r5,r5,29456
  80dc50:	08082400 	call	808240 <setPanelToCursor>

	struct Object* star1 = initObject(100, 150, 10, starAnimation, NULL);
  80dc54:	d8000015 	stw	zero,0(sp)
  80dc58:	01001904 	movi	r4,100
  80dc5c:	01402584 	movi	r5,150
  80dc60:	01800284 	movi	r6,10
  80dc64:	e1ffff17 	ldw	r7,-4(fp)
  80dc68:	080fe780 	call	80fe78 <initObject>
  80dc6c:	e0bffb15 	stw	r2,-20(fp)
	star1->action = starAction;
  80dc70:	e0fffb17 	ldw	r3,-20(fp)
  80dc74:	00802074 	movhi	r2,129
  80dc78:	10b1eb04 	addi	r2,r2,-14420
  80dc7c:	18801b15 	stw	r2,108(r3)
	addToEnv(p, star1);
  80dc80:	e13ffc17 	ldw	r4,-16(fp)
  80dc84:	e17ffb17 	ldw	r5,-20(fp)
  80dc88:	0808a100 	call	808a10 <addToEnv>
	struct Object* star2 = initObject(10, 60, 10, star2Animation, NULL);
  80dc8c:	d8000015 	stw	zero,0(sp)
  80dc90:	01000284 	movi	r4,10
  80dc94:	01400f04 	movi	r5,60
  80dc98:	01800284 	movi	r6,10
  80dc9c:	e1c00217 	ldw	r7,8(fp)
  80dca0:	080fe780 	call	80fe78 <initObject>
  80dca4:	e0bffa15 	stw	r2,-24(fp)
	star2->action = starAction;
  80dca8:	e0fffa17 	ldw	r3,-24(fp)
  80dcac:	00802074 	movhi	r2,129
  80dcb0:	10b1eb04 	addi	r2,r2,-14420
  80dcb4:	18801b15 	stw	r2,108(r3)
	addToEnv(p, star2);
  80dcb8:	e13ffc17 	ldw	r4,-16(fp)
  80dcbc:	e17ffa17 	ldw	r5,-24(fp)
  80dcc0:	0808a100 	call	808a10 <addToEnv>
	info.isEnd = false;
  80dcc4:	008020f4 	movhi	r2,131
  80dcc8:	109cb404 	addi	r2,r2,29392
  80dccc:	10000715 	stw	zero,28(r2)
}
  80dcd0:	e037883a 	mov	sp,fp
  80dcd4:	dfc00117 	ldw	ra,4(sp)
  80dcd8:	df000017 	ldw	fp,0(sp)
  80dcdc:	dec00204 	addi	sp,sp,8
  80dce0:	f800283a 	ret

0080dce4 <endGame>:

void endGame(struct Alien** aliens, struct Collidable* col, struct Env* env, struct Cursor* mouse, struct CursorController* ctrl, struct KeyController* keyController) {
  80dce4:	defff404 	addi	sp,sp,-48
  80dce8:	dfc00b15 	stw	ra,44(sp)
  80dcec:	df000a15 	stw	fp,40(sp)
  80dcf0:	df000a04 	addi	fp,sp,40
  80dcf4:	e13ffc15 	stw	r4,-16(fp)
  80dcf8:	e17ffd15 	stw	r5,-12(fp)
  80dcfc:	e1bffe15 	stw	r6,-8(fp)
  80dd00:	e1ffff15 	stw	r7,-4(fp)
	int i, j;
	int* endImage;
	int soundToPlay;
	if(info.isWin)
  80dd04:	008020f4 	movhi	r2,131
  80dd08:	109cb404 	addi	r2,r2,29392
  80dd0c:	10800817 	ldw	r2,32(r2)
  80dd10:	1005003a 	cmpeq	r2,r2,zero
  80dd14:	1000091e 	bne	r2,zero,80dd3c <endGame+0x58>
	{
		//soundToPlay = WIN_SOUND;
		while(!loadSDImage("WIN.BMP", &endImage));
  80dd18:	e17ffb04 	addi	r5,fp,-20
  80dd1c:	010020f4 	movhi	r4,131
  80dd20:	2121e804 	addi	r4,r4,-30816
  80dd24:	080b5040 	call	80b504 <loadSDImage>
  80dd28:	1080005c 	xori	r2,r2,1
  80dd2c:	10803fcc 	andi	r2,r2,255
  80dd30:	1004c03a 	cmpne	r2,r2,zero
  80dd34:	103ff81e 	bne	r2,zero,80dd18 <endGame+0x34>
  80dd38:	00000806 	br	80dd5c <endGame+0x78>
	}
	else
	{
		//soundToPlay = LOSE_SOUND;
		while(!loadSDImage("END.BMP", &endImage));
  80dd3c:	e17ffb04 	addi	r5,fp,-20
  80dd40:	010020f4 	movhi	r4,131
  80dd44:	2121ea04 	addi	r4,r4,-30808
  80dd48:	080b5040 	call	80b504 <loadSDImage>
  80dd4c:	1080005c 	xori	r2,r2,1
  80dd50:	10803fcc 	andi	r2,r2,255
  80dd54:	1004c03a 	cmpne	r2,r2,zero
  80dd58:	103ff81e 	bne	r2,zero,80dd3c <endGame+0x58>
	}
	unloadSoundById( audioController, LOSE_LIFE_SOUND );
  80dd5c:	d13c2917 	ldw	r4,-3932(gp)
  80dd60:	01400184 	movi	r5,6
  80dd64:	08013300 	call	801330 <unloadSoundById>
	unloadSoundById( audioController, TOWER_UPGRADE_SOUND );
  80dd68:	d13c2917 	ldw	r4,-3932(gp)
  80dd6c:	01400144 	movi	r5,5
  80dd70:	08013300 	call	801330 <unloadSoundById>
	//loadSound(audioController, soundToPlay);
	for(i = 0; i < 60; i++) {
  80dd74:	e03ffa15 	stw	zero,-24(fp)
  80dd78:	00002006 	br	80ddfc <endGame+0x118>
		removeFromCollide(col, aliens[i]->super);
  80dd7c:	e0bffa17 	ldw	r2,-24(fp)
  80dd80:	1085883a 	add	r2,r2,r2
  80dd84:	1085883a 	add	r2,r2,r2
  80dd88:	1007883a 	mov	r3,r2
  80dd8c:	e0bffc17 	ldw	r2,-16(fp)
  80dd90:	1885883a 	add	r2,r3,r2
  80dd94:	10800017 	ldw	r2,0(r2)
  80dd98:	11400017 	ldw	r5,0(r2)
  80dd9c:	e13ffd17 	ldw	r4,-12(fp)
  80dda0:	08071200 	call	807120 <removeFromCollide>
		resetAlien(aliens[i], 0, 0);
  80dda4:	e0bffa17 	ldw	r2,-24(fp)
  80dda8:	1085883a 	add	r2,r2,r2
  80ddac:	1085883a 	add	r2,r2,r2
  80ddb0:	1007883a 	mov	r3,r2
  80ddb4:	e0bffc17 	ldw	r2,-16(fp)
  80ddb8:	1885883a 	add	r2,r3,r2
  80ddbc:	11000017 	ldw	r4,0(r2)
  80ddc0:	000b883a 	mov	r5,zero
  80ddc4:	000d883a 	mov	r6,zero
  80ddc8:	08003400 	call	800340 <resetAlien>
		aliens[i]->super->isRunable = 0;
  80ddcc:	e0bffa17 	ldw	r2,-24(fp)
  80ddd0:	1085883a 	add	r2,r2,r2
  80ddd4:	1085883a 	add	r2,r2,r2
  80ddd8:	1007883a 	mov	r3,r2
  80dddc:	e0bffc17 	ldw	r2,-16(fp)
  80dde0:	1885883a 	add	r2,r3,r2
  80dde4:	10800017 	ldw	r2,0(r2)
  80dde8:	10800017 	ldw	r2,0(r2)
  80ddec:	10001715 	stw	zero,92(r2)
		while(!loadSDImage("END.BMP", &endImage));
	}
	unloadSoundById( audioController, LOSE_LIFE_SOUND );
	unloadSoundById( audioController, TOWER_UPGRADE_SOUND );
	//loadSound(audioController, soundToPlay);
	for(i = 0; i < 60; i++) {
  80ddf0:	e0bffa17 	ldw	r2,-24(fp)
  80ddf4:	10800044 	addi	r2,r2,1
  80ddf8:	e0bffa15 	stw	r2,-24(fp)
  80ddfc:	e0bffa17 	ldw	r2,-24(fp)
  80de00:	10800f10 	cmplti	r2,r2,60
  80de04:	103fdd1e 	bne	r2,zero,80dd7c <endGame+0x98>
		removeFromCollide(col, aliens[i]->super);
		resetAlien(aliens[i], 0, 0);
		aliens[i]->super->isRunable = 0;
	}
	i = 0;
  80de08:	e03ffa15 	stw	zero,-24(fp)
	int size = env->size;
  80de0c:	e0bffe17 	ldw	r2,-8(fp)
  80de10:	10800117 	ldw	r2,4(r2)
  80de14:	e0bff715 	stw	r2,-36(fp)
	for(j = size-1; j >= 0; j--) {
  80de18:	e0bff717 	ldw	r2,-36(fp)
  80de1c:	10bfffc4 	addi	r2,r2,-1
  80de20:	e0bff915 	stw	r2,-28(fp)
  80de24:	00001606 	br	80de80 <endGame+0x19c>
		if(env->o[j]->class != cursor)
  80de28:	e0bffe17 	ldw	r2,-8(fp)
  80de2c:	10c00017 	ldw	r3,0(r2)
  80de30:	e0bff917 	ldw	r2,-28(fp)
  80de34:	1085883a 	add	r2,r2,r2
  80de38:	1085883a 	add	r2,r2,r2
  80de3c:	1885883a 	add	r2,r3,r2
  80de40:	10800017 	ldw	r2,0(r2)
  80de44:	10801117 	ldw	r2,68(r2)
  80de48:	10800120 	cmpeqi	r2,r2,4
  80de4c:	1000091e 	bne	r2,zero,80de74 <endGame+0x190>
			removeFromEnv(env, env->o[j]);
  80de50:	e0bffe17 	ldw	r2,-8(fp)
  80de54:	10c00017 	ldw	r3,0(r2)
  80de58:	e0bff917 	ldw	r2,-28(fp)
  80de5c:	1085883a 	add	r2,r2,r2
  80de60:	1085883a 	add	r2,r2,r2
  80de64:	1885883a 	add	r2,r3,r2
  80de68:	11400017 	ldw	r5,0(r2)
  80de6c:	e13ffe17 	ldw	r4,-8(fp)
  80de70:	0808acc0 	call	808acc <removeFromEnv>
		resetAlien(aliens[i], 0, 0);
		aliens[i]->super->isRunable = 0;
	}
	i = 0;
	int size = env->size;
	for(j = size-1; j >= 0; j--) {
  80de74:	e0bff917 	ldw	r2,-28(fp)
  80de78:	10bfffc4 	addi	r2,r2,-1
  80de7c:	e0bff915 	stw	r2,-28(fp)
  80de80:	e0bff917 	ldw	r2,-28(fp)
  80de84:	1004403a 	cmpge	r2,r2,zero
  80de88:	103fe71e 	bne	r2,zero,80de28 <endGame+0x144>
		if(env->o[j]->class != cursor)
			removeFromEnv(env, env->o[j]);
	}

	setXY(mouse->super, 300, 200);
  80de8c:	e0bfff17 	ldw	r2,-4(fp)
  80de90:	11000017 	ldw	r4,0(r2)
  80de94:	01404b04 	movi	r5,300
  80de98:	01803204 	movi	r6,200
  80de9c:	081016c0 	call	81016c <setXY>
	clearPanelFromCursor(mouse);
  80dea0:	e13fff17 	ldw	r4,-4(fp)
  80dea4:	080835c0 	call	80835c <clearPanelFromCursor>

//	playSoundById(audioController, soundToPlay, 0);

	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80dea8:	d13c3317 	ldw	r4,-3892(gp)
  80deac:	000b883a 	mov	r5,zero
  80deb0:	0821b300 	call	821b30 <alt_up_pixel_buffer_dma_clear_screen>
	drawRec(0, 0, endImage, 240, 240);
  80deb4:	e1bffb17 	ldw	r6,-20(fp)
  80deb8:	00803c04 	movi	r2,240
  80debc:	d8800015 	stw	r2,0(sp)
  80dec0:	0009883a 	mov	r4,zero
  80dec4:	000b883a 	mov	r5,zero
  80dec8:	01c03c04 	movi	r7,240
  80decc:	08120e40 	call	8120e4 <drawRec>

	start_high_score_screen( info.score, keyController );
  80ded0:	008020f4 	movhi	r2,131
  80ded4:	109cb404 	addi	r2,r2,29392
  80ded8:	11000017 	ldw	r4,0(r2)
  80dedc:	e1400317 	ldw	r5,12(fp)
  80dee0:	080f1980 	call	80f198 <start_high_score_screen>
	while(1){
		//lets hold here for now
		waveLEDR();
  80dee4:	080f3f40 	call	80f3f4 <waveLEDR>
	}
  80dee8:	003ffe06 	br	80dee4 <endGame+0x200>

0080deec <initWeapon>:
}
void initWeapon(struct Collidable* collisionChecker, struct Env* p) {
  80deec:	defff304 	addi	sp,sp,-52
  80def0:	dfc00c15 	stw	ra,48(sp)
  80def4:	df000b15 	stw	fp,44(sp)
  80def8:	df000b04 	addi	fp,sp,44
  80defc:	e13ffe15 	stw	r4,-8(fp)
  80df00:	e17fff15 	stw	r5,-4(fp)
	struct animation* bulletImage = initAnimation(star, 1);
  80df04:	010020f4 	movhi	r4,131
  80df08:	21005704 	addi	r4,r4,348
  80df0c:	01400044 	movi	r5,1
  80df10:	0811d7c0 	call	811d7c <initAnimation>
  80df14:	e0bffb15 	stw	r2,-20(fp)
	struct animation* bullet4Image = loadSDImageSeq("W00.BMP", 2, 30); // fire bomb
  80df18:	010020f4 	movhi	r4,131
  80df1c:	2121ec04 	addi	r4,r4,-30800
  80df20:	01400084 	movi	r5,2
  80df24:	01800784 	movi	r6,30
  80df28:	080b8740 	call	80b874 <loadSDImageSeq>
  80df2c:	e0bffa15 	stw	r2,-24(fp)
	struct animation* bullet2Image = loadSDImageSeq("I0.BMP", 1, 16); // black hole
  80df30:	010020f4 	movhi	r4,131
  80df34:	2121ee04 	addi	r4,r4,-30792
  80df38:	01400044 	movi	r5,1
  80df3c:	01800404 	movi	r6,16
  80df40:	080b8740 	call	80b874 <loadSDImageSeq>
  80df44:	e0bff915 	stw	r2,-28(fp)
	struct animation* bullet5Image = loadSDImageSeq("W50.BMP", 2, 2); // freezing bomb
  80df48:	010020f4 	movhi	r4,131
  80df4c:	2121f004 	addi	r4,r4,-30784
  80df50:	01400084 	movi	r5,2
  80df54:	01800084 	movi	r6,2
  80df58:	080b8740 	call	80b874 <loadSDImageSeq>
  80df5c:	e0bff815 	stw	r2,-32(fp)

	struct animation* explode0 = initAnimation((int*)explode11, 1);
  80df60:	010020f4 	movhi	r4,131
  80df64:	21264d04 	addi	r4,r4,-26316
  80df68:	01400044 	movi	r5,1
  80df6c:	0811d7c0 	call	811d7c <initAnimation>
  80df70:	e0bff715 	stw	r2,-36(fp)
	addImage(explode0, initAnimation((int*)explode12, 0));
  80df74:	010020f4 	movhi	r4,131
  80df78:	2126b104 	addi	r4,r4,-25916
  80df7c:	000b883a 	mov	r5,zero
  80df80:	0811d7c0 	call	811d7c <initAnimation>
  80df84:	100b883a 	mov	r5,r2
  80df88:	e13ff717 	ldw	r4,-36(fp)
  80df8c:	0811f180 	call	811f18 <addImage>
	addImage(explode0, initAnimation((int*)explode13, 0));
  80df90:	010020f4 	movhi	r4,131
  80df94:	21271504 	addi	r4,r4,-25516
  80df98:	000b883a 	mov	r5,zero
  80df9c:	0811d7c0 	call	811d7c <initAnimation>
  80dfa0:	100b883a 	mov	r5,r2
  80dfa4:	e13ff717 	ldw	r4,-36(fp)
  80dfa8:	0811f180 	call	811f18 <addImage>
	addImage(explode0, initAnimation((int*)explode14, 0));
  80dfac:	010020f4 	movhi	r4,131
  80dfb0:	21277904 	addi	r4,r4,-25116
  80dfb4:	000b883a 	mov	r5,zero
  80dfb8:	0811d7c0 	call	811d7c <initAnimation>
  80dfbc:	100b883a 	mov	r5,r2
  80dfc0:	e13ff717 	ldw	r4,-36(fp)
  80dfc4:	0811f180 	call	811f18 <addImage>

	int* fireballs = NULL;
  80dfc8:	e03ffc15 	stw	zero,-16(fp)
	while(!loadSDImage("FB2.BMP", &fireballs)) {
  80dfcc:	00000306 	br	80dfdc <initWeapon+0xf0>
		printf("Loading FB2.BMP error\n");
  80dfd0:	010020f4 	movhi	r4,131
  80dfd4:	2121f204 	addi	r4,r4,-30776
  80dfd8:	08158640 	call	815864 <puts>
	addImage(explode0, initAnimation((int*)explode12, 0));
	addImage(explode0, initAnimation((int*)explode13, 0));
	addImage(explode0, initAnimation((int*)explode14, 0));

	int* fireballs = NULL;
	while(!loadSDImage("FB2.BMP", &fireballs)) {
  80dfdc:	e17ffc04 	addi	r5,fp,-16
  80dfe0:	010020f4 	movhi	r4,131
  80dfe4:	2121f804 	addi	r4,r4,-30752
  80dfe8:	080b5040 	call	80b504 <loadSDImage>
  80dfec:	1080005c 	xori	r2,r2,1
  80dff0:	10803fcc 	andi	r2,r2,255
  80dff4:	1004c03a 	cmpne	r2,r2,zero
  80dff8:	103ff51e 	bne	r2,zero,80dfd0 <initWeapon+0xe4>
		printf("Loading FB2.BMP error\n");
	}
	struct animation* secondaryBullet4Image = initAnimation(fireballs, 1);
  80dffc:	e13ffc17 	ldw	r4,-16(fp)
  80e000:	01400044 	movi	r5,1
  80e004:	0811d7c0 	call	811d7c <initAnimation>
  80e008:	e0bff615 	stw	r2,-40(fp)

	int* snowballs = NULL;
  80e00c:	e03ffd15 	stw	zero,-12(fp)
	while(!loadSDImage("SF2.BMP", &snowballs)){
  80e010:	00000306 	br	80e020 <initWeapon+0x134>
		printf("Loading SF2.BMP error\n");
  80e014:	010020f4 	movhi	r4,131
  80e018:	2121fa04 	addi	r4,r4,-30744
  80e01c:	08158640 	call	815864 <puts>
		printf("Loading FB2.BMP error\n");
	}
	struct animation* secondaryBullet4Image = initAnimation(fireballs, 1);

	int* snowballs = NULL;
	while(!loadSDImage("SF2.BMP", &snowballs)){
  80e020:	e17ffd04 	addi	r5,fp,-12
  80e024:	010020f4 	movhi	r4,131
  80e028:	21220004 	addi	r4,r4,-30720
  80e02c:	080b5040 	call	80b504 <loadSDImage>
  80e030:	1080005c 	xori	r2,r2,1
  80e034:	10803fcc 	andi	r2,r2,255
  80e038:	1004c03a 	cmpne	r2,r2,zero
  80e03c:	103ff51e 	bne	r2,zero,80e014 <initWeapon+0x128>
		printf("Loading SF2.BMP error\n");
	}
	struct animation* secondaryBullet5Image = initAnimation(snowballs, 1);
  80e040:	e13ffd17 	ldw	r4,-12(fp)
  80e044:	01400044 	movi	r5,1
  80e048:	0811d7c0 	call	811d7c <initAnimation>
  80e04c:	e0bff515 	stw	r2,-44(fp)

	weapon1_lvl1 = initBulletCollection(p, collisionChecker);
  80e050:	e13fff17 	ldw	r4,-4(fp)
  80e054:	e17ffe17 	ldw	r5,-8(fp)
  80e058:	08042600 	call	804260 <initBulletCollection>
  80e05c:	d0bc3515 	stw	r2,-3884(gp)
	initBulletToWeapon1(1, bulletImage, explode0, weapon1_lvl1);
  80e060:	d1fc3517 	ldw	r7,-3884(gp)
  80e064:	01000044 	movi	r4,1
  80e068:	e17ffb17 	ldw	r5,-20(fp)
  80e06c:	e1bff717 	ldw	r6,-36(fp)
  80e070:	08042cc0 	call	8042cc <initBulletToWeapon1>

	weapon1_lvl2 = initBulletCollection(p, collisionChecker);
  80e074:	e13fff17 	ldw	r4,-4(fp)
  80e078:	e17ffe17 	ldw	r5,-8(fp)
  80e07c:	08042600 	call	804260 <initBulletCollection>
  80e080:	d0bc2515 	stw	r2,-3948(gp)
	initBulletToWeapon1(2, bulletImage, explode0, weapon1_lvl2);
  80e084:	d1fc2517 	ldw	r7,-3948(gp)
  80e088:	01000084 	movi	r4,2
  80e08c:	e17ffb17 	ldw	r5,-20(fp)
  80e090:	e1bff717 	ldw	r6,-36(fp)
  80e094:	08042cc0 	call	8042cc <initBulletToWeapon1>

	weapon2_lvl1 = initBulletCollection(p, collisionChecker);
  80e098:	e13fff17 	ldw	r4,-4(fp)
  80e09c:	e17ffe17 	ldw	r5,-8(fp)
  80e0a0:	08042600 	call	804260 <initBulletCollection>
  80e0a4:	d0bc2a15 	stw	r2,-3928(gp)
	initBulletToWeapon2(1, bullet2Image, explode0, weapon2_lvl1);
  80e0a8:	d1fc2a17 	ldw	r7,-3928(gp)
  80e0ac:	01000044 	movi	r4,1
  80e0b0:	e17ff917 	ldw	r5,-28(fp)
  80e0b4:	e1bff717 	ldw	r6,-36(fp)
  80e0b8:	08043f80 	call	8043f8 <initBulletToWeapon2>

	weapon2_lvl2 = initBulletCollection(p, collisionChecker);
  80e0bc:	e13fff17 	ldw	r4,-4(fp)
  80e0c0:	e17ffe17 	ldw	r5,-8(fp)
  80e0c4:	08042600 	call	804260 <initBulletCollection>
  80e0c8:	d0bc2815 	stw	r2,-3936(gp)
	initBulletToWeapon2(2, bullet2Image, explode0, weapon2_lvl2);
  80e0cc:	d1fc2817 	ldw	r7,-3936(gp)
  80e0d0:	01000084 	movi	r4,2
  80e0d4:	e17ff917 	ldw	r5,-28(fp)
  80e0d8:	e1bff717 	ldw	r6,-36(fp)
  80e0dc:	08043f80 	call	8043f8 <initBulletToWeapon2>

	weapon3_lvl1 = initBulletCollection(p, collisionChecker);
  80e0e0:	e13fff17 	ldw	r4,-4(fp)
  80e0e4:	e17ffe17 	ldw	r5,-8(fp)
  80e0e8:	08042600 	call	804260 <initBulletCollection>
  80e0ec:	d0bc2c15 	stw	r2,-3920(gp)
	initBulletToWeapon3(1, bulletImage, explode0, weapon3_lvl1);
  80e0f0:	d1fc2c17 	ldw	r7,-3920(gp)
  80e0f4:	01000044 	movi	r4,1
  80e0f8:	e17ffb17 	ldw	r5,-20(fp)
  80e0fc:	e1bff717 	ldw	r6,-36(fp)
  80e100:	08045140 	call	804514 <initBulletToWeapon3>

	weapon3_lvl2 = initBulletCollection(p, collisionChecker);
  80e104:	e13fff17 	ldw	r4,-4(fp)
  80e108:	e17ffe17 	ldw	r5,-8(fp)
  80e10c:	08042600 	call	804260 <initBulletCollection>
  80e110:	d0bc3415 	stw	r2,-3888(gp)
	initBulletToWeapon3(2, bulletImage, explode0, weapon3_lvl2);
  80e114:	d1fc3417 	ldw	r7,-3888(gp)
  80e118:	01000084 	movi	r4,2
  80e11c:	e17ffb17 	ldw	r5,-20(fp)
  80e120:	e1bff717 	ldw	r6,-36(fp)
  80e124:	08045140 	call	804514 <initBulletToWeapon3>

	weapon4_lvl1 = initBulletCollection(p, collisionChecker);
  80e128:	e13fff17 	ldw	r4,-4(fp)
  80e12c:	e17ffe17 	ldw	r5,-8(fp)
  80e130:	08042600 	call	804260 <initBulletCollection>
  80e134:	d0bc2715 	stw	r2,-3940(gp)
	initBulletToWeapon4(1, bullet4Image, explode0, weapon4_lvl1);
  80e138:	d1fc2717 	ldw	r7,-3940(gp)
  80e13c:	01000044 	movi	r4,1
  80e140:	e17ffa17 	ldw	r5,-24(fp)
  80e144:	e1bff717 	ldw	r6,-36(fp)
  80e148:	08046640 	call	804664 <initBulletToWeapon4>

	weapon4_lvl2 = initBulletCollection(p, collisionChecker);
  80e14c:	e13fff17 	ldw	r4,-4(fp)
  80e150:	e17ffe17 	ldw	r5,-8(fp)
  80e154:	08042600 	call	804260 <initBulletCollection>
  80e158:	d0bc2e15 	stw	r2,-3912(gp)
	initBulletToWeapon4(2, bullet4Image, secondaryBullet4Image, weapon4_lvl2);
  80e15c:	d1fc2e17 	ldw	r7,-3912(gp)
  80e160:	01000084 	movi	r4,2
  80e164:	e17ffa17 	ldw	r5,-24(fp)
  80e168:	e1bff617 	ldw	r6,-40(fp)
  80e16c:	08046640 	call	804664 <initBulletToWeapon4>

	weapon5_lvl1 = initBulletCollection(p, collisionChecker);
  80e170:	e13fff17 	ldw	r4,-4(fp)
  80e174:	e17ffe17 	ldw	r5,-8(fp)
  80e178:	08042600 	call	804260 <initBulletCollection>
  80e17c:	d0bc3015 	stw	r2,-3904(gp)
	initBulletToWeapon5(1, bullet5Image, explode0, weapon5_lvl1);
  80e180:	d1fc3017 	ldw	r7,-3904(gp)
  80e184:	01000044 	movi	r4,1
  80e188:	e17ff817 	ldw	r5,-32(fp)
  80e18c:	e1bff717 	ldw	r6,-36(fp)
  80e190:	08047b80 	call	8047b8 <initBulletToWeapon5>

	weapon5_lvl2 = initBulletCollection(p, collisionChecker);
  80e194:	e13fff17 	ldw	r4,-4(fp)
  80e198:	e17ffe17 	ldw	r5,-8(fp)
  80e19c:	08042600 	call	804260 <initBulletCollection>
  80e1a0:	d0bc2f15 	stw	r2,-3908(gp)
	initBulletToWeapon5(2, bullet5Image, secondaryBullet5Image, weapon5_lvl2);
  80e1a4:	d1fc2f17 	ldw	r7,-3908(gp)
  80e1a8:	01000084 	movi	r4,2
  80e1ac:	e17ff817 	ldw	r5,-32(fp)
  80e1b0:	e1bff517 	ldw	r6,-44(fp)
  80e1b4:	08047b80 	call	8047b8 <initBulletToWeapon5>

}
  80e1b8:	e037883a 	mov	sp,fp
  80e1bc:	dfc00117 	ldw	ra,4(sp)
  80e1c0:	df000017 	ldw	fp,0(sp)
  80e1c4:	dec00204 	addi	sp,sp,8
  80e1c8:	f800283a 	ret

0080e1cc <printhex>:

void printhex(unsigned int score){
  80e1cc:	defffd04 	addi	sp,sp,-12
  80e1d0:	dfc00215 	stw	ra,8(sp)
  80e1d4:	df000115 	stw	fp,4(sp)
  80e1d8:	df000104 	addi	fp,sp,4
  80e1dc:	e13fff15 	stw	r4,-4(fp)
const unsigned char segs [16] = {
		0XC0, 0Xf9, 0XA4, 0XB0, 0X99, 0X92,0X82,0XF8,0X80,0X90,0X88, 0X83, 0Xc6, 0XA1, 0X86, 0X8e
};


		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE,segs[score%10]);
  80e1e0:	e13fff17 	ldw	r4,-4(fp)
  80e1e4:	01400284 	movi	r5,10
  80e1e8:	08146c40 	call	8146c4 <__umodsi3>
  80e1ec:	1007883a 	mov	r3,r2
  80e1f0:	008020f4 	movhi	r2,131
  80e1f4:	10a20204 	addi	r2,r2,-30712
  80e1f8:	10c5883a 	add	r2,r2,r3
  80e1fc:	10800003 	ldbu	r2,0(r2)
  80e200:	10c03fcc 	andi	r3,r2,255
  80e204:	00804234 	movhi	r2,264
  80e208:	108d2c04 	addi	r2,r2,13488
  80e20c:	10c00035 	stwio	r3,0(r2)


		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE,segs[(score/10)%10]);
  80e210:	e13fff17 	ldw	r4,-4(fp)
  80e214:	01400284 	movi	r5,10
  80e218:	08146bc0 	call	8146bc <__udivsi3>
  80e21c:	1009883a 	mov	r4,r2
  80e220:	01400284 	movi	r5,10
  80e224:	08146c40 	call	8146c4 <__umodsi3>
  80e228:	1007883a 	mov	r3,r2
  80e22c:	008020f4 	movhi	r2,131
  80e230:	10a20204 	addi	r2,r2,-30712
  80e234:	10c5883a 	add	r2,r2,r3
  80e238:	10800003 	ldbu	r2,0(r2)
  80e23c:	10c03fcc 	andi	r3,r2,255
  80e240:	00804234 	movhi	r2,264
  80e244:	108d3004 	addi	r2,r2,13504
  80e248:	10c00035 	stwio	r3,0(r2)

		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE,segs[(score/100)%10]);
  80e24c:	e13fff17 	ldw	r4,-4(fp)
  80e250:	01401904 	movi	r5,100
  80e254:	08146bc0 	call	8146bc <__udivsi3>
  80e258:	1009883a 	mov	r4,r2
  80e25c:	01400284 	movi	r5,10
  80e260:	08146c40 	call	8146c4 <__umodsi3>
  80e264:	1007883a 	mov	r3,r2
  80e268:	008020f4 	movhi	r2,131
  80e26c:	10a20204 	addi	r2,r2,-30712
  80e270:	10c5883a 	add	r2,r2,r3
  80e274:	10800003 	ldbu	r2,0(r2)
  80e278:	10c03fcc 	andi	r3,r2,255
  80e27c:	00804234 	movhi	r2,264
  80e280:	108d3404 	addi	r2,r2,13520
  80e284:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE,segs[(score/1000)%10]);
  80e288:	e13fff17 	ldw	r4,-4(fp)
  80e28c:	0140fa04 	movi	r5,1000
  80e290:	08146bc0 	call	8146bc <__udivsi3>
  80e294:	1009883a 	mov	r4,r2
  80e298:	01400284 	movi	r5,10
  80e29c:	08146c40 	call	8146c4 <__umodsi3>
  80e2a0:	1007883a 	mov	r3,r2
  80e2a4:	008020f4 	movhi	r2,131
  80e2a8:	10a20204 	addi	r2,r2,-30712
  80e2ac:	10c5883a 	add	r2,r2,r3
  80e2b0:	10800003 	ldbu	r2,0(r2)
  80e2b4:	10c03fcc 	andi	r3,r2,255
  80e2b8:	00804234 	movhi	r2,264
  80e2bc:	108d3804 	addi	r2,r2,13536
  80e2c0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE,segs[(score/10000)%10]);
  80e2c4:	e13fff17 	ldw	r4,-4(fp)
  80e2c8:	0149c404 	movi	r5,10000
  80e2cc:	08146bc0 	call	8146bc <__udivsi3>
  80e2d0:	1009883a 	mov	r4,r2
  80e2d4:	01400284 	movi	r5,10
  80e2d8:	08146c40 	call	8146c4 <__umodsi3>
  80e2dc:	1007883a 	mov	r3,r2
  80e2e0:	008020f4 	movhi	r2,131
  80e2e4:	10a20204 	addi	r2,r2,-30712
  80e2e8:	10c5883a 	add	r2,r2,r3
  80e2ec:	10800003 	ldbu	r2,0(r2)
  80e2f0:	10c03fcc 	andi	r3,r2,255
  80e2f4:	00804234 	movhi	r2,264
  80e2f8:	108d3c04 	addi	r2,r2,13552
  80e2fc:	10c00035 	stwio	r3,0(r2)
		//IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE,0x92);
}
  80e300:	e037883a 	mov	sp,fp
  80e304:	dfc00117 	ldw	ra,4(sp)
  80e308:	df000017 	ldw	fp,0(sp)
  80e30c:	dec00204 	addi	sp,sp,8
  80e310:	f800283a 	ret

0080e314 <initGameInfo>:

#include "GameInfo.h"
/*
 * Constructor
 */
void initGameInfo() {
  80e314:	deffff04 	addi	sp,sp,-4
  80e318:	df000015 	stw	fp,0(sp)
  80e31c:	d839883a 	mov	fp,sp
	info.score = info.gameLvl = 0;
  80e320:	008020f4 	movhi	r2,131
  80e324:	109cb404 	addi	r2,r2,29392
  80e328:	10000515 	stw	zero,20(r2)
  80e32c:	008020f4 	movhi	r2,131
  80e330:	109cb404 	addi	r2,r2,29392
  80e334:	10000015 	stw	zero,0(r2)
	info.highest_score = 0;
  80e338:	008020f4 	movhi	r2,131
  80e33c:	109cb404 	addi	r2,r2,29392
  80e340:	10000215 	stw	zero,8(r2)
	info.currency = 20000;
  80e344:	00c020f4 	movhi	r3,131
  80e348:	18dcb404 	addi	r3,r3,29392
  80e34c:	00938804 	movi	r2,20000
  80e350:	18800115 	stw	r2,4(r3)
	info.invadedAlien = 0;
  80e354:	008020f4 	movhi	r2,131
  80e358:	109cb404 	addi	r2,r2,29392
  80e35c:	10000315 	stw	zero,12(r2)
	info.start = 1;
  80e360:	00c020f4 	movhi	r3,131
  80e364:	18dcb404 	addi	r3,r3,29392
  80e368:	00800044 	movi	r2,1
  80e36c:	18800615 	stw	r2,24(r3)
	info.isEnd = false;
  80e370:	008020f4 	movhi	r2,131
  80e374:	109cb404 	addi	r2,r2,29392
  80e378:	10000705 	stb	zero,28(r2)
	info.isWin = false;
  80e37c:	008020f4 	movhi	r2,131
  80e380:	109cb404 	addi	r2,r2,29392
  80e384:	10000745 	stb	zero,29(r2)
	info.startButton = false;
  80e388:	008020f4 	movhi	r2,131
  80e38c:	109cb404 	addi	r2,r2,29392
  80e390:	10000785 	stb	zero,30(r2)
}/*
  80e394:	e037883a 	mov	sp,fp
  80e398:	df000017 	ldw	fp,0(sp)
  80e39c:	dec00104 	addi	sp,sp,4
  80e3a0:	f800283a 	ret

0080e3a4 <loadGameInfo>:
void setObserver(struct Frame* obs) {
	info.observer = obs;
}*/
void loadGameInfo(char* filename) {
  80e3a4:	defffe04 	addi	sp,sp,-8
  80e3a8:	df000115 	stw	fp,4(sp)
  80e3ac:	df000104 	addi	fp,sp,4
  80e3b0:	e13fff15 	stw	r4,-4(fp)

}
  80e3b4:	e037883a 	mov	sp,fp
  80e3b8:	df000017 	ldw	fp,0(sp)
  80e3bc:	dec00104 	addi	sp,sp,4
  80e3c0:	f800283a 	ret

0080e3c4 <updateScoreMoney>:

void updateScoreMoney(int addScore, int income) {
  80e3c4:	defff804 	addi	sp,sp,-32
  80e3c8:	dfc00715 	stw	ra,28(sp)
  80e3cc:	df000615 	stw	fp,24(sp)
  80e3d0:	df000604 	addi	fp,sp,24
  80e3d4:	e13ffe15 	stw	r4,-8(fp)
  80e3d8:	e17fff15 	stw	r5,-4(fp)
	info.score += addScore;
  80e3dc:	008020f4 	movhi	r2,131
  80e3e0:	109cb404 	addi	r2,r2,29392
  80e3e4:	10c00017 	ldw	r3,0(r2)
  80e3e8:	e0bffe17 	ldw	r2,-8(fp)
  80e3ec:	1887883a 	add	r3,r3,r2
  80e3f0:	008020f4 	movhi	r2,131
  80e3f4:	109cb404 	addi	r2,r2,29392
  80e3f8:	10c00015 	stw	r3,0(r2)
	info.currency += income;
  80e3fc:	008020f4 	movhi	r2,131
  80e400:	109cb404 	addi	r2,r2,29392
  80e404:	10c00117 	ldw	r3,4(r2)
  80e408:	e0bfff17 	ldw	r2,-4(fp)
  80e40c:	1887883a 	add	r3,r3,r2
  80e410:	008020f4 	movhi	r2,131
  80e414:	109cb404 	addi	r2,r2,29392
  80e418:	10c00115 	stw	r3,4(r2)
	updateScoreFrame();
  80e41c:	080a0a40 	call	80a0a4 <updateScoreFrame>

	printhex(info.score);
  80e420:	008020f4 	movhi	r2,131
  80e424:	109cb404 	addi	r2,r2,29392
  80e428:	11000017 	ldw	r4,0(r2)
  80e42c:	080e1cc0 	call	80e1cc <printhex>

	  char second_row2[15];
	  alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
  80e430:	008020f4 	movhi	r2,131
  80e434:	109c8204 	addi	r2,r2,29192
  80e438:	11000017 	ldw	r4,0(r2)
  80e43c:	000b883a 	mov	r5,zero
  80e440:	000d883a 	mov	r6,zero
  80e444:	0820b980 	call	820b98 <alt_up_character_lcd_set_cursor_pos>
	  sprintf(second_row2, "$$ %d  ", info.currency);
  80e448:	008020f4 	movhi	r2,131
  80e44c:	109cb404 	addi	r2,r2,29392
  80e450:	11800117 	ldw	r6,4(r2)
  80e454:	e13ffa04 	addi	r4,fp,-24
  80e458:	014020f4 	movhi	r5,131
  80e45c:	29620604 	addi	r5,r5,-30696
  80e460:	081597c0 	call	81597c <sprintf>
	  alt_up_character_lcd_string(char_lcd_dev, second_row2);
  80e464:	008020f4 	movhi	r2,131
  80e468:	109c8204 	addi	r2,r2,29192
  80e46c:	11000017 	ldw	r4,0(r2)
  80e470:	e17ffa04 	addi	r5,fp,-24
  80e474:	0820ad40 	call	820ad4 <alt_up_character_lcd_string>
}
  80e478:	e037883a 	mov	sp,fp
  80e47c:	dfc00117 	ldw	ra,4(sp)
  80e480:	df000017 	ldw	fp,0(sp)
  80e484:	dec00204 	addi	sp,sp,8
  80e488:	f800283a 	ret

0080e48c <initHighScore>:
	char score[SCORE_LENGTH];
	int score_;
};

struct HighScore* initHighScore(char string[])
{
  80e48c:	defff804 	addi	sp,sp,-32
  80e490:	dfc00715 	stw	ra,28(sp)
  80e494:	df000615 	stw	fp,24(sp)
  80e498:	df000604 	addi	fp,sp,24
  80e49c:	e13fff15 	stw	r4,-4(fp)
	struct HighScore* highScore = (struct HighScore*)malloc(sizeof(struct HighScore));
  80e4a0:	01000404 	movi	r4,16
  80e4a4:	0814f580 	call	814f58 <malloc>
  80e4a8:	e0bffc15 	stw	r2,-16(fp)
	int currentIndex = 0;
  80e4ac:	e03ffb15 	stw	zero,-20(fp)
	int scoreIndex = 0;
  80e4b0:	e03ffa15 	stw	zero,-24(fp)
	char temp_string[ SCORE_LENGTH ];
	sprintf(highScore->name, "%.3s", string );
  80e4b4:	e13ffc17 	ldw	r4,-16(fp)
  80e4b8:	014020f4 	movhi	r5,131
  80e4bc:	29620804 	addi	r5,r5,-30688
  80e4c0:	e1bfff17 	ldw	r6,-4(fp)
  80e4c4:	081597c0 	call	81597c <sprintf>

	currentIndex = NAME_LENGTH;
  80e4c8:	00800104 	movi	r2,4
  80e4cc:	e0bffb15 	stw	r2,-20(fp)
	while( currentIndex < NAME_LENGTH + SCORE_LENGTH )
  80e4d0:	00000f06 	br	80e510 <initHighScore+0x84>
	{
		temp_string[ scoreIndex ] = string[ currentIndex ];
  80e4d4:	e13ffa17 	ldw	r4,-24(fp)
  80e4d8:	e0bffb17 	ldw	r2,-20(fp)
  80e4dc:	1007883a 	mov	r3,r2
  80e4e0:	e0bfff17 	ldw	r2,-4(fp)
  80e4e4:	1885883a 	add	r2,r3,r2
  80e4e8:	10c00003 	ldbu	r3,0(r2)
  80e4ec:	e0bffd04 	addi	r2,fp,-12
  80e4f0:	1105883a 	add	r2,r2,r4
  80e4f4:	10c00005 	stb	r3,0(r2)
		scoreIndex++;
  80e4f8:	e0bffa17 	ldw	r2,-24(fp)
  80e4fc:	10800044 	addi	r2,r2,1
  80e500:	e0bffa15 	stw	r2,-24(fp)
		currentIndex++;
  80e504:	e0bffb17 	ldw	r2,-20(fp)
  80e508:	10800044 	addi	r2,r2,1
  80e50c:	e0bffb15 	stw	r2,-20(fp)
	int scoreIndex = 0;
	char temp_string[ SCORE_LENGTH ];
	sprintf(highScore->name, "%.3s", string );

	currentIndex = NAME_LENGTH;
	while( currentIndex < NAME_LENGTH + SCORE_LENGTH )
  80e510:	e0bffb17 	ldw	r2,-20(fp)
  80e514:	10800290 	cmplti	r2,r2,10
  80e518:	103fee1e 	bne	r2,zero,80e4d4 <initHighScore+0x48>
		temp_string[ scoreIndex ] = string[ currentIndex ];
		scoreIndex++;
		currentIndex++;
	}

	sprintf( highScore->score, "%.5s", temp_string );
  80e51c:	e0bffc17 	ldw	r2,-16(fp)
  80e520:	11000104 	addi	r4,r2,4
  80e524:	e1bffd04 	addi	r6,fp,-12
  80e528:	014020f4 	movhi	r5,131
  80e52c:	29620a04 	addi	r5,r5,-30680
  80e530:	081597c0 	call	81597c <sprintf>
	highScore->score_ = atoi(highScore->score);
  80e534:	e0bffc17 	ldw	r2,-16(fp)
  80e538:	11000104 	addi	r4,r2,4
  80e53c:	0814f380 	call	814f38 <atoi>
  80e540:	1007883a 	mov	r3,r2
  80e544:	e0bffc17 	ldw	r2,-16(fp)
  80e548:	10c00315 	stw	r3,12(r2)
	return highScore;
  80e54c:	e0bffc17 	ldw	r2,-16(fp)
}
  80e550:	e037883a 	mov	sp,fp
  80e554:	dfc00117 	ldw	ra,4(sp)
  80e558:	df000017 	ldw	fp,0(sp)
  80e55c:	dec00204 	addi	sp,sp,8
  80e560:	f800283a 	ret

0080e564 <high_score_to_string>:

void high_score_to_string( struct HighScore* highScore, char buffer[] )
{
  80e564:	defffc04 	addi	sp,sp,-16
  80e568:	dfc00315 	stw	ra,12(sp)
  80e56c:	df000215 	stw	fp,8(sp)
  80e570:	df000204 	addi	fp,sp,8
  80e574:	e13ffe15 	stw	r4,-8(fp)
  80e578:	e17fff15 	stw	r5,-4(fp)
	sprintf( buffer, "%.3s %.5s\n", highScore->name, highScore->score );
  80e57c:	e1bffe17 	ldw	r6,-8(fp)
  80e580:	e0bffe17 	ldw	r2,-8(fp)
  80e584:	11c00104 	addi	r7,r2,4
  80e588:	e13fff17 	ldw	r4,-4(fp)
  80e58c:	014020f4 	movhi	r5,131
  80e590:	29620c04 	addi	r5,r5,-30672
  80e594:	081597c0 	call	81597c <sprintf>
	return;
}
  80e598:	e037883a 	mov	sp,fp
  80e59c:	dfc00117 	ldw	ra,4(sp)
  80e5a0:	df000017 	ldw	fp,0(sp)
  80e5a4:	dec00204 	addi	sp,sp,8
  80e5a8:	f800283a 	ret

0080e5ac <add_high_score>:

void add_high_score( struct HighScore *highScores[], int numHighScores, unsigned char name[NAME_LENGTH], int score )
{
  80e5ac:	defff604 	addi	sp,sp,-40
  80e5b0:	dfc00915 	stw	ra,36(sp)
  80e5b4:	df000815 	stw	fp,32(sp)
  80e5b8:	dc000715 	stw	r16,28(sp)
  80e5bc:	df000704 	addi	fp,sp,28
  80e5c0:	e13ffc15 	stw	r4,-16(fp)
  80e5c4:	e17ffd15 	stw	r5,-12(fp)
  80e5c8:	e1bffe15 	stw	r6,-8(fp)
  80e5cc:	e1ffff15 	stw	r7,-4(fp)
	char temp_string[CHARS_PER_LINE];
	sprintf( temp_string, "%.3s %.5d", name, score );
  80e5d0:	e13ff904 	addi	r4,fp,-28
  80e5d4:	014020f4 	movhi	r5,131
  80e5d8:	29620f04 	addi	r5,r5,-30660
  80e5dc:	e1bffe17 	ldw	r6,-8(fp)
  80e5e0:	e1ffff17 	ldw	r7,-4(fp)
  80e5e4:	081597c0 	call	81597c <sprintf>
	if(numHighScores > MAX_NUM_HIGH_SCORES) {
  80e5e8:	e0bffd17 	ldw	r2,-12(fp)
  80e5ec:	10800550 	cmplti	r2,r2,21
  80e5f0:	10000c1e 	bne	r2,zero,80e624 <add_high_score+0x78>
		if(score > highScores[MAX_NUM_HIGH_SCORES-1]->score_)
  80e5f4:	e0bffc17 	ldw	r2,-16(fp)
  80e5f8:	10801304 	addi	r2,r2,76
  80e5fc:	10800017 	ldw	r2,0(r2)
  80e600:	10c00317 	ldw	r3,12(r2)
  80e604:	e0bfff17 	ldw	r2,-4(fp)
  80e608:	18800f0e 	bge	r3,r2,80e648 <add_high_score+0x9c>
			highScores[MAX_NUM_HIGH_SCORES-1] = initHighScore( temp_string);
  80e60c:	e0bffc17 	ldw	r2,-16(fp)
  80e610:	14001304 	addi	r16,r2,76
  80e614:	e13ff904 	addi	r4,fp,-28
  80e618:	080e48c0 	call	80e48c <initHighScore>
  80e61c:	80800015 	stw	r2,0(r16)
		return;
  80e620:	00000906 	br	80e648 <add_high_score+0x9c>
	}
	highScores[ numHighScores ] = initHighScore( temp_string );
  80e624:	e0bffd17 	ldw	r2,-12(fp)
  80e628:	1085883a 	add	r2,r2,r2
  80e62c:	1085883a 	add	r2,r2,r2
  80e630:	1007883a 	mov	r3,r2
  80e634:	e0bffc17 	ldw	r2,-16(fp)
  80e638:	18a1883a 	add	r16,r3,r2
  80e63c:	e13ff904 	addi	r4,fp,-28
  80e640:	080e48c0 	call	80e48c <initHighScore>
  80e644:	80800015 	stw	r2,0(r16)
}
  80e648:	e037883a 	mov	sp,fp
  80e64c:	dfc00217 	ldw	ra,8(sp)
  80e650:	df000117 	ldw	fp,4(sp)
  80e654:	dc000017 	ldw	r16,0(sp)
  80e658:	dec00304 	addi	sp,sp,12
  80e65c:	f800283a 	ret

0080e660 <sort_high_scores>:

void sort_high_scores( struct HighScore *highScores[MAX_NUM_HIGH_SCORES], int numHighScores )
{
  80e660:	defffa04 	addi	sp,sp,-24
  80e664:	df000515 	stw	fp,20(sp)
  80e668:	df000504 	addi	fp,sp,20
  80e66c:	e13ffe15 	stw	r4,-8(fp)
  80e670:	e17fff15 	stw	r5,-4(fp)
    int i, j;
    //char temp_score[SCORE_LENGTH];
    //char temp_name[NAME_LENGTH];
    struct HighScore* temp;
    do{
        j = 0;
  80e674:	e03ffc15 	stw	zero,-16(fp)
        for ( i = 0; i < numHighScores - 1; i++ )
  80e678:	e03ffd15 	stw	zero,-12(fp)
  80e67c:	00003706 	br	80e75c <sort_high_scores+0xfc>
        {
			if( highScores[i]->score_  < highScores[i+1]->score_ )
  80e680:	e0bffd17 	ldw	r2,-12(fp)
  80e684:	1085883a 	add	r2,r2,r2
  80e688:	1085883a 	add	r2,r2,r2
  80e68c:	1007883a 	mov	r3,r2
  80e690:	e0bffe17 	ldw	r2,-8(fp)
  80e694:	1885883a 	add	r2,r3,r2
  80e698:	10800017 	ldw	r2,0(r2)
  80e69c:	11000317 	ldw	r4,12(r2)
  80e6a0:	e0bffd17 	ldw	r2,-12(fp)
  80e6a4:	1085883a 	add	r2,r2,r2
  80e6a8:	1085883a 	add	r2,r2,r2
  80e6ac:	1007883a 	mov	r3,r2
  80e6b0:	e0bffe17 	ldw	r2,-8(fp)
  80e6b4:	1885883a 	add	r2,r3,r2
  80e6b8:	10800104 	addi	r2,r2,4
  80e6bc:	10800017 	ldw	r2,0(r2)
  80e6c0:	10800317 	ldw	r2,12(r2)
  80e6c4:	2080220e 	bge	r4,r2,80e750 <sort_high_scores+0xf0>
			{
				j = 1;/*
  80e6c8:	00800044 	movi	r2,1
  80e6cc:	e0bffc15 	stw	r2,-16(fp)
				sprintf( temp_name, "%.3s", highScores[i]->name );
				sprintf( highScores[i]->score, "%.5s", highScores[i+1]->score );
				sprintf(highScores[i]->name, "%.3s", highScores[i+1]->name );
				sprintf( highScores[i+1]->name, "%.3s", temp_name );
				sprintf( highScores[i+1]->score, "%.5s", temp_score );*/
				temp = highScores[i];
  80e6d0:	e0bffd17 	ldw	r2,-12(fp)
  80e6d4:	1085883a 	add	r2,r2,r2
  80e6d8:	1085883a 	add	r2,r2,r2
  80e6dc:	1007883a 	mov	r3,r2
  80e6e0:	e0bffe17 	ldw	r2,-8(fp)
  80e6e4:	1885883a 	add	r2,r3,r2
  80e6e8:	10800017 	ldw	r2,0(r2)
  80e6ec:	e0bffb15 	stw	r2,-20(fp)
				highScores[i] = highScores[i+1];
  80e6f0:	e0bffd17 	ldw	r2,-12(fp)
  80e6f4:	1085883a 	add	r2,r2,r2
  80e6f8:	1085883a 	add	r2,r2,r2
  80e6fc:	1007883a 	mov	r3,r2
  80e700:	e0bffe17 	ldw	r2,-8(fp)
  80e704:	1889883a 	add	r4,r3,r2
  80e708:	e0bffd17 	ldw	r2,-12(fp)
  80e70c:	1085883a 	add	r2,r2,r2
  80e710:	1085883a 	add	r2,r2,r2
  80e714:	1007883a 	mov	r3,r2
  80e718:	e0bffe17 	ldw	r2,-8(fp)
  80e71c:	1885883a 	add	r2,r3,r2
  80e720:	10800104 	addi	r2,r2,4
  80e724:	10800017 	ldw	r2,0(r2)
  80e728:	20800015 	stw	r2,0(r4)
				highScores[i+1] = temp;
  80e72c:	e0bffd17 	ldw	r2,-12(fp)
  80e730:	1085883a 	add	r2,r2,r2
  80e734:	1085883a 	add	r2,r2,r2
  80e738:	1007883a 	mov	r3,r2
  80e73c:	e0bffe17 	ldw	r2,-8(fp)
  80e740:	1885883a 	add	r2,r3,r2
  80e744:	10c00104 	addi	r3,r2,4
  80e748:	e0bffb17 	ldw	r2,-20(fp)
  80e74c:	18800015 	stw	r2,0(r3)
    //char temp_score[SCORE_LENGTH];
    //char temp_name[NAME_LENGTH];
    struct HighScore* temp;
    do{
        j = 0;
        for ( i = 0; i < numHighScores - 1; i++ )
  80e750:	e0bffd17 	ldw	r2,-12(fp)
  80e754:	10800044 	addi	r2,r2,1
  80e758:	e0bffd15 	stw	r2,-12(fp)
  80e75c:	e0bfff17 	ldw	r2,-4(fp)
  80e760:	10ffffc4 	addi	r3,r2,-1
  80e764:	e0bffd17 	ldw	r2,-12(fp)
  80e768:	10ffc516 	blt	r2,r3,80e680 <sort_high_scores+0x20>
				temp = highScores[i];
				highScores[i] = highScores[i+1];
				highScores[i+1] = temp;
			}
		}
    } while (j == 1);
  80e76c:	e0bffc17 	ldw	r2,-16(fp)
  80e770:	10800060 	cmpeqi	r2,r2,1
  80e774:	103fbf1e 	bne	r2,zero,80e674 <sort_high_scores+0x14>
}
  80e778:	e037883a 	mov	sp,fp
  80e77c:	df000017 	ldw	fp,0(sp)
  80e780:	dec00104 	addi	sp,sp,4
  80e784:	f800283a 	ret

0080e788 <clear_high_scores>:

bool clear_high_scores(int numHighScores)
{
  80e788:	defff904 	addi	sp,sp,-28
  80e78c:	dfc00615 	stw	ra,24(sp)
  80e790:	df000515 	stw	fp,20(sp)
  80e794:	df000504 	addi	fp,sp,20
  80e798:	e13ffe15 	stw	r4,-8(fp)
	int i, j;
	int file_pointer = alt_up_sd_card_fopen(FILE_NAME, false);
  80e79c:	010020f4 	movhi	r4,131
  80e7a0:	21221204 	addi	r4,r4,-30648
  80e7a4:	000b883a 	mov	r5,zero
  80e7a8:	08261c40 	call	8261c4 <alt_up_sd_card_fopen>
  80e7ac:	10bfffcc 	andi	r2,r2,65535
  80e7b0:	10a0001c 	xori	r2,r2,32768
  80e7b4:	10a00004 	addi	r2,r2,-32768
  80e7b8:	e0bffb15 	stw	r2,-20(fp)
	if(file_pointer < 0) {
  80e7bc:	e0bffb17 	ldw	r2,-20(fp)
  80e7c0:	1004403a 	cmpge	r2,r2,zero
  80e7c4:	1000071e 	bne	r2,zero,80e7e4 <clear_high_scores+0x5c>
		alt_up_sd_card_fclose(file_pointer); //close the file
  80e7c8:	e0bffb17 	ldw	r2,-20(fp)
  80e7cc:	113fffcc 	andi	r4,r2,65535
  80e7d0:	2120001c 	xori	r4,r4,32768
  80e7d4:	21200004 	addi	r4,r4,-32768
  80e7d8:	08270400 	call	827040 <alt_up_sd_card_fclose>
		return false;
  80e7dc:	e03fff15 	stw	zero,-4(fp)
  80e7e0:	00002306 	br	80e870 <clear_high_scores+0xe8>
	}

	alt_up_sd_card_write(file_pointer, 0);
  80e7e4:	e0bffb17 	ldw	r2,-20(fp)
  80e7e8:	113fffcc 	andi	r4,r2,65535
  80e7ec:	2120001c 	xori	r4,r4,32768
  80e7f0:	21200004 	addi	r4,r4,-32768
  80e7f4:	000b883a 	mov	r5,zero
  80e7f8:	0826a1c0 	call	826a1c <alt_up_sd_card_write>

	/**
	 * Clear out the high scores
	 */
	for( i = 0; i < numHighScores; i++ )
  80e7fc:	e03ffd15 	stw	zero,-12(fp)
  80e800:	00001106 	br	80e848 <clear_high_scores+0xc0>
	{
		for( j = 0; j < 10; j++ )
  80e804:	e03ffc15 	stw	zero,-16(fp)
  80e808:	00000906 	br	80e830 <clear_high_scores+0xa8>
			alt_up_sd_card_write(file_pointer, ' ');
  80e80c:	e0bffb17 	ldw	r2,-20(fp)
  80e810:	113fffcc 	andi	r4,r2,65535
  80e814:	2120001c 	xori	r4,r4,32768
  80e818:	21200004 	addi	r4,r4,-32768
  80e81c:	01400804 	movi	r5,32
  80e820:	0826a1c0 	call	826a1c <alt_up_sd_card_write>
	/**
	 * Clear out the high scores
	 */
	for( i = 0; i < numHighScores; i++ )
	{
		for( j = 0; j < 10; j++ )
  80e824:	e0bffc17 	ldw	r2,-16(fp)
  80e828:	10800044 	addi	r2,r2,1
  80e82c:	e0bffc15 	stw	r2,-16(fp)
  80e830:	e0bffc17 	ldw	r2,-16(fp)
  80e834:	10800290 	cmplti	r2,r2,10
  80e838:	103ff41e 	bne	r2,zero,80e80c <clear_high_scores+0x84>
	alt_up_sd_card_write(file_pointer, 0);

	/**
	 * Clear out the high scores
	 */
	for( i = 0; i < numHighScores; i++ )
  80e83c:	e0bffd17 	ldw	r2,-12(fp)
  80e840:	10800044 	addi	r2,r2,1
  80e844:	e0bffd15 	stw	r2,-12(fp)
  80e848:	e0fffd17 	ldw	r3,-12(fp)
  80e84c:	e0bffe17 	ldw	r2,-8(fp)
  80e850:	18bfec16 	blt	r3,r2,80e804 <clear_high_scores+0x7c>
	{
		for( j = 0; j < 10; j++ )
			alt_up_sd_card_write(file_pointer, ' ');
	}

	alt_up_sd_card_fclose(file_pointer);
  80e854:	e0bffb17 	ldw	r2,-20(fp)
  80e858:	113fffcc 	andi	r4,r2,65535
  80e85c:	2120001c 	xori	r4,r4,32768
  80e860:	21200004 	addi	r4,r4,-32768
  80e864:	08270400 	call	827040 <alt_up_sd_card_fclose>
	return true;
  80e868:	00800044 	movi	r2,1
  80e86c:	e0bfff15 	stw	r2,-4(fp)
  80e870:	e0bfff17 	ldw	r2,-4(fp)
}
  80e874:	e037883a 	mov	sp,fp
  80e878:	dfc00117 	ldw	ra,4(sp)
  80e87c:	df000017 	ldw	fp,0(sp)
  80e880:	dec00204 	addi	sp,sp,8
  80e884:	f800283a 	ret

0080e888 <read_high_scores>:

int read_high_scores(struct HighScore *highScores[])
{
  80e888:	defff204 	addi	sp,sp,-56
  80e88c:	dfc00d15 	stw	ra,52(sp)
  80e890:	df000c15 	stw	fp,48(sp)
  80e894:	dc000b15 	stw	r16,44(sp)
  80e898:	df000b04 	addi	fp,sp,44
  80e89c:	e13ffe15 	stw	r4,-8(fp)
	char read_buffer[15];
	int i, j, numHighScores;
	int file_pointer = alt_up_sd_card_fopen(FILE_NAME, false);
  80e8a0:	010020f4 	movhi	r4,131
  80e8a4:	21221204 	addi	r4,r4,-30648
  80e8a8:	000b883a 	mov	r5,zero
  80e8ac:	08261c40 	call	8261c4 <alt_up_sd_card_fopen>
  80e8b0:	10bfffcc 	andi	r2,r2,65535
  80e8b4:	10a0001c 	xori	r2,r2,32768
  80e8b8:	10a00004 	addi	r2,r2,-32768
  80e8bc:	e0bff615 	stw	r2,-40(fp)
	if(file_pointer < 0) {
  80e8c0:	e0bff617 	ldw	r2,-40(fp)
  80e8c4:	1004403a 	cmpge	r2,r2,zero
  80e8c8:	1000081e 	bne	r2,zero,80e8ec <read_high_scores+0x64>
		alt_up_sd_card_fclose(file_pointer); //close the file
  80e8cc:	e0bff617 	ldw	r2,-40(fp)
  80e8d0:	113fffcc 	andi	r4,r2,65535
  80e8d4:	2120001c 	xori	r4,r4,32768
  80e8d8:	21200004 	addi	r4,r4,-32768
  80e8dc:	08270400 	call	827040 <alt_up_sd_card_fclose>
		return -1;
  80e8e0:	00bfffc4 	movi	r2,-1
  80e8e4:	e0bfff15 	stw	r2,-4(fp)
  80e8e8:	00008f06 	br	80eb28 <read_high_scores+0x2a0>
		if((read_buffer[ i ] = alt_up_sd_card_read(file_pointer))<0) {
			alt_up_sd_card_fclose(file_pointer); //close the file
			return -1;
		} printf("first 2 %c\n", read_buffer[i]);
	}*/
	i = 0;
  80e8ec:	e03ff915 	stw	zero,-28(fp)
	do {
		if((read_buffer[ i ] = alt_up_sd_card_read(file_pointer))<0) {
  80e8f0:	e43ff917 	ldw	r16,-28(fp)
  80e8f4:	e0bff617 	ldw	r2,-40(fp)
  80e8f8:	113fffcc 	andi	r4,r2,65535
  80e8fc:	2120001c 	xori	r4,r4,32768
  80e900:	21200004 	addi	r4,r4,-32768
  80e904:	08266880 	call	826688 <alt_up_sd_card_read>
  80e908:	1007883a 	mov	r3,r2
  80e90c:	e0bffa04 	addi	r2,fp,-24
  80e910:	1405883a 	add	r2,r2,r16
  80e914:	10c00005 	stb	r3,0(r2)
  80e918:	e0bffa04 	addi	r2,fp,-24
  80e91c:	1405883a 	add	r2,r2,r16
  80e920:	10800003 	ldbu	r2,0(r2)
  80e924:	10803fcc 	andi	r2,r2,255
  80e928:	1080201c 	xori	r2,r2,128
  80e92c:	10bfe004 	addi	r2,r2,-128
  80e930:	1004403a 	cmpge	r2,r2,zero
  80e934:	1000081e 	bne	r2,zero,80e958 <read_high_scores+0xd0>
			alt_up_sd_card_fclose(file_pointer); //close the file
  80e938:	e0bff617 	ldw	r2,-40(fp)
  80e93c:	113fffcc 	andi	r4,r2,65535
  80e940:	2120001c 	xori	r4,r4,32768
  80e944:	21200004 	addi	r4,r4,-32768
  80e948:	08270400 	call	827040 <alt_up_sd_card_fclose>
			return -1;
  80e94c:	00bfffc4 	movi	r2,-1
  80e950:	e0bfff15 	stw	r2,-4(fp)
  80e954:	00007406 	br	80eb28 <read_high_scores+0x2a0>
		}
		i++;
  80e958:	e0bff917 	ldw	r2,-28(fp)
  80e95c:	10800044 	addi	r2,r2,1
  80e960:	e0bff915 	stw	r2,-28(fp)
	}while(read_buffer[i-1] != ' ');
  80e964:	e0bff917 	ldw	r2,-28(fp)
  80e968:	10ffffc4 	addi	r3,r2,-1
  80e96c:	e0bffa04 	addi	r2,fp,-24
  80e970:	10c5883a 	add	r2,r2,r3
  80e974:	10800003 	ldbu	r2,0(r2)
  80e978:	10803fcc 	andi	r2,r2,255
  80e97c:	1080201c 	xori	r2,r2,128
  80e980:	10bfe004 	addi	r2,r2,-128
  80e984:	10800818 	cmpnei	r2,r2,32
  80e988:	103fd91e 	bne	r2,zero,80e8f0 <read_high_scores+0x68>
	read_buffer[i] = '\0';
  80e98c:	e0fff917 	ldw	r3,-28(fp)
  80e990:	e0bffa04 	addi	r2,fp,-24
  80e994:	10c5883a 	add	r2,r2,r3
  80e998:	10000005 	stb	zero,0(r2)
	numHighScores = atoi(read_buffer);
  80e99c:	e13ffa04 	addi	r4,fp,-24
  80e9a0:	0814f380 	call	814f38 <atoi>
  80e9a4:	e0bff715 	stw	r2,-36(fp)
	if( numHighScores > MAX_NUM_HIGH_SCORES )
  80e9a8:	e0bff717 	ldw	r2,-36(fp)
  80e9ac:	10800550 	cmplti	r2,r2,21
  80e9b0:	1000021e 	bne	r2,zero,80e9bc <read_high_scores+0x134>
	{
		numHighScores = MAX_NUM_HIGH_SCORES;
  80e9b4:	00800504 	movi	r2,20
  80e9b8:	e0bff715 	stw	r2,-36(fp)
	}
	int count = 0;
  80e9bc:	e03ff515 	stw	zero,-44(fp)
	for( i = 0; i < numHighScores; i++ )
  80e9c0:	e03ff915 	stw	zero,-28(fp)
  80e9c4:	00004006 	br	80eac8 <read_high_scores+0x240>
	{j = 0; count = 0;
  80e9c8:	e03ff815 	stw	zero,-32(fp)
  80e9cc:	e03ff515 	stw	zero,-44(fp)
		while(count < 2) {
  80e9d0:	00002906 	br	80ea78 <read_high_scores+0x1f0>
			if((read_buffer[ j ] = alt_up_sd_card_read(file_pointer))<0) {
  80e9d4:	e43ff817 	ldw	r16,-32(fp)
  80e9d8:	e0bff617 	ldw	r2,-40(fp)
  80e9dc:	113fffcc 	andi	r4,r2,65535
  80e9e0:	2120001c 	xori	r4,r4,32768
  80e9e4:	21200004 	addi	r4,r4,-32768
  80e9e8:	08266880 	call	826688 <alt_up_sd_card_read>
  80e9ec:	1007883a 	mov	r3,r2
  80e9f0:	e0bffa04 	addi	r2,fp,-24
  80e9f4:	1405883a 	add	r2,r2,r16
  80e9f8:	10c00005 	stb	r3,0(r2)
  80e9fc:	e0bffa04 	addi	r2,fp,-24
  80ea00:	1405883a 	add	r2,r2,r16
  80ea04:	10800003 	ldbu	r2,0(r2)
  80ea08:	10803fcc 	andi	r2,r2,255
  80ea0c:	1080201c 	xori	r2,r2,128
  80ea10:	10bfe004 	addi	r2,r2,-128
  80ea14:	1004403a 	cmpge	r2,r2,zero
  80ea18:	1000081e 	bne	r2,zero,80ea3c <read_high_scores+0x1b4>
				alt_up_sd_card_fclose(file_pointer); //close the file
  80ea1c:	e0bff617 	ldw	r2,-40(fp)
  80ea20:	113fffcc 	andi	r4,r2,65535
  80ea24:	2120001c 	xori	r4,r4,32768
  80ea28:	21200004 	addi	r4,r4,-32768
  80ea2c:	08270400 	call	827040 <alt_up_sd_card_fclose>
				return -1;
  80ea30:	00bfffc4 	movi	r2,-1
  80ea34:	e0bfff15 	stw	r2,-4(fp)
  80ea38:	00003b06 	br	80eb28 <read_high_scores+0x2a0>
			}
			if(read_buffer[j] == ' ')
  80ea3c:	e0fff817 	ldw	r3,-32(fp)
  80ea40:	e0bffa04 	addi	r2,fp,-24
  80ea44:	10c5883a 	add	r2,r2,r3
  80ea48:	10800003 	ldbu	r2,0(r2)
  80ea4c:	10803fcc 	andi	r2,r2,255
  80ea50:	1080201c 	xori	r2,r2,128
  80ea54:	10bfe004 	addi	r2,r2,-128
  80ea58:	10800818 	cmpnei	r2,r2,32
  80ea5c:	1000031e 	bne	r2,zero,80ea6c <read_high_scores+0x1e4>
				count++;
  80ea60:	e0bff517 	ldw	r2,-44(fp)
  80ea64:	10800044 	addi	r2,r2,1
  80ea68:	e0bff515 	stw	r2,-44(fp)
			j++;
  80ea6c:	e0bff817 	ldw	r2,-32(fp)
  80ea70:	10800044 	addi	r2,r2,1
  80ea74:	e0bff815 	stw	r2,-32(fp)
		numHighScores = MAX_NUM_HIGH_SCORES;
	}
	int count = 0;
	for( i = 0; i < numHighScores; i++ )
	{j = 0; count = 0;
		while(count < 2) {
  80ea78:	e0bff517 	ldw	r2,-44(fp)
  80ea7c:	10800090 	cmplti	r2,r2,2
  80ea80:	103fd41e 	bne	r2,zero,80e9d4 <read_high_scores+0x14c>
			}
			if(read_buffer[j] == ' ')
				count++;
			j++;
		}
		read_buffer[j-1] = '\0';
  80ea84:	e0bff817 	ldw	r2,-32(fp)
  80ea88:	10ffffc4 	addi	r3,r2,-1
  80ea8c:	e0bffa04 	addi	r2,fp,-24
  80ea90:	10c5883a 	add	r2,r2,r3
  80ea94:	10000005 	stb	zero,0(r2)
		highScores[ i ] = initHighScore(read_buffer);
  80ea98:	e0bff917 	ldw	r2,-28(fp)
  80ea9c:	1085883a 	add	r2,r2,r2
  80eaa0:	1085883a 	add	r2,r2,r2
  80eaa4:	1007883a 	mov	r3,r2
  80eaa8:	e0bffe17 	ldw	r2,-8(fp)
  80eaac:	18a1883a 	add	r16,r3,r2
  80eab0:	e13ffa04 	addi	r4,fp,-24
  80eab4:	080e48c0 	call	80e48c <initHighScore>
  80eab8:	80800015 	stw	r2,0(r16)
	if( numHighScores > MAX_NUM_HIGH_SCORES )
	{
		numHighScores = MAX_NUM_HIGH_SCORES;
	}
	int count = 0;
	for( i = 0; i < numHighScores; i++ )
  80eabc:	e0bff917 	ldw	r2,-28(fp)
  80eac0:	10800044 	addi	r2,r2,1
  80eac4:	e0bff915 	stw	r2,-28(fp)
  80eac8:	e0fff917 	ldw	r3,-28(fp)
  80eacc:	e0bff717 	ldw	r2,-36(fp)
  80ead0:	18bfbd16 	blt	r3,r2,80e9c8 <read_high_scores+0x140>
			j++;
		}
		read_buffer[j-1] = '\0';
		highScores[ i ] = initHighScore(read_buffer);
	}
	while(i < MAX_NUM_HIGH_SCORES) {
  80ead4:	00000a06 	br	80eb00 <read_high_scores+0x278>
		highScores[i] = NULL;
  80ead8:	e0bff917 	ldw	r2,-28(fp)
  80eadc:	1085883a 	add	r2,r2,r2
  80eae0:	1085883a 	add	r2,r2,r2
  80eae4:	1007883a 	mov	r3,r2
  80eae8:	e0bffe17 	ldw	r2,-8(fp)
  80eaec:	1885883a 	add	r2,r3,r2
  80eaf0:	10000015 	stw	zero,0(r2)
		i++;
  80eaf4:	e0bff917 	ldw	r2,-28(fp)
  80eaf8:	10800044 	addi	r2,r2,1
  80eafc:	e0bff915 	stw	r2,-28(fp)
			j++;
		}
		read_buffer[j-1] = '\0';
		highScores[ i ] = initHighScore(read_buffer);
	}
	while(i < MAX_NUM_HIGH_SCORES) {
  80eb00:	e0bff917 	ldw	r2,-28(fp)
  80eb04:	10800510 	cmplti	r2,r2,20
  80eb08:	103ff31e 	bne	r2,zero,80ead8 <read_high_scores+0x250>
		highScores[i] = NULL;
		i++;
	}
	alt_up_sd_card_fclose(file_pointer);
  80eb0c:	e0bff617 	ldw	r2,-40(fp)
  80eb10:	113fffcc 	andi	r4,r2,65535
  80eb14:	2120001c 	xori	r4,r4,32768
  80eb18:	21200004 	addi	r4,r4,-32768
  80eb1c:	08270400 	call	827040 <alt_up_sd_card_fclose>
	return numHighScores;
  80eb20:	e0bff717 	ldw	r2,-36(fp)
  80eb24:	e0bfff15 	stw	r2,-4(fp)
  80eb28:	e0bfff17 	ldw	r2,-4(fp)
}
  80eb2c:	e037883a 	mov	sp,fp
  80eb30:	dfc00217 	ldw	ra,8(sp)
  80eb34:	df000117 	ldw	fp,4(sp)
  80eb38:	dc000017 	ldw	r16,0(sp)
  80eb3c:	dec00304 	addi	sp,sp,12
  80eb40:	f800283a 	ret

0080eb44 <write_high_scores>:

bool write_high_scores(struct HighScore *highScores[], int numHighScores)
{
  80eb44:	defff304 	addi	sp,sp,-52
  80eb48:	dfc00c15 	stw	ra,48(sp)
  80eb4c:	df000b15 	stw	fp,44(sp)
  80eb50:	df000b04 	addi	fp,sp,44
  80eb54:	e13ffd15 	stw	r4,-12(fp)
  80eb58:	e17ffe15 	stw	r5,-8(fp)
	int i, j;
	char write_buffer[ CHARS_PER_LINE ];
	int file_pointer = alt_up_sd_card_fopen(FILE_NAME, false);
  80eb5c:	010020f4 	movhi	r4,131
  80eb60:	21221204 	addi	r4,r4,-30648
  80eb64:	000b883a 	mov	r5,zero
  80eb68:	08261c40 	call	8261c4 <alt_up_sd_card_fopen>
  80eb6c:	10bfffcc 	andi	r2,r2,65535
  80eb70:	10a0001c 	xori	r2,r2,32768
  80eb74:	10a00004 	addi	r2,r2,-32768
  80eb78:	e0bff715 	stw	r2,-36(fp)
	// ASCII for a space
	char space = 32;
  80eb7c:	00800804 	movi	r2,32
  80eb80:	e0bff605 	stb	r2,-40(fp)
	if(file_pointer < 0) {
  80eb84:	e0bff717 	ldw	r2,-36(fp)
  80eb88:	1004403a 	cmpge	r2,r2,zero
  80eb8c:	1000071e 	bne	r2,zero,80ebac <write_high_scores+0x68>
		alt_up_sd_card_fclose(file_pointer); //close the file
  80eb90:	e0bff717 	ldw	r2,-36(fp)
  80eb94:	113fffcc 	andi	r4,r2,65535
  80eb98:	2120001c 	xori	r4,r4,32768
  80eb9c:	21200004 	addi	r4,r4,-32768
  80eba0:	08270400 	call	827040 <alt_up_sd_card_fclose>
		return false;
  80eba4:	e03fff15 	stw	zero,-4(fp)
  80eba8:	00005906 	br	80ed10 <write_high_scores+0x1cc>
	}

	if( numHighScores > MAX_NUM_HIGH_SCORES )
  80ebac:	e0bffe17 	ldw	r2,-8(fp)
  80ebb0:	10800550 	cmplti	r2,r2,21
  80ebb4:	1000021e 	bne	r2,zero,80ebc0 <write_high_scores+0x7c>
	{
		numHighScores = MAX_NUM_HIGH_SCORES;
  80ebb8:	00800504 	movi	r2,20
  80ebbc:	e0bffe15 	stw	r2,-8(fp)
	}

	sprintf( write_buffer, "%d", numHighScores );
  80ebc0:	e13ffa04 	addi	r4,fp,-24
  80ebc4:	014020f4 	movhi	r5,131
  80ebc8:	29621504 	addi	r5,r5,-30636
  80ebcc:	e1bffe17 	ldw	r6,-8(fp)
  80ebd0:	081597c0 	call	81597c <sprintf>

	int size = strlen(write_buffer);
  80ebd4:	e13ffa04 	addi	r4,fp,-24
  80ebd8:	0815adc0 	call	815adc <strlen>
  80ebdc:	e0bff515 	stw	r2,-44(fp)
	for( i = 0; i < size; i++ )
  80ebe0:	e03ff915 	stw	zero,-28(fp)
  80ebe4:	00000f06 	br	80ec24 <write_high_scores+0xe0>
		alt_up_sd_card_write(file_pointer, write_buffer[ i ] );
  80ebe8:	e0bff717 	ldw	r2,-36(fp)
  80ebec:	113fffcc 	andi	r4,r2,65535
  80ebf0:	2120001c 	xori	r4,r4,32768
  80ebf4:	21200004 	addi	r4,r4,-32768
  80ebf8:	e0fff917 	ldw	r3,-28(fp)
  80ebfc:	e0bffa04 	addi	r2,fp,-24
  80ec00:	10c5883a 	add	r2,r2,r3
  80ec04:	10800003 	ldbu	r2,0(r2)
  80ec08:	11403fcc 	andi	r5,r2,255
  80ec0c:	2940201c 	xori	r5,r5,128
  80ec10:	297fe004 	addi	r5,r5,-128
  80ec14:	0826a1c0 	call	826a1c <alt_up_sd_card_write>
	}

	sprintf( write_buffer, "%d", numHighScores );

	int size = strlen(write_buffer);
	for( i = 0; i < size; i++ )
  80ec18:	e0bff917 	ldw	r2,-28(fp)
  80ec1c:	10800044 	addi	r2,r2,1
  80ec20:	e0bff915 	stw	r2,-28(fp)
  80ec24:	e0fff917 	ldw	r3,-28(fp)
  80ec28:	e0bff517 	ldw	r2,-44(fp)
  80ec2c:	18bfee16 	blt	r3,r2,80ebe8 <write_high_scores+0xa4>
		alt_up_sd_card_write(file_pointer, write_buffer[ i ] );

	alt_up_sd_card_write(file_pointer, space);
  80ec30:	e0bff717 	ldw	r2,-36(fp)
  80ec34:	113fffcc 	andi	r4,r2,65535
  80ec38:	2120001c 	xori	r4,r4,32768
  80ec3c:	21200004 	addi	r4,r4,-32768
  80ec40:	e17ff607 	ldb	r5,-40(fp)
  80ec44:	0826a1c0 	call	826a1c <alt_up_sd_card_write>

	// Only write the max number of high scores

	for( i = 0; i < numHighScores; i++ )
  80ec48:	e03ff915 	stw	zero,-28(fp)
  80ec4c:	00002606 	br	80ece8 <write_high_scores+0x1a4>
	{
		high_score_to_string( highScores[ i ], write_buffer );
  80ec50:	e0bff917 	ldw	r2,-28(fp)
  80ec54:	1085883a 	add	r2,r2,r2
  80ec58:	1085883a 	add	r2,r2,r2
  80ec5c:	1007883a 	mov	r3,r2
  80ec60:	e0bffd17 	ldw	r2,-12(fp)
  80ec64:	1885883a 	add	r2,r3,r2
  80ec68:	11000017 	ldw	r4,0(r2)
  80ec6c:	e17ffa04 	addi	r5,fp,-24
  80ec70:	080e5640 	call	80e564 <high_score_to_string>

		for( j = 0; j < CHARS_PER_LINE; j++ )
  80ec74:	e03ff815 	stw	zero,-32(fp)
  80ec78:	00000f06 	br	80ecb8 <write_high_scores+0x174>
		{
			alt_up_sd_card_write(file_pointer, write_buffer[j]);
  80ec7c:	e0bff717 	ldw	r2,-36(fp)
  80ec80:	113fffcc 	andi	r4,r2,65535
  80ec84:	2120001c 	xori	r4,r4,32768
  80ec88:	21200004 	addi	r4,r4,-32768
  80ec8c:	e0fff817 	ldw	r3,-32(fp)
  80ec90:	e0bffa04 	addi	r2,fp,-24
  80ec94:	10c5883a 	add	r2,r2,r3
  80ec98:	10800003 	ldbu	r2,0(r2)
  80ec9c:	11403fcc 	andi	r5,r2,255
  80eca0:	2940201c 	xori	r5,r5,128
  80eca4:	297fe004 	addi	r5,r5,-128
  80eca8:	0826a1c0 	call	826a1c <alt_up_sd_card_write>

	for( i = 0; i < numHighScores; i++ )
	{
		high_score_to_string( highScores[ i ], write_buffer );

		for( j = 0; j < CHARS_PER_LINE; j++ )
  80ecac:	e0bff817 	ldw	r2,-32(fp)
  80ecb0:	10800044 	addi	r2,r2,1
  80ecb4:	e0bff815 	stw	r2,-32(fp)
  80ecb8:	e0bff817 	ldw	r2,-32(fp)
  80ecbc:	10800250 	cmplti	r2,r2,9
  80ecc0:	103fee1e 	bne	r2,zero,80ec7c <write_high_scores+0x138>
		{
			alt_up_sd_card_write(file_pointer, write_buffer[j]);
		}
		alt_up_sd_card_write(file_pointer, space);
  80ecc4:	e0bff717 	ldw	r2,-36(fp)
  80ecc8:	113fffcc 	andi	r4,r2,65535
  80eccc:	2120001c 	xori	r4,r4,32768
  80ecd0:	21200004 	addi	r4,r4,-32768
  80ecd4:	e17ff607 	ldb	r5,-40(fp)
  80ecd8:	0826a1c0 	call	826a1c <alt_up_sd_card_write>

	alt_up_sd_card_write(file_pointer, space);

	// Only write the max number of high scores

	for( i = 0; i < numHighScores; i++ )
  80ecdc:	e0bff917 	ldw	r2,-28(fp)
  80ece0:	10800044 	addi	r2,r2,1
  80ece4:	e0bff915 	stw	r2,-28(fp)
  80ece8:	e0fff917 	ldw	r3,-28(fp)
  80ecec:	e0bffe17 	ldw	r2,-8(fp)
  80ecf0:	18bfd716 	blt	r3,r2,80ec50 <write_high_scores+0x10c>
			alt_up_sd_card_write(file_pointer, write_buffer[j]);
		}
		alt_up_sd_card_write(file_pointer, space);
	}

	alt_up_sd_card_fclose(file_pointer);
  80ecf4:	e0bff717 	ldw	r2,-36(fp)
  80ecf8:	113fffcc 	andi	r4,r2,65535
  80ecfc:	2120001c 	xori	r4,r4,32768
  80ed00:	21200004 	addi	r4,r4,-32768
  80ed04:	08270400 	call	827040 <alt_up_sd_card_fclose>
	return true;
  80ed08:	00800044 	movi	r2,1
  80ed0c:	e0bfff15 	stw	r2,-4(fp)
  80ed10:	e0bfff17 	ldw	r2,-4(fp)
}
  80ed14:	e037883a 	mov	sp,fp
  80ed18:	dfc00117 	ldw	ra,4(sp)
  80ed1c:	df000017 	ldw	fp,0(sp)
  80ed20:	dec00204 	addi	sp,sp,8
  80ed24:	f800283a 	ret

0080ed28 <show_high_scores>:

void show_high_scores(struct HighScore *highScores[], int numHighScores)
{
  80ed28:	deffed04 	addi	sp,sp,-76
  80ed2c:	dfc01215 	stw	ra,72(sp)
  80ed30:	df001115 	stw	fp,68(sp)
  80ed34:	df001104 	addi	fp,sp,68
  80ed38:	e13ffe15 	stw	r4,-8(fp)
  80ed3c:	e17fff15 	stw	r5,-4(fp)
	int i, size;
	char high_score_string[50];

	alt_up_char_buffer_string(char_buffer, "NAME       SCORE", 33, 9);
  80ed40:	d13c2217 	ldw	r4,-3960(gp)
  80ed44:	014020f4 	movhi	r5,131
  80ed48:	29621604 	addi	r5,r5,-30632
  80ed4c:	01800844 	movi	r6,33
  80ed50:	01c00244 	movi	r7,9
  80ed54:	08216fc0 	call	8216fc <alt_up_char_buffer_string>

	if(numHighScores > MAX_NUM_HIGH_SCORES)
  80ed58:	e0bfff17 	ldw	r2,-4(fp)
  80ed5c:	10800550 	cmplti	r2,r2,21
  80ed60:	1000031e 	bne	r2,zero,80ed70 <show_high_scores+0x48>
		size = MAX_NUM_HIGH_SCORES;
  80ed64:	00800504 	movi	r2,20
  80ed68:	e0bfef15 	stw	r2,-68(fp)
  80ed6c:	00000206 	br	80ed78 <show_high_scores+0x50>
	else
		size = numHighScores;
  80ed70:	e0bfff17 	ldw	r2,-4(fp)
  80ed74:	e0bfef15 	stw	r2,-68(fp)
	for( i = 0; i < size; i++ )
  80ed78:	e03ff015 	stw	zero,-64(fp)
  80ed7c:	00002906 	br	80ee24 <show_high_scores+0xfc>
	{
		sprintf( high_score_string, "%.3s        %.5s", highScores[ i ]->name, highScores[i]->score );
  80ed80:	e0bff017 	ldw	r2,-64(fp)
  80ed84:	1085883a 	add	r2,r2,r2
  80ed88:	1085883a 	add	r2,r2,r2
  80ed8c:	1007883a 	mov	r3,r2
  80ed90:	e0bffe17 	ldw	r2,-8(fp)
  80ed94:	1885883a 	add	r2,r3,r2
  80ed98:	10800017 	ldw	r2,0(r2)
  80ed9c:	100d883a 	mov	r6,r2
  80eda0:	e0bff017 	ldw	r2,-64(fp)
  80eda4:	1085883a 	add	r2,r2,r2
  80eda8:	1085883a 	add	r2,r2,r2
  80edac:	1007883a 	mov	r3,r2
  80edb0:	e0bffe17 	ldw	r2,-8(fp)
  80edb4:	1885883a 	add	r2,r3,r2
  80edb8:	10800017 	ldw	r2,0(r2)
  80edbc:	11c00104 	addi	r7,r2,4
  80edc0:	e13ff104 	addi	r4,fp,-60
  80edc4:	014020f4 	movhi	r5,131
  80edc8:	29621b04 	addi	r5,r5,-30612
  80edcc:	081597c0 	call	81597c <sprintf>
		if(i > 9) {
  80edd0:	e0bff017 	ldw	r2,-64(fp)
  80edd4:	10800290 	cmplti	r2,r2,10
  80edd8:	1000081e 	bne	r2,zero,80edfc <show_high_scores+0xd4>
			alt_up_char_buffer_string(char_buffer, high_score_string, 33, 12 + i);
  80eddc:	d13c2217 	ldw	r4,-3960(gp)
  80ede0:	e0bff017 	ldw	r2,-64(fp)
  80ede4:	10800304 	addi	r2,r2,12
  80ede8:	100f883a 	mov	r7,r2
  80edec:	e17ff104 	addi	r5,fp,-60
  80edf0:	01800844 	movi	r6,33
  80edf4:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
  80edf8:	00000706 	br	80ee18 <show_high_scores+0xf0>
		} else
			alt_up_char_buffer_string(char_buffer, high_score_string, 33, 11 + i);
  80edfc:	d13c2217 	ldw	r4,-3960(gp)
  80ee00:	e0bff017 	ldw	r2,-64(fp)
  80ee04:	108002c4 	addi	r2,r2,11
  80ee08:	100f883a 	mov	r7,r2
  80ee0c:	e17ff104 	addi	r5,fp,-60
  80ee10:	01800844 	movi	r6,33
  80ee14:	08216fc0 	call	8216fc <alt_up_char_buffer_string>

	if(numHighScores > MAX_NUM_HIGH_SCORES)
		size = MAX_NUM_HIGH_SCORES;
	else
		size = numHighScores;
	for( i = 0; i < size; i++ )
  80ee18:	e0bff017 	ldw	r2,-64(fp)
  80ee1c:	10800044 	addi	r2,r2,1
  80ee20:	e0bff015 	stw	r2,-64(fp)
  80ee24:	e0fff017 	ldw	r3,-64(fp)
  80ee28:	e0bfef17 	ldw	r2,-68(fp)
  80ee2c:	18bfd416 	blt	r3,r2,80ed80 <show_high_scores+0x58>
		if(i > 9) {
			alt_up_char_buffer_string(char_buffer, high_score_string, 33, 12 + i);
		} else
			alt_up_char_buffer_string(char_buffer, high_score_string, 33, 11 + i);
	}
}
  80ee30:	e037883a 	mov	sp,fp
  80ee34:	dfc00117 	ldw	ra,4(sp)
  80ee38:	df000017 	ldw	fp,0(sp)
  80ee3c:	dec00204 	addi	sp,sp,8
  80ee40:	f800283a 	ret

0080ee44 <update_input_name>:

void update_input_name( struct KeyController* keyController, struct NameInput* nameInput )
{
  80ee44:	defffc04 	addi	sp,sp,-16
  80ee48:	dfc00315 	stw	ra,12(sp)
  80ee4c:	df000215 	stw	fp,8(sp)
  80ee50:	df000204 	addi	fp,sp,8
  80ee54:	e13ffe15 	stw	r4,-8(fp)
  80ee58:	e17fff15 	stw	r5,-4(fp)
	if( wasKeyJustPressed( keyController, 0 ) )
  80ee5c:	e13ffe17 	ldw	r4,-8(fp)
  80ee60:	000b883a 	mov	r5,zero
  80ee64:	080f6300 	call	80f630 <wasKeyJustPressed>
  80ee68:	10803fcc 	andi	r2,r2,255
  80ee6c:	1005003a 	cmpeq	r2,r2,zero
  80ee70:	1000061e 	bne	r2,zero,80ee8c <update_input_name+0x48>
		nameInput->index++;
  80ee74:	e0bfff17 	ldw	r2,-4(fp)
  80ee78:	10800117 	ldw	r2,4(r2)
  80ee7c:	10c00044 	addi	r3,r2,1
  80ee80:	e0bfff17 	ldw	r2,-4(fp)
  80ee84:	10c00115 	stw	r3,4(r2)
  80ee88:	00000f06 	br	80eec8 <update_input_name+0x84>
	else if( wasKeyJustPressed( keyController, 1 ) )
  80ee8c:	e13ffe17 	ldw	r4,-8(fp)
  80ee90:	01400044 	movi	r5,1
  80ee94:	080f6300 	call	80f630 <wasKeyJustPressed>
  80ee98:	10803fcc 	andi	r2,r2,255
  80ee9c:	1005003a 	cmpeq	r2,r2,zero
  80eea0:	1000091e 	bne	r2,zero,80eec8 <update_input_name+0x84>
	{
		if( nameInput->index > 0 )
  80eea4:	e0bfff17 	ldw	r2,-4(fp)
  80eea8:	10800117 	ldw	r2,4(r2)
  80eeac:	10800050 	cmplti	r2,r2,1
  80eeb0:	1000051e 	bne	r2,zero,80eec8 <update_input_name+0x84>
			nameInput->index--;
  80eeb4:	e0bfff17 	ldw	r2,-4(fp)
  80eeb8:	10800117 	ldw	r2,4(r2)
  80eebc:	10ffffc4 	addi	r3,r2,-1
  80eec0:	e0bfff17 	ldw	r2,-4(fp)
  80eec4:	10c00115 	stw	r3,4(r2)
	}
	if( wasKeyJustPressed( keyController, 2 ) )
  80eec8:	e13ffe17 	ldw	r4,-8(fp)
  80eecc:	01400084 	movi	r5,2
  80eed0:	080f6300 	call	80f630 <wasKeyJustPressed>
  80eed4:	10803fcc 	andi	r2,r2,255
  80eed8:	1005003a 	cmpeq	r2,r2,zero
  80eedc:	1000181e 	bne	r2,zero,80ef40 <update_input_name+0xfc>
	{
		if( nameInput->name[ nameInput->index ] < 255 )
  80eee0:	e0bfff17 	ldw	r2,-4(fp)
  80eee4:	10c00117 	ldw	r3,4(r2)
  80eee8:	e0bfff17 	ldw	r2,-4(fp)
  80eeec:	10c5883a 	add	r2,r2,r3
  80eef0:	10800003 	ldbu	r2,0(r2)
  80eef4:	10803fcc 	andi	r2,r2,255
  80eef8:	10803fe0 	cmpeqi	r2,r2,255
  80eefc:	10000b1e 	bne	r2,zero,80ef2c <update_input_name+0xe8>
			nameInput->name[ nameInput->index ]++;
  80ef00:	e0bfff17 	ldw	r2,-4(fp)
  80ef04:	11000117 	ldw	r4,4(r2)
  80ef08:	e0bfff17 	ldw	r2,-4(fp)
  80ef0c:	1105883a 	add	r2,r2,r4
  80ef10:	10800003 	ldbu	r2,0(r2)
  80ef14:	10800044 	addi	r2,r2,1
  80ef18:	1007883a 	mov	r3,r2
  80ef1c:	e0bfff17 	ldw	r2,-4(fp)
  80ef20:	1105883a 	add	r2,r2,r4
  80ef24:	10c00005 	stb	r3,0(r2)
  80ef28:	00000506 	br	80ef40 <update_input_name+0xfc>
		else
			nameInput->name[ nameInput->index ] = 0;
  80ef2c:	e0bfff17 	ldw	r2,-4(fp)
  80ef30:	10c00117 	ldw	r3,4(r2)
  80ef34:	e0bfff17 	ldw	r2,-4(fp)
  80ef38:	10c5883a 	add	r2,r2,r3
  80ef3c:	10000005 	stb	zero,0(r2)
	}
	if( wasKeyJustPressed( keyController, 3 ) )
  80ef40:	e13ffe17 	ldw	r4,-8(fp)
  80ef44:	014000c4 	movi	r5,3
  80ef48:	080f6300 	call	80f630 <wasKeyJustPressed>
  80ef4c:	10803fcc 	andi	r2,r2,255
  80ef50:	1005003a 	cmpeq	r2,r2,zero
  80ef54:	1000191e 	bne	r2,zero,80efbc <update_input_name+0x178>
	{
		if( nameInput->name[ nameInput->index ] > 0 )
  80ef58:	e0bfff17 	ldw	r2,-4(fp)
  80ef5c:	10c00117 	ldw	r3,4(r2)
  80ef60:	e0bfff17 	ldw	r2,-4(fp)
  80ef64:	10c5883a 	add	r2,r2,r3
  80ef68:	10800003 	ldbu	r2,0(r2)
  80ef6c:	10803fcc 	andi	r2,r2,255
  80ef70:	1005003a 	cmpeq	r2,r2,zero
  80ef74:	10000b1e 	bne	r2,zero,80efa4 <update_input_name+0x160>
			nameInput->name[ nameInput->index ]--;
  80ef78:	e0bfff17 	ldw	r2,-4(fp)
  80ef7c:	11000117 	ldw	r4,4(r2)
  80ef80:	e0bfff17 	ldw	r2,-4(fp)
  80ef84:	1105883a 	add	r2,r2,r4
  80ef88:	10800003 	ldbu	r2,0(r2)
  80ef8c:	10bfffc4 	addi	r2,r2,-1
  80ef90:	1007883a 	mov	r3,r2
  80ef94:	e0bfff17 	ldw	r2,-4(fp)
  80ef98:	1105883a 	add	r2,r2,r4
  80ef9c:	10c00005 	stb	r3,0(r2)
  80efa0:	00000606 	br	80efbc <update_input_name+0x178>
		else
			nameInput->name[ nameInput->index ] = 255;
  80efa4:	e0bfff17 	ldw	r2,-4(fp)
  80efa8:	10c00117 	ldw	r3,4(r2)
  80efac:	e0bfff17 	ldw	r2,-4(fp)
  80efb0:	10c7883a 	add	r3,r2,r3
  80efb4:	00bfffc4 	movi	r2,-1
  80efb8:	18800005 	stb	r2,0(r3)
	}
}
  80efbc:	e037883a 	mov	sp,fp
  80efc0:	dfc00117 	ldw	ra,4(sp)
  80efc4:	df000017 	ldw	fp,0(sp)
  80efc8:	dec00204 	addi	sp,sp,8
  80efcc:	f800283a 	ret

0080efd0 <get_name_input>:

struct NameInput* get_name_input( struct KeyController* keyController )
{
  80efd0:	defff704 	addi	sp,sp,-36
  80efd4:	dfc00815 	stw	ra,32(sp)
  80efd8:	df000715 	stw	fp,28(sp)
  80efdc:	df000704 	addi	fp,sp,28
  80efe0:	e13fff15 	stw	r4,-4(fp)
	int count = 0;
  80efe4:	e03ffe15 	stw	zero,-8(fp)
	int startX = 69;
  80efe8:	00801144 	movi	r2,69
  80efec:	e0bffd15 	stw	r2,-12(fp)
	int startY = 15;
  80eff0:	008003c4 	movi	r2,15
  80eff4:	e0bffc15 	stw	r2,-16(fp)
	int lastIndex = 0;
  80eff8:	e03ffb15 	stw	zero,-20(fp)
	struct NameInput* nameInput = (struct NameInput*)malloc(sizeof(struct NameInput));
  80effc:	01000204 	movi	r4,8
  80f000:	0814f580 	call	814f58 <malloc>
  80f004:	e0bffa15 	stw	r2,-24(fp)
	nameInput->index = 0;
  80f008:	e0bffa17 	ldw	r2,-24(fp)
  80f00c:	10000115 	stw	zero,4(r2)
	int i;
	for(i = 0; i < 3; i++) {
  80f010:	e03ff915 	stw	zero,-28(fp)
  80f014:	00000806 	br	80f038 <get_name_input+0x68>
		nameInput->name[i] = 'A';
  80f018:	e0fff917 	ldw	r3,-28(fp)
  80f01c:	e0bffa17 	ldw	r2,-24(fp)
  80f020:	10c7883a 	add	r3,r2,r3
  80f024:	00801044 	movi	r2,65
  80f028:	18800005 	stb	r2,0(r3)
	int startY = 15;
	int lastIndex = 0;
	struct NameInput* nameInput = (struct NameInput*)malloc(sizeof(struct NameInput));
	nameInput->index = 0;
	int i;
	for(i = 0; i < 3; i++) {
  80f02c:	e0bff917 	ldw	r2,-28(fp)
  80f030:	10800044 	addi	r2,r2,1
  80f034:	e0bff915 	stw	r2,-28(fp)
  80f038:	e0bff917 	ldw	r2,-28(fp)
  80f03c:	108000d0 	cmplti	r2,r2,3
  80f040:	103ff51e 	bne	r2,zero,80f018 <get_name_input+0x48>
		nameInput->name[i] = 'A';
	}

	alt_up_char_buffer_string(char_buffer, nameInput->name, startX, startY);
  80f044:	d13c2217 	ldw	r4,-3960(gp)
  80f048:	e0bffa17 	ldw	r2,-24(fp)
  80f04c:	100b883a 	mov	r5,r2
  80f050:	e1bffd17 	ldw	r6,-12(fp)
  80f054:	e1fffc17 	ldw	r7,-16(fp)
  80f058:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	addKeyListener( keyController, (void *)update_input_name, nameInput, 0xF );
  80f05c:	01402074 	movhi	r5,129
  80f060:	297b9104 	addi	r5,r5,-4540
  80f064:	e13fff17 	ldw	r4,-4(fp)
  80f068:	e1bffa17 	ldw	r6,-24(fp)
  80f06c:	01c003c4 	movi	r7,15
  80f070:	080f4f80 	call	80f4f8 <addKeyListener>

	while( nameInput->index < NAME_LENGTH - 1 )
  80f074:	00003c06 	br	80f168 <get_name_input+0x198>
	{
		if( count < 100000 )
  80f078:	e0fffe17 	ldw	r3,-8(fp)
  80f07c:	008000b4 	movhi	r2,2
  80f080:	10a1a7c4 	addi	r2,r2,-31073
  80f084:	10c00f16 	blt	r2,r3,80f0c4 <get_name_input+0xf4>
			alt_up_char_buffer_draw(char_buffer, nameInput->name[nameInput->index], startX+nameInput->index, startY);
  80f088:	d13c2217 	ldw	r4,-3960(gp)
  80f08c:	e0bffa17 	ldw	r2,-24(fp)
  80f090:	10c00117 	ldw	r3,4(r2)
  80f094:	e0bffa17 	ldw	r2,-24(fp)
  80f098:	10c5883a 	add	r2,r2,r3
  80f09c:	10800003 	ldbu	r2,0(r2)
  80f0a0:	11403fcc 	andi	r5,r2,255
  80f0a4:	e0bffa17 	ldw	r2,-24(fp)
  80f0a8:	10c00117 	ldw	r3,4(r2)
  80f0ac:	e0bffd17 	ldw	r2,-12(fp)
  80f0b0:	1885883a 	add	r2,r3,r2
  80f0b4:	100d883a 	mov	r6,r2
  80f0b8:	e1fffc17 	ldw	r7,-16(fp)
  80f0bc:	082162c0 	call	82162c <alt_up_char_buffer_draw>
  80f0c0:	00001006 	br	80f104 <get_name_input+0x134>
		else if( count < 200000 )
  80f0c4:	e0fffe17 	ldw	r3,-8(fp)
  80f0c8:	008000f4 	movhi	r2,3
  80f0cc:	10834fc4 	addi	r2,r2,3391
  80f0d0:	10c00b16 	blt	r2,r3,80f100 <get_name_input+0x130>
			alt_up_char_buffer_string(char_buffer, " ", startX+nameInput->index, startY);
  80f0d4:	d13c2217 	ldw	r4,-3960(gp)
  80f0d8:	e0bffa17 	ldw	r2,-24(fp)
  80f0dc:	10c00117 	ldw	r3,4(r2)
  80f0e0:	e0bffd17 	ldw	r2,-12(fp)
  80f0e4:	1885883a 	add	r2,r3,r2
  80f0e8:	100d883a 	mov	r6,r2
  80f0ec:	e1fffc17 	ldw	r7,-16(fp)
  80f0f0:	014020f4 	movhi	r5,131
  80f0f4:	29622004 	addi	r5,r5,-30592
  80f0f8:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
  80f0fc:	00000106 	br	80f104 <get_name_input+0x134>
		else
			count = 0;
  80f100:	e03ffe15 	stw	zero,-8(fp)
		count++;
  80f104:	e0bffe17 	ldw	r2,-8(fp)
  80f108:	10800044 	addi	r2,r2,1
  80f10c:	e0bffe15 	stw	r2,-8(fp)

		// Check to make sure the last modified char is displayed
		if( lastIndex != nameInput->index )
  80f110:	e0bffa17 	ldw	r2,-24(fp)
  80f114:	10c00117 	ldw	r3,4(r2)
  80f118:	e0bffb17 	ldw	r2,-20(fp)
  80f11c:	18801226 	beq	r3,r2,80f168 <get_name_input+0x198>
		{
			if( lastIndex < NAME_LENGTH - 1 )
  80f120:	e0bffb17 	ldw	r2,-20(fp)
  80f124:	108000c8 	cmpgei	r2,r2,3
  80f128:	10000c1e 	bne	r2,zero,80f15c <get_name_input+0x18c>
				alt_up_char_buffer_draw(char_buffer, nameInput->name[lastIndex], startX+lastIndex, startY);
  80f12c:	d13c2217 	ldw	r4,-3960(gp)
  80f130:	e0fffb17 	ldw	r3,-20(fp)
  80f134:	e0bffa17 	ldw	r2,-24(fp)
  80f138:	10c5883a 	add	r2,r2,r3
  80f13c:	10800003 	ldbu	r2,0(r2)
  80f140:	11403fcc 	andi	r5,r2,255
  80f144:	e0fffd17 	ldw	r3,-12(fp)
  80f148:	e0bffb17 	ldw	r2,-20(fp)
  80f14c:	1885883a 	add	r2,r3,r2
  80f150:	100d883a 	mov	r6,r2
  80f154:	e1fffc17 	ldw	r7,-16(fp)
  80f158:	082162c0 	call	82162c <alt_up_char_buffer_draw>
			lastIndex = nameInput->index;
  80f15c:	e0bffa17 	ldw	r2,-24(fp)
  80f160:	10800117 	ldw	r2,4(r2)
  80f164:	e0bffb15 	stw	r2,-20(fp)
	}

	alt_up_char_buffer_string(char_buffer, nameInput->name, startX, startY);
	addKeyListener( keyController, (void *)update_input_name, nameInput, 0xF );

	while( nameInput->index < NAME_LENGTH - 1 )
  80f168:	e0bffa17 	ldw	r2,-24(fp)
  80f16c:	10800117 	ldw	r2,4(r2)
  80f170:	108000d0 	cmplti	r2,r2,3
  80f174:	103fc01e 	bne	r2,zero,80f078 <get_name_input+0xa8>
			if( lastIndex < NAME_LENGTH - 1 )
				alt_up_char_buffer_draw(char_buffer, nameInput->name[lastIndex], startX+lastIndex, startY);
			lastIndex = nameInput->index;
		}
	}
	removeKeyListener( keyController );
  80f178:	e13fff17 	ldw	r4,-4(fp)
  80f17c:	080f56c0 	call	80f56c <removeKeyListener>
	return nameInput;
  80f180:	e0bffa17 	ldw	r2,-24(fp)
}
  80f184:	e037883a 	mov	sp,fp
  80f188:	dfc00117 	ldw	ra,4(sp)
  80f18c:	df000017 	ldw	fp,0(sp)
  80f190:	dec00204 	addi	sp,sp,8
  80f194:	f800283a 	ret

0080f198 <start_high_score_screen>:

void start_high_score_screen( unsigned int score, struct KeyController* keyController )
{
  80f198:	deffe504 	addi	sp,sp,-108
  80f19c:	dfc01a15 	stw	ra,104(sp)
  80f1a0:	df001915 	stw	fp,100(sp)
  80f1a4:	df001904 	addi	fp,sp,100
  80f1a8:	e13ffe15 	stw	r4,-8(fp)
  80f1ac:	e17fff15 	stw	r5,-4(fp)
	alt_up_char_buffer_clear(char_buffer);
  80f1b0:	d13c2217 	ldw	r4,-3960(gp)
  80f1b4:	08218100 	call	821810 <alt_up_char_buffer_clear>
	alt_up_char_buffer_string(char_buffer, "Game Over", 65, 10);
  80f1b8:	d13c2217 	ldw	r4,-3960(gp)
  80f1bc:	014020f4 	movhi	r5,131
  80f1c0:	29622104 	addi	r5,r5,-30588
  80f1c4:	01801044 	movi	r6,65
  80f1c8:	01c00284 	movi	r7,10
  80f1cc:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "PLEASE", 67, 12);
  80f1d0:	d13c2217 	ldw	r4,-3960(gp)
  80f1d4:	014020f4 	movhi	r5,131
  80f1d8:	29622404 	addi	r5,r5,-30576
  80f1dc:	018010c4 	movi	r6,67
  80f1e0:	01c00304 	movi	r7,12
  80f1e4:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "ENTER YOUR", 65, 13);
  80f1e8:	d13c2217 	ldw	r4,-3960(gp)
  80f1ec:	014020f4 	movhi	r5,131
  80f1f0:	29622604 	addi	r5,r5,-30568
  80f1f4:	01801044 	movi	r6,65
  80f1f8:	01c00344 	movi	r7,13
  80f1fc:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "INITIALS", 66, 14);
  80f200:	d13c2217 	ldw	r4,-3960(gp)
  80f204:	014020f4 	movhi	r5,131
  80f208:	29622904 	addi	r5,r5,-30556
  80f20c:	01801084 	movi	r6,66
  80f210:	01c00384 	movi	r7,14
  80f214:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "Credits", 65, 30);
  80f218:	d13c2217 	ldw	r4,-3960(gp)
  80f21c:	014020f4 	movhi	r5,131
  80f220:	29622c04 	addi	r5,r5,-30544
  80f224:	01801044 	movi	r6,65
  80f228:	01c00784 	movi	r7,30
  80f22c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "Adam Berg", 63, 32);
  80f230:	d13c2217 	ldw	r4,-3960(gp)
  80f234:	014020f4 	movhi	r5,131
  80f238:	29622e04 	addi	r5,r5,-30536
  80f23c:	01800fc4 	movi	r6,63
  80f240:	01c00804 	movi	r7,32
  80f244:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "Diana Sutandie", 63, 33);
  80f248:	d13c2217 	ldw	r4,-3960(gp)
  80f24c:	014020f4 	movhi	r5,131
  80f250:	29623104 	addi	r5,r5,-30524
  80f254:	01800fc4 	movi	r6,63
  80f258:	01c00844 	movi	r7,33
  80f25c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "Perry Yan", 63, 34);
  80f260:	d13c2217 	ldw	r4,-3960(gp)
  80f264:	014020f4 	movhi	r5,131
  80f268:	29623504 	addi	r5,r5,-30508
  80f26c:	01800fc4 	movi	r6,63
  80f270:	01c00884 	movi	r7,34
  80f274:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "Fahad Almisbahi", 63, 35);
  80f278:	d13c2217 	ldw	r4,-3960(gp)
  80f27c:	014020f4 	movhi	r5,131
  80f280:	29623804 	addi	r5,r5,-30496
  80f284:	01800fc4 	movi	r6,63
  80f288:	01c008c4 	movi	r7,35
  80f28c:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "Danny Hsieh", 63, 36);
  80f290:	d13c2217 	ldw	r4,-3960(gp)
  80f294:	014020f4 	movhi	r5,131
  80f298:	29623c04 	addi	r5,r5,-30480
  80f29c:	01800fc4 	movi	r6,63
  80f2a0:	01c00904 	movi	r7,36
  80f2a4:	08216fc0 	call	8216fc <alt_up_char_buffer_string>

	struct HighScore *highScores[MAX_NUM_HIGH_SCORES];

	int numHighScores;
	while((numHighScores= read_high_scores(highScores)) == -1) {
  80f2a8:	00000306 	br	80f2b8 <start_high_score_screen+0x120>
		printf("reading high score fail\n");
  80f2ac:	010020f4 	movhi	r4,131
  80f2b0:	21223f04 	addi	r4,r4,-30468
  80f2b4:	08158640 	call	815864 <puts>
	alt_up_char_buffer_string(char_buffer, "Danny Hsieh", 63, 36);

	struct HighScore *highScores[MAX_NUM_HIGH_SCORES];

	int numHighScores;
	while((numHighScores= read_high_scores(highScores)) == -1) {
  80f2b8:	e13fea04 	addi	r4,fp,-88
  80f2bc:	080e8880 	call	80e888 <read_high_scores>
  80f2c0:	e0bfe915 	stw	r2,-92(fp)
  80f2c4:	e0bfe917 	ldw	r2,-92(fp)
  80f2c8:	10bfffe0 	cmpeqi	r2,r2,-1
  80f2cc:	103ff71e 	bne	r2,zero,80f2ac <start_high_score_screen+0x114>
		printf("reading high score fail\n");
	}

	struct NameInput* nameInput = get_name_input(keyController);
  80f2d0:	e13fff17 	ldw	r4,-4(fp)
  80f2d4:	080efd00 	call	80efd0 <get_name_input>
  80f2d8:	e0bfe815 	stw	r2,-96(fp)

	add_high_score( highScores, numHighScores, nameInput->name, score );
  80f2dc:	e1bfe817 	ldw	r6,-96(fp)
  80f2e0:	e1fffe17 	ldw	r7,-8(fp)
  80f2e4:	e13fea04 	addi	r4,fp,-88
  80f2e8:	e17fe917 	ldw	r5,-92(fp)
  80f2ec:	080e5ac0 	call	80e5ac <add_high_score>
	numHighScores++;
  80f2f0:	e0bfe917 	ldw	r2,-92(fp)
  80f2f4:	10800044 	addi	r2,r2,1
  80f2f8:	e0bfe915 	stw	r2,-92(fp)

	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
  80f2fc:	d13c3317 	ldw	r4,-3892(gp)
  80f300:	000b883a 	mov	r5,zero
  80f304:	0821b300 	call	821b30 <alt_up_pixel_buffer_dma_clear_screen>

	sort_high_scores(highScores, numHighScores);
  80f308:	e13fea04 	addi	r4,fp,-88
  80f30c:	e17fe917 	ldw	r5,-92(fp)
  80f310:	080e6600 	call	80e660 <sort_high_scores>
	write_high_scores(highScores, numHighScores);
  80f314:	e13fea04 	addi	r4,fp,-88
  80f318:	e17fe917 	ldw	r5,-92(fp)
  80f31c:	080eb440 	call	80eb44 <write_high_scores>
	while(read_high_scores(highScores)==-1) {
  80f320:	00000306 	br	80f330 <start_high_score_screen+0x198>
		printf("reading high score fail\n");
  80f324:	010020f4 	movhi	r4,131
  80f328:	21223f04 	addi	r4,r4,-30468
  80f32c:	08158640 	call	815864 <puts>

	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);

	sort_high_scores(highScores, numHighScores);
	write_high_scores(highScores, numHighScores);
	while(read_high_scores(highScores)==-1) {
  80f330:	e13fea04 	addi	r4,fp,-88
  80f334:	080e8880 	call	80e888 <read_high_scores>
  80f338:	10bfffe0 	cmpeqi	r2,r2,-1
  80f33c:	103ff91e 	bne	r2,zero,80f324 <start_high_score_screen+0x18c>
		printf("reading high score fail\n");
	}
	show_high_scores(highScores, numHighScores);
  80f340:	e13fea04 	addi	r4,fp,-88
  80f344:	e17fe917 	ldw	r5,-92(fp)
  80f348:	080ed280 	call	80ed28 <show_high_scores>

	// Wait for 0 key to be pressed
	//while(isKeyUp(3));

	//clear prompt for user to enter the name
	alt_up_char_buffer_string(char_buffer, "              ", 67, 12);
  80f34c:	d13c2217 	ldw	r4,-3960(gp)
  80f350:	014020f4 	movhi	r5,131
  80f354:	29624504 	addi	r5,r5,-30444
  80f358:	018010c4 	movi	r6,67
  80f35c:	01c00304 	movi	r7,12
  80f360:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "              ", 65, 13);
  80f364:	d13c2217 	ldw	r4,-3960(gp)
  80f368:	014020f4 	movhi	r5,131
  80f36c:	29624504 	addi	r5,r5,-30444
  80f370:	01801044 	movi	r6,65
  80f374:	01c00344 	movi	r7,13
  80f378:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buffer, "              ", 66, 14);
  80f37c:	d13c2217 	ldw	r4,-3960(gp)
  80f380:	014020f4 	movhi	r5,131
  80f384:	29624504 	addi	r5,r5,-30444
  80f388:	01801084 	movi	r6,66
  80f38c:	01c00384 	movi	r7,14
  80f390:	08216fc0 	call	8216fc <alt_up_char_buffer_string>
	free(nameInput);
  80f394:	e13fe817 	ldw	r4,-96(fp)
  80f398:	0814f440 	call	814f44 <free>
	nameInput = NULL;
  80f39c:	e03fe815 	stw	zero,-96(fp)
	int i;
	for(i = 0; i < MAX_NUM_HIGH_SCORES; i++) {
  80f3a0:	e03fe715 	stw	zero,-100(fp)
  80f3a4:	00000b06 	br	80f3d4 <start_high_score_screen+0x23c>
		safefree(&highScores[i]);
  80f3a8:	e0bfe717 	ldw	r2,-100(fp)
  80f3ac:	1085883a 	add	r2,r2,r2
  80f3b0:	1085883a 	add	r2,r2,r2
  80f3b4:	1007883a 	mov	r3,r2
  80f3b8:	e0bfea04 	addi	r2,fp,-88
  80f3bc:	10c5883a 	add	r2,r2,r3
  80f3c0:	1009883a 	mov	r4,r2
  80f3c4:	080af080 	call	80af08 <safefree>
	alt_up_char_buffer_string(char_buffer, "              ", 65, 13);
	alt_up_char_buffer_string(char_buffer, "              ", 66, 14);
	free(nameInput);
	nameInput = NULL;
	int i;
	for(i = 0; i < MAX_NUM_HIGH_SCORES; i++) {
  80f3c8:	e0bfe717 	ldw	r2,-100(fp)
  80f3cc:	10800044 	addi	r2,r2,1
  80f3d0:	e0bfe715 	stw	r2,-100(fp)
  80f3d4:	e0bfe717 	ldw	r2,-100(fp)
  80f3d8:	10800510 	cmplti	r2,r2,20
  80f3dc:	103ff21e 	bne	r2,zero,80f3a8 <start_high_score_screen+0x210>
		safefree(&highScores[i]);
	}
}
  80f3e0:	e037883a 	mov	sp,fp
  80f3e4:	dfc00117 	ldw	ra,4(sp)
  80f3e8:	df000017 	ldw	fp,0(sp)
  80f3ec:	dec00204 	addi	sp,sp,8
  80f3f0:	f800283a 	ret

0080f3f4 <waveLEDR>:

#include "Interface.h"
#include "stdlib.h"
#include "stdio.h"
#include <io.h>
void waveLEDR() {
  80f3f4:	defffc04 	addi	sp,sp,-16
  80f3f8:	dfc00315 	stw	ra,12(sp)
  80f3fc:	df000215 	stw	fp,8(sp)
  80f400:	df000204 	addi	fp,sp,8
	int i;
	int k = 1;
  80f404:	00800044 	movi	r2,1
  80f408:	e0bffe15 	stw	r2,-8(fp)
	for(i = 0; i < 100; i++) {
  80f40c:	e03fff15 	stw	zero,-4(fp)
  80f410:	00001106 	br	80f458 <waveLEDR+0x64>
		IOWR_8DIRECT(LEDR_BASE, 0, k);
  80f414:	00c04234 	movhi	r3,264
  80f418:	18cd2804 	addi	r3,r3,13472
  80f41c:	e0bffe17 	ldw	r2,-8(fp)
  80f420:	18800025 	stbio	r2,0(r3)
		k = k*2;
  80f424:	e0bffe17 	ldw	r2,-8(fp)
  80f428:	1085883a 	add	r2,r2,r2
  80f42c:	e0bffe15 	stw	r2,-8(fp)
		usleep(20000);
  80f430:	01138804 	movi	r4,20000
  80f434:	081e6f00 	call	81e6f0 <usleep>
		if(k > 65536) k = 1;
  80f438:	e0fffe17 	ldw	r3,-8(fp)
  80f43c:	00800074 	movhi	r2,1
  80f440:	10c0020e 	bge	r2,r3,80f44c <waveLEDR+0x58>
  80f444:	00800044 	movi	r2,1
  80f448:	e0bffe15 	stw	r2,-8(fp)
#include "stdio.h"
#include <io.h>
void waveLEDR() {
	int i;
	int k = 1;
	for(i = 0; i < 100; i++) {
  80f44c:	e0bfff17 	ldw	r2,-4(fp)
  80f450:	10800044 	addi	r2,r2,1
  80f454:	e0bfff15 	stw	r2,-4(fp)
  80f458:	e0bfff17 	ldw	r2,-4(fp)
  80f45c:	10801910 	cmplti	r2,r2,100
  80f460:	103fec1e 	bne	r2,zero,80f414 <waveLEDR+0x20>
		IOWR_8DIRECT(LEDR_BASE, 0, k);
		k = k*2;
		usleep(20000);
		if(k > 65536) k = 1;
	}
}
  80f464:	e037883a 	mov	sp,fp
  80f468:	dfc00117 	ldw	ra,4(sp)
  80f46c:	df000017 	ldw	fp,0(sp)
  80f470:	dec00204 	addi	sp,sp,8
  80f474:	f800283a 	ret

0080f478 <initKeyController>:
 */

#include "KeyController.h"

struct KeyController* initKeyController(void)
{
  80f478:	defffd04 	addi	sp,sp,-12
  80f47c:	dfc00215 	stw	ra,8(sp)
  80f480:	df000115 	stw	fp,4(sp)
  80f484:	df000104 	addi	fp,sp,4
	struct KeyController* this = (struct KeyController*)malloc(sizeof(struct KeyController));
  80f488:	01000404 	movi	r4,16
  80f48c:	0814f580 	call	814f58 <malloc>
  80f490:	e0bfff15 	stw	r2,-4(fp)
	this->keys_changed = 0;
  80f494:	e0bfff17 	ldw	r2,-4(fp)
  80f498:	10000315 	stw	zero,12(r2)
	this->keys = 0;
  80f49c:	e0bfff17 	ldw	r2,-4(fp)
  80f4a0:	10000215 	stw	zero,8(r2)
	this->key_listener = NULL;
  80f4a4:	e0bfff17 	ldw	r2,-4(fp)
  80f4a8:	10000015 	stw	zero,0(r2)
	this->listener_context = NULL;
  80f4ac:	e0bfff17 	ldw	r2,-4(fp)
  80f4b0:	10000115 	stw	zero,4(r2)

	alt_irq_register(KEYS_IRQ, this, (void*) key_ISR);
  80f4b4:	01000084 	movi	r4,2
  80f4b8:	e17fff17 	ldw	r5,-4(fp)
  80f4bc:	01802074 	movhi	r6,129
  80f4c0:	31bd6a04 	addi	r6,r6,-2648
  80f4c4:	081dce80 	call	81dce8 <alt_irq_register>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0);
  80f4c8:	00804234 	movhi	r2,264
  80f4cc:	108d1f04 	addi	r2,r2,13436
  80f4d0:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0);
  80f4d4:	00804234 	movhi	r2,264
  80f4d8:	108d1e04 	addi	r2,r2,13432
  80f4dc:	10000035 	stwio	zero,0(r2)
	return this;
  80f4e0:	e0bfff17 	ldw	r2,-4(fp)
}
  80f4e4:	e037883a 	mov	sp,fp
  80f4e8:	dfc00117 	ldw	ra,4(sp)
  80f4ec:	df000017 	ldw	fp,0(sp)
  80f4f0:	dec00204 	addi	sp,sp,8
  80f4f4:	f800283a 	ret

0080f4f8 <addKeyListener>:
 * @param listener - Function to call -- accepts the KeyController and a context object
 * @param context - A pointer to pass any value/object/struct to the callback function
 * @param keys_to_listen_to - Specify which switches should trigger the interrupt ( 0x2 would be KEY(1) -- 0x3 would be KEY(1) and KEY(0) )
 */
void addKeyListener(struct KeyController* this, void (*listener)(struct KeyController*, void *), void *context, int keys_to_listen_to)
{
  80f4f8:	defffa04 	addi	sp,sp,-24
  80f4fc:	dfc00515 	stw	ra,20(sp)
  80f500:	df000415 	stw	fp,16(sp)
  80f504:	df000404 	addi	fp,sp,16
  80f508:	e13ffc15 	stw	r4,-16(fp)
  80f50c:	e17ffd15 	stw	r5,-12(fp)
  80f510:	e1bffe15 	stw	r6,-8(fp)
  80f514:	e1ffff15 	stw	r7,-4(fp)
	if( this->key_listener != NULL )
  80f518:	e0bffc17 	ldw	r2,-16(fp)
  80f51c:	10800017 	ldw	r2,0(r2)
  80f520:	1005003a 	cmpeq	r2,r2,zero
  80f524:	1000021e 	bne	r2,zero,80f530 <addKeyListener+0x38>
	{
		removeKeyListener( this );
  80f528:	e13ffc17 	ldw	r4,-16(fp)
  80f52c:	080f56c0 	call	80f56c <removeKeyListener>
	}
	this->key_listener = listener;
  80f530:	e0fffc17 	ldw	r3,-16(fp)
  80f534:	e0bffd17 	ldw	r2,-12(fp)
  80f538:	18800015 	stw	r2,0(r3)
	this->listener_context = context;
  80f53c:	e0fffc17 	ldw	r3,-16(fp)
  80f540:	e0bffe17 	ldw	r2,-8(fp)
  80f544:	18800115 	stw	r2,4(r3)

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, keys_to_listen_to);
  80f548:	00c04234 	movhi	r3,264
  80f54c:	18cd1e04 	addi	r3,r3,13432
  80f550:	e0bfff17 	ldw	r2,-4(fp)
  80f554:	18800035 	stwio	r2,0(r3)
}
  80f558:	e037883a 	mov	sp,fp
  80f55c:	dfc00117 	ldw	ra,4(sp)
  80f560:	df000017 	ldw	fp,0(sp)
  80f564:	dec00204 	addi	sp,sp,8
  80f568:	f800283a 	ret

0080f56c <removeKeyListener>:

/**
 * Remove the currently registered callback function
 */
void removeKeyListener(struct KeyController* this)
{
  80f56c:	defffe04 	addi	sp,sp,-8
  80f570:	df000115 	stw	fp,4(sp)
  80f574:	df000104 	addi	fp,sp,4
  80f578:	e13fff15 	stw	r4,-4(fp)
	this->key_listener = NULL;
  80f57c:	e0bfff17 	ldw	r2,-4(fp)
  80f580:	10000015 	stw	zero,0(r2)
	this->listener_context = NULL;
  80f584:	e0bfff17 	ldw	r2,-4(fp)
  80f588:	10000115 	stw	zero,4(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE,0x0);
  80f58c:	00804234 	movhi	r2,264
  80f590:	108d1e04 	addi	r2,r2,13432
  80f594:	10000035 	stwio	zero,0(r2)
}
  80f598:	e037883a 	mov	sp,fp
  80f59c:	df000017 	ldw	fp,0(sp)
  80f5a0:	dec00104 	addi	sp,sp,4
  80f5a4:	f800283a 	ret

0080f5a8 <key_ISR>:
/**
 * The Interrupt service routine for the keys
 * This reads the values of the keys and then calls the registered key listener.
 */
void key_ISR(struct KeyController* this, unsigned int id)
{
  80f5a8:	defffc04 	addi	sp,sp,-16
  80f5ac:	dfc00315 	stw	ra,12(sp)
  80f5b0:	df000215 	stw	fp,8(sp)
  80f5b4:	df000204 	addi	fp,sp,8
  80f5b8:	e13ffe15 	stw	r4,-8(fp)
  80f5bc:	e17fff15 	stw	r5,-4(fp)
	this->keys = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
  80f5c0:	00804234 	movhi	r2,264
  80f5c4:	108d1c04 	addi	r2,r2,13424
  80f5c8:	10c00037 	ldwio	r3,0(r2)
  80f5cc:	e0bffe17 	ldw	r2,-8(fp)
  80f5d0:	10c00215 	stw	r3,8(r2)
	this->keys_changed = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
  80f5d4:	00804234 	movhi	r2,264
  80f5d8:	108d1f04 	addi	r2,r2,13436
  80f5dc:	10c00037 	ldwio	r3,0(r2)
  80f5e0:	e0bffe17 	ldw	r2,-8(fp)
  80f5e4:	10c00315 	stw	r3,12(r2)

	if( this->key_listener != NULL )
  80f5e8:	e0bffe17 	ldw	r2,-8(fp)
  80f5ec:	10800017 	ldw	r2,0(r2)
  80f5f0:	1005003a 	cmpeq	r2,r2,zero
  80f5f4:	1000061e 	bne	r2,zero,80f610 <key_ISR+0x68>
		( *this->key_listener )( this, this->listener_context );
  80f5f8:	e0bffe17 	ldw	r2,-8(fp)
  80f5fc:	10c00017 	ldw	r3,0(r2)
  80f600:	e0bffe17 	ldw	r2,-8(fp)
  80f604:	11400117 	ldw	r5,4(r2)
  80f608:	e13ffe17 	ldw	r4,-8(fp)
  80f60c:	183ee83a 	callr	r3

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP( KEYS_BASE, 0);
  80f610:	00804234 	movhi	r2,264
  80f614:	108d1f04 	addi	r2,r2,13436
  80f618:	10000035 	stwio	zero,0(r2)
}
  80f61c:	e037883a 	mov	sp,fp
  80f620:	dfc00117 	ldw	ra,4(sp)
  80f624:	df000017 	ldw	fp,0(sp)
  80f628:	dec00204 	addi	sp,sp,8
  80f62c:	f800283a 	ret

0080f630 <wasKeyJustPressed>:

/**
 * Returns true if the key was pressed when the last ISR was called
 */
bool wasKeyJustPressed(struct KeyController* this, int key)
{
  80f630:	defffb04 	addi	sp,sp,-20
  80f634:	dfc00415 	stw	ra,16(sp)
  80f638:	df000315 	stw	fp,12(sp)
  80f63c:	df000304 	addi	fp,sp,12
  80f640:	e13ffd15 	stw	r4,-12(fp)
  80f644:	e17ffe15 	stw	r5,-8(fp)
	return isBitSet(this->keys_changed, key) && isKeyDown(key);
  80f648:	e0bffd17 	ldw	r2,-12(fp)
  80f64c:	10800317 	ldw	r2,12(r2)
  80f650:	11003fcc 	andi	r4,r2,255
  80f654:	2100201c 	xori	r4,r4,128
  80f658:	213fe004 	addi	r4,r4,-128
  80f65c:	e17ffe17 	ldw	r5,-8(fp)
  80f660:	080174c0 	call	80174c <isBitSet>
  80f664:	1080005c 	xori	r2,r2,1
  80f668:	10803fcc 	andi	r2,r2,255
  80f66c:	1004c03a 	cmpne	r2,r2,zero
  80f670:	1000091e 	bne	r2,zero,80f698 <wasKeyJustPressed+0x68>
  80f674:	e13ffe17 	ldw	r4,-8(fp)
  80f678:	080f7480 	call	80f748 <isKeyDown>
  80f67c:	1080005c 	xori	r2,r2,1
  80f680:	10803fcc 	andi	r2,r2,255
  80f684:	1004c03a 	cmpne	r2,r2,zero
  80f688:	1000031e 	bne	r2,zero,80f698 <wasKeyJustPressed+0x68>
  80f68c:	00800044 	movi	r2,1
  80f690:	e0bfff15 	stw	r2,-4(fp)
  80f694:	00000106 	br	80f69c <wasKeyJustPressed+0x6c>
  80f698:	e03fff15 	stw	zero,-4(fp)
  80f69c:	e0ffff17 	ldw	r3,-4(fp)
  80f6a0:	1805883a 	mov	r2,r3
  80f6a4:	10803fcc 	andi	r2,r2,255
}
  80f6a8:	e037883a 	mov	sp,fp
  80f6ac:	dfc00117 	ldw	ra,4(sp)
  80f6b0:	df000017 	ldw	fp,0(sp)
  80f6b4:	dec00204 	addi	sp,sp,8
  80f6b8:	f800283a 	ret

0080f6bc <wasKeyJustReleased>:

/**
 * Returns true if the key was released when the last ISR was called
 */
bool wasKeyJustReleased(struct KeyController* this, int key)
{
  80f6bc:	defffb04 	addi	sp,sp,-20
  80f6c0:	dfc00415 	stw	ra,16(sp)
  80f6c4:	df000315 	stw	fp,12(sp)
  80f6c8:	df000304 	addi	fp,sp,12
  80f6cc:	e13ffd15 	stw	r4,-12(fp)
  80f6d0:	e17ffe15 	stw	r5,-8(fp)
	return isBitSet(this->keys_changed, key) && isKeyUp(key);
  80f6d4:	e0bffd17 	ldw	r2,-12(fp)
  80f6d8:	10800317 	ldw	r2,12(r2)
  80f6dc:	11003fcc 	andi	r4,r2,255
  80f6e0:	2100201c 	xori	r4,r4,128
  80f6e4:	213fe004 	addi	r4,r4,-128
  80f6e8:	e17ffe17 	ldw	r5,-8(fp)
  80f6ec:	080174c0 	call	80174c <isBitSet>
  80f6f0:	1080005c 	xori	r2,r2,1
  80f6f4:	10803fcc 	andi	r2,r2,255
  80f6f8:	1004c03a 	cmpne	r2,r2,zero
  80f6fc:	1000091e 	bne	r2,zero,80f724 <wasKeyJustReleased+0x68>
  80f700:	e13ffe17 	ldw	r4,-8(fp)
  80f704:	080f79c0 	call	80f79c <isKeyUp>
  80f708:	1080005c 	xori	r2,r2,1
  80f70c:	10803fcc 	andi	r2,r2,255
  80f710:	1004c03a 	cmpne	r2,r2,zero
  80f714:	1000031e 	bne	r2,zero,80f724 <wasKeyJustReleased+0x68>
  80f718:	00800044 	movi	r2,1
  80f71c:	e0bfff15 	stw	r2,-4(fp)
  80f720:	00000106 	br	80f728 <wasKeyJustReleased+0x6c>
  80f724:	e03fff15 	stw	zero,-4(fp)
  80f728:	e0ffff17 	ldw	r3,-4(fp)
  80f72c:	1805883a 	mov	r2,r3
  80f730:	10803fcc 	andi	r2,r2,255
}
  80f734:	e037883a 	mov	sp,fp
  80f738:	dfc00117 	ldw	ra,4(sp)
  80f73c:	df000017 	ldw	fp,0(sp)
  80f740:	dec00204 	addi	sp,sp,8
  80f744:	f800283a 	ret

0080f748 <isKeyDown>:

/**
 * @param key - number of the key ( 0 - 4 )
 * returns 1 if key is down
 */
bool isKeyDown(int key) {
  80f748:	defffd04 	addi	sp,sp,-12
  80f74c:	dfc00215 	stw	ra,8(sp)
  80f750:	df000115 	stw	fp,4(sp)
  80f754:	df000104 	addi	fp,sp,4
  80f758:	e13fff15 	stw	r4,-4(fp)
	return !isBitSet( IORD_8DIRECT(KEYS_BASE, 0 ), key );
  80f75c:	00804234 	movhi	r2,264
  80f760:	108d1c04 	addi	r2,r2,13424
  80f764:	10800023 	ldbuio	r2,0(r2)
  80f768:	11003fcc 	andi	r4,r2,255
  80f76c:	2100201c 	xori	r4,r4,128
  80f770:	213fe004 	addi	r4,r4,-128
  80f774:	e17fff17 	ldw	r5,-4(fp)
  80f778:	080174c0 	call	80174c <isBitSet>
  80f77c:	10803fcc 	andi	r2,r2,255
  80f780:	1080005c 	xori	r2,r2,1
  80f784:	10803fcc 	andi	r2,r2,255
}
  80f788:	e037883a 	mov	sp,fp
  80f78c:	dfc00117 	ldw	ra,4(sp)
  80f790:	df000017 	ldw	fp,0(sp)
  80f794:	dec00204 	addi	sp,sp,8
  80f798:	f800283a 	ret

0080f79c <isKeyUp>:

/**
 * @param key - number of the key ( 0 - 4 )
 * returns 1 if key is up
 */
bool isKeyUp(int key) {
  80f79c:	defffd04 	addi	sp,sp,-12
  80f7a0:	dfc00215 	stw	ra,8(sp)
  80f7a4:	df000115 	stw	fp,4(sp)
  80f7a8:	df000104 	addi	fp,sp,4
  80f7ac:	e13fff15 	stw	r4,-4(fp)
	return isBitSet( IORD_8DIRECT(KEYS_BASE, 0 ), key );
  80f7b0:	00804234 	movhi	r2,264
  80f7b4:	108d1c04 	addi	r2,r2,13424
  80f7b8:	10800023 	ldbuio	r2,0(r2)
  80f7bc:	11003fcc 	andi	r4,r2,255
  80f7c0:	2100201c 	xori	r4,r4,128
  80f7c4:	213fe004 	addi	r4,r4,-128
  80f7c8:	e17fff17 	ldw	r5,-4(fp)
  80f7cc:	080174c0 	call	80174c <isBitSet>
  80f7d0:	10803fcc 	andi	r2,r2,255
}
  80f7d4:	e037883a 	mov	sp,fp
  80f7d8:	dfc00117 	ldw	ra,4(sp)
  80f7dc:	df000017 	ldw	fp,0(sp)
  80f7e0:	dec00204 	addi	sp,sp,8
  80f7e4:	f800283a 	ret

0080f7e8 <initNode2D>:
 *      Author: Danny
 */

#include "Node.h"

struct Node2D* initNode2D(float x3d, float y3d, float z3d, int index, int offset) {
  80f7e8:	defff704 	addi	sp,sp,-36
  80f7ec:	dfc00815 	stw	ra,32(sp)
  80f7f0:	df000715 	stw	fp,28(sp)
  80f7f4:	dc400615 	stw	r17,24(sp)
  80f7f8:	dc000515 	stw	r16,20(sp)
  80f7fc:	df000504 	addi	fp,sp,20
  80f800:	e13ffc15 	stw	r4,-16(fp)
  80f804:	e17ffd15 	stw	r5,-12(fp)
  80f808:	e1bffe15 	stw	r6,-8(fp)
  80f80c:	e1ffff15 	stw	r7,-4(fp)
	struct Node2D* n = (struct Node2D*)malloc(sizeof(struct Node2D));
  80f810:	01000a04 	movi	r4,40
  80f814:	0814f580 	call	814f58 <malloc>
  80f818:	e0bffb15 	stw	r2,-20(fp)
	n->x3d = x3d;
  80f81c:	e0fffb17 	ldw	r3,-20(fp)
  80f820:	e0bffc17 	ldw	r2,-16(fp)
  80f824:	18800215 	stw	r2,8(r3)
	n->y3d = y3d;
  80f828:	e0fffb17 	ldw	r3,-20(fp)
  80f82c:	e0bffd17 	ldw	r2,-12(fp)
  80f830:	18800315 	stw	r2,12(r3)
	n->z3d = z3d;
  80f834:	e0fffb17 	ldw	r3,-20(fp)
  80f838:	e0bffe17 	ldw	r2,-8(fp)
  80f83c:	18800415 	stw	r2,16(r3)
	n->x = n->prev_x = cameraX + x3d*cameraZ/(cameraZ+z3d);
  80f840:	008020f4 	movhi	r2,131
  80f844:	109c8404 	addi	r2,r2,29200
  80f848:	11000017 	ldw	r4,0(r2)
  80f84c:	08135a40 	call	8135a4 <__floatsisf>
  80f850:	1021883a 	mov	r16,r2
  80f854:	008020f4 	movhi	r2,131
  80f858:	109c8904 	addi	r2,r2,29220
  80f85c:	11000017 	ldw	r4,0(r2)
  80f860:	08135a40 	call	8135a4 <__floatsisf>
  80f864:	1009883a 	mov	r4,r2
  80f868:	e17ffc17 	ldw	r5,-16(fp)
  80f86c:	08130700 	call	813070 <__mulsf3>
  80f870:	1023883a 	mov	r17,r2
  80f874:	008020f4 	movhi	r2,131
  80f878:	109c8904 	addi	r2,r2,29220
  80f87c:	11000017 	ldw	r4,0(r2)
  80f880:	08135a40 	call	8135a4 <__floatsisf>
  80f884:	1009883a 	mov	r4,r2
  80f888:	e17ffe17 	ldw	r5,-8(fp)
  80f88c:	081300c0 	call	81300c <__addsf3>
  80f890:	8809883a 	mov	r4,r17
  80f894:	100b883a 	mov	r5,r2
  80f898:	08132500 	call	813250 <__divsf3>
  80f89c:	8009883a 	mov	r4,r16
  80f8a0:	100b883a 	mov	r5,r2
  80f8a4:	081300c0 	call	81300c <__addsf3>
  80f8a8:	1007883a 	mov	r3,r2
  80f8ac:	e0bffb17 	ldw	r2,-20(fp)
  80f8b0:	10c00815 	stw	r3,32(r2)
  80f8b4:	e0bffb17 	ldw	r2,-20(fp)
  80f8b8:	10c00817 	ldw	r3,32(r2)
  80f8bc:	e0bffb17 	ldw	r2,-20(fp)
  80f8c0:	10c00015 	stw	r3,0(r2)
	n->y = n->prev_y = cameraY - y3d*cameraZ/(cameraZ+z3d);
  80f8c4:	008020f4 	movhi	r2,131
  80f8c8:	109c8d04 	addi	r2,r2,29236
  80f8cc:	11000017 	ldw	r4,0(r2)
  80f8d0:	08135a40 	call	8135a4 <__floatsisf>
  80f8d4:	1021883a 	mov	r16,r2
  80f8d8:	008020f4 	movhi	r2,131
  80f8dc:	109c8904 	addi	r2,r2,29220
  80f8e0:	11000017 	ldw	r4,0(r2)
  80f8e4:	08135a40 	call	8135a4 <__floatsisf>
  80f8e8:	1009883a 	mov	r4,r2
  80f8ec:	e17ffd17 	ldw	r5,-12(fp)
  80f8f0:	08130700 	call	813070 <__mulsf3>
  80f8f4:	1023883a 	mov	r17,r2
  80f8f8:	008020f4 	movhi	r2,131
  80f8fc:	109c8904 	addi	r2,r2,29220
  80f900:	11000017 	ldw	r4,0(r2)
  80f904:	08135a40 	call	8135a4 <__floatsisf>
  80f908:	1009883a 	mov	r4,r2
  80f90c:	e17ffe17 	ldw	r5,-8(fp)
  80f910:	081300c0 	call	81300c <__addsf3>
  80f914:	8809883a 	mov	r4,r17
  80f918:	100b883a 	mov	r5,r2
  80f91c:	08132500 	call	813250 <__divsf3>
  80f920:	8009883a 	mov	r4,r16
  80f924:	100b883a 	mov	r5,r2
  80f928:	0812f9c0 	call	812f9c <__subsf3>
  80f92c:	1007883a 	mov	r3,r2
  80f930:	e0bffb17 	ldw	r2,-20(fp)
  80f934:	10c00915 	stw	r3,36(r2)
  80f938:	e0bffb17 	ldw	r2,-20(fp)
  80f93c:	10c00917 	ldw	r3,36(r2)
  80f940:	e0bffb17 	ldw	r2,-20(fp)
  80f944:	10c00115 	stw	r3,4(r2)
	relativePosition(n, index, offset);
  80f948:	e13ffb17 	ldw	r4,-20(fp)
  80f94c:	e17fff17 	ldw	r5,-4(fp)
  80f950:	e1800417 	ldw	r6,16(fp)
  80f954:	080f9780 	call	80f978 <relativePosition>
	return n;
  80f958:	e0bffb17 	ldw	r2,-20(fp)
}
  80f95c:	e037883a 	mov	sp,fp
  80f960:	dfc00317 	ldw	ra,12(sp)
  80f964:	df000217 	ldw	fp,8(sp)
  80f968:	dc400117 	ldw	r17,4(sp)
  80f96c:	dc000017 	ldw	r16,0(sp)
  80f970:	dec00404 	addi	sp,sp,16
  80f974:	f800283a 	ret

0080f978 <relativePosition>:

void relativePosition(struct Node2D* this, int index, int offset) {
  80f978:	defffb04 	addi	sp,sp,-20
  80f97c:	dfc00415 	stw	ra,16(sp)
  80f980:	df000315 	stw	fp,12(sp)
  80f984:	df000304 	addi	fp,sp,12
  80f988:	e13ffd15 	stw	r4,-12(fp)
  80f98c:	e17ffe15 	stw	r5,-8(fp)
  80f990:	e1bfff15 	stw	r6,-4(fp)
	switch(index) {
  80f994:	e0bffe17 	ldw	r2,-8(fp)
  80f998:	10800228 	cmpgeui	r2,r2,8
  80f99c:	10009b1e 	bne	r2,zero,80fc0c <relativePosition+0x294>
  80f9a0:	e0bffe17 	ldw	r2,-8(fp)
  80f9a4:	1085883a 	add	r2,r2,r2
  80f9a8:	1087883a 	add	r3,r2,r2
  80f9ac:	00802074 	movhi	r2,129
  80f9b0:	10be7004 	addi	r2,r2,-1600
  80f9b4:	1885883a 	add	r2,r3,r2
  80f9b8:	10800017 	ldw	r2,0(r2)
  80f9bc:	1000683a 	jmp	r2
  80f9c0:	0080f9e0 	cmpeqi	r2,zero,999
  80f9c4:	0080fa24 	muli	r2,zero,1000
  80f9c8:	0080fa6c 	andhi	r2,zero,1001
  80f9cc:	0080faac 	andhi	r2,zero,1002
  80f9d0:	0080faf0 	cmpltui	r2,zero,1003
  80f9d4:	0080fb38 	rdprs	r2,zero,1004
  80f9d8:	0080fb84 	movi	r2,1006
  80f9dc:	0080fbc8 	cmpgei	r2,zero,1007
	case 0:
		this->relative_x = -1*offset;
  80f9e0:	e0bfff17 	ldw	r2,-4(fp)
  80f9e4:	0089c83a 	sub	r4,zero,r2
  80f9e8:	08135a40 	call	8135a4 <__floatsisf>
  80f9ec:	1007883a 	mov	r3,r2
  80f9f0:	e0bffd17 	ldw	r2,-12(fp)
  80f9f4:	10c00515 	stw	r3,20(r2)
		this->relative_y = offset;
  80f9f8:	e13fff17 	ldw	r4,-4(fp)
  80f9fc:	08135a40 	call	8135a4 <__floatsisf>
  80fa00:	1007883a 	mov	r3,r2
  80fa04:	e0bffd17 	ldw	r2,-12(fp)
  80fa08:	10c00615 	stw	r3,24(r2)
		this->relative_z = offset;
  80fa0c:	e13fff17 	ldw	r4,-4(fp)
  80fa10:	08135a40 	call	8135a4 <__floatsisf>
  80fa14:	1007883a 	mov	r3,r2
  80fa18:	e0bffd17 	ldw	r2,-12(fp)
  80fa1c:	10c00715 	stw	r3,28(r2)
		break;
  80fa20:	00007a06 	br	80fc0c <relativePosition+0x294>
	case 1:
		this->relative_x = -1*offset;
  80fa24:	e0bfff17 	ldw	r2,-4(fp)
  80fa28:	0089c83a 	sub	r4,zero,r2
  80fa2c:	08135a40 	call	8135a4 <__floatsisf>
  80fa30:	1007883a 	mov	r3,r2
  80fa34:	e0bffd17 	ldw	r2,-12(fp)
  80fa38:	10c00515 	stw	r3,20(r2)
		this->relative_y = -1*offset;
  80fa3c:	e0bfff17 	ldw	r2,-4(fp)
  80fa40:	0089c83a 	sub	r4,zero,r2
  80fa44:	08135a40 	call	8135a4 <__floatsisf>
  80fa48:	1007883a 	mov	r3,r2
  80fa4c:	e0bffd17 	ldw	r2,-12(fp)
  80fa50:	10c00615 	stw	r3,24(r2)
		this->relative_z = offset;
  80fa54:	e13fff17 	ldw	r4,-4(fp)
  80fa58:	08135a40 	call	8135a4 <__floatsisf>
  80fa5c:	1007883a 	mov	r3,r2
  80fa60:	e0bffd17 	ldw	r2,-12(fp)
  80fa64:	10c00715 	stw	r3,28(r2)
		break;
  80fa68:	00006806 	br	80fc0c <relativePosition+0x294>
	case 2:
		this->relative_x = offset;
  80fa6c:	e13fff17 	ldw	r4,-4(fp)
  80fa70:	08135a40 	call	8135a4 <__floatsisf>
  80fa74:	1007883a 	mov	r3,r2
  80fa78:	e0bffd17 	ldw	r2,-12(fp)
  80fa7c:	10c00515 	stw	r3,20(r2)
		this->relative_y = offset;
  80fa80:	e13fff17 	ldw	r4,-4(fp)
  80fa84:	08135a40 	call	8135a4 <__floatsisf>
  80fa88:	1007883a 	mov	r3,r2
  80fa8c:	e0bffd17 	ldw	r2,-12(fp)
  80fa90:	10c00615 	stw	r3,24(r2)
		this->relative_z = offset;
  80fa94:	e13fff17 	ldw	r4,-4(fp)
  80fa98:	08135a40 	call	8135a4 <__floatsisf>
  80fa9c:	1007883a 	mov	r3,r2
  80faa0:	e0bffd17 	ldw	r2,-12(fp)
  80faa4:	10c00715 	stw	r3,28(r2)
		break;
  80faa8:	00005806 	br	80fc0c <relativePosition+0x294>
	case 3:
		this->relative_x = offset;
  80faac:	e13fff17 	ldw	r4,-4(fp)
  80fab0:	08135a40 	call	8135a4 <__floatsisf>
  80fab4:	1007883a 	mov	r3,r2
  80fab8:	e0bffd17 	ldw	r2,-12(fp)
  80fabc:	10c00515 	stw	r3,20(r2)
		this->relative_y = -1*offset;
  80fac0:	e0bfff17 	ldw	r2,-4(fp)
  80fac4:	0089c83a 	sub	r4,zero,r2
  80fac8:	08135a40 	call	8135a4 <__floatsisf>
  80facc:	1007883a 	mov	r3,r2
  80fad0:	e0bffd17 	ldw	r2,-12(fp)
  80fad4:	10c00615 	stw	r3,24(r2)
		this->relative_z = offset;
  80fad8:	e13fff17 	ldw	r4,-4(fp)
  80fadc:	08135a40 	call	8135a4 <__floatsisf>
  80fae0:	1007883a 	mov	r3,r2
  80fae4:	e0bffd17 	ldw	r2,-12(fp)
  80fae8:	10c00715 	stw	r3,28(r2)
		break;
  80faec:	00004706 	br	80fc0c <relativePosition+0x294>
	case 4:
		this->relative_x = -1*offset;
  80faf0:	e0bfff17 	ldw	r2,-4(fp)
  80faf4:	0089c83a 	sub	r4,zero,r2
  80faf8:	08135a40 	call	8135a4 <__floatsisf>
  80fafc:	1007883a 	mov	r3,r2
  80fb00:	e0bffd17 	ldw	r2,-12(fp)
  80fb04:	10c00515 	stw	r3,20(r2)
		this->relative_y = offset;
  80fb08:	e13fff17 	ldw	r4,-4(fp)
  80fb0c:	08135a40 	call	8135a4 <__floatsisf>
  80fb10:	1007883a 	mov	r3,r2
  80fb14:	e0bffd17 	ldw	r2,-12(fp)
  80fb18:	10c00615 	stw	r3,24(r2)
		this->relative_z = -1*offset;
  80fb1c:	e0bfff17 	ldw	r2,-4(fp)
  80fb20:	0089c83a 	sub	r4,zero,r2
  80fb24:	08135a40 	call	8135a4 <__floatsisf>
  80fb28:	1007883a 	mov	r3,r2
  80fb2c:	e0bffd17 	ldw	r2,-12(fp)
  80fb30:	10c00715 	stw	r3,28(r2)
		break;
  80fb34:	00003506 	br	80fc0c <relativePosition+0x294>
	case 5:
		this->relative_x = -1*offset;
  80fb38:	e0bfff17 	ldw	r2,-4(fp)
  80fb3c:	0089c83a 	sub	r4,zero,r2
  80fb40:	08135a40 	call	8135a4 <__floatsisf>
  80fb44:	1007883a 	mov	r3,r2
  80fb48:	e0bffd17 	ldw	r2,-12(fp)
  80fb4c:	10c00515 	stw	r3,20(r2)
		this->relative_y = -1*offset;
  80fb50:	e0bfff17 	ldw	r2,-4(fp)
  80fb54:	0089c83a 	sub	r4,zero,r2
  80fb58:	08135a40 	call	8135a4 <__floatsisf>
  80fb5c:	1007883a 	mov	r3,r2
  80fb60:	e0bffd17 	ldw	r2,-12(fp)
  80fb64:	10c00615 	stw	r3,24(r2)
		this->relative_z = -1*offset;
  80fb68:	e0bfff17 	ldw	r2,-4(fp)
  80fb6c:	0089c83a 	sub	r4,zero,r2
  80fb70:	08135a40 	call	8135a4 <__floatsisf>
  80fb74:	1007883a 	mov	r3,r2
  80fb78:	e0bffd17 	ldw	r2,-12(fp)
  80fb7c:	10c00715 	stw	r3,28(r2)
		break;
  80fb80:	00002206 	br	80fc0c <relativePosition+0x294>
	case 6:
		this->relative_x = offset;
  80fb84:	e13fff17 	ldw	r4,-4(fp)
  80fb88:	08135a40 	call	8135a4 <__floatsisf>
  80fb8c:	1007883a 	mov	r3,r2
  80fb90:	e0bffd17 	ldw	r2,-12(fp)
  80fb94:	10c00515 	stw	r3,20(r2)
		this->relative_y = offset;
  80fb98:	e13fff17 	ldw	r4,-4(fp)
  80fb9c:	08135a40 	call	8135a4 <__floatsisf>
  80fba0:	1007883a 	mov	r3,r2
  80fba4:	e0bffd17 	ldw	r2,-12(fp)
  80fba8:	10c00615 	stw	r3,24(r2)
		this->relative_z = -1*offset;
  80fbac:	e0bfff17 	ldw	r2,-4(fp)
  80fbb0:	0089c83a 	sub	r4,zero,r2
  80fbb4:	08135a40 	call	8135a4 <__floatsisf>
  80fbb8:	1007883a 	mov	r3,r2
  80fbbc:	e0bffd17 	ldw	r2,-12(fp)
  80fbc0:	10c00715 	stw	r3,28(r2)
		break;
  80fbc4:	00001106 	br	80fc0c <relativePosition+0x294>
	case 7:
		this->relative_x = offset;
  80fbc8:	e13fff17 	ldw	r4,-4(fp)
  80fbcc:	08135a40 	call	8135a4 <__floatsisf>
  80fbd0:	1007883a 	mov	r3,r2
  80fbd4:	e0bffd17 	ldw	r2,-12(fp)
  80fbd8:	10c00515 	stw	r3,20(r2)
		this->relative_y = -1*offset;
  80fbdc:	e0bfff17 	ldw	r2,-4(fp)
  80fbe0:	0089c83a 	sub	r4,zero,r2
  80fbe4:	08135a40 	call	8135a4 <__floatsisf>
  80fbe8:	1007883a 	mov	r3,r2
  80fbec:	e0bffd17 	ldw	r2,-12(fp)
  80fbf0:	10c00615 	stw	r3,24(r2)
		this->relative_z = -1*offset;
  80fbf4:	e0bfff17 	ldw	r2,-4(fp)
  80fbf8:	0089c83a 	sub	r4,zero,r2
  80fbfc:	08135a40 	call	8135a4 <__floatsisf>
  80fc00:	1007883a 	mov	r3,r2
  80fc04:	e0bffd17 	ldw	r2,-12(fp)
  80fc08:	10c00715 	stw	r3,28(r2)
		break;
	default:
		break;
	}
}
  80fc0c:	e037883a 	mov	sp,fp
  80fc10:	dfc00117 	ldw	ra,4(sp)
  80fc14:	df000017 	ldw	fp,0(sp)
  80fc18:	dec00204 	addi	sp,sp,8
  80fc1c:	f800283a 	ret

0080fc20 <updatePos>:
void updatePos(struct Node2D* this, float rx, float ry, float rz) {
  80fc20:	defffb04 	addi	sp,sp,-20
  80fc24:	df000415 	stw	fp,16(sp)
  80fc28:	df000404 	addi	fp,sp,16
  80fc2c:	e13ffc15 	stw	r4,-16(fp)
  80fc30:	e17ffd15 	stw	r5,-12(fp)
  80fc34:	e1bffe15 	stw	r6,-8(fp)
  80fc38:	e1ffff15 	stw	r7,-4(fp)
	this->relative_x = rx;
  80fc3c:	e0fffc17 	ldw	r3,-16(fp)
  80fc40:	e0bffd17 	ldw	r2,-12(fp)
  80fc44:	18800515 	stw	r2,20(r3)
	this->relative_y = ry;
  80fc48:	e0fffc17 	ldw	r3,-16(fp)
  80fc4c:	e0bffe17 	ldw	r2,-8(fp)
  80fc50:	18800615 	stw	r2,24(r3)
	this->relative_z = rz;
  80fc54:	e0fffc17 	ldw	r3,-16(fp)
  80fc58:	e0bfff17 	ldw	r2,-4(fp)
  80fc5c:	18800715 	stw	r2,28(r3)
}
  80fc60:	e037883a 	mov	sp,fp
  80fc64:	df000017 	ldw	fp,0(sp)
  80fc68:	dec00104 	addi	sp,sp,4
  80fc6c:	f800283a 	ret

0080fc70 <updateNode>:
void updateNode(struct Node2D* this, float x3d, float y3d, float z3d) {
  80fc70:	defff804 	addi	sp,sp,-32
  80fc74:	dfc00715 	stw	ra,28(sp)
  80fc78:	df000615 	stw	fp,24(sp)
  80fc7c:	dc400515 	stw	r17,20(sp)
  80fc80:	dc000415 	stw	r16,16(sp)
  80fc84:	df000404 	addi	fp,sp,16
  80fc88:	e13ffc15 	stw	r4,-16(fp)
  80fc8c:	e17ffd15 	stw	r5,-12(fp)
  80fc90:	e1bffe15 	stw	r6,-8(fp)
  80fc94:	e1ffff15 	stw	r7,-4(fp)
	this->prev_x = this->x;
  80fc98:	e0bffc17 	ldw	r2,-16(fp)
  80fc9c:	10c00017 	ldw	r3,0(r2)
  80fca0:	e0bffc17 	ldw	r2,-16(fp)
  80fca4:	10c00815 	stw	r3,32(r2)
	this->prev_y = this->y;
  80fca8:	e0bffc17 	ldw	r2,-16(fp)
  80fcac:	10c00117 	ldw	r3,4(r2)
  80fcb0:	e0bffc17 	ldw	r2,-16(fp)
  80fcb4:	10c00915 	stw	r3,36(r2)
	this->x = cameraX + x3d*cameraZ/(cameraZ+z3d);
  80fcb8:	008020f4 	movhi	r2,131
  80fcbc:	109c8404 	addi	r2,r2,29200
  80fcc0:	11000017 	ldw	r4,0(r2)
  80fcc4:	08135a40 	call	8135a4 <__floatsisf>
  80fcc8:	1021883a 	mov	r16,r2
  80fccc:	008020f4 	movhi	r2,131
  80fcd0:	109c8904 	addi	r2,r2,29220
  80fcd4:	11000017 	ldw	r4,0(r2)
  80fcd8:	08135a40 	call	8135a4 <__floatsisf>
  80fcdc:	1009883a 	mov	r4,r2
  80fce0:	e17ffd17 	ldw	r5,-12(fp)
  80fce4:	08130700 	call	813070 <__mulsf3>
  80fce8:	1023883a 	mov	r17,r2
  80fcec:	008020f4 	movhi	r2,131
  80fcf0:	109c8904 	addi	r2,r2,29220
  80fcf4:	11000017 	ldw	r4,0(r2)
  80fcf8:	08135a40 	call	8135a4 <__floatsisf>
  80fcfc:	1009883a 	mov	r4,r2
  80fd00:	e17fff17 	ldw	r5,-4(fp)
  80fd04:	081300c0 	call	81300c <__addsf3>
  80fd08:	8809883a 	mov	r4,r17
  80fd0c:	100b883a 	mov	r5,r2
  80fd10:	08132500 	call	813250 <__divsf3>
  80fd14:	8009883a 	mov	r4,r16
  80fd18:	100b883a 	mov	r5,r2
  80fd1c:	081300c0 	call	81300c <__addsf3>
  80fd20:	1007883a 	mov	r3,r2
  80fd24:	e0bffc17 	ldw	r2,-16(fp)
  80fd28:	10c00015 	stw	r3,0(r2)
	this->y = cameraY - y3d*cameraZ/(cameraZ+z3d);
  80fd2c:	008020f4 	movhi	r2,131
  80fd30:	109c8d04 	addi	r2,r2,29236
  80fd34:	11000017 	ldw	r4,0(r2)
  80fd38:	08135a40 	call	8135a4 <__floatsisf>
  80fd3c:	1021883a 	mov	r16,r2
  80fd40:	008020f4 	movhi	r2,131
  80fd44:	109c8904 	addi	r2,r2,29220
  80fd48:	11000017 	ldw	r4,0(r2)
  80fd4c:	08135a40 	call	8135a4 <__floatsisf>
  80fd50:	1009883a 	mov	r4,r2
  80fd54:	e17ffe17 	ldw	r5,-8(fp)
  80fd58:	08130700 	call	813070 <__mulsf3>
  80fd5c:	1023883a 	mov	r17,r2
  80fd60:	008020f4 	movhi	r2,131
  80fd64:	109c8904 	addi	r2,r2,29220
  80fd68:	11000017 	ldw	r4,0(r2)
  80fd6c:	08135a40 	call	8135a4 <__floatsisf>
  80fd70:	1009883a 	mov	r4,r2
  80fd74:	e17fff17 	ldw	r5,-4(fp)
  80fd78:	081300c0 	call	81300c <__addsf3>
  80fd7c:	8809883a 	mov	r4,r17
  80fd80:	100b883a 	mov	r5,r2
  80fd84:	08132500 	call	813250 <__divsf3>
  80fd88:	8009883a 	mov	r4,r16
  80fd8c:	100b883a 	mov	r5,r2
  80fd90:	0812f9c0 	call	812f9c <__subsf3>
  80fd94:	1007883a 	mov	r3,r2
  80fd98:	e0bffc17 	ldw	r2,-16(fp)
  80fd9c:	10c00115 	stw	r3,4(r2)
	this->x3d = x3d;
  80fda0:	e0fffc17 	ldw	r3,-16(fp)
  80fda4:	e0bffd17 	ldw	r2,-12(fp)
  80fda8:	18800215 	stw	r2,8(r3)
	this->y3d = y3d;
  80fdac:	e0fffc17 	ldw	r3,-16(fp)
  80fdb0:	e0bffe17 	ldw	r2,-8(fp)
  80fdb4:	18800315 	stw	r2,12(r3)
	this->z3d = z3d;
  80fdb8:	e0fffc17 	ldw	r3,-16(fp)
  80fdbc:	e0bfff17 	ldw	r2,-4(fp)
  80fdc0:	18800415 	stw	r2,16(r3)
}
  80fdc4:	e037883a 	mov	sp,fp
  80fdc8:	dfc00317 	ldw	ra,12(sp)
  80fdcc:	df000217 	ldw	fp,8(sp)
  80fdd0:	dc400117 	ldw	r17,4(sp)
  80fdd4:	dc000017 	ldw	r16,0(sp)
  80fdd8:	dec00404 	addi	sp,sp,16
  80fddc:	f800283a 	ret

0080fde0 <initEdge>:
struct Edge* initEdge(struct Node2D* n1, struct Node2D* n2) {
  80fde0:	defffb04 	addi	sp,sp,-20
  80fde4:	dfc00415 	stw	ra,16(sp)
  80fde8:	df000315 	stw	fp,12(sp)
  80fdec:	df000304 	addi	fp,sp,12
  80fdf0:	e13ffe15 	stw	r4,-8(fp)
  80fdf4:	e17fff15 	stw	r5,-4(fp)
	struct Edge* e = (struct Edge*)malloc(sizeof(struct Edge));
  80fdf8:	01000204 	movi	r4,8
  80fdfc:	0814f580 	call	814f58 <malloc>
  80fe00:	e0bffd15 	stw	r2,-12(fp)
	e->n1 = n1;
  80fe04:	e0fffd17 	ldw	r3,-12(fp)
  80fe08:	e0bffe17 	ldw	r2,-8(fp)
  80fe0c:	18800015 	stw	r2,0(r3)
	e->n2 = n2;
  80fe10:	e0fffd17 	ldw	r3,-12(fp)
  80fe14:	e0bfff17 	ldw	r2,-4(fp)
  80fe18:	18800115 	stw	r2,4(r3)
	return e;
  80fe1c:	e0bffd17 	ldw	r2,-12(fp)
}
  80fe20:	e037883a 	mov	sp,fp
  80fe24:	dfc00117 	ldw	ra,4(sp)
  80fe28:	df000017 	ldw	fp,0(sp)
  80fe2c:	dec00204 	addi	sp,sp,8
  80fe30:	f800283a 	ret

0080fe34 <killEdge>:

void killEdge(struct Edge* this) {
  80fe34:	defffd04 	addi	sp,sp,-12
  80fe38:	dfc00215 	stw	ra,8(sp)
  80fe3c:	df000115 	stw	fp,4(sp)
  80fe40:	df000104 	addi	fp,sp,4
  80fe44:	e13fff15 	stw	r4,-4(fp)
	this->n1 = NULL;
  80fe48:	e0bfff17 	ldw	r2,-4(fp)
  80fe4c:	10000015 	stw	zero,0(r2)
	this->n2 = NULL;
  80fe50:	e0bfff17 	ldw	r2,-4(fp)
  80fe54:	10000115 	stw	zero,4(r2)
	free(this);
  80fe58:	e13fff17 	ldw	r4,-4(fp)
  80fe5c:	0814f440 	call	814f44 <free>
	this = NULL;
  80fe60:	e03fff15 	stw	zero,-4(fp)
}
  80fe64:	e037883a 	mov	sp,fp
  80fe68:	dfc00117 	ldw	ra,4(sp)
  80fe6c:	df000017 	ldw	fp,0(sp)
  80fe70:	dec00204 	addi	sp,sp,8
  80fe74:	f800283a 	ret

0080fe78 <initObject>:
#include "Object.h"

/*
 * Constructor of Object which is a super class of all objects in the game
 */
struct Object* initObject(int pos_x, int pos_y, int size, struct animation* s1, void* subClass) {
  80fe78:	defff904 	addi	sp,sp,-28
  80fe7c:	dfc00615 	stw	ra,24(sp)
  80fe80:	df000515 	stw	fp,20(sp)
  80fe84:	df000504 	addi	fp,sp,20
  80fe88:	e13ffc15 	stw	r4,-16(fp)
  80fe8c:	e17ffd15 	stw	r5,-12(fp)
  80fe90:	e1bffe15 	stw	r6,-8(fp)
  80fe94:	e1ffff15 	stw	r7,-4(fp)
	struct Object* this;
	//safefree(&this);
	this = (struct Object*)malloc(sizeof(struct Object));
  80fe98:	01001c04 	movi	r4,112
  80fe9c:	0814f580 	call	814f58 <malloc>
  80fea0:	e0bffb15 	stw	r2,-20(fp)
	if(this ==NULL)
  80fea4:	e0bffb17 	ldw	r2,-20(fp)
  80fea8:	1004c03a 	cmpne	r2,r2,zero
  80feac:	1000031e 	bne	r2,zero,80febc <initObject+0x44>
		printf("NULL in Object!!!\n");
  80feb0:	010020f4 	movhi	r4,131
  80feb4:	21224904 	addi	r4,r4,-30428
  80feb8:	08158640 	call	815864 <puts>
	this->x = pos_x;
  80febc:	e0fffb17 	ldw	r3,-20(fp)
  80fec0:	e0bffc17 	ldw	r2,-16(fp)
  80fec4:	18800015 	stw	r2,0(r3)
	this->y = pos_y;
  80fec8:	e0fffb17 	ldw	r3,-20(fp)
  80fecc:	e0bffd17 	ldw	r2,-12(fp)
  80fed0:	18800115 	stw	r2,4(r3)
	this->class = 0;
  80fed4:	e0bffb17 	ldw	r2,-20(fp)
  80fed8:	10001115 	stw	zero,68(r2)
	this->isBound = 0;
  80fedc:	e0bffb17 	ldw	r2,-20(fp)
  80fee0:	10000b15 	stw	zero,44(r2)
	this->prev_x = pos_x;
  80fee4:	e0fffb17 	ldw	r3,-20(fp)
  80fee8:	e0bffc17 	ldw	r2,-16(fp)
  80feec:	18800315 	stw	r2,12(r3)
	this->prev_y = pos_y;
  80fef0:	e0fffb17 	ldw	r3,-20(fp)
  80fef4:	e0bffd17 	ldw	r2,-12(fp)
  80fef8:	18800415 	stw	r2,16(r3)
	this->center_x = pos_x + size/2;
  80fefc:	e0fffe17 	ldw	r3,-8(fp)
  80ff00:	1804d7fa 	srli	r2,r3,31
  80ff04:	10c5883a 	add	r2,r2,r3
  80ff08:	1005d07a 	srai	r2,r2,1
  80ff0c:	1007883a 	mov	r3,r2
  80ff10:	e0bffc17 	ldw	r2,-16(fp)
  80ff14:	1887883a 	add	r3,r3,r2
  80ff18:	e0bffb17 	ldw	r2,-20(fp)
  80ff1c:	10c00515 	stw	r3,20(r2)
	this->center_y = pos_y + size/2;
  80ff20:	e0fffe17 	ldw	r3,-8(fp)
  80ff24:	1804d7fa 	srli	r2,r3,31
  80ff28:	10c5883a 	add	r2,r2,r3
  80ff2c:	1005d07a 	srai	r2,r2,1
  80ff30:	1007883a 	mov	r3,r2
  80ff34:	e0bffd17 	ldw	r2,-12(fp)
  80ff38:	1887883a 	add	r3,r3,r2
  80ff3c:	e0bffb17 	ldw	r2,-20(fp)
  80ff40:	10c00615 	stw	r3,24(r2)
	this->scale = size;
  80ff44:	e0fffb17 	ldw	r3,-20(fp)
  80ff48:	e0bffe17 	ldw	r2,-8(fp)
  80ff4c:	18800215 	stw	r2,8(r3)
	this->collideRange = size/2;
  80ff50:	e0fffe17 	ldw	r3,-8(fp)
  80ff54:	1804d7fa 	srli	r2,r3,31
  80ff58:	10c5883a 	add	r2,r2,r3
  80ff5c:	1005d07a 	srai	r2,r2,1
  80ff60:	1007883a 	mov	r3,r2
  80ff64:	e0bffb17 	ldw	r2,-20(fp)
  80ff68:	10c00815 	stw	r3,32(r2)
	this->curr_frame = 0;
  80ff6c:	e0bffb17 	ldw	r2,-20(fp)
  80ff70:	10001615 	stw	zero,88(r2)
	this->end_frame = -5;
  80ff74:	e0fffb17 	ldw	r3,-20(fp)
  80ff78:	00bffec4 	movi	r2,-5
  80ff7c:	18801315 	stw	r2,76(r3)
	this->subObject = subClass;
  80ff80:	e0fffb17 	ldw	r3,-20(fp)
  80ff84:	e0800217 	ldw	r2,8(fp)
  80ff88:	18801815 	stw	r2,96(r3)
	this->startAnimated = 1;
  80ff8c:	e0fffb17 	ldw	r3,-20(fp)
  80ff90:	00800044 	movi	r2,1
  80ff94:	18801415 	stw	r2,80(r3)
	this->isShowing = 1;
  80ff98:	e0fffb17 	ldw	r3,-20(fp)
  80ff9c:	00800044 	movi	r2,1
  80ffa0:	18801515 	stw	r2,84(r3)
	this->currImg = s1;
  80ffa4:	e0fffb17 	ldw	r3,-20(fp)
  80ffa8:	e0bfff17 	ldw	r2,-4(fp)
  80ffac:	18800c15 	stw	r2,48(r3)
	this->stats[0] = s1;
  80ffb0:	e0fffb17 	ldw	r3,-20(fp)
  80ffb4:	e0bfff17 	ldw	r2,-4(fp)
  80ffb8:	18800d15 	stw	r2,52(r3)
	if(s1 != NULL) {
  80ffbc:	e0bfff17 	ldw	r2,-4(fp)
  80ffc0:	1005003a 	cmpeq	r2,r2,zero
  80ffc4:	1000041e 	bne	r2,zero,80ffd8 <initObject+0x160>
		this->total_stats = 1;
  80ffc8:	e0fffb17 	ldw	r3,-20(fp)
  80ffcc:	00800044 	movi	r2,1
  80ffd0:	18800715 	stw	r2,28(r3)
  80ffd4:	00000206 	br	80ffe0 <initObject+0x168>
	} else
		this->total_stats = 0;
  80ffd8:	e0bffb17 	ldw	r2,-20(fp)
  80ffdc:	10000715 	stw	zero,28(r2)
	this->isSelected = 0;
  80ffe0:	e0bffb17 	ldw	r2,-20(fp)
  80ffe4:	10001215 	stw	zero,72(r2)
	this->isRunable = 0;
  80ffe8:	e0bffb17 	ldw	r2,-20(fp)
  80ffec:	10001715 	stw	zero,92(r2)
	this->animate = animated;
  80fff0:	e0fffb17 	ldw	r3,-20(fp)
  80fff4:	00802074 	movhi	r2,129
  80fff8:	108a0404 	addi	r2,r2,10256
  80fffc:	18801915 	stw	r2,100(r3)
	this->collide = dummyCollide;
  810000:	e0fffb17 	ldw	r3,-20(fp)
  810004:	00802074 	movhi	r2,129
  810008:	1080e004 	addi	r2,r2,896
  81000c:	18801a15 	stw	r2,104(r3)
	this->action = dummyAction;
  810010:	e0fffb17 	ldw	r3,-20(fp)
  810014:	00802074 	movhi	r2,129
  810018:	1080ea04 	addi	r2,r2,936
  81001c:	18801b15 	stw	r2,108(r3)
	//this->r = initRange(pos_x, pos_y, size, size);

	return this;
  810020:	e0bffb17 	ldw	r2,-20(fp)
}
  810024:	e037883a 	mov	sp,fp
  810028:	dfc00117 	ldw	ra,4(sp)
  81002c:	df000017 	ldw	fp,0(sp)
  810030:	dec00204 	addi	sp,sp,8
  810034:	f800283a 	ret

00810038 <killObject>:
	this->collideRange = range;
}*/
/*
 * destructor of object
 */
void killObject(struct Object* this) {
  810038:	defffd04 	addi	sp,sp,-12
  81003c:	dfc00215 	stw	ra,8(sp)
  810040:	df000115 	stw	fp,4(sp)
  810044:	df000104 	addi	fp,sp,4
  810048:	e13fff15 	stw	r4,-4(fp)
	if(this == NULL) return;
  81004c:	e0bfff17 	ldw	r2,-4(fp)
  810050:	1005003a 	cmpeq	r2,r2,zero
  810054:	1000101e 	bne	r2,zero,810098 <killObject+0x60>
	this->currImg = NULL;
  810058:	e0bfff17 	ldw	r2,-4(fp)
  81005c:	10000c15 	stw	zero,48(r2)
	this->animate = NULL;
  810060:	e0bfff17 	ldw	r2,-4(fp)
  810064:	10001915 	stw	zero,100(r2)
	this->stats[0] = NULL;
  810068:	e0bfff17 	ldw	r2,-4(fp)
  81006c:	10000d15 	stw	zero,52(r2)
	this->stats[1] = NULL;
  810070:	e0bfff17 	ldw	r2,-4(fp)
  810074:	10000e15 	stw	zero,56(r2)
	this->stats[2] = NULL;
  810078:	e0bfff17 	ldw	r2,-4(fp)
  81007c:	10000f15 	stw	zero,60(r2)
	this->collide = NULL;
  810080:	e0bfff17 	ldw	r2,-4(fp)
  810084:	10001a15 	stw	zero,104(r2)
	this->action = NULL;
  810088:	e0bfff17 	ldw	r2,-4(fp)
  81008c:	10001b15 	stw	zero,108(r2)
	//alt_up_pixel_buffer_dma_draw_box(pixel_buffer,this->x, this->y, this->x+this->scale, this->y+this->scale, 0x0000, 0);
	safefree(&this);
  810090:	e13fff04 	addi	r4,fp,-4
  810094:	080af080 	call	80af08 <safefree>
	//free(this->r); this->r = NULL;
	//free(this); this = NULL;
	//free(this);
	//this = NULL;
}
  810098:	e037883a 	mov	sp,fp
  81009c:	dfc00117 	ldw	ra,4(sp)
  8100a0:	df000017 	ldw	fp,0(sp)
  8100a4:	dec00204 	addi	sp,sp,8
  8100a8:	f800283a 	ret

008100ac <setStats>:

/*
 * stats in an object define the animations that it is allow to run
 * this function will change the animation of an object
 */
void setStats(struct Object* this, int stat) {
  8100ac:	defffd04 	addi	sp,sp,-12
  8100b0:	df000215 	stw	fp,8(sp)
  8100b4:	df000204 	addi	fp,sp,8
  8100b8:	e13ffe15 	stw	r4,-8(fp)
  8100bc:	e17fff15 	stw	r5,-4(fp)
	this->currImg = this->stats[stat];
  8100c0:	e0bfff17 	ldw	r2,-4(fp)
  8100c4:	e0fffe17 	ldw	r3,-8(fp)
  8100c8:	1085883a 	add	r2,r2,r2
  8100cc:	1085883a 	add	r2,r2,r2
  8100d0:	10c5883a 	add	r2,r2,r3
  8100d4:	10800d04 	addi	r2,r2,52
  8100d8:	10c00017 	ldw	r3,0(r2)
  8100dc:	e0bffe17 	ldw	r2,-8(fp)
  8100e0:	10c00c15 	stw	r3,48(r2)
}
  8100e4:	e037883a 	mov	sp,fp
  8100e8:	df000017 	ldw	fp,0(sp)
  8100ec:	dec00104 	addi	sp,sp,4
  8100f0:	f800283a 	ret

008100f4 <addStats>:
void addStats(struct Object* this, struct animation* s) {
  8100f4:	defffd04 	addi	sp,sp,-12
  8100f8:	df000215 	stw	fp,8(sp)
  8100fc:	df000204 	addi	fp,sp,8
  810100:	e13ffe15 	stw	r4,-8(fp)
  810104:	e17fff15 	stw	r5,-4(fp)
	if(s != NULL) {
  810108:	e0bfff17 	ldw	r2,-4(fp)
  81010c:	1005003a 	cmpeq	r2,r2,zero
  810110:	1000121e 	bne	r2,zero,81015c <addStats+0x68>
		this->stats[this->total_stats] = s;
  810114:	e0bffe17 	ldw	r2,-8(fp)
  810118:	10800717 	ldw	r2,28(r2)
  81011c:	e0fffe17 	ldw	r3,-8(fp)
  810120:	1085883a 	add	r2,r2,r2
  810124:	1085883a 	add	r2,r2,r2
  810128:	10c5883a 	add	r2,r2,r3
  81012c:	10c00d04 	addi	r3,r2,52
  810130:	e0bfff17 	ldw	r2,-4(fp)
  810134:	18800015 	stw	r2,0(r3)
		this->total_stats++;
  810138:	e0bffe17 	ldw	r2,-8(fp)
  81013c:	10800717 	ldw	r2,28(r2)
  810140:	10c00044 	addi	r3,r2,1
  810144:	e0bffe17 	ldw	r2,-8(fp)
  810148:	10c00715 	stw	r3,28(r2)
		this->currImg = this->stats[0];
  81014c:	e0bffe17 	ldw	r2,-8(fp)
  810150:	10c00d17 	ldw	r3,52(r2)
  810154:	e0bffe17 	ldw	r2,-8(fp)
  810158:	10c00c15 	stw	r3,48(r2)
	}
}
  81015c:	e037883a 	mov	sp,fp
  810160:	df000017 	ldw	fp,0(sp)
  810164:	dec00104 	addi	sp,sp,4
  810168:	f800283a 	ret

0081016c <setXY>:

/*
 * change the coordinate system of an object
 */
void setXY(struct Object* o, int pos_x, int pos_y) {
  81016c:	defffa04 	addi	sp,sp,-24
  810170:	df000515 	stw	fp,20(sp)
  810174:	df000504 	addi	fp,sp,20
  810178:	e13ffd15 	stw	r4,-12(fp)
  81017c:	e17ffe15 	stw	r5,-8(fp)
  810180:	e1bfff15 	stw	r6,-4(fp)
	int boundx, boundy;
	o->prev_x = o->x;
  810184:	e0bffd17 	ldw	r2,-12(fp)
  810188:	10c00017 	ldw	r3,0(r2)
  81018c:	e0bffd17 	ldw	r2,-12(fp)
  810190:	10c00315 	stw	r3,12(r2)
	o->prev_y = o->y;
  810194:	e0bffd17 	ldw	r2,-12(fp)
  810198:	10c00117 	ldw	r3,4(r2)
  81019c:	e0bffd17 	ldw	r2,-12(fp)
  8101a0:	10c00415 	stw	r3,16(r2)

	if(o->class == cursor) {
  8101a4:	e0bffd17 	ldw	r2,-12(fp)
  8101a8:	10801117 	ldw	r2,68(r2)
  8101ac:	10800118 	cmpnei	r2,r2,4
  8101b0:	1000031e 	bne	r2,zero,8101c0 <setXY+0x54>
		boundx = 310;
  8101b4:	00804d84 	movi	r2,310
  8101b8:	e0bffc15 	stw	r2,-16(fp)
  8101bc:	00000206 	br	8101c8 <setXY+0x5c>
	} else
		boundx = 250;
  8101c0:	00803e84 	movi	r2,250
  8101c4:	e0bffc15 	stw	r2,-16(fp)
	boundy = 240;
  8101c8:	00803c04 	movi	r2,240
  8101cc:	e0bffb15 	stw	r2,-20(fp)
	/*if(inBoundary(initRange(0, 0, 240, 320), o)) {
		o->isBound = 1;
	}*/
	if(pos_x > boundx) {
  8101d0:	e0fffe17 	ldw	r3,-8(fp)
  8101d4:	e0bffc17 	ldw	r2,-16(fp)
  8101d8:	10c0070e 	bge	r2,r3,8101f8 <setXY+0x8c>
		o->x = boundx-o->scale;
  8101dc:	e0bffd17 	ldw	r2,-12(fp)
  8101e0:	10c00217 	ldw	r3,8(r2)
  8101e4:	e0bffc17 	ldw	r2,-16(fp)
  8101e8:	10c7c83a 	sub	r3,r2,r3
  8101ec:	e0bffd17 	ldw	r2,-12(fp)
  8101f0:	10c00015 	stw	r3,0(r2)
  8101f4:	00000a06 	br	810220 <setXY+0xb4>
	}else if(pos_x < 5)
  8101f8:	e0bffe17 	ldw	r2,-8(fp)
  8101fc:	10800148 	cmpgei	r2,r2,5
  810200:	1000041e 	bne	r2,zero,810214 <setXY+0xa8>
		o->x = 5;
  810204:	e0fffd17 	ldw	r3,-12(fp)
  810208:	00800144 	movi	r2,5
  81020c:	18800015 	stw	r2,0(r3)
  810210:	00000306 	br	810220 <setXY+0xb4>
	else
		o->x = pos_x;
  810214:	e0fffd17 	ldw	r3,-12(fp)
  810218:	e0bffe17 	ldw	r2,-8(fp)
  81021c:	18800015 	stw	r2,0(r3)
	if(pos_y > boundy)
  810220:	e0ffff17 	ldw	r3,-4(fp)
  810224:	e0bffb17 	ldw	r2,-20(fp)
  810228:	10c0070e 	bge	r2,r3,810248 <setXY+0xdc>
		o->y = boundy-o->scale;
  81022c:	e0bffd17 	ldw	r2,-12(fp)
  810230:	10c00217 	ldw	r3,8(r2)
  810234:	e0bffb17 	ldw	r2,-20(fp)
  810238:	10c7c83a 	sub	r3,r2,r3
  81023c:	e0bffd17 	ldw	r2,-12(fp)
  810240:	10c00115 	stw	r3,4(r2)
  810244:	00000a06 	br	810270 <setXY+0x104>
	else if(pos_y < 5)
  810248:	e0bfff17 	ldw	r2,-4(fp)
  81024c:	10800148 	cmpgei	r2,r2,5
  810250:	1000041e 	bne	r2,zero,810264 <setXY+0xf8>
		o->y = 5;
  810254:	e0fffd17 	ldw	r3,-12(fp)
  810258:	00800144 	movi	r2,5
  81025c:	18800115 	stw	r2,4(r3)
  810260:	00000306 	br	810270 <setXY+0x104>
	else
		o->y = pos_y;
  810264:	e0fffd17 	ldw	r3,-12(fp)
  810268:	e0bfff17 	ldw	r2,-4(fp)
  81026c:	18800115 	stw	r2,4(r3)

	o->center_x = o->x + o->scale/2;
  810270:	e0bffd17 	ldw	r2,-12(fp)
  810274:	11000017 	ldw	r4,0(r2)
  810278:	e0bffd17 	ldw	r2,-12(fp)
  81027c:	10c00217 	ldw	r3,8(r2)
  810280:	1804d7fa 	srli	r2,r3,31
  810284:	10c5883a 	add	r2,r2,r3
  810288:	1005d07a 	srai	r2,r2,1
  81028c:	2087883a 	add	r3,r4,r2
  810290:	e0bffd17 	ldw	r2,-12(fp)
  810294:	10c00515 	stw	r3,20(r2)
	o->center_y = o->y + o->scale/2;
  810298:	e0bffd17 	ldw	r2,-12(fp)
  81029c:	11000117 	ldw	r4,4(r2)
  8102a0:	e0bffd17 	ldw	r2,-12(fp)
  8102a4:	10c00217 	ldw	r3,8(r2)
  8102a8:	1804d7fa 	srli	r2,r3,31
  8102ac:	10c5883a 	add	r2,r2,r3
  8102b0:	1005d07a 	srai	r2,r2,1
  8102b4:	2087883a 	add	r3,r4,r2
  8102b8:	e0bffd17 	ldw	r2,-12(fp)
  8102bc:	10c00615 	stw	r3,24(r2)

}
  8102c0:	e037883a 	mov	sp,fp
  8102c4:	df000017 	ldw	fp,0(sp)
  8102c8:	dec00104 	addi	sp,sp,4
  8102cc:	f800283a 	ret

008102d0 <setXY_noBound>:

void setXY_noBound(struct Object* o, int x, int y) {
  8102d0:	defffc04 	addi	sp,sp,-16
  8102d4:	df000315 	stw	fp,12(sp)
  8102d8:	df000304 	addi	fp,sp,12
  8102dc:	e13ffd15 	stw	r4,-12(fp)
  8102e0:	e17ffe15 	stw	r5,-8(fp)
  8102e4:	e1bfff15 	stw	r6,-4(fp)
	o->prev_x = o->x;
  8102e8:	e0bffd17 	ldw	r2,-12(fp)
  8102ec:	10c00017 	ldw	r3,0(r2)
  8102f0:	e0bffd17 	ldw	r2,-12(fp)
  8102f4:	10c00315 	stw	r3,12(r2)
	o->prev_y = o->y;
  8102f8:	e0bffd17 	ldw	r2,-12(fp)
  8102fc:	10c00117 	ldw	r3,4(r2)
  810300:	e0bffd17 	ldw	r2,-12(fp)
  810304:	10c00415 	stw	r3,16(r2)
	o->x = x;
  810308:	e0fffd17 	ldw	r3,-12(fp)
  81030c:	e0bffe17 	ldw	r2,-8(fp)
  810310:	18800015 	stw	r2,0(r3)
	o->y = y;
  810314:	e0fffd17 	ldw	r3,-12(fp)
  810318:	e0bfff17 	ldw	r2,-4(fp)
  81031c:	18800115 	stw	r2,4(r3)

	o->center_x = o->x + o->scale/2;
  810320:	e0bffd17 	ldw	r2,-12(fp)
  810324:	11000017 	ldw	r4,0(r2)
  810328:	e0bffd17 	ldw	r2,-12(fp)
  81032c:	10c00217 	ldw	r3,8(r2)
  810330:	1804d7fa 	srli	r2,r3,31
  810334:	10c5883a 	add	r2,r2,r3
  810338:	1005d07a 	srai	r2,r2,1
  81033c:	2087883a 	add	r3,r4,r2
  810340:	e0bffd17 	ldw	r2,-12(fp)
  810344:	10c00515 	stw	r3,20(r2)
	o->center_y = o->y + o->scale/2;
  810348:	e0bffd17 	ldw	r2,-12(fp)
  81034c:	11000117 	ldw	r4,4(r2)
  810350:	e0bffd17 	ldw	r2,-12(fp)
  810354:	10c00217 	ldw	r3,8(r2)
  810358:	1804d7fa 	srli	r2,r3,31
  81035c:	10c5883a 	add	r2,r2,r3
  810360:	1005d07a 	srai	r2,r2,1
  810364:	2087883a 	add	r3,r4,r2
  810368:	e0bffd17 	ldw	r2,-12(fp)
  81036c:	10c00615 	stw	r3,24(r2)
}
  810370:	e037883a 	mov	sp,fp
  810374:	df000017 	ldw	fp,0(sp)
  810378:	dec00104 	addi	sp,sp,4
  81037c:	f800283a 	ret

00810380 <dummyCollide>:
void dummyCollide(void* this, void* obj, struct Collidable* c) {
  810380:	defffc04 	addi	sp,sp,-16
  810384:	df000315 	stw	fp,12(sp)
  810388:	df000304 	addi	fp,sp,12
  81038c:	e13ffd15 	stw	r4,-12(fp)
  810390:	e17ffe15 	stw	r5,-8(fp)
  810394:	e1bfff15 	stw	r6,-4(fp)
	//printf("%d collides %d\n", ((struct Object*)this)->class, ((struct Object*)obj)->class);
}
  810398:	e037883a 	mov	sp,fp
  81039c:	df000017 	ldw	fp,0(sp)
  8103a0:	dec00104 	addi	sp,sp,4
  8103a4:	f800283a 	ret

008103a8 <dummyAction>:

void dummyAction(void* this) {
  8103a8:	defffe04 	addi	sp,sp,-8
  8103ac:	df000115 	stw	fp,4(sp)
  8103b0:	df000104 	addi	fp,sp,4
  8103b4:	e13fff15 	stw	r4,-4(fp)
	//printf("action is done by class %d\n", ((struct Object*)this)->class);
}
  8103b8:	e037883a 	mov	sp,fp
  8103bc:	df000017 	ldw	fp,0(sp)
  8103c0:	dec00104 	addi	sp,sp,4
  8103c4:	f800283a 	ret

008103c8 <initQuardTree>:

#include "QuardTree.h"



struct QuardTree* initQuardTree(struct Range* r) {
  8103c8:	defffb04 	addi	sp,sp,-20
  8103cc:	dfc00415 	stw	ra,16(sp)
  8103d0:	df000315 	stw	fp,12(sp)
  8103d4:	df000304 	addi	fp,sp,12
  8103d8:	e13ffe15 	stw	r4,-8(fp)
	struct QuardTree* qt = (struct QuardTree*)malloc(sizeof(struct QuardTree));
  8103dc:	01000704 	movi	r4,28
  8103e0:	0814f580 	call	814f58 <malloc>
  8103e4:	e0bffd15 	stw	r2,-12(fp)
	if(qt == NULL) {
  8103e8:	e0bffd17 	ldw	r2,-12(fp)
  8103ec:	1004c03a 	cmpne	r2,r2,zero
  8103f0:	1000051e 	bne	r2,zero,810408 <initQuardTree+0x40>
		printf("Quard Tree is NULL!!!\n");
  8103f4:	010020f4 	movhi	r4,131
  8103f8:	21224e04 	addi	r4,r4,-30408
  8103fc:	08158640 	call	815864 <puts>
		return NULL;
  810400:	e03fff15 	stw	zero,-4(fp)
  810404:	00001706 	br	810464 <initQuardTree+0x9c>
	}
	qt->NWQT = qt->NEQT = qt->SWQT = qt->SEQT = NULL;
  810408:	e0bffd17 	ldw	r2,-12(fp)
  81040c:	10000615 	stw	zero,24(r2)
  810410:	e0bffd17 	ldw	r2,-12(fp)
  810414:	10c00617 	ldw	r3,24(r2)
  810418:	e0bffd17 	ldw	r2,-12(fp)
  81041c:	10c00515 	stw	r3,20(r2)
  810420:	e0bffd17 	ldw	r2,-12(fp)
  810424:	10c00517 	ldw	r3,20(r2)
  810428:	e0bffd17 	ldw	r2,-12(fp)
  81042c:	10c00415 	stw	r3,16(r2)
  810430:	e0bffd17 	ldw	r2,-12(fp)
  810434:	10c00417 	ldw	r3,16(r2)
  810438:	e0bffd17 	ldw	r2,-12(fp)
  81043c:	10c00315 	stw	r3,12(r2)
	qt->capacity = 0;
  810440:	e0bffd17 	ldw	r2,-12(fp)
  810444:	10000215 	stw	zero,8(r2)
	qt->r = r;
  810448:	e0fffd17 	ldw	r3,-12(fp)
  81044c:	e0bffe17 	ldw	r2,-8(fp)
  810450:	18800115 	stw	r2,4(r3)
	qt->obj = NULL;
  810454:	e0bffd17 	ldw	r2,-12(fp)
  810458:	10000015 	stw	zero,0(r2)
	return qt;
  81045c:	e0bffd17 	ldw	r2,-12(fp)
  810460:	e0bfff15 	stw	r2,-4(fp)
  810464:	e0bfff17 	ldw	r2,-4(fp)
}
  810468:	e037883a 	mov	sp,fp
  81046c:	dfc00117 	ldw	ra,4(sp)
  810470:	df000017 	ldw	fp,0(sp)
  810474:	dec00204 	addi	sp,sp,8
  810478:	f800283a 	ret

0081047c <initRange>:

struct Range* initRange(int x, int y, int h, int w) {
  81047c:	defff904 	addi	sp,sp,-28
  810480:	dfc00615 	stw	ra,24(sp)
  810484:	df000515 	stw	fp,20(sp)
  810488:	df000504 	addi	fp,sp,20
  81048c:	e13ffc15 	stw	r4,-16(fp)
  810490:	e17ffd15 	stw	r5,-12(fp)
  810494:	e1bffe15 	stw	r6,-8(fp)
  810498:	e1ffff15 	stw	r7,-4(fp)
	struct Range* r = (struct Range*)malloc(sizeof(struct Range));
  81049c:	01000404 	movi	r4,16
  8104a0:	0814f580 	call	814f58 <malloc>
  8104a4:	e0bffb15 	stw	r2,-20(fp)
	r->x = x; r->y = y; r->height = h; r->width = w;
  8104a8:	e0fffb17 	ldw	r3,-20(fp)
  8104ac:	e0bffc17 	ldw	r2,-16(fp)
  8104b0:	18800015 	stw	r2,0(r3)
  8104b4:	e0fffb17 	ldw	r3,-20(fp)
  8104b8:	e0bffd17 	ldw	r2,-12(fp)
  8104bc:	18800115 	stw	r2,4(r3)
  8104c0:	e0fffb17 	ldw	r3,-20(fp)
  8104c4:	e0bffe17 	ldw	r2,-8(fp)
  8104c8:	18800315 	stw	r2,12(r3)
  8104cc:	e0fffb17 	ldw	r3,-20(fp)
  8104d0:	e0bfff17 	ldw	r2,-4(fp)
  8104d4:	18800215 	stw	r2,8(r3)
	return r;
  8104d8:	e0bffb17 	ldw	r2,-20(fp)
}
  8104dc:	e037883a 	mov	sp,fp
  8104e0:	dfc00117 	ldw	ra,4(sp)
  8104e4:	df000017 	ldw	fp,0(sp)
  8104e8:	dec00204 	addi	sp,sp,8
  8104ec:	f800283a 	ret

008104f0 <inBoundary>:

bool inBoundary(struct Range* r2, struct Object* obj) {
  8104f0:	defffc04 	addi	sp,sp,-16
  8104f4:	df000315 	stw	fp,12(sp)
  8104f8:	df000304 	addi	fp,sp,12
  8104fc:	e13ffd15 	stw	r4,-12(fp)
  810500:	e17ffe15 	stw	r5,-8(fp)
	if(obj == NULL) return false;
  810504:	e0bffe17 	ldw	r2,-8(fp)
  810508:	1004c03a 	cmpne	r2,r2,zero
  81050c:	1000021e 	bne	r2,zero,810518 <inBoundary+0x28>
  810510:	e03fff15 	stw	zero,-4(fp)
  810514:	00002606 	br	8105b0 <inBoundary+0xc0>
	if((obj->x > r2->x+r2->width) || (obj->y +obj->collideRange*2 < r2->y) ||
  810518:	e0bffe17 	ldw	r2,-8(fp)
  81051c:	11000017 	ldw	r4,0(r2)
  810520:	e0bffd17 	ldw	r2,-12(fp)
  810524:	10c00017 	ldw	r3,0(r2)
  810528:	e0bffd17 	ldw	r2,-12(fp)
  81052c:	10800217 	ldw	r2,8(r2)
  810530:	1885883a 	add	r2,r3,r2
  810534:	11001a16 	blt	r2,r4,8105a0 <inBoundary+0xb0>
  810538:	e0bffe17 	ldw	r2,-8(fp)
  81053c:	10c00117 	ldw	r3,4(r2)
  810540:	e0bffe17 	ldw	r2,-8(fp)
  810544:	10800817 	ldw	r2,32(r2)
  810548:	1085883a 	add	r2,r2,r2
  81054c:	1887883a 	add	r3,r3,r2
  810550:	e0bffd17 	ldw	r2,-12(fp)
  810554:	10800117 	ldw	r2,4(r2)
  810558:	18801116 	blt	r3,r2,8105a0 <inBoundary+0xb0>
  81055c:	e0bffe17 	ldw	r2,-8(fp)
  810560:	10c00017 	ldw	r3,0(r2)
  810564:	e0bffe17 	ldw	r2,-8(fp)
  810568:	10800817 	ldw	r2,32(r2)
  81056c:	1085883a 	add	r2,r2,r2
  810570:	1887883a 	add	r3,r3,r2
  810574:	e0bffd17 	ldw	r2,-12(fp)
  810578:	10800017 	ldw	r2,0(r2)
  81057c:	18800816 	blt	r3,r2,8105a0 <inBoundary+0xb0>
  810580:	e0bffe17 	ldw	r2,-8(fp)
  810584:	11000117 	ldw	r4,4(r2)
  810588:	e0bffd17 	ldw	r2,-12(fp)
  81058c:	10c00117 	ldw	r3,4(r2)
  810590:	e0bffd17 	ldw	r2,-12(fp)
  810594:	10800317 	ldw	r2,12(r2)
  810598:	1885883a 	add	r2,r3,r2
  81059c:	1100020e 	bge	r2,r4,8105a8 <inBoundary+0xb8>
				(obj->x + obj->collideRange*2 < r2->x ) ||	(obj->y > r2->y + r2->height))
		return false;
  8105a0:	e03fff15 	stw	zero,-4(fp)
  8105a4:	00000206 	br	8105b0 <inBoundary+0xc0>
	return true;
  8105a8:	00800044 	movi	r2,1
  8105ac:	e0bfff15 	stw	r2,-4(fp)
  8105b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8105b4:	e037883a 	mov	sp,fp
  8105b8:	df000017 	ldw	fp,0(sp)
  8105bc:	dec00104 	addi	sp,sp,4
  8105c0:	f800283a 	ret

008105c4 <isContain>:

bool isContain(struct Range* r, struct Object* obj) {
  8105c4:	defffc04 	addi	sp,sp,-16
  8105c8:	df000315 	stw	fp,12(sp)
  8105cc:	df000304 	addi	fp,sp,12
  8105d0:	e13ffd15 	stw	r4,-12(fp)
  8105d4:	e17ffe15 	stw	r5,-8(fp)
	if(obj == NULL) return false;
  8105d8:	e0bffe17 	ldw	r2,-8(fp)
  8105dc:	1004c03a 	cmpne	r2,r2,zero
  8105e0:	1000021e 	bne	r2,zero,8105ec <isContain+0x28>
  8105e4:	e03fff15 	stw	zero,-4(fp)
  8105e8:	00001e06 	br	810664 <isContain+0xa0>
	if((obj->center_x < r->x) || (obj->center_x > r->x+r->width) || (obj->center_y < r->y) || (obj->center_y > r->y+r->height)) {
  8105ec:	e0bffe17 	ldw	r2,-8(fp)
  8105f0:	10c00517 	ldw	r3,20(r2)
  8105f4:	e0bffd17 	ldw	r2,-12(fp)
  8105f8:	10800017 	ldw	r2,0(r2)
  8105fc:	18801516 	blt	r3,r2,810654 <isContain+0x90>
  810600:	e0bffe17 	ldw	r2,-8(fp)
  810604:	11000517 	ldw	r4,20(r2)
  810608:	e0bffd17 	ldw	r2,-12(fp)
  81060c:	10c00017 	ldw	r3,0(r2)
  810610:	e0bffd17 	ldw	r2,-12(fp)
  810614:	10800217 	ldw	r2,8(r2)
  810618:	1885883a 	add	r2,r3,r2
  81061c:	11000d16 	blt	r2,r4,810654 <isContain+0x90>
  810620:	e0bffe17 	ldw	r2,-8(fp)
  810624:	10c00617 	ldw	r3,24(r2)
  810628:	e0bffd17 	ldw	r2,-12(fp)
  81062c:	10800117 	ldw	r2,4(r2)
  810630:	18800816 	blt	r3,r2,810654 <isContain+0x90>
  810634:	e0bffe17 	ldw	r2,-8(fp)
  810638:	11000617 	ldw	r4,24(r2)
  81063c:	e0bffd17 	ldw	r2,-12(fp)
  810640:	10c00117 	ldw	r3,4(r2)
  810644:	e0bffd17 	ldw	r2,-12(fp)
  810648:	10800317 	ldw	r2,12(r2)
  81064c:	1885883a 	add	r2,r3,r2
  810650:	1100020e 	bge	r2,r4,81065c <isContain+0x98>
		return false;
  810654:	e03fff15 	stw	zero,-4(fp)
  810658:	00000206 	br	810664 <isContain+0xa0>
	} return true;
  81065c:	00800044 	movi	r2,1
  810660:	e0bfff15 	stw	r2,-4(fp)
  810664:	e0bfff17 	ldw	r2,-4(fp)
}
  810668:	e037883a 	mov	sp,fp
  81066c:	df000017 	ldw	fp,0(sp)
  810670:	dec00104 	addi	sp,sp,4
  810674:	f800283a 	ret

00810678 <insertObj>:
bool insertObj(struct QuardTree* this, struct Object* obj) {
  810678:	defff904 	addi	sp,sp,-28
  81067c:	dfc00615 	stw	ra,24(sp)
  810680:	df000515 	stw	fp,20(sp)
  810684:	df000504 	addi	fp,sp,20
  810688:	e13ffd15 	stw	r4,-12(fp)
  81068c:	e17ffe15 	stw	r5,-8(fp)
	if(obj == NULL) return false;
  810690:	e0bffe17 	ldw	r2,-8(fp)
  810694:	1004c03a 	cmpne	r2,r2,zero
  810698:	1000021e 	bne	r2,zero,8106a4 <insertObj+0x2c>
  81069c:	e03fff15 	stw	zero,-4(fp)
  8106a0:	00009206 	br	8108ec <insertObj+0x274>
	int h2, w2;
	if(!isContain(this->r, obj))
  8106a4:	e0bffd17 	ldw	r2,-12(fp)
  8106a8:	11000117 	ldw	r4,4(r2)
  8106ac:	e17ffe17 	ldw	r5,-8(fp)
  8106b0:	08105c40 	call	8105c4 <isContain>
  8106b4:	1080005c 	xori	r2,r2,1
  8106b8:	10803fcc 	andi	r2,r2,255
  8106bc:	1005003a 	cmpeq	r2,r2,zero
  8106c0:	1000021e 	bne	r2,zero,8106cc <insertObj+0x54>
		return false;
  8106c4:	e03fff15 	stw	zero,-4(fp)
  8106c8:	00008806 	br	8108ec <insertObj+0x274>
	if(this->capacity == 0) {
  8106cc:	e0bffd17 	ldw	r2,-12(fp)
  8106d0:	10800217 	ldw	r2,8(r2)
  8106d4:	1004c03a 	cmpne	r2,r2,zero
  8106d8:	1000091e 	bne	r2,zero,810700 <insertObj+0x88>
		//printf("Obj is position at (%d,%d)\n", obj->x, obj->y);
		this->obj = obj;
  8106dc:	e0fffd17 	ldw	r3,-12(fp)
  8106e0:	e0bffe17 	ldw	r2,-8(fp)
  8106e4:	18800015 	stw	r2,0(r3)
		this->capacity = 1;
  8106e8:	e0fffd17 	ldw	r3,-12(fp)
  8106ec:	00800044 	movi	r2,1
  8106f0:	18800215 	stw	r2,8(r3)
		return true;
  8106f4:	00800044 	movi	r2,1
  8106f8:	e0bfff15 	stw	r2,-4(fp)
  8106fc:	00007b06 	br	8108ec <insertObj+0x274>
	}
	if(this->NWQT == NULL) {
  810700:	e0bffd17 	ldw	r2,-12(fp)
  810704:	10800317 	ldw	r2,12(r2)
  810708:	1004c03a 	cmpne	r2,r2,zero
  81070c:	10004e1e 	bne	r2,zero,810848 <insertObj+0x1d0>
		h2 = this->r->height/2;
  810710:	e0bffd17 	ldw	r2,-12(fp)
  810714:	10800117 	ldw	r2,4(r2)
  810718:	10c00317 	ldw	r3,12(r2)
  81071c:	1804d7fa 	srli	r2,r3,31
  810720:	10c5883a 	add	r2,r2,r3
  810724:	1005d07a 	srai	r2,r2,1
  810728:	e0bffc15 	stw	r2,-16(fp)
		w2 = this->r->width/2;
  81072c:	e0bffd17 	ldw	r2,-12(fp)
  810730:	10800117 	ldw	r2,4(r2)
  810734:	10c00217 	ldw	r3,8(r2)
  810738:	1804d7fa 	srli	r2,r3,31
  81073c:	10c5883a 	add	r2,r2,r3
  810740:	1005d07a 	srai	r2,r2,1
  810744:	e0bffb15 	stw	r2,-20(fp)
		//alt_up_pixel_buffer_dma_draw_line(pixel_buffer, this->r->x, this->r->y+h2 , this->r->width+this->r->x, this->r->y+h2, 0xFFFF,0);
		//alt_up_pixel_buffer_dma_draw_line(pixel_buffer, this->r->x+ w2, this->r->y, this->r->x + w2, this->r->y+this->r->height, 0xFFFF,0);
		this->NWQT = initQuardTree(initRange(this->r->x, this->r->y, h2, w2));
  810748:	e0bffd17 	ldw	r2,-12(fp)
  81074c:	10800117 	ldw	r2,4(r2)
  810750:	11000017 	ldw	r4,0(r2)
  810754:	e0bffd17 	ldw	r2,-12(fp)
  810758:	10800117 	ldw	r2,4(r2)
  81075c:	11400117 	ldw	r5,4(r2)
  810760:	e1bffc17 	ldw	r6,-16(fp)
  810764:	e1fffb17 	ldw	r7,-20(fp)
  810768:	081047c0 	call	81047c <initRange>
  81076c:	1009883a 	mov	r4,r2
  810770:	08103c80 	call	8103c8 <initQuardTree>
  810774:	1007883a 	mov	r3,r2
  810778:	e0bffd17 	ldw	r2,-12(fp)
  81077c:	10c00315 	stw	r3,12(r2)
		//ref[indexRef++] = &this->NWQT;
		this->NEQT = initQuardTree(initRange(this->r->x+w2, this->r->y, h2, w2));
  810780:	e0bffd17 	ldw	r2,-12(fp)
  810784:	10800117 	ldw	r2,4(r2)
  810788:	10c00017 	ldw	r3,0(r2)
  81078c:	e0bffb17 	ldw	r2,-20(fp)
  810790:	1889883a 	add	r4,r3,r2
  810794:	e0bffd17 	ldw	r2,-12(fp)
  810798:	10800117 	ldw	r2,4(r2)
  81079c:	11400117 	ldw	r5,4(r2)
  8107a0:	e1bffc17 	ldw	r6,-16(fp)
  8107a4:	e1fffb17 	ldw	r7,-20(fp)
  8107a8:	081047c0 	call	81047c <initRange>
  8107ac:	1009883a 	mov	r4,r2
  8107b0:	08103c80 	call	8103c8 <initQuardTree>
  8107b4:	1007883a 	mov	r3,r2
  8107b8:	e0bffd17 	ldw	r2,-12(fp)
  8107bc:	10c00415 	stw	r3,16(r2)
		//ref[indexRef++] = &this->NEQT;
		this->SWQT = initQuardTree(initRange(this->r->x, this->r->y+h2, h2, w2));
  8107c0:	e0bffd17 	ldw	r2,-12(fp)
  8107c4:	10800117 	ldw	r2,4(r2)
  8107c8:	11000017 	ldw	r4,0(r2)
  8107cc:	e0bffd17 	ldw	r2,-12(fp)
  8107d0:	10800117 	ldw	r2,4(r2)
  8107d4:	10c00117 	ldw	r3,4(r2)
  8107d8:	e0bffc17 	ldw	r2,-16(fp)
  8107dc:	188b883a 	add	r5,r3,r2
  8107e0:	e1bffc17 	ldw	r6,-16(fp)
  8107e4:	e1fffb17 	ldw	r7,-20(fp)
  8107e8:	081047c0 	call	81047c <initRange>
  8107ec:	1009883a 	mov	r4,r2
  8107f0:	08103c80 	call	8103c8 <initQuardTree>
  8107f4:	1007883a 	mov	r3,r2
  8107f8:	e0bffd17 	ldw	r2,-12(fp)
  8107fc:	10c00515 	stw	r3,20(r2)
		//ref[indexRef++] = &this->SWQT;
		this->SEQT = initQuardTree(initRange(this->r->x+w2, this->r->y+h2, h2, w2));
  810800:	e0bffd17 	ldw	r2,-12(fp)
  810804:	10800117 	ldw	r2,4(r2)
  810808:	10c00017 	ldw	r3,0(r2)
  81080c:	e0bffb17 	ldw	r2,-20(fp)
  810810:	1889883a 	add	r4,r3,r2
  810814:	e0bffd17 	ldw	r2,-12(fp)
  810818:	10800117 	ldw	r2,4(r2)
  81081c:	10c00117 	ldw	r3,4(r2)
  810820:	e0bffc17 	ldw	r2,-16(fp)
  810824:	188b883a 	add	r5,r3,r2
  810828:	e1bffc17 	ldw	r6,-16(fp)
  81082c:	e1fffb17 	ldw	r7,-20(fp)
  810830:	081047c0 	call	81047c <initRange>
  810834:	1009883a 	mov	r4,r2
  810838:	08103c80 	call	8103c8 <initQuardTree>
  81083c:	1007883a 	mov	r3,r2
  810840:	e0bffd17 	ldw	r2,-12(fp)
  810844:	10c00615 	stw	r3,24(r2)
		//ref[indexRef++] = &this->SEQT;
	}
	if(insertObj(this->NWQT, obj)) return true;
  810848:	e0bffd17 	ldw	r2,-12(fp)
  81084c:	11000317 	ldw	r4,12(r2)
  810850:	e17ffe17 	ldw	r5,-8(fp)
  810854:	08106780 	call	810678 <insertObj>
  810858:	10803fcc 	andi	r2,r2,255
  81085c:	1005003a 	cmpeq	r2,r2,zero
  810860:	1000031e 	bne	r2,zero,810870 <insertObj+0x1f8>
  810864:	00800044 	movi	r2,1
  810868:	e0bfff15 	stw	r2,-4(fp)
  81086c:	00001f06 	br	8108ec <insertObj+0x274>
	if(insertObj(this->NEQT, obj)) return true;
  810870:	e0bffd17 	ldw	r2,-12(fp)
  810874:	11000417 	ldw	r4,16(r2)
  810878:	e17ffe17 	ldw	r5,-8(fp)
  81087c:	08106780 	call	810678 <insertObj>
  810880:	10803fcc 	andi	r2,r2,255
  810884:	1005003a 	cmpeq	r2,r2,zero
  810888:	1000031e 	bne	r2,zero,810898 <insertObj+0x220>
  81088c:	00800044 	movi	r2,1
  810890:	e0bfff15 	stw	r2,-4(fp)
  810894:	00001506 	br	8108ec <insertObj+0x274>
	if(insertObj(this->SWQT, obj)) return true;
  810898:	e0bffd17 	ldw	r2,-12(fp)
  81089c:	11000517 	ldw	r4,20(r2)
  8108a0:	e17ffe17 	ldw	r5,-8(fp)
  8108a4:	08106780 	call	810678 <insertObj>
  8108a8:	10803fcc 	andi	r2,r2,255
  8108ac:	1005003a 	cmpeq	r2,r2,zero
  8108b0:	1000031e 	bne	r2,zero,8108c0 <insertObj+0x248>
  8108b4:	00800044 	movi	r2,1
  8108b8:	e0bfff15 	stw	r2,-4(fp)
  8108bc:	00000b06 	br	8108ec <insertObj+0x274>
	if(insertObj(this->SEQT, obj)) return true;
  8108c0:	e0bffd17 	ldw	r2,-12(fp)
  8108c4:	11000617 	ldw	r4,24(r2)
  8108c8:	e17ffe17 	ldw	r5,-8(fp)
  8108cc:	08106780 	call	810678 <insertObj>
  8108d0:	10803fcc 	andi	r2,r2,255
  8108d4:	1005003a 	cmpeq	r2,r2,zero
  8108d8:	1000031e 	bne	r2,zero,8108e8 <insertObj+0x270>
  8108dc:	00800044 	movi	r2,1
  8108e0:	e0bfff15 	stw	r2,-4(fp)
  8108e4:	00000106 	br	8108ec <insertObj+0x274>
	return false;
  8108e8:	e03fff15 	stw	zero,-4(fp)
  8108ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8108f0:	e037883a 	mov	sp,fp
  8108f4:	dfc00117 	ldw	ra,4(sp)
  8108f8:	df000017 	ldw	fp,0(sp)
  8108fc:	dec00204 	addi	sp,sp,8
  810900:	f800283a 	ret

00810904 <query>:

bool query(struct QuardTree* this, struct Range* r, struct Object* obj, struct Collidable* c) {
  810904:	defff904 	addi	sp,sp,-28
  810908:	dfc00615 	stw	ra,24(sp)
  81090c:	df000515 	stw	fp,20(sp)
  810910:	df000504 	addi	fp,sp,20
  810914:	e13ffb15 	stw	r4,-20(fp)
  810918:	e17ffc15 	stw	r5,-16(fp)
  81091c:	e1bffd15 	stw	r6,-12(fp)
  810920:	e1fffe15 	stw	r7,-8(fp)
	if(obj == NULL) {
  810924:	e0bffd17 	ldw	r2,-12(fp)
  810928:	1004c03a 	cmpne	r2,r2,zero
  81092c:	1000021e 	bne	r2,zero,810938 <query+0x34>
		return false;
  810930:	e03fff15 	stw	zero,-4(fp)
  810934:	00005c06 	br	810aa8 <query+0x1a4>
	}
	if(!isCollide(this->r, r)) return true;
  810938:	e0bffb17 	ldw	r2,-20(fp)
  81093c:	11000117 	ldw	r4,4(r2)
  810940:	e17ffc17 	ldw	r5,-16(fp)
  810944:	0810ac00 	call	810ac0 <isCollide>
  810948:	1080005c 	xori	r2,r2,1
  81094c:	10803fcc 	andi	r2,r2,255
  810950:	1005003a 	cmpeq	r2,r2,zero
  810954:	1000031e 	bne	r2,zero,810964 <query+0x60>
  810958:	00800044 	movi	r2,1
  81095c:	e0bfff15 	stw	r2,-4(fp)
  810960:	00005106 	br	810aa8 <query+0x1a4>
	if(inBoundary(r, this->obj) && this->obj != obj) {
  810964:	e0bffb17 	ldw	r2,-20(fp)
  810968:	11400017 	ldw	r5,0(r2)
  81096c:	e13ffc17 	ldw	r4,-16(fp)
  810970:	08104f00 	call	8104f0 <inBoundary>
  810974:	10803fcc 	andi	r2,r2,255
  810978:	1005003a 	cmpeq	r2,r2,zero
  81097c:	1000111e 	bne	r2,zero,8109c4 <query+0xc0>
  810980:	e0bffb17 	ldw	r2,-20(fp)
  810984:	10c00017 	ldw	r3,0(r2)
  810988:	e0bffd17 	ldw	r2,-12(fp)
  81098c:	18800d26 	beq	r3,r2,8109c4 <query+0xc0>
			//printf("%d collides %d at (%d, %d) and (%d, %d)\n", this->obj->class, obj->class, this->obj->x, this->obj->y, obj->x, obj->y);
		if(obj == NULL) printf("collide obj is null\n");
  810990:	e0bffd17 	ldw	r2,-12(fp)
  810994:	1004c03a 	cmpne	r2,r2,zero
  810998:	1000031e 	bne	r2,zero,8109a8 <query+0xa4>
  81099c:	010020f4 	movhi	r4,131
  8109a0:	21225404 	addi	r4,r4,-30384
  8109a4:	08158640 	call	815864 <puts>
		obj->collide((void*)obj, (void*)(this->obj), c);
  8109a8:	e0bffd17 	ldw	r2,-12(fp)
  8109ac:	10c01a17 	ldw	r3,104(r2)
  8109b0:	e0bffb17 	ldw	r2,-20(fp)
  8109b4:	11400017 	ldw	r5,0(r2)
  8109b8:	e13ffd17 	ldw	r4,-12(fp)
  8109bc:	e1bffe17 	ldw	r6,-8(fp)
  8109c0:	183ee83a 	callr	r3
	}
	if(this->NWQT == NULL) return true;
  8109c4:	e0bffb17 	ldw	r2,-20(fp)
  8109c8:	10800317 	ldw	r2,12(r2)
  8109cc:	1004c03a 	cmpne	r2,r2,zero
  8109d0:	1000031e 	bne	r2,zero,8109e0 <query+0xdc>
  8109d4:	00800044 	movi	r2,1
  8109d8:	e0bfff15 	stw	r2,-4(fp)
  8109dc:	00003206 	br	810aa8 <query+0x1a4>
	if(!query(this->NWQT, r, obj, c)) return false;
  8109e0:	e0bffb17 	ldw	r2,-20(fp)
  8109e4:	11000317 	ldw	r4,12(r2)
  8109e8:	e17ffc17 	ldw	r5,-16(fp)
  8109ec:	e1bffd17 	ldw	r6,-12(fp)
  8109f0:	e1fffe17 	ldw	r7,-8(fp)
  8109f4:	08109040 	call	810904 <query>
  8109f8:	1080005c 	xori	r2,r2,1
  8109fc:	10803fcc 	andi	r2,r2,255
  810a00:	1005003a 	cmpeq	r2,r2,zero
  810a04:	1000021e 	bne	r2,zero,810a10 <query+0x10c>
  810a08:	e03fff15 	stw	zero,-4(fp)
  810a0c:	00002606 	br	810aa8 <query+0x1a4>
	if(!query(this->NEQT, r, obj, c)) return false;
  810a10:	e0bffb17 	ldw	r2,-20(fp)
  810a14:	11000417 	ldw	r4,16(r2)
  810a18:	e17ffc17 	ldw	r5,-16(fp)
  810a1c:	e1bffd17 	ldw	r6,-12(fp)
  810a20:	e1fffe17 	ldw	r7,-8(fp)
  810a24:	08109040 	call	810904 <query>
  810a28:	1080005c 	xori	r2,r2,1
  810a2c:	10803fcc 	andi	r2,r2,255
  810a30:	1005003a 	cmpeq	r2,r2,zero
  810a34:	1000021e 	bne	r2,zero,810a40 <query+0x13c>
  810a38:	e03fff15 	stw	zero,-4(fp)
  810a3c:	00001a06 	br	810aa8 <query+0x1a4>
	if(!query(this->SWQT, r, obj, c)) return false;
  810a40:	e0bffb17 	ldw	r2,-20(fp)
  810a44:	11000517 	ldw	r4,20(r2)
  810a48:	e17ffc17 	ldw	r5,-16(fp)
  810a4c:	e1bffd17 	ldw	r6,-12(fp)
  810a50:	e1fffe17 	ldw	r7,-8(fp)
  810a54:	08109040 	call	810904 <query>
  810a58:	1080005c 	xori	r2,r2,1
  810a5c:	10803fcc 	andi	r2,r2,255
  810a60:	1005003a 	cmpeq	r2,r2,zero
  810a64:	1000021e 	bne	r2,zero,810a70 <query+0x16c>
  810a68:	e03fff15 	stw	zero,-4(fp)
  810a6c:	00000e06 	br	810aa8 <query+0x1a4>
	if(!query(this->SEQT, r, obj, c)) return false;
  810a70:	e0bffb17 	ldw	r2,-20(fp)
  810a74:	11000617 	ldw	r4,24(r2)
  810a78:	e17ffc17 	ldw	r5,-16(fp)
  810a7c:	e1bffd17 	ldw	r6,-12(fp)
  810a80:	e1fffe17 	ldw	r7,-8(fp)
  810a84:	08109040 	call	810904 <query>
  810a88:	1080005c 	xori	r2,r2,1
  810a8c:	10803fcc 	andi	r2,r2,255
  810a90:	1005003a 	cmpeq	r2,r2,zero
  810a94:	1000021e 	bne	r2,zero,810aa0 <query+0x19c>
  810a98:	e03fff15 	stw	zero,-4(fp)
  810a9c:	00000206 	br	810aa8 <query+0x1a4>
	return true;
  810aa0:	00800044 	movi	r2,1
  810aa4:	e0bfff15 	stw	r2,-4(fp)
  810aa8:	e0bfff17 	ldw	r2,-4(fp)
}
  810aac:	e037883a 	mov	sp,fp
  810ab0:	dfc00117 	ldw	ra,4(sp)
  810ab4:	df000017 	ldw	fp,0(sp)
  810ab8:	dec00204 	addi	sp,sp,8
  810abc:	f800283a 	ret

00810ac0 <isCollide>:

bool isCollide(struct Range* r1, struct Range* r2) {
  810ac0:	defffb04 	addi	sp,sp,-20
  810ac4:	dfc00415 	stw	ra,16(sp)
  810ac8:	df000315 	stw	fp,12(sp)
  810acc:	df000304 	addi	fp,sp,12
  810ad0:	e13ffd15 	stw	r4,-12(fp)
  810ad4:	e17ffe15 	stw	r5,-8(fp)
	if(r1 == NULL || r2 == NULL) {
  810ad8:	e0bffd17 	ldw	r2,-12(fp)
  810adc:	1005003a 	cmpeq	r2,r2,zero
  810ae0:	1000031e 	bne	r2,zero,810af0 <isCollide+0x30>
  810ae4:	e0bffe17 	ldw	r2,-8(fp)
  810ae8:	1004c03a 	cmpne	r2,r2,zero
  810aec:	1000051e 	bne	r2,zero,810b04 <isCollide+0x44>
		printf("isCollide got null range\n");
  810af0:	010020f4 	movhi	r4,131
  810af4:	21225904 	addi	r4,r4,-30364
  810af8:	08158640 	call	815864 <puts>
		return false;
  810afc:	e03fff15 	stw	zero,-4(fp)
  810b00:	00002406 	br	810b94 <isCollide+0xd4>
	}
	if((r1->x >= r2->x+r2->width) || (r1->y >= r2->y+r2->height) ||
  810b04:	e0bffd17 	ldw	r2,-12(fp)
  810b08:	11000017 	ldw	r4,0(r2)
  810b0c:	e0bffe17 	ldw	r2,-8(fp)
  810b10:	10c00017 	ldw	r3,0(r2)
  810b14:	e0bffe17 	ldw	r2,-8(fp)
  810b18:	10800217 	ldw	r2,8(r2)
  810b1c:	1885883a 	add	r2,r3,r2
  810b20:	2080180e 	bge	r4,r2,810b84 <isCollide+0xc4>
  810b24:	e0bffd17 	ldw	r2,-12(fp)
  810b28:	11000117 	ldw	r4,4(r2)
  810b2c:	e0bffe17 	ldw	r2,-8(fp)
  810b30:	10c00117 	ldw	r3,4(r2)
  810b34:	e0bffe17 	ldw	r2,-8(fp)
  810b38:	10800317 	ldw	r2,12(r2)
  810b3c:	1885883a 	add	r2,r3,r2
  810b40:	2080100e 	bge	r4,r2,810b84 <isCollide+0xc4>
  810b44:	e0bffd17 	ldw	r2,-12(fp)
  810b48:	10c00017 	ldw	r3,0(r2)
  810b4c:	e0bffd17 	ldw	r2,-12(fp)
  810b50:	10800217 	ldw	r2,8(r2)
  810b54:	1887883a 	add	r3,r3,r2
  810b58:	e0bffe17 	ldw	r2,-8(fp)
  810b5c:	10800017 	ldw	r2,0(r2)
  810b60:	18800816 	blt	r3,r2,810b84 <isCollide+0xc4>
  810b64:	e0bffd17 	ldw	r2,-12(fp)
  810b68:	10c00117 	ldw	r3,4(r2)
  810b6c:	e0bffd17 	ldw	r2,-12(fp)
  810b70:	10800317 	ldw	r2,12(r2)
  810b74:	1887883a 	add	r3,r3,r2
  810b78:	e0bffe17 	ldw	r2,-8(fp)
  810b7c:	10800117 	ldw	r2,4(r2)
  810b80:	1880020e 	bge	r3,r2,810b8c <isCollide+0xcc>
				(r1->x+r1->width < r2->x) || (r1->y+r1->height < r2->y))
			return false;
  810b84:	e03fff15 	stw	zero,-4(fp)
  810b88:	00000206 	br	810b94 <isCollide+0xd4>
		return true;
  810b8c:	00800044 	movi	r2,1
  810b90:	e0bfff15 	stw	r2,-4(fp)
  810b94:	e0bfff17 	ldw	r2,-4(fp)
}
  810b98:	e037883a 	mov	sp,fp
  810b9c:	dfc00117 	ldw	ra,4(sp)
  810ba0:	df000017 	ldw	fp,0(sp)
  810ba4:	dec00204 	addi	sp,sp,8
  810ba8:	f800283a 	ret

00810bac <clearTree>:

void clearTree(struct QuardTree* this) {
  810bac:	defffd04 	addi	sp,sp,-12
  810bb0:	dfc00215 	stw	ra,8(sp)
  810bb4:	df000115 	stw	fp,4(sp)
  810bb8:	df000104 	addi	fp,sp,4
  810bbc:	e13fff15 	stw	r4,-4(fp)
	if(this == NULL) return;
  810bc0:	e0bfff17 	ldw	r2,-4(fp)
  810bc4:	1005003a 	cmpeq	r2,r2,zero
  810bc8:	1000371e 	bne	r2,zero,810ca8 <clearTree+0xfc>
	if(this->NWQT == NULL) {
  810bcc:	e0bfff17 	ldw	r2,-4(fp)
  810bd0:	10800317 	ldw	r2,12(r2)
  810bd4:	1004c03a 	cmpne	r2,r2,zero
  810bd8:	10000a1e 	bne	r2,zero,810c04 <clearTree+0x58>
		free(this->r);
  810bdc:	e0bfff17 	ldw	r2,-4(fp)
  810be0:	11000117 	ldw	r4,4(r2)
  810be4:	0814f440 	call	814f44 <free>
		this->r = NULL;
  810be8:	e0bfff17 	ldw	r2,-4(fp)
  810bec:	10000115 	stw	zero,4(r2)
		//safefree(&this->r);
		this->obj = NULL;
  810bf0:	e0bfff17 	ldw	r2,-4(fp)
  810bf4:	10000015 	stw	zero,0(r2)
		this->capacity = 0;
  810bf8:	e0bfff17 	ldw	r2,-4(fp)
  810bfc:	10000215 	stw	zero,8(r2)
		return;
  810c00:	00002906 	br	810ca8 <clearTree+0xfc>
	}
	clearTree(this->NWQT);
  810c04:	e0bfff17 	ldw	r2,-4(fp)
  810c08:	11000317 	ldw	r4,12(r2)
  810c0c:	0810bac0 	call	810bac <clearTree>
	free(this->NWQT); this->NWQT = NULL;
  810c10:	e0bfff17 	ldw	r2,-4(fp)
  810c14:	11000317 	ldw	r4,12(r2)
  810c18:	0814f440 	call	814f44 <free>
  810c1c:	e0bfff17 	ldw	r2,-4(fp)
  810c20:	10000315 	stw	zero,12(r2)
	clearTree(this->NEQT);
  810c24:	e0bfff17 	ldw	r2,-4(fp)
  810c28:	11000417 	ldw	r4,16(r2)
  810c2c:	0810bac0 	call	810bac <clearTree>
	free(this->NEQT); this->NEQT = NULL;
  810c30:	e0bfff17 	ldw	r2,-4(fp)
  810c34:	11000417 	ldw	r4,16(r2)
  810c38:	0814f440 	call	814f44 <free>
  810c3c:	e0bfff17 	ldw	r2,-4(fp)
  810c40:	10000415 	stw	zero,16(r2)
	clearTree(this->SWQT);
  810c44:	e0bfff17 	ldw	r2,-4(fp)
  810c48:	11000517 	ldw	r4,20(r2)
  810c4c:	0810bac0 	call	810bac <clearTree>
	free(this->SWQT); this->SWQT = NULL;
  810c50:	e0bfff17 	ldw	r2,-4(fp)
  810c54:	11000517 	ldw	r4,20(r2)
  810c58:	0814f440 	call	814f44 <free>
  810c5c:	e0bfff17 	ldw	r2,-4(fp)
  810c60:	10000515 	stw	zero,20(r2)
	clearTree(this->SEQT);
  810c64:	e0bfff17 	ldw	r2,-4(fp)
  810c68:	11000617 	ldw	r4,24(r2)
  810c6c:	0810bac0 	call	810bac <clearTree>
	free(this->SEQT); this->SEQT = NULL;
  810c70:	e0bfff17 	ldw	r2,-4(fp)
  810c74:	11000617 	ldw	r4,24(r2)
  810c78:	0814f440 	call	814f44 <free>
  810c7c:	e0bfff17 	ldw	r2,-4(fp)
  810c80:	10000615 	stw	zero,24(r2)
	this->capacity = 0;
  810c84:	e0bfff17 	ldw	r2,-4(fp)
  810c88:	10000215 	stw	zero,8(r2)
	this->obj = NULL;
  810c8c:	e0bfff17 	ldw	r2,-4(fp)
  810c90:	10000015 	stw	zero,0(r2)
	free(this->r); this->r = NULL;
  810c94:	e0bfff17 	ldw	r2,-4(fp)
  810c98:	11000117 	ldw	r4,4(r2)
  810c9c:	0814f440 	call	814f44 <free>
  810ca0:	e0bfff17 	ldw	r2,-4(fp)
  810ca4:	10000115 	stw	zero,4(r2)
}
  810ca8:	e037883a 	mov	sp,fp
  810cac:	dfc00117 	ldw	ra,4(sp)
  810cb0:	df000017 	ldw	fp,0(sp)
  810cb4:	dec00204 	addi	sp,sp,8
  810cb8:	f800283a 	ret

00810cbc <getSoundFilenameFromId>:

/**
 * Defines names of sound files so they can be grabbed by id
 */
char* getSoundFilenameFromId(int id)
{
  810cbc:	defffc04 	addi	sp,sp,-16
  810cc0:	dfc00315 	stw	ra,12(sp)
  810cc4:	df000215 	stw	fp,8(sp)
  810cc8:	df000204 	addi	fp,sp,8
  810ccc:	e13ffe15 	stw	r4,-8(fp)
	switch(id)
  810cd0:	e0bffe17 	ldw	r2,-8(fp)
  810cd4:	10800228 	cmpgeui	r2,r2,8
  810cd8:	10002c1e 	bne	r2,zero,810d8c <getSoundFilenameFromId+0xd0>
  810cdc:	e0bffe17 	ldw	r2,-8(fp)
  810ce0:	1085883a 	add	r2,r2,r2
  810ce4:	1087883a 	add	r3,r2,r2
  810ce8:	00802074 	movhi	r2,129
  810cec:	10833f04 	addi	r2,r2,3324
  810cf0:	1885883a 	add	r2,r3,r2
  810cf4:	10800017 	ldw	r2,0(r2)
  810cf8:	1000683a 	jmp	r2
  810cfc:	00810d8c 	andi	r2,zero,1078
  810d00:	00810d1c 	xori	r2,zero,1076
  810d04:	00810d2c 	andhi	r2,zero,1076
  810d08:	00810d3c 	xorhi	r2,zero,1076
  810d0c:	00810d4c 	andi	r2,zero,1077
  810d10:	00810d5c 	xori	r2,zero,1077
  810d14:	00810d6c 	andhi	r2,zero,1077
  810d18:	00810d7c 	xorhi	r2,zero,1077
	{
		case LOOP_ONE:
			return "LONE.WAV";
  810d1c:	008020f4 	movhi	r2,131
  810d20:	10a26004 	addi	r2,r2,-30336
  810d24:	e0bfff15 	stw	r2,-4(fp)
  810d28:	00001e06 	br	810da4 <getSoundFilenameFromId+0xe8>
		case LOOP_TWO:
			return "LTWO.WAV";
  810d2c:	008020f4 	movhi	r2,131
  810d30:	10a26304 	addi	r2,r2,-30324
  810d34:	e0bfff15 	stw	r2,-4(fp)
  810d38:	00001a06 	br	810da4 <getSoundFilenameFromId+0xe8>
		case WIN_SOUND:
			return "WIN.WAV";
  810d3c:	008020f4 	movhi	r2,131
  810d40:	10a26604 	addi	r2,r2,-30312
  810d44:	e0bfff15 	stw	r2,-4(fp)
  810d48:	00001606 	br	810da4 <getSoundFilenameFromId+0xe8>
		case LOSE_SOUND:
			return "LOSE.WAV";
  810d4c:	008020f4 	movhi	r2,131
  810d50:	10a26804 	addi	r2,r2,-30304
  810d54:	e0bfff15 	stw	r2,-4(fp)
  810d58:	00001206 	br	810da4 <getSoundFilenameFromId+0xe8>
		case TOWER_UPGRADE_SOUND:
			return "LAZR.WAV";
  810d5c:	008020f4 	movhi	r2,131
  810d60:	10a26b04 	addi	r2,r2,-30292
  810d64:	e0bfff15 	stw	r2,-4(fp)
  810d68:	00000e06 	br	810da4 <getSoundFilenameFromId+0xe8>
		case LOSE_LIFE_SOUND:
			return "LLIFE.WAV";
  810d6c:	008020f4 	movhi	r2,131
  810d70:	10a26e04 	addi	r2,r2,-30280
  810d74:	e0bfff15 	stw	r2,-4(fp)
  810d78:	00000a06 	br	810da4 <getSoundFilenameFromId+0xe8>
		case LASER_SOUND:
			return "LAZR.WAV";
  810d7c:	008020f4 	movhi	r2,131
  810d80:	10a26b04 	addi	r2,r2,-30292
  810d84:	e0bfff15 	stw	r2,-4(fp)
  810d88:	00000606 	br	810da4 <getSoundFilenameFromId+0xe8>
	}
	printf("SOUND ID NOT DEFINED");
  810d8c:	010020f4 	movhi	r4,131
  810d90:	21227104 	addi	r4,r4,-30268
  810d94:	081574c0 	call	81574c <printf>
	return "";
  810d98:	008020f4 	movhi	r2,131
  810d9c:	10a27704 	addi	r2,r2,-30244
  810da0:	e0bfff15 	stw	r2,-4(fp)
  810da4:	e0bfff17 	ldw	r2,-4(fp)
}
  810da8:	e037883a 	mov	sp,fp
  810dac:	dfc00117 	ldw	ra,4(sp)
  810db0:	df000017 	ldw	fp,0(sp)
  810db4:	dec00204 	addi	sp,sp,8
  810db8:	f800283a 	ret

00810dbc <readInt>:

/**
 * Helper function to read multiple bytes and return the representative int value
 */
unsigned int readInt( int file_pointer, int numBytesToRead )
{
  810dbc:	defff504 	addi	sp,sp,-44
  810dc0:	dfc00a15 	stw	ra,40(sp)
  810dc4:	df000915 	stw	fp,36(sp)
  810dc8:	dc000815 	stw	r16,32(sp)
  810dcc:	df000804 	addi	fp,sp,32
  810dd0:	e13ffb15 	stw	r4,-20(fp)
  810dd4:	e17ffc15 	stw	r5,-16(fp)
  810dd8:	e6ffff15 	stw	sp,-4(fp)
  810ddc:	d805883a 	mov	r2,sp
  810de0:	e0bffd15 	stw	r2,-12(fp)
	unsigned int ret = 0;
  810de4:	e03ff915 	stw	zero,-28(fp)
	int i;
	unsigned int bytes[ numBytesToRead ];
  810de8:	e0bffc17 	ldw	r2,-16(fp)
  810dec:	1085883a 	add	r2,r2,r2
  810df0:	1085883a 	add	r2,r2,r2
  810df4:	108000c4 	addi	r2,r2,3
  810df8:	108000c4 	addi	r2,r2,3
  810dfc:	1004d0ba 	srli	r2,r2,2
  810e00:	1085883a 	add	r2,r2,r2
  810e04:	1085883a 	add	r2,r2,r2
  810e08:	d8b7c83a 	sub	sp,sp,r2
  810e0c:	e6fffe15 	stw	sp,-8(fp)
  810e10:	e0fffe17 	ldw	r3,-8(fp)
  810e14:	188000c4 	addi	r2,r3,3
  810e18:	1004d0ba 	srli	r2,r2,2
  810e1c:	1085883a 	add	r2,r2,r2
  810e20:	1085883a 	add	r2,r2,r2
  810e24:	e0bffe15 	stw	r2,-8(fp)
  810e28:	e0bffe17 	ldw	r2,-8(fp)
  810e2c:	e0bffa15 	stw	r2,-24(fp)
	for( i = 0; i < numBytesToRead; i++)
  810e30:	e03ff815 	stw	zero,-32(fp)
  810e34:	00001d06 	br	810eac <readInt+0xf0>
	{
		if((bytes[i] = alt_up_sd_card_read(file_pointer))< 0) {
  810e38:	e43ff817 	ldw	r16,-32(fp)
  810e3c:	e0bffb17 	ldw	r2,-20(fp)
  810e40:	113fffcc 	andi	r4,r2,65535
  810e44:	2120001c 	xori	r4,r4,32768
  810e48:	21200004 	addi	r4,r4,-32768
  810e4c:	08266880 	call	826688 <alt_up_sd_card_read>
  810e50:	113fffcc 	andi	r4,r2,65535
  810e54:	2120001c 	xori	r4,r4,32768
  810e58:	21200004 	addi	r4,r4,-32768
  810e5c:	e0fffa17 	ldw	r3,-24(fp)
  810e60:	8405883a 	add	r2,r16,r16
  810e64:	1085883a 	add	r2,r2,r2
  810e68:	10c5883a 	add	r2,r2,r3
  810e6c:	11000015 	stw	r4,0(r2)
			return -1;
		}

		ret |= ( ( unsigned int ) bytes[ i ] << ( 8 * i ) );
  810e70:	e0bff817 	ldw	r2,-32(fp)
  810e74:	e0fffa17 	ldw	r3,-24(fp)
  810e78:	1085883a 	add	r2,r2,r2
  810e7c:	1085883a 	add	r2,r2,r2
  810e80:	10c5883a 	add	r2,r2,r3
  810e84:	10c00017 	ldw	r3,0(r2)
  810e88:	e0bff817 	ldw	r2,-32(fp)
  810e8c:	100490fa 	slli	r2,r2,3
  810e90:	1886983a 	sll	r3,r3,r2
  810e94:	e0bff917 	ldw	r2,-28(fp)
  810e98:	10c4b03a 	or	r2,r2,r3
  810e9c:	e0bff915 	stw	r2,-28(fp)
unsigned int readInt( int file_pointer, int numBytesToRead )
{
	unsigned int ret = 0;
	int i;
	unsigned int bytes[ numBytesToRead ];
	for( i = 0; i < numBytesToRead; i++)
  810ea0:	e0bff817 	ldw	r2,-32(fp)
  810ea4:	10800044 	addi	r2,r2,1
  810ea8:	e0bff815 	stw	r2,-32(fp)
  810eac:	e0fff817 	ldw	r3,-32(fp)
  810eb0:	e0bffc17 	ldw	r2,-16(fp)
  810eb4:	18bfe016 	blt	r3,r2,810e38 <readInt+0x7c>
			return -1;
		}

		ret |= ( ( unsigned int ) bytes[ i ] << ( 8 * i ) );
	}
	return ret;
  810eb8:	e0bff917 	ldw	r2,-28(fp)
  810ebc:	e6fffd17 	ldw	sp,-12(fp)
}
  810ec0:	e6ffff17 	ldw	sp,-4(fp)
  810ec4:	e037883a 	mov	sp,fp
  810ec8:	dfc00217 	ldw	ra,8(sp)
  810ecc:	df000117 	ldw	fp,4(sp)
  810ed0:	dc000017 	ldw	r16,0(sp)
  810ed4:	dec00304 	addi	sp,sp,12
  810ed8:	f800283a 	ret

00810edc <update_buffer_index>:
 * it should loop.
 *
 * @param num_written - The number of values written to the buffer
 */
void update_buffer_index(struct Sound* this, int currentIndex)
{
  810edc:	defffd04 	addi	sp,sp,-12
  810ee0:	df000215 	stw	fp,8(sp)
  810ee4:	df000204 	addi	fp,sp,8
  810ee8:	e13ffe15 	stw	r4,-8(fp)
  810eec:	e17fff15 	stw	r5,-4(fp)
	this->buffer_index = currentIndex;
  810ef0:	e0ffff17 	ldw	r3,-4(fp)
  810ef4:	e0bffe17 	ldw	r2,-8(fp)
  810ef8:	10c00115 	stw	r3,4(r2)
}
  810efc:	e037883a 	mov	sp,fp
  810f00:	df000017 	ldw	fp,0(sp)
  810f04:	dec00104 	addi	sp,sp,4
  810f08:	f800283a 	ret

00810f0c <loadWavSound>:
 * @param id - id of the sound to load
 * @param buffer - buffer to save the sound wave into
 * NOTE: If a NULL buffer is supplied the sound will be saved in the Sound struct
 */
struct Sound* loadWavSound(int id)
{
  810f0c:	defff604 	addi	sp,sp,-40
  810f10:	dfc00915 	stw	ra,36(sp)
  810f14:	df000815 	stw	fp,32(sp)
  810f18:	dc000715 	stw	r16,28(sp)
  810f1c:	df000704 	addi	fp,sp,28
  810f20:	e13ffe15 	stw	r4,-8(fp)
	printf("loading sound: %s\n", getSoundFilenameFromId(id));
  810f24:	e13ffe17 	ldw	r4,-8(fp)
  810f28:	0810cbc0 	call	810cbc <getSoundFilenameFromId>
  810f2c:	100b883a 	mov	r5,r2
  810f30:	010020f4 	movhi	r4,131
  810f34:	21227804 	addi	r4,r4,-30240
  810f38:	081574c0 	call	81574c <printf>

	struct Sound* this = (struct Sound*)malloc(sizeof(struct Sound));
  810f3c:	01000604 	movi	r4,24
  810f40:	0814f580 	call	814f58 <malloc>
  810f44:	e0bffd15 	stw	r2,-12(fp)
	this->playing = false;
  810f48:	e0bffd17 	ldw	r2,-12(fp)
  810f4c:	10000505 	stb	zero,20(r2)
	this->id = id;
  810f50:	e0fffe17 	ldw	r3,-8(fp)
  810f54:	e0bffd17 	ldw	r2,-12(fp)
  810f58:	10c00015 	stw	r3,0(r2)
	this->loops = 0;
  810f5c:	e0bffd17 	ldw	r2,-12(fp)
  810f60:	10000315 	stw	zero,12(r2)
	this->buffer_index = 0;
  810f64:	e0bffd17 	ldw	r2,-12(fp)
  810f68:	10000115 	stw	zero,4(r2)

	int i, index = 0;
  810f6c:	e03ffb15 	stw	zero,-20(fp)
	int file_pointer = alt_up_sd_card_fopen(getSoundFilenameFromId(id), false);
  810f70:	e13ffe17 	ldw	r4,-8(fp)
  810f74:	0810cbc0 	call	810cbc <getSoundFilenameFromId>
  810f78:	1009883a 	mov	r4,r2
  810f7c:	000b883a 	mov	r5,zero
  810f80:	08261c40 	call	8261c4 <alt_up_sd_card_fopen>
  810f84:	10bfffcc 	andi	r2,r2,65535
  810f88:	10a0001c 	xori	r2,r2,32768
  810f8c:	10a00004 	addi	r2,r2,-32768
  810f90:	e0bffa15 	stw	r2,-24(fp)
	if(file_pointer < 0) {
  810f94:	e0bffa17 	ldw	r2,-24(fp)
  810f98:	1004403a 	cmpge	r2,r2,zero
  810f9c:	10001f1e 	bne	r2,zero,81101c <loadWavSound+0x110>
		unloadSound(this);
  810fa0:	e13ffd17 	ldw	r4,-12(fp)
  810fa4:	08112780 	call	811278 <unloadSound>
		alt_up_sd_card_fclose(file_pointer); //close the file
  810fa8:	e0bffa17 	ldw	r2,-24(fp)
  810fac:	113fffcc 	andi	r4,r2,65535
  810fb0:	2120001c 	xori	r4,r4,32768
  810fb4:	21200004 	addi	r4,r4,-32768
  810fb8:	08270400 	call	827040 <alt_up_sd_card_fclose>
		return NULL;
  810fbc:	e03fff15 	stw	zero,-4(fp)
  810fc0:	00009a06 	br	81122c <loadWavSound+0x320>
	}

	//Start reading the wav header
	while(index < BITS_PER_SAMPLE_OFFSET)
	{
		if(alt_up_sd_card_read(file_pointer) < 0) {
  810fc4:	e0bffa17 	ldw	r2,-24(fp)
  810fc8:	113fffcc 	andi	r4,r2,65535
  810fcc:	2120001c 	xori	r4,r4,32768
  810fd0:	21200004 	addi	r4,r4,-32768
  810fd4:	08266880 	call	826688 <alt_up_sd_card_read>
  810fd8:	10bfffcc 	andi	r2,r2,65535
  810fdc:	10a0001c 	xori	r2,r2,32768
  810fe0:	10a00004 	addi	r2,r2,-32768
  810fe4:	1004403a 	cmpge	r2,r2,zero
  810fe8:	1000091e 	bne	r2,zero,811010 <loadWavSound+0x104>
			unloadSound(this);
  810fec:	e13ffd17 	ldw	r4,-12(fp)
  810ff0:	08112780 	call	811278 <unloadSound>
			alt_up_sd_card_fclose(file_pointer);
  810ff4:	e0bffa17 	ldw	r2,-24(fp)
  810ff8:	113fffcc 	andi	r4,r2,65535
  810ffc:	2120001c 	xori	r4,r4,32768
  811000:	21200004 	addi	r4,r4,-32768
  811004:	08270400 	call	827040 <alt_up_sd_card_fclose>
			return NULL;
  811008:	e03fff15 	stw	zero,-4(fp)
  81100c:	00008706 	br	81122c <loadWavSound+0x320>
		}
		index++;
  811010:	e0bffb17 	ldw	r2,-20(fp)
  811014:	10800044 	addi	r2,r2,1
  811018:	e0bffb15 	stw	r2,-20(fp)
		alt_up_sd_card_fclose(file_pointer); //close the file
		return NULL;
	}

	//Start reading the wav header
	while(index < BITS_PER_SAMPLE_OFFSET)
  81101c:	e0bffb17 	ldw	r2,-20(fp)
  811020:	10800890 	cmplti	r2,r2,34
  811024:	103fe71e 	bne	r2,zero,810fc4 <loadWavSound+0xb8>
			return NULL;
		}
		index++;
	}

	int bytes_per_sample = readInt( file_pointer, 2 ) / BITS_PER_BYTE;
  811028:	e13ffa17 	ldw	r4,-24(fp)
  81102c:	01400084 	movi	r5,2
  811030:	0810dbc0 	call	810dbc <readInt>
  811034:	1004d0fa 	srli	r2,r2,3
  811038:	e0bff915 	stw	r2,-28(fp)
	if(bytes_per_sample < 0) {
  81103c:	e0bff917 	ldw	r2,-28(fp)
  811040:	1004403a 	cmpge	r2,r2,zero
  811044:	1000091e 	bne	r2,zero,81106c <loadWavSound+0x160>
		unloadSound(this);
  811048:	e13ffd17 	ldw	r4,-12(fp)
  81104c:	08112780 	call	811278 <unloadSound>
		alt_up_sd_card_fclose(file_pointer);
  811050:	e0bffa17 	ldw	r2,-24(fp)
  811054:	113fffcc 	andi	r4,r2,65535
  811058:	2120001c 	xori	r4,r4,32768
  81105c:	21200004 	addi	r4,r4,-32768
  811060:	08270400 	call	827040 <alt_up_sd_card_fclose>
		return NULL;
  811064:	e03fff15 	stw	zero,-4(fp)
  811068:	00007006 	br	81122c <loadWavSound+0x320>
	}
	index += 2;
  81106c:	e0bffb17 	ldw	r2,-20(fp)
  811070:	10800084 	addi	r2,r2,2
  811074:	e0bffb15 	stw	r2,-20(fp)

	while(index < DATA_LENGTH_OFFSET)
  811078:	00001606 	br	8110d4 <loadWavSound+0x1c8>
	{
		if(alt_up_sd_card_read(file_pointer) < 0) {
  81107c:	e0bffa17 	ldw	r2,-24(fp)
  811080:	113fffcc 	andi	r4,r2,65535
  811084:	2120001c 	xori	r4,r4,32768
  811088:	21200004 	addi	r4,r4,-32768
  81108c:	08266880 	call	826688 <alt_up_sd_card_read>
  811090:	10bfffcc 	andi	r2,r2,65535
  811094:	10a0001c 	xori	r2,r2,32768
  811098:	10a00004 	addi	r2,r2,-32768
  81109c:	1004403a 	cmpge	r2,r2,zero
  8110a0:	1000091e 	bne	r2,zero,8110c8 <loadWavSound+0x1bc>
			unloadSound(this);
  8110a4:	e13ffd17 	ldw	r4,-12(fp)
  8110a8:	08112780 	call	811278 <unloadSound>
			alt_up_sd_card_fclose(file_pointer);
  8110ac:	e0bffa17 	ldw	r2,-24(fp)
  8110b0:	113fffcc 	andi	r4,r2,65535
  8110b4:	2120001c 	xori	r4,r4,32768
  8110b8:	21200004 	addi	r4,r4,-32768
  8110bc:	08270400 	call	827040 <alt_up_sd_card_fclose>
			return NULL;
  8110c0:	e03fff15 	stw	zero,-4(fp)
  8110c4:	00005906 	br	81122c <loadWavSound+0x320>
		}
		index++;
  8110c8:	e0bffb17 	ldw	r2,-20(fp)
  8110cc:	10800044 	addi	r2,r2,1
  8110d0:	e0bffb15 	stw	r2,-20(fp)
		alt_up_sd_card_fclose(file_pointer);
		return NULL;
	}
	index += 2;

	while(index < DATA_LENGTH_OFFSET)
  8110d4:	e0bffb17 	ldw	r2,-20(fp)
  8110d8:	10800a10 	cmplti	r2,r2,40
  8110dc:	103fe71e 	bne	r2,zero,81107c <loadWavSound+0x170>
			return NULL;
		}
		index++;
	}

	this->length = readInt(file_pointer, 4) / bytes_per_sample;
  8110e0:	e13ffa17 	ldw	r4,-24(fp)
  8110e4:	01400104 	movi	r5,4
  8110e8:	0810dbc0 	call	810dbc <readInt>
  8110ec:	1009883a 	mov	r4,r2
  8110f0:	e17ff917 	ldw	r5,-28(fp)
  8110f4:	08146bc0 	call	8146bc <__udivsi3>
  8110f8:	1007883a 	mov	r3,r2
  8110fc:	e0bffd17 	ldw	r2,-12(fp)
  811100:	10c00215 	stw	r3,8(r2)
	if(this->length == -1) {
  811104:	e0bffd17 	ldw	r2,-12(fp)
  811108:	10800217 	ldw	r2,8(r2)
  81110c:	10bfffd8 	cmpnei	r2,r2,-1
  811110:	1000091e 	bne	r2,zero,811138 <loadWavSound+0x22c>
			unloadSound(this);
  811114:	e13ffd17 	ldw	r4,-12(fp)
  811118:	08112780 	call	811278 <unloadSound>
			alt_up_sd_card_fclose(file_pointer);
  81111c:	e0bffa17 	ldw	r2,-24(fp)
  811120:	113fffcc 	andi	r4,r2,65535
  811124:	2120001c 	xori	r4,r4,32768
  811128:	21200004 	addi	r4,r4,-32768
  81112c:	08270400 	call	827040 <alt_up_sd_card_fclose>
			return NULL;
  811130:	e03fff15 	stw	zero,-4(fp)
  811134:	00003d06 	br	81122c <loadWavSound+0x320>
		}
	this->buffer = (int*)malloc(sizeof(int) * this->length);
  811138:	e0bffd17 	ldw	r2,-12(fp)
  81113c:	10800217 	ldw	r2,8(r2)
  811140:	1085883a 	add	r2,r2,r2
  811144:	1085883a 	add	r2,r2,r2
  811148:	1009883a 	mov	r4,r2
  81114c:	0814f580 	call	814f58 <malloc>
  811150:	1007883a 	mov	r3,r2
  811154:	e0bffd17 	ldw	r2,-12(fp)
  811158:	10c00415 	stw	r3,16(r2)

	printf("length: %u\n", this->length);
  81115c:	e0bffd17 	ldw	r2,-12(fp)
  811160:	11400217 	ldw	r5,8(r2)
  811164:	010020f4 	movhi	r4,131
  811168:	21227d04 	addi	r4,r4,-30220
  81116c:	081574c0 	call	81574c <printf>

	for( i = 0; i < this->length; i++ )
  811170:	e03ffc15 	stw	zero,-16(fp)
  811174:	00001f06 	br	8111f4 <loadWavSound+0x2e8>
	{
		this->buffer[ i ] = readInt( file_pointer, bytes_per_sample );
  811178:	e0bffd17 	ldw	r2,-12(fp)
  81117c:	10c00417 	ldw	r3,16(r2)
  811180:	e0bffc17 	ldw	r2,-16(fp)
  811184:	1085883a 	add	r2,r2,r2
  811188:	1085883a 	add	r2,r2,r2
  81118c:	18a1883a 	add	r16,r3,r2
  811190:	e13ffa17 	ldw	r4,-24(fp)
  811194:	e17ff917 	ldw	r5,-28(fp)
  811198:	0810dbc0 	call	810dbc <readInt>
  81119c:	80800015 	stw	r2,0(r16)
		if(this->buffer[ i ] == -1) {
  8111a0:	e0bffd17 	ldw	r2,-12(fp)
  8111a4:	10c00417 	ldw	r3,16(r2)
  8111a8:	e0bffc17 	ldw	r2,-16(fp)
  8111ac:	1085883a 	add	r2,r2,r2
  8111b0:	1085883a 	add	r2,r2,r2
  8111b4:	1885883a 	add	r2,r3,r2
  8111b8:	10800017 	ldw	r2,0(r2)
  8111bc:	10bfffd8 	cmpnei	r2,r2,-1
  8111c0:	1000091e 	bne	r2,zero,8111e8 <loadWavSound+0x2dc>
				unloadSound(this);
  8111c4:	e13ffd17 	ldw	r4,-12(fp)
  8111c8:	08112780 	call	811278 <unloadSound>
				alt_up_sd_card_fclose(file_pointer);
  8111cc:	e0bffa17 	ldw	r2,-24(fp)
  8111d0:	113fffcc 	andi	r4,r2,65535
  8111d4:	2120001c 	xori	r4,r4,32768
  8111d8:	21200004 	addi	r4,r4,-32768
  8111dc:	08270400 	call	827040 <alt_up_sd_card_fclose>
				return NULL;
  8111e0:	e03fff15 	stw	zero,-4(fp)
  8111e4:	00001106 	br	81122c <loadWavSound+0x320>
		}
	this->buffer = (int*)malloc(sizeof(int) * this->length);

	printf("length: %u\n", this->length);

	for( i = 0; i < this->length; i++ )
  8111e8:	e0bffc17 	ldw	r2,-16(fp)
  8111ec:	10800044 	addi	r2,r2,1
  8111f0:	e0bffc15 	stw	r2,-16(fp)
  8111f4:	e0bffc17 	ldw	r2,-16(fp)
  8111f8:	e0fffd17 	ldw	r3,-12(fp)
  8111fc:	18c00217 	ldw	r3,8(r3)
  811200:	10ffdd36 	bltu	r2,r3,811178 <loadWavSound+0x26c>
				alt_up_sd_card_fclose(file_pointer);
				return NULL;
			}
	}

	printf("Sound loading complete\n");
  811204:	010020f4 	movhi	r4,131
  811208:	21228004 	addi	r4,r4,-30208
  81120c:	08158640 	call	815864 <puts>

	alt_up_sd_card_fclose(file_pointer);
  811210:	e0bffa17 	ldw	r2,-24(fp)
  811214:	113fffcc 	andi	r4,r2,65535
  811218:	2120001c 	xori	r4,r4,32768
  81121c:	21200004 	addi	r4,r4,-32768
  811220:	08270400 	call	827040 <alt_up_sd_card_fclose>

	return this;
  811224:	e0bffd17 	ldw	r2,-12(fp)
  811228:	e0bfff15 	stw	r2,-4(fp)
  81122c:	e0bfff17 	ldw	r2,-4(fp)
}
  811230:	e037883a 	mov	sp,fp
  811234:	dfc00217 	ldw	ra,8(sp)
  811238:	df000117 	ldw	fp,4(sp)
  81123c:	dc000017 	ldw	r16,0(sp)
  811240:	dec00304 	addi	sp,sp,12
  811244:	f800283a 	ret

00811248 <stopSound>:

void stopSound(struct Sound* sound)
{
  811248:	defffe04 	addi	sp,sp,-8
  81124c:	df000115 	stw	fp,4(sp)
  811250:	df000104 	addi	fp,sp,4
  811254:	e13fff15 	stw	r4,-4(fp)
	sound->playing = false;
  811258:	e0bfff17 	ldw	r2,-4(fp)
  81125c:	10000505 	stb	zero,20(r2)
	sound->buffer_index = 0;
  811260:	e0bfff17 	ldw	r2,-4(fp)
  811264:	10000115 	stw	zero,4(r2)
}
  811268:	e037883a 	mov	sp,fp
  81126c:	df000017 	ldw	fp,0(sp)
  811270:	dec00104 	addi	sp,sp,4
  811274:	f800283a 	ret

00811278 <unloadSound>:

void unloadSound( struct Sound* sound )
{
  811278:	defffd04 	addi	sp,sp,-12
  81127c:	dfc00215 	stw	ra,8(sp)
  811280:	df000115 	stw	fp,4(sp)
  811284:	df000104 	addi	fp,sp,4
  811288:	e13fff15 	stw	r4,-4(fp)
	safefree(&sound->buffer);
  81128c:	e0bfff17 	ldw	r2,-4(fp)
  811290:	10800404 	addi	r2,r2,16
  811294:	1009883a 	mov	r4,r2
  811298:	080af080 	call	80af08 <safefree>
	safefree(&sound);
  81129c:	e13fff04 	addi	r4,fp,-4
  8112a0:	080af080 	call	80af08 <safefree>
}
  8112a4:	e037883a 	mov	sp,fp
  8112a8:	dfc00117 	ldw	ra,4(sp)
  8112ac:	df000017 	ldw	fp,0(sp)
  8112b0:	dec00204 	addi	sp,sp,8
  8112b4:	f800283a 	ret

008112b8 <initSpaceShip>:
#include "SpaceShip.h"

/*
 *  Constructor of SpaceShip object
 */
struct SpaceShip* initSpaceShip(int x, int y, int type, struct animation* a){
  8112b8:	defff804 	addi	sp,sp,-32
  8112bc:	dfc00715 	stw	ra,28(sp)
  8112c0:	df000615 	stw	fp,24(sp)
  8112c4:	df000604 	addi	fp,sp,24
  8112c8:	e13ffc15 	stw	r4,-16(fp)
  8112cc:	e17ffd15 	stw	r5,-12(fp)
  8112d0:	e1bffe15 	stw	r6,-8(fp)
  8112d4:	e1ffff15 	stw	r7,-4(fp)
	struct SpaceShip* s =  (struct SpaceShip*)malloc(sizeof(struct SpaceShip));
  8112d8:	01000a04 	movi	r4,40
  8112dc:	0814f580 	call	814f58 <malloc>
  8112e0:	e0bffb15 	stw	r2,-20(fp)
	s->super = initObject(x, y, 20, a, (void*)s);
  8112e4:	e0bffb17 	ldw	r2,-20(fp)
  8112e8:	d8800015 	stw	r2,0(sp)
  8112ec:	e13ffc17 	ldw	r4,-16(fp)
  8112f0:	e17ffd17 	ldw	r5,-12(fp)
  8112f4:	01800504 	movi	r6,20
  8112f8:	e1ffff17 	ldw	r7,-4(fp)
  8112fc:	080fe780 	call	80fe78 <initObject>
  811300:	1007883a 	mov	r3,r2
  811304:	e0bffb17 	ldw	r2,-20(fp)
  811308:	10c00015 	stw	r3,0(r2)
	s->super->class = ship;
  81130c:	e0bffb17 	ldw	r2,-20(fp)
  811310:	10c00017 	ldw	r3,0(r2)
  811314:	00800184 	movi	r2,6
  811318:	18801115 	stw	r2,68(r3)
	s->super->action = shipAction;
  81131c:	e0bffb17 	ldw	r2,-20(fp)
  811320:	10c00017 	ldw	r3,0(r2)
  811324:	00802074 	movhi	r2,129
  811328:	10858404 	addi	r2,r2,5648
  81132c:	18801b15 	stw	r2,108(r3)
	s->super->collide = spaceShipCollide;
  811330:	e0bffb17 	ldw	r2,-20(fp)
  811334:	10c00017 	ldw	r3,0(r2)
  811338:	00802074 	movhi	r2,129
  81133c:	1085a904 	addi	r2,r2,5796
  811340:	18801a15 	stw	r2,104(r3)
	s->ss_shoot = spaceShipShoot;
  811344:	e0fffb17 	ldw	r3,-20(fp)
  811348:	00802074 	movhi	r2,129
  81134c:	1085c804 	addi	r2,r2,5920
  811350:	18800915 	stw	r2,36(r3)
	s->level = 1;
  811354:	e0fffb17 	ldw	r3,-20(fp)
  811358:	00800044 	movi	r2,1
  81135c:	18800615 	stw	r2,24(r3)
	s->name = "dummyShip";
  811360:	e0fffb17 	ldw	r3,-20(fp)
  811364:	008020f4 	movhi	r2,131
  811368:	10a28604 	addi	r2,r2,-30184
  81136c:	18800815 	stw	r2,32(r3)
	s->type = type;
  811370:	e0fffb17 	ldw	r3,-20(fp)
  811374:	e0bffe17 	ldw	r2,-8(fp)
  811378:	18800715 	stw	r2,28(r3)
	setShipProperty(s, type);
  81137c:	e13ffb17 	ldw	r4,-20(fp)
  811380:	e17ffe17 	ldw	r5,-8(fp)
  811384:	08113a00 	call	8113a0 <setShipProperty>
	return s;
  811388:	e0bffb17 	ldw	r2,-20(fp)
}
  81138c:	e037883a 	mov	sp,fp
  811390:	dfc00117 	ldw	ra,4(sp)
  811394:	df000017 	ldw	fp,0(sp)
  811398:	dec00204 	addi	sp,sp,8
  81139c:	f800283a 	ret

008113a0 <setShipProperty>:

void setShipProperty(struct SpaceShip* this, int type) {
  8113a0:	defffc04 	addi	sp,sp,-16
  8113a4:	dfc00315 	stw	ra,12(sp)
  8113a8:	df000215 	stw	fp,8(sp)
  8113ac:	df000204 	addi	fp,sp,8
  8113b0:	e13ffe15 	stw	r4,-8(fp)
  8113b4:	e17fff15 	stw	r5,-4(fp)
	switch(type) {
  8113b8:	e0bfff17 	ldw	r2,-4(fp)
  8113bc:	10800168 	cmpgeui	r2,r2,5
  8113c0:	10007f1e 	bne	r2,zero,8115c0 <setShipProperty+0x220>
  8113c4:	e0bfff17 	ldw	r2,-4(fp)
  8113c8:	1085883a 	add	r2,r2,r2
  8113cc:	1087883a 	add	r3,r2,r2
  8113d0:	00802074 	movhi	r2,129
  8113d4:	1084f904 	addi	r2,r2,5092
  8113d8:	1885883a 	add	r2,r3,r2
  8113dc:	10800017 	ldw	r2,0(r2)
  8113e0:	1000683a 	jmp	r2
  8113e4:	008113f8 	rdprs	r2,zero,1103
  8113e8:	00811454 	movui	r2,1105
  8113ec:	008114b0 	cmpltui	r2,zero,1106
  8113f0:	0081150c 	andi	r2,zero,1108
  8113f4:	00811568 	cmpgeui	r2,zero,1109
	case 0:
		this->price = 200;
  8113f8:	e0fffe17 	ldw	r3,-8(fp)
  8113fc:	00803204 	movi	r2,200
  811400:	18800215 	stw	r2,8(r3)
		this->fire_rate = this->frame = 10;
  811404:	e0fffe17 	ldw	r3,-8(fp)
  811408:	00800284 	movi	r2,10
  81140c:	18800515 	stw	r2,20(r3)
  811410:	e0fffe17 	ldw	r3,-8(fp)
  811414:	00800284 	movi	r2,10
  811418:	18800315 	stw	r2,12(r3)
		this->super->collideRange = 50;
  81141c:	e0bffe17 	ldw	r2,-8(fp)
  811420:	10c00017 	ldw	r3,0(r2)
  811424:	00800c84 	movi	r2,50
  811428:	18800815 	stw	r2,32(r3)
		this->name = "Space Station";
  81142c:	e0fffe17 	ldw	r3,-8(fp)
  811430:	008020f4 	movhi	r2,131
  811434:	10a28904 	addi	r2,r2,-30172
  811438:	18800815 	stw	r2,32(r3)
		setWeapon(weapon1_lvl1, this);
  81143c:	008020f4 	movhi	r2,131
  811440:	109c8c04 	addi	r2,r2,29232
  811444:	11000017 	ldw	r4,0(r2)
  811448:	e17ffe17 	ldw	r5,-8(fp)
  81144c:	08116480 	call	811648 <setWeapon>
		break;
  811450:	00005b06 	br	8115c0 <setShipProperty+0x220>
	case 1:
		this->price = 2000;
  811454:	e0fffe17 	ldw	r3,-8(fp)
  811458:	0081f404 	movi	r2,2000
  81145c:	18800215 	stw	r2,8(r3)
		this->fire_rate = this->frame = 150;
  811460:	e0fffe17 	ldw	r3,-8(fp)
  811464:	00802584 	movi	r2,150
  811468:	18800515 	stw	r2,20(r3)
  81146c:	e0fffe17 	ldw	r3,-8(fp)
  811470:	00802584 	movi	r2,150
  811474:	18800315 	stw	r2,12(r3)
		this->super->collideRange = 15;
  811478:	e0bffe17 	ldw	r2,-8(fp)
  81147c:	10c00017 	ldw	r3,0(r2)
  811480:	008003c4 	movi	r2,15
  811484:	18800815 	stw	r2,32(r3)
		this->name = "Transport Ship";
  811488:	e0fffe17 	ldw	r3,-8(fp)
  81148c:	008020f4 	movhi	r2,131
  811490:	10a28d04 	addi	r2,r2,-30156
  811494:	18800815 	stw	r2,32(r3)
		setWeapon(weapon2_lvl1, this);
  811498:	008020f4 	movhi	r2,131
  81149c:	109c8104 	addi	r2,r2,29188
  8114a0:	11000017 	ldw	r4,0(r2)
  8114a4:	e17ffe17 	ldw	r5,-8(fp)
  8114a8:	08116480 	call	811648 <setWeapon>
		break;
  8114ac:	00004406 	br	8115c0 <setShipProperty+0x220>
	case 2:
		this->price = 1000;
  8114b0:	e0fffe17 	ldw	r3,-8(fp)
  8114b4:	0080fa04 	movi	r2,1000
  8114b8:	18800215 	stw	r2,8(r3)
		this->fire_rate = this->frame = 15;
  8114bc:	e0fffe17 	ldw	r3,-8(fp)
  8114c0:	008003c4 	movi	r2,15
  8114c4:	18800515 	stw	r2,20(r3)
  8114c8:	e0fffe17 	ldw	r3,-8(fp)
  8114cc:	008003c4 	movi	r2,15
  8114d0:	18800315 	stw	r2,12(r3)
		this->super->collideRange = 60;
  8114d4:	e0bffe17 	ldw	r2,-8(fp)
  8114d8:	10c00017 	ldw	r3,0(r2)
  8114dc:	00800f04 	movi	r2,60
  8114e0:	18800815 	stw	r2,32(r3)
		this->name = "Satellite";
  8114e4:	e0fffe17 	ldw	r3,-8(fp)
  8114e8:	008020f4 	movhi	r2,131
  8114ec:	10a29104 	addi	r2,r2,-30140
  8114f0:	18800815 	stw	r2,32(r3)
		setWeapon(weapon3_lvl1, this);
  8114f4:	008020f4 	movhi	r2,131
  8114f8:	109c8304 	addi	r2,r2,29196
  8114fc:	11000017 	ldw	r4,0(r2)
  811500:	e17ffe17 	ldw	r5,-8(fp)
  811504:	08116480 	call	811648 <setWeapon>
		break;
  811508:	00002d06 	br	8115c0 <setShipProperty+0x220>
	case 3:
		this->price = 3000;
  81150c:	e0fffe17 	ldw	r3,-8(fp)
  811510:	0082ee04 	movi	r2,3000
  811514:	18800215 	stw	r2,8(r3)
		this->fire_rate = this->frame = 80;
  811518:	e0fffe17 	ldw	r3,-8(fp)
  81151c:	00801404 	movi	r2,80
  811520:	18800515 	stw	r2,20(r3)
  811524:	e0fffe17 	ldw	r3,-8(fp)
  811528:	00801404 	movi	r2,80
  81152c:	18800315 	stw	r2,12(r3)
		this->super->collideRange = 20;
  811530:	e0bffe17 	ldw	r2,-8(fp)
  811534:	10c00017 	ldw	r3,0(r2)
  811538:	00800504 	movi	r2,20
  81153c:	18800815 	stw	r2,32(r3)
		this->name = "Lethal Ship";
  811540:	e0fffe17 	ldw	r3,-8(fp)
  811544:	008020f4 	movhi	r2,131
  811548:	10a29404 	addi	r2,r2,-30128
  81154c:	18800815 	stw	r2,32(r3)
		setWeapon(weapon5_lvl1, this);
  811550:	008020f4 	movhi	r2,131
  811554:	109c8704 	addi	r2,r2,29212
  811558:	11000017 	ldw	r4,0(r2)
  81155c:	e17ffe17 	ldw	r5,-8(fp)
  811560:	08116480 	call	811648 <setWeapon>
		break;
  811564:	00001606 	br	8115c0 <setShipProperty+0x220>
	case 4:
		this->price = 3500;
  811568:	e0fffe17 	ldw	r3,-8(fp)
  81156c:	00836b04 	movi	r2,3500
  811570:	18800215 	stw	r2,8(r3)
		this->fire_rate = this->frame = 80;
  811574:	e0fffe17 	ldw	r3,-8(fp)
  811578:	00801404 	movi	r2,80
  81157c:	18800515 	stw	r2,20(r3)
  811580:	e0fffe17 	ldw	r3,-8(fp)
  811584:	00801404 	movi	r2,80
  811588:	18800315 	stw	r2,12(r3)
		this->super->collideRange = 20;
  81158c:	e0bffe17 	ldw	r2,-8(fp)
  811590:	10c00017 	ldw	r3,0(r2)
  811594:	00800504 	movi	r2,20
  811598:	18800815 	stw	r2,32(r3)
		this->name = "Bomber";
  81159c:	e0fffe17 	ldw	r3,-8(fp)
  8115a0:	008020f4 	movhi	r2,131
  8115a4:	10a29704 	addi	r2,r2,-30116
  8115a8:	18800815 	stw	r2,32(r3)
		setWeapon(weapon4_lvl1, this);
  8115ac:	008020f4 	movhi	r2,131
  8115b0:	109c7e04 	addi	r2,r2,29176
  8115b4:	11000017 	ldw	r4,0(r2)
  8115b8:	e17ffe17 	ldw	r5,-8(fp)
  8115bc:	08116480 	call	811648 <setWeapon>
		break;
	default:
		break;
	}
}
  8115c0:	e037883a 	mov	sp,fp
  8115c4:	dfc00117 	ldw	ra,4(sp)
  8115c8:	df000017 	ldw	fp,0(sp)
  8115cc:	dec00204 	addi	sp,sp,8
  8115d0:	f800283a 	ret

008115d4 <killSpaceShip>:
/*
 *  Destructor of SpaceShip object -- when upgrading, etc
 */
void killSpaceShip(void* s){
  8115d4:	defffe04 	addi	sp,sp,-8
  8115d8:	df000115 	stw	fp,4(sp)
  8115dc:	df000104 	addi	fp,sp,4
  8115e0:	e13fff15 	stw	r4,-4(fp)
	((struct SpaceShip*)s)->super->end_frame = ((struct SpaceShip*)s)->super->curr_frame + 5;
  8115e4:	e0bfff17 	ldw	r2,-4(fp)
  8115e8:	10c00017 	ldw	r3,0(r2)
  8115ec:	e0bfff17 	ldw	r2,-4(fp)
  8115f0:	10800017 	ldw	r2,0(r2)
  8115f4:	10801617 	ldw	r2,88(r2)
  8115f8:	10800144 	addi	r2,r2,5
  8115fc:	18801315 	stw	r2,76(r3)
}
  811600:	e037883a 	mov	sp,fp
  811604:	df000017 	ldw	fp,0(sp)
  811608:	dec00104 	addi	sp,sp,4
  81160c:	f800283a 	ret

00811610 <shipAction>:

void shipAction(void* s) {
  811610:	defffe04 	addi	sp,sp,-8
  811614:	df000115 	stw	fp,4(sp)
  811618:	df000104 	addi	fp,sp,4
  81161c:	e13fff15 	stw	r4,-4(fp)
	((struct SpaceShip*)((struct Object*)s)->subObject)->frame++;
  811620:	e0bfff17 	ldw	r2,-4(fp)
  811624:	10801817 	ldw	r2,96(r2)
  811628:	1007883a 	mov	r3,r2
  81162c:	18800517 	ldw	r2,20(r3)
  811630:	10800044 	addi	r2,r2,1
  811634:	18800515 	stw	r2,20(r3)
}
  811638:	e037883a 	mov	sp,fp
  81163c:	df000017 	ldw	fp,0(sp)
  811640:	dec00104 	addi	sp,sp,4
  811644:	f800283a 	ret

00811648 <setWeapon>:
void setWeapon(struct BulletCollection* b, struct SpaceShip* self){
  811648:	defffc04 	addi	sp,sp,-16
  81164c:	dfc00315 	stw	ra,12(sp)
  811650:	df000215 	stw	fp,8(sp)
  811654:	df000204 	addi	fp,sp,8
  811658:	e13ffe15 	stw	r4,-8(fp)
  81165c:	e17fff15 	stw	r5,-4(fp)
	self->weapon = b;
  811660:	e0ffff17 	ldw	r3,-4(fp)
  811664:	e0bffe17 	ldw	r2,-8(fp)
  811668:	18800415 	stw	r2,16(r3)
	self->damage = self->weapon->bullets[0]->damage;
  81166c:	e0bfff17 	ldw	r2,-4(fp)
  811670:	10800417 	ldw	r2,16(r2)
  811674:	10800117 	ldw	r2,4(r2)
  811678:	10800517 	ldw	r2,20(r2)
  81167c:	1009883a 	mov	r4,r2
  811680:	081363c0 	call	81363c <__fixsfsi>
  811684:	1007883a 	mov	r3,r2
  811688:	e0bfff17 	ldw	r2,-4(fp)
  81168c:	10c00115 	stw	r3,4(r2)
}
  811690:	e037883a 	mov	sp,fp
  811694:	dfc00117 	ldw	ra,4(sp)
  811698:	df000017 	ldw	fp,0(sp)
  81169c:	dec00204 	addi	sp,sp,8
  8116a0:	f800283a 	ret

008116a4 <spaceShipCollide>:

void spaceShipCollide(void* self, void* obj, struct Collidable* col){
  8116a4:	defffa04 	addi	sp,sp,-24
  8116a8:	dfc00515 	stw	ra,20(sp)
  8116ac:	df000415 	stw	fp,16(sp)
  8116b0:	df000404 	addi	fp,sp,16
  8116b4:	e13ffd15 	stw	r4,-12(fp)
  8116b8:	e17ffe15 	stw	r5,-8(fp)
  8116bc:	e1bfff15 	stw	r6,-4(fp)
	//lock = 1;
	if (((struct Object*)obj)->class == 2){
  8116c0:	e0bffe17 	ldw	r2,-8(fp)
  8116c4:	10801117 	ldw	r2,68(r2)
  8116c8:	10800098 	cmpnei	r2,r2,2
  8116cc:	10000f1e 	bne	r2,zero,81170c <spaceShipCollide+0x68>
		spaceShipShoot(((struct Object*)obj)->center_x, ((struct Object*)obj)->center_y, ((struct Alien*)((struct Object*)obj)->subObject)->x_speed, ((struct Alien*)((struct Object*)obj)->subObject)->y_speed, ((struct SpaceShip*)(((struct Object*)self)->subObject)));
  8116d0:	e0bffe17 	ldw	r2,-8(fp)
  8116d4:	11000517 	ldw	r4,20(r2)
  8116d8:	e0bffe17 	ldw	r2,-8(fp)
  8116dc:	11400617 	ldw	r5,24(r2)
  8116e0:	e0bffe17 	ldw	r2,-8(fp)
  8116e4:	10801817 	ldw	r2,96(r2)
  8116e8:	11800417 	ldw	r6,16(r2)
  8116ec:	e0bffe17 	ldw	r2,-8(fp)
  8116f0:	10801817 	ldw	r2,96(r2)
  8116f4:	10c00517 	ldw	r3,20(r2)
  8116f8:	e0bffd17 	ldw	r2,-12(fp)
  8116fc:	10801817 	ldw	r2,96(r2)
  811700:	d8800015 	stw	r2,0(sp)
  811704:	180f883a 	mov	r7,r3
  811708:	08117200 	call	811720 <spaceShipShoot>
	}
	//lock = 0;
}
  81170c:	e037883a 	mov	sp,fp
  811710:	dfc00117 	ldw	ra,4(sp)
  811714:	df000017 	ldw	fp,0(sp)
  811718:	dec00204 	addi	sp,sp,8
  81171c:	f800283a 	ret

00811720 <spaceShipShoot>:

void spaceShipShoot(int en_x, int en_y, float v_x, float v_y, struct SpaceShip* self){
  811720:	defffa04 	addi	sp,sp,-24
  811724:	dfc00515 	stw	ra,20(sp)
  811728:	df000415 	stw	fp,16(sp)
  81172c:	df000404 	addi	fp,sp,16
  811730:	e13ffc15 	stw	r4,-16(fp)
  811734:	e17ffd15 	stw	r5,-12(fp)
  811738:	e1bffe15 	stw	r6,-8(fp)
  81173c:	e1ffff15 	stw	r7,-4(fp)
	// number of frame == fire rate
	if (self->frame >= self->fire_rate){
  811740:	e0800217 	ldw	r2,8(fp)
  811744:	10c00517 	ldw	r3,20(r2)
  811748:	e0800217 	ldw	r2,8(fp)
  81174c:	10800317 	ldw	r2,12(r2)
  811750:	18800b36 	bltu	r3,r2,811780 <spaceShipShoot+0x60>
		self->weapon->bc_fire(en_x, en_y, self->weapon, self);
  811754:	e0800217 	ldw	r2,8(fp)
  811758:	10800417 	ldw	r2,16(r2)
  81175c:	10c03817 	ldw	r3,224(r2)
  811760:	e0800217 	ldw	r2,8(fp)
  811764:	11800417 	ldw	r6,16(r2)
  811768:	e13ffc17 	ldw	r4,-16(fp)
  81176c:	e17ffd17 	ldw	r5,-12(fp)
  811770:	e1c00217 	ldw	r7,8(fp)
  811774:	183ee83a 	callr	r3
		self->frame = 0;
  811778:	e0800217 	ldw	r2,8(fp)
  81177c:	10000515 	stw	zero,20(r2)

	}
}
  811780:	e037883a 	mov	sp,fp
  811784:	dfc00117 	ldw	ra,4(sp)
  811788:	df000017 	ldw	fp,0(sp)
  81178c:	dec00204 	addi	sp,sp,8
  811790:	f800283a 	ret

00811794 <upgrade>:

void upgrade(struct SpaceShip* this) {
  811794:	defffc04 	addi	sp,sp,-16
  811798:	dfc00315 	stw	ra,12(sp)
  81179c:	df000215 	stw	fp,8(sp)
  8117a0:	df000204 	addi	fp,sp,8
  8117a4:	e13ffe15 	stw	r4,-8(fp)
	if(this->level == 1) {
  8117a8:	e0bffe17 	ldw	r2,-8(fp)
  8117ac:	10800617 	ldw	r2,24(r2)
  8117b0:	10800058 	cmpnei	r2,r2,1
  8117b4:	1000891e 	bne	r2,zero,8119dc <upgrade+0x248>
		if(info.currency < this->price*3) {
  8117b8:	008020f4 	movhi	r2,131
  8117bc:	109cb404 	addi	r2,r2,29392
  8117c0:	11000117 	ldw	r4,4(r2)
  8117c4:	e0bffe17 	ldw	r2,-8(fp)
  8117c8:	10c00217 	ldw	r3,8(r2)
  8117cc:	1805883a 	mov	r2,r3
  8117d0:	1085883a 	add	r2,r2,r2
  8117d4:	10c5883a 	add	r2,r2,r3
  8117d8:	2080042e 	bgeu	r4,r2,8117ec <upgrade+0x58>
			writeMSG("You do not have enough money to upgrade!");
  8117dc:	010020f4 	movhi	r4,131
  8117e0:	21229904 	addi	r4,r4,-30108
  8117e4:	080a1580 	call	80a158 <writeMSG>
			return;
  8117e8:	00007c06 	br	8119dc <upgrade+0x248>
		}
		playSoundById(audioController, TOWER_UPGRADE_SOUND, 0 );
  8117ec:	008020f4 	movhi	r2,131
  8117f0:	109c8004 	addi	r2,r2,29184
  8117f4:	11000017 	ldw	r4,0(r2)
  8117f8:	01400144 	movi	r5,5
  8117fc:	000d883a 	mov	r6,zero
  811800:	08015d80 	call	8015d8 <playSoundById>
		writeMSG("A ship is successfully upgraded!!");
  811804:	010020f4 	movhi	r4,131
  811808:	2122a404 	addi	r4,r4,-30064
  81180c:	080a1580 	call	80a158 <writeMSG>
		this->level = 2;
  811810:	e0fffe17 	ldw	r3,-8(fp)
  811814:	00800084 	movi	r2,2
  811818:	18800615 	stw	r2,24(r3)
		info.currency -= this->price*3;
  81181c:	008020f4 	movhi	r2,131
  811820:	109cb404 	addi	r2,r2,29392
  811824:	11000117 	ldw	r4,4(r2)
  811828:	e0bffe17 	ldw	r2,-8(fp)
  81182c:	10c00217 	ldw	r3,8(r2)
  811830:	1805883a 	mov	r2,r3
  811834:	1085883a 	add	r2,r2,r2
  811838:	10c5883a 	add	r2,r2,r3
  81183c:	2087c83a 	sub	r3,r4,r2
  811840:	008020f4 	movhi	r2,131
  811844:	109cb404 	addi	r2,r2,29392
  811848:	10c00115 	stw	r3,4(r2)
		updateScoreFrame();
  81184c:	080a0a40 	call	80a0a4 <updateScoreFrame>
	} else
		return;
	switch(this->type) {
  811850:	e0bffe17 	ldw	r2,-8(fp)
  811854:	10800717 	ldw	r2,28(r2)
  811858:	e0bfff15 	stw	r2,-4(fp)
  81185c:	e0ffff17 	ldw	r3,-4(fp)
  811860:	18800168 	cmpgeui	r2,r3,5
  811864:	10005d1e 	bne	r2,zero,8119dc <upgrade+0x248>
  811868:	e13fff17 	ldw	r4,-4(fp)
  81186c:	e13fff17 	ldw	r4,-4(fp)
  811870:	2105883a 	add	r2,r4,r4
  811874:	1087883a 	add	r3,r2,r2
  811878:	00802074 	movhi	r2,129
  81187c:	10862304 	addi	r2,r2,6284
  811880:	1885883a 	add	r2,r3,r2
  811884:	10800017 	ldw	r2,0(r2)
  811888:	1000683a 	jmp	r2
  81188c:	008118a0 	cmpeqi	r2,zero,1122
  811890:	008118e0 	cmpeqi	r2,zero,1123
  811894:	00811920 	cmpeqi	r2,zero,1124
  811898:	00811960 	cmpeqi	r2,zero,1125
  81189c:	008119a0 	cmpeqi	r2,zero,1126
		case 0:
			this->fire_rate = this->frame = 5;
  8118a0:	e0fffe17 	ldw	r3,-8(fp)
  8118a4:	00800144 	movi	r2,5
  8118a8:	18800515 	stw	r2,20(r3)
  8118ac:	e0fffe17 	ldw	r3,-8(fp)
  8118b0:	00800144 	movi	r2,5
  8118b4:	18800315 	stw	r2,12(r3)
			this->super->collideRange = 55;
  8118b8:	e0bffe17 	ldw	r2,-8(fp)
  8118bc:	10c00017 	ldw	r3,0(r2)
  8118c0:	00800dc4 	movi	r2,55
  8118c4:	18800815 	stw	r2,32(r3)
			setWeapon(weapon1_lvl2, this);
  8118c8:	008020f4 	movhi	r2,131
  8118cc:	109c7c04 	addi	r2,r2,29168
  8118d0:	11000017 	ldw	r4,0(r2)
  8118d4:	e17ffe17 	ldw	r5,-8(fp)
  8118d8:	08116480 	call	811648 <setWeapon>
			break;
  8118dc:	00003f06 	br	8119dc <upgrade+0x248>
		case 1:
			this->fire_rate = this->frame = 100;
  8118e0:	e0fffe17 	ldw	r3,-8(fp)
  8118e4:	00801904 	movi	r2,100
  8118e8:	18800515 	stw	r2,20(r3)
  8118ec:	e0fffe17 	ldw	r3,-8(fp)
  8118f0:	00801904 	movi	r2,100
  8118f4:	18800315 	stw	r2,12(r3)
			this->super->collideRange = 20;
  8118f8:	e0bffe17 	ldw	r2,-8(fp)
  8118fc:	10c00017 	ldw	r3,0(r2)
  811900:	00800504 	movi	r2,20
  811904:	18800815 	stw	r2,32(r3)
			setWeapon(weapon2_lvl2, this);
  811908:	008020f4 	movhi	r2,131
  81190c:	109c7f04 	addi	r2,r2,29180
  811910:	11000017 	ldw	r4,0(r2)
  811914:	e17ffe17 	ldw	r5,-8(fp)
  811918:	08116480 	call	811648 <setWeapon>
			break;
  81191c:	00002f06 	br	8119dc <upgrade+0x248>
		case 2:
			this->fire_rate = this->frame = 10;
  811920:	e0fffe17 	ldw	r3,-8(fp)
  811924:	00800284 	movi	r2,10
  811928:	18800515 	stw	r2,20(r3)
  81192c:	e0fffe17 	ldw	r3,-8(fp)
  811930:	00800284 	movi	r2,10
  811934:	18800315 	stw	r2,12(r3)
			this->super->collideRange = 60;
  811938:	e0bffe17 	ldw	r2,-8(fp)
  81193c:	10c00017 	ldw	r3,0(r2)
  811940:	00800f04 	movi	r2,60
  811944:	18800815 	stw	r2,32(r3)
			setWeapon(weapon3_lvl2, this);
  811948:	008020f4 	movhi	r2,131
  81194c:	109c8b04 	addi	r2,r2,29228
  811950:	11000017 	ldw	r4,0(r2)
  811954:	e17ffe17 	ldw	r5,-8(fp)
  811958:	08116480 	call	811648 <setWeapon>
			break;
  81195c:	00001f06 	br	8119dc <upgrade+0x248>
		case 3:
			this->fire_rate = this->frame = 60;
  811960:	e0fffe17 	ldw	r3,-8(fp)
  811964:	00800f04 	movi	r2,60
  811968:	18800515 	stw	r2,20(r3)
  81196c:	e0fffe17 	ldw	r3,-8(fp)
  811970:	00800f04 	movi	r2,60
  811974:	18800315 	stw	r2,12(r3)
			this->super->collideRange = 30;
  811978:	e0bffe17 	ldw	r2,-8(fp)
  81197c:	10c00017 	ldw	r3,0(r2)
  811980:	00800784 	movi	r2,30
  811984:	18800815 	stw	r2,32(r3)
			setWeapon(weapon5_lvl2, this);
  811988:	008020f4 	movhi	r2,131
  81198c:	109c8604 	addi	r2,r2,29208
  811990:	11000017 	ldw	r4,0(r2)
  811994:	e17ffe17 	ldw	r5,-8(fp)
  811998:	08116480 	call	811648 <setWeapon>
			break;
  81199c:	00000f06 	br	8119dc <upgrade+0x248>
		case 4:
			this->fire_rate = this->frame = 60;
  8119a0:	e0fffe17 	ldw	r3,-8(fp)
  8119a4:	00800f04 	movi	r2,60
  8119a8:	18800515 	stw	r2,20(r3)
  8119ac:	e0fffe17 	ldw	r3,-8(fp)
  8119b0:	00800f04 	movi	r2,60
  8119b4:	18800315 	stw	r2,12(r3)
			this->super->collideRange = 35;
  8119b8:	e0bffe17 	ldw	r2,-8(fp)
  8119bc:	10c00017 	ldw	r3,0(r2)
  8119c0:	008008c4 	movi	r2,35
  8119c4:	18800815 	stw	r2,32(r3)
			setWeapon(weapon4_lvl2, this);
  8119c8:	008020f4 	movhi	r2,131
  8119cc:	109c8504 	addi	r2,r2,29204
  8119d0:	11000017 	ldw	r4,0(r2)
  8119d4:	e17ffe17 	ldw	r5,-8(fp)
  8119d8:	08116480 	call	811648 <setWeapon>
			break;
		default:
			break;
		}
}
  8119dc:	e037883a 	mov	sp,fp
  8119e0:	dfc00117 	ldw	ra,4(sp)
  8119e4:	df000017 	ldw	fp,0(sp)
  8119e8:	dec00204 	addi	sp,sp,8
  8119ec:	f800283a 	ret

008119f0 <initSwitchController>:
 */

#import "SwitchController.h"

struct SwitchController* initSwitchController(void)
{
  8119f0:	defffd04 	addi	sp,sp,-12
  8119f4:	dfc00215 	stw	ra,8(sp)
  8119f8:	df000115 	stw	fp,4(sp)
  8119fc:	df000104 	addi	fp,sp,4
	struct SwitchController* this = (struct SwitchController*)malloc(sizeof(struct SwitchController));
  811a00:	01000304 	movi	r4,12
  811a04:	0814f580 	call	814f58 <malloc>
  811a08:	e0bfff15 	stw	r2,-4(fp)
	this->switches = 0;
  811a0c:	e0bfff17 	ldw	r2,-4(fp)
  811a10:	10000215 	stw	zero,8(r2)
	this->switch_listener = NULL;
  811a14:	e0bfff17 	ldw	r2,-4(fp)
  811a18:	10000015 	stw	zero,0(r2)
	this->listener_context = NULL;
  811a1c:	e0bfff17 	ldw	r2,-4(fp)
  811a20:	10000115 	stw	zero,4(r2)

	alt_irq_register(SWITCHES_IRQ, this, (void*) switch_ISR);
  811a24:	01802074 	movhi	r6,129
  811a28:	3186c604 	addi	r6,r6,6936
  811a2c:	010000c4 	movi	r4,3
  811a30:	e17fff17 	ldw	r5,-4(fp)
  811a34:	081dce80 	call	81dce8 <alt_irq_register>
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
  811a38:	00804234 	movhi	r2,264
  811a3c:	108d1b04 	addi	r2,r2,13420
  811a40:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCHES_BASE, 0);
  811a44:	00804234 	movhi	r2,264
  811a48:	108d1a04 	addi	r2,r2,13416
  811a4c:	10000035 	stwio	zero,0(r2)
	return this;
  811a50:	e0bfff17 	ldw	r2,-4(fp)
}
  811a54:	e037883a 	mov	sp,fp
  811a58:	dfc00117 	ldw	ra,4(sp)
  811a5c:	df000017 	ldw	fp,0(sp)
  811a60:	dec00204 	addi	sp,sp,8
  811a64:	f800283a 	ret

00811a68 <addSwitchListener>:
 * @param listener - Function to call -- accepts the SwitchController and a context object
 * @param context - A pointer to pass any value/object/struct to the callback function
 * @param switches_to_listen_to - Specify which switches should trigger the interrupt ( 0x2 would be SW(1) -- 0x3 would be SW(1) and SW(0) )
 */
void addSwitchListener(struct SwitchController* this, void (*listener)(struct SwitchController*, void *), void *context, int switches_to_listen_to)
{
  811a68:	defffa04 	addi	sp,sp,-24
  811a6c:	dfc00515 	stw	ra,20(sp)
  811a70:	df000415 	stw	fp,16(sp)
  811a74:	df000404 	addi	fp,sp,16
  811a78:	e13ffc15 	stw	r4,-16(fp)
  811a7c:	e17ffd15 	stw	r5,-12(fp)
  811a80:	e1bffe15 	stw	r6,-8(fp)
  811a84:	e1ffff15 	stw	r7,-4(fp)
	if( this->switch_listener != NULL )
  811a88:	e0bffc17 	ldw	r2,-16(fp)
  811a8c:	10800017 	ldw	r2,0(r2)
  811a90:	1005003a 	cmpeq	r2,r2,zero
  811a94:	1000021e 	bne	r2,zero,811aa0 <addSwitchListener+0x38>
	{
		removeSwitchListener( this );
  811a98:	e13ffc17 	ldw	r4,-16(fp)
  811a9c:	0811adc0 	call	811adc <removeSwitchListener>
	}
	this->switch_listener = listener;
  811aa0:	e0fffc17 	ldw	r3,-16(fp)
  811aa4:	e0bffd17 	ldw	r2,-12(fp)
  811aa8:	18800015 	stw	r2,0(r3)
	this->listener_context = context;
  811aac:	e0fffc17 	ldw	r3,-16(fp)
  811ab0:	e0bffe17 	ldw	r2,-8(fp)
  811ab4:	18800115 	stw	r2,4(r3)

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCHES_BASE, switches_to_listen_to);
  811ab8:	00c04234 	movhi	r3,264
  811abc:	18cd1a04 	addi	r3,r3,13416
  811ac0:	e0bfff17 	ldw	r2,-4(fp)
  811ac4:	18800035 	stwio	r2,0(r3)
}
  811ac8:	e037883a 	mov	sp,fp
  811acc:	dfc00117 	ldw	ra,4(sp)
  811ad0:	df000017 	ldw	fp,0(sp)
  811ad4:	dec00204 	addi	sp,sp,8
  811ad8:	f800283a 	ret

00811adc <removeSwitchListener>:

/**
 * Remove the currently registered callback function
 */
void removeSwitchListener(struct SwitchController* this)
{
  811adc:	defffe04 	addi	sp,sp,-8
  811ae0:	df000115 	stw	fp,4(sp)
  811ae4:	df000104 	addi	fp,sp,4
  811ae8:	e13fff15 	stw	r4,-4(fp)
	this->switch_listener = NULL;
  811aec:	e0bfff17 	ldw	r2,-4(fp)
  811af0:	10000015 	stw	zero,0(r2)
	this->listener_context = NULL;
  811af4:	e0bfff17 	ldw	r2,-4(fp)
  811af8:	10000115 	stw	zero,4(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCHES_BASE,0x0);
  811afc:	00804234 	movhi	r2,264
  811b00:	108d1a04 	addi	r2,r2,13416
  811b04:	10000035 	stwio	zero,0(r2)
}
  811b08:	e037883a 	mov	sp,fp
  811b0c:	df000017 	ldw	fp,0(sp)
  811b10:	dec00104 	addi	sp,sp,4
  811b14:	f800283a 	ret

00811b18 <switch_ISR>:
/**
 * The Interrupt service routine for the switches
 * This reads the values of the switches and then calls the registered switch listener.
 */
void switch_ISR(struct SwitchController* this, unsigned int id)
{
  811b18:	defffc04 	addi	sp,sp,-16
  811b1c:	dfc00315 	stw	ra,12(sp)
  811b20:	df000215 	stw	fp,8(sp)
  811b24:	df000204 	addi	fp,sp,8
  811b28:	e13ffe15 	stw	r4,-8(fp)
  811b2c:	e17fff15 	stw	r5,-4(fp)
	this->switches = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  811b30:	00804234 	movhi	r2,264
  811b34:	108d1804 	addi	r2,r2,13408
  811b38:	10c00037 	ldwio	r3,0(r2)
  811b3c:	e0bffe17 	ldw	r2,-8(fp)
  811b40:	10c00215 	stw	r3,8(r2)

	if( this->switch_listener != NULL )
  811b44:	e0bffe17 	ldw	r2,-8(fp)
  811b48:	10800017 	ldw	r2,0(r2)
  811b4c:	1005003a 	cmpeq	r2,r2,zero
  811b50:	1000061e 	bne	r2,zero,811b6c <switch_ISR+0x54>
		( *this->switch_listener )( this, this->listener_context );
  811b54:	e0bffe17 	ldw	r2,-8(fp)
  811b58:	10c00017 	ldw	r3,0(r2)
  811b5c:	e0bffe17 	ldw	r2,-8(fp)
  811b60:	11400117 	ldw	r5,4(r2)
  811b64:	e13ffe17 	ldw	r4,-8(fp)
  811b68:	183ee83a 	callr	r3

	IOWR_ALTERA_AVALON_PIO_EDGE_CAP( SWITCHES_BASE, 0);
  811b6c:	00804234 	movhi	r2,264
  811b70:	108d1b04 	addi	r2,r2,13420
  811b74:	10000035 	stwio	zero,0(r2)
}
  811b78:	e037883a 	mov	sp,fp
  811b7c:	dfc00117 	ldw	ra,4(sp)
  811b80:	df000017 	ldw	fp,0(sp)
  811b84:	dec00204 	addi	sp,sp,8
  811b88:	f800283a 	ret

00811b8c <isSwitchOff>:

/**
 * @param switchNum - Number of the switch to check
 * returns true if the switch is off
 */
bool isSwitchOff( int switchNum ) {
  811b8c:	defffd04 	addi	sp,sp,-12
  811b90:	dfc00215 	stw	ra,8(sp)
  811b94:	df000115 	stw	fp,4(sp)
  811b98:	df000104 	addi	fp,sp,4
  811b9c:	e13fff15 	stw	r4,-4(fp)
	return !isBitSet( IORD_16DIRECT( SWITCHES_BASE, 0 ), switchNum );
  811ba0:	00804234 	movhi	r2,264
  811ba4:	108d1804 	addi	r2,r2,13408
  811ba8:	1100002b 	ldhuio	r4,0(r2)
  811bac:	e17fff17 	ldw	r5,-4(fp)
  811bb0:	080174c0 	call	80174c <isBitSet>
  811bb4:	1005003a 	cmpeq	r2,r2,zero
}
  811bb8:	e037883a 	mov	sp,fp
  811bbc:	dfc00117 	ldw	ra,4(sp)
  811bc0:	df000017 	ldw	fp,0(sp)
  811bc4:	dec00204 	addi	sp,sp,8
  811bc8:	f800283a 	ret

00811bcc <isSwitchOn>:

/**
 * @param switchNum - Number of the switch to check
 * returns true if the switch is off
 */
bool isSwitchOn( int switchNum ) {
  811bcc:	defffd04 	addi	sp,sp,-12
  811bd0:	dfc00215 	stw	ra,8(sp)
  811bd4:	df000115 	stw	fp,4(sp)
  811bd8:	df000104 	addi	fp,sp,4
  811bdc:	e13fff15 	stw	r4,-4(fp)
	return isBitSet( IORD_16DIRECT( SWITCHES_BASE, 0 ), switchNum );
  811be0:	00804234 	movhi	r2,264
  811be4:	108d1804 	addi	r2,r2,13408
  811be8:	1100002b 	ldhuio	r4,0(r2)
  811bec:	e17fff17 	ldw	r5,-4(fp)
  811bf0:	080174c0 	call	80174c <isBitSet>
  811bf4:	1004c03a 	cmpne	r2,r2,zero
}
  811bf8:	e037883a 	mov	sp,fp
  811bfc:	dfc00117 	ldw	ra,4(sp)
  811c00:	df000017 	ldw	fp,0(sp)
  811c04:	dec00204 	addi	sp,sp,8
  811c08:	f800283a 	ret

00811c0c <initTowerPlacer>:
 *      Author: Adam
 */

#import "TowerPlacer.h"

struct TowerPlacer* initTowerPlacer(void) {
  811c0c:	defffd04 	addi	sp,sp,-12
  811c10:	dfc00215 	stw	ra,8(sp)
  811c14:	df000115 	stw	fp,4(sp)
  811c18:	df000104 	addi	fp,sp,4
	struct TowerPlacer* t = (struct TowerPlacer*)malloc(sizeof(struct TowerPlacer));
  811c1c:	01000204 	movi	r4,8
  811c20:	0814f580 	call	814f58 <malloc>
  811c24:	e0bfff15 	stw	r2,-4(fp)
	t->active = 0;
  811c28:	e0bfff17 	ldw	r2,-4(fp)
  811c2c:	10000115 	stw	zero,4(r2)
	return t;
  811c30:	e0bfff17 	ldw	r2,-4(fp)
}
  811c34:	e037883a 	mov	sp,fp
  811c38:	dfc00117 	ldw	ra,4(sp)
  811c3c:	df000017 	ldw	fp,0(sp)
  811c40:	dec00204 	addi	sp,sp,8
  811c44:	f800283a 	ret

00811c48 <stopTowerPlacement>:
/**
 * Stops the tower placement phase
 * TODO: This should actually remove the current tower from the env because it
 * hasn't been placed yet.
 */
void stopTowerPlacement(struct TowerPlacer* towerPlacer) {
  811c48:	defffe04 	addi	sp,sp,-8
  811c4c:	df000115 	stw	fp,4(sp)
  811c50:	df000104 	addi	fp,sp,4
  811c54:	e13fff15 	stw	r4,-4(fp)
	if( towerPlacer->active == 0 ) {
  811c58:	e0bfff17 	ldw	r2,-4(fp)
  811c5c:	10800117 	ldw	r2,4(r2)
  811c60:	1005003a 	cmpeq	r2,r2,zero
  811c64:	1000021e 	bne	r2,zero,811c70 <stopTowerPlacement+0x28>
		return;
	}
	towerPlacer->active = 0;
  811c68:	e0bfff17 	ldw	r2,-4(fp)
  811c6c:	10000115 	stw	zero,4(r2)
}
  811c70:	e037883a 	mov	sp,fp
  811c74:	df000017 	ldw	fp,0(sp)
  811c78:	dec00104 	addi	sp,sp,4
  811c7c:	f800283a 	ret

00811c80 <attemptPlaceTower>:

/**
 * This will be the function to check if a tower placement is valid and "place" the tower
 * at the current cursor position
 */
int attemptPlaceTower(struct TowerPlacer* towerPlacer) {
  811c80:	defffe04 	addi	sp,sp,-8
  811c84:	df000115 	stw	fp,4(sp)
  811c88:	df000104 	addi	fp,sp,4
  811c8c:	e13fff15 	stw	r4,-4(fp)
	towerPlacer->active = 0;
  811c90:	e0bfff17 	ldw	r2,-4(fp)
  811c94:	10000115 	stw	zero,4(r2)
	towerPlacer->currTower = NULL;
  811c98:	e0bfff17 	ldw	r2,-4(fp)
  811c9c:	10000015 	stw	zero,0(r2)
	return 1;
  811ca0:	00800044 	movi	r2,1
}
  811ca4:	e037883a 	mov	sp,fp
  811ca8:	df000017 	ldw	fp,0(sp)
  811cac:	dec00104 	addi	sp,sp,4
  811cb0:	f800283a 	ret

00811cb4 <killTowerPlacer>:

/**
 * TODO: Memory cleanup should happen here
 */
void killTowerPlacer(void) {
  811cb4:	deffff04 	addi	sp,sp,-4
  811cb8:	df000015 	stw	fp,0(sp)
  811cbc:	d839883a 	mov	fp,sp

}
  811cc0:	e037883a 	mov	sp,fp
  811cc4:	df000017 	ldw	fp,0(sp)
  811cc8:	dec00104 	addi	sp,sp,4
  811ccc:	f800283a 	ret

00811cd0 <selectTower>:

/**
 * Function to call when a tower is selected from the side panel
 */
void selectTower(struct TowerPlacer* towerPlacer, struct SpaceShip* spaceShip) {
  811cd0:	defffd04 	addi	sp,sp,-12
  811cd4:	df000215 	stw	fp,8(sp)
  811cd8:	df000204 	addi	fp,sp,8
  811cdc:	e13ffe15 	stw	r4,-8(fp)
  811ce0:	e17fff15 	stw	r5,-4(fp)
	if( towerPlacer->active == 1 )
  811ce4:	e0bffe17 	ldw	r2,-8(fp)
  811ce8:	10800117 	ldw	r2,4(r2)
  811cec:	10800060 	cmpeqi	r2,r2,1
  811cf0:	1000061e 	bne	r2,zero,811d0c <selectTower+0x3c>
		return;
	towerPlacer->currTower = spaceShip;
  811cf4:	e0fffe17 	ldw	r3,-8(fp)
  811cf8:	e0bfff17 	ldw	r2,-4(fp)
  811cfc:	18800015 	stw	r2,0(r3)
	towerPlacer->active = 1;
  811d00:	e0fffe17 	ldw	r3,-8(fp)
  811d04:	00800044 	movi	r2,1
  811d08:	18800115 	stw	r2,4(r3)
}
  811d0c:	e037883a 	mov	sp,fp
  811d10:	df000017 	ldw	fp,0(sp)
  811d14:	dec00104 	addi	sp,sp,4
  811d18:	f800283a 	ret

00811d1c <updateTowerPosition>:

/**
 * Update function to reposition the currently selected tower
 */
void updateTowerPosition(struct TowerPlacer* towerPlacer, int x, int y) {
  811d1c:	defffb04 	addi	sp,sp,-20
  811d20:	dfc00415 	stw	ra,16(sp)
  811d24:	df000315 	stw	fp,12(sp)
  811d28:	df000304 	addi	fp,sp,12
  811d2c:	e13ffd15 	stw	r4,-12(fp)
  811d30:	e17ffe15 	stw	r5,-8(fp)
  811d34:	e1bfff15 	stw	r6,-4(fp)
	if( towerPlacer->active == 0 )
  811d38:	e0bffd17 	ldw	r2,-12(fp)
  811d3c:	10800117 	ldw	r2,4(r2)
  811d40:	1005003a 	cmpeq	r2,r2,zero
  811d44:	1000081e 	bne	r2,zero,811d68 <updateTowerPosition+0x4c>
		return;
	setXY( towerPlacer->currTower->super, x - 10, y-10 );
  811d48:	e0bffd17 	ldw	r2,-12(fp)
  811d4c:	10800017 	ldw	r2,0(r2)
  811d50:	11000017 	ldw	r4,0(r2)
  811d54:	e0bffe17 	ldw	r2,-8(fp)
  811d58:	117ffd84 	addi	r5,r2,-10
  811d5c:	e0bfff17 	ldw	r2,-4(fp)
  811d60:	11bffd84 	addi	r6,r2,-10
  811d64:	081016c0 	call	81016c <setXY>
}
  811d68:	e037883a 	mov	sp,fp
  811d6c:	dfc00117 	ldw	ra,4(sp)
  811d70:	df000017 	ldw	fp,0(sp)
  811d74:	dec00204 	addi	sp,sp,8
  811d78:	f800283a 	ret

00811d7c <initAnimation>:
#include "animation.h"
/*
 * Constructor of Animation; start == 1 if this animation contains the first image
 * in the sequence; c == 1 if the image in the animation comes from the disk
 */
struct animation* initAnimation(int* img, int start) {
  811d7c:	defffb04 	addi	sp,sp,-20
  811d80:	dfc00415 	stw	ra,16(sp)
  811d84:	df000315 	stw	fp,12(sp)
  811d88:	df000304 	addi	fp,sp,12
  811d8c:	e13ffe15 	stw	r4,-8(fp)
  811d90:	e17fff15 	stw	r5,-4(fp)
	struct animation* a;
	while((a = (struct animation*)malloc(sizeof(struct animation)))==NULL) {printf("memory allocation with aniimation\n");}
  811d94:	00000306 	br	811da4 <initAnimation+0x28>
  811d98:	010020f4 	movhi	r4,131
  811d9c:	2122ad04 	addi	r4,r4,-30028
  811da0:	08158640 	call	815864 <puts>
  811da4:	01000804 	movi	r4,32
  811da8:	0814f580 	call	814f58 <malloc>
  811dac:	e0bffd15 	stw	r2,-12(fp)
  811db0:	e0bffd17 	ldw	r2,-12(fp)
  811db4:	1005003a 	cmpeq	r2,r2,zero
  811db8:	103ff71e 	bne	r2,zero,811d98 <initAnimation+0x1c>
	a->prev_x = a->prev_y = 0;
  811dbc:	e0bffd17 	ldw	r2,-12(fp)
  811dc0:	10000215 	stw	zero,8(r2)
  811dc4:	e0bffd17 	ldw	r2,-12(fp)
  811dc8:	10c00217 	ldw	r3,8(r2)
  811dcc:	e0bffd17 	ldw	r2,-12(fp)
  811dd0:	10c00115 	stw	r3,4(r2)
	a->image = img;
  811dd4:	e0fffd17 	ldw	r3,-12(fp)
  811dd8:	e0bffe17 	ldw	r2,-8(fp)
  811ddc:	18800015 	stw	r2,0(r3)
	a->prev = a;
  811de0:	e0fffd17 	ldw	r3,-12(fp)
  811de4:	e0bffd17 	ldw	r2,-12(fp)
  811de8:	18800415 	stw	r2,16(r3)
	a->next = a;
  811dec:	e0fffd17 	ldw	r3,-12(fp)
  811df0:	e0bffd17 	ldw	r2,-12(fp)
  811df4:	18800515 	stw	r2,20(r3)
	a->end = a;
  811df8:	e0fffd17 	ldw	r3,-12(fp)
  811dfc:	e0bffd17 	ldw	r2,-12(fp)
  811e00:	18800715 	stw	r2,28(r3)
	a->clean = 0;
  811e04:	e0bffd17 	ldw	r2,-12(fp)
  811e08:	10000315 	stw	zero,12(r2)
	if(start > 0)
  811e0c:	e0bfff17 	ldw	r2,-4(fp)
  811e10:	10800050 	cmplti	r2,r2,1
  811e14:	1000041e 	bne	r2,zero,811e28 <initAnimation+0xac>
		a->first = a;
  811e18:	e0fffd17 	ldw	r3,-12(fp)
  811e1c:	e0bffd17 	ldw	r2,-12(fp)
  811e20:	18800615 	stw	r2,24(r3)
  811e24:	00000206 	br	811e30 <initAnimation+0xb4>
	else
		a->first = NULL;
  811e28:	e0bffd17 	ldw	r2,-12(fp)
  811e2c:	10000615 	stw	zero,24(r2)
	return a;
  811e30:	e0bffd17 	ldw	r2,-12(fp)
}
  811e34:	e037883a 	mov	sp,fp
  811e38:	dfc00117 	ldw	ra,4(sp)
  811e3c:	df000017 	ldw	fp,0(sp)
  811e40:	dec00204 	addi	sp,sp,8
  811e44:	f800283a 	ret

00811e48 <imageInDisk>:

void imageInDisk(struct animation* this) {
  811e48:	defffe04 	addi	sp,sp,-8
  811e4c:	df000115 	stw	fp,4(sp)
  811e50:	df000104 	addi	fp,sp,4
  811e54:	e13fff15 	stw	r4,-4(fp)
	this->clean = 1;
  811e58:	e0ffff17 	ldw	r3,-4(fp)
  811e5c:	00800044 	movi	r2,1
  811e60:	18800315 	stw	r2,12(r3)
}
  811e64:	e037883a 	mov	sp,fp
  811e68:	df000017 	ldw	fp,0(sp)
  811e6c:	dec00104 	addi	sp,sp,4
  811e70:	f800283a 	ret

00811e74 <killAnimation>:
/*
 * Destructor; if attribute clean == 1, free the image
 */
void killAnimation(struct animation* this) {
  811e74:	defffd04 	addi	sp,sp,-12
  811e78:	dfc00215 	stw	ra,8(sp)
  811e7c:	df000115 	stw	fp,4(sp)
  811e80:	df000104 	addi	fp,sp,4
  811e84:	e13fff15 	stw	r4,-4(fp)
	if(this->prev != NULL) {
  811e88:	e0bfff17 	ldw	r2,-4(fp)
  811e8c:	10800417 	ldw	r2,16(r2)
  811e90:	1005003a 	cmpeq	r2,r2,zero
  811e94:	1000021e 	bne	r2,zero,811ea0 <killAnimation+0x2c>
		this->prev = NULL;
  811e98:	e0bfff17 	ldw	r2,-4(fp)
  811e9c:	10000415 	stw	zero,16(r2)
	}
	if(this->clean == 1) {
  811ea0:	e0bfff17 	ldw	r2,-4(fp)
  811ea4:	10800317 	ldw	r2,12(r2)
  811ea8:	10800058 	cmpnei	r2,r2,1
  811eac:	1000051e 	bne	r2,zero,811ec4 <killAnimation+0x50>
		free(this->image);
  811eb0:	e0bfff17 	ldw	r2,-4(fp)
  811eb4:	11000017 	ldw	r4,0(r2)
  811eb8:	0814f440 	call	814f44 <free>
		this->image = NULL;
  811ebc:	e0bfff17 	ldw	r2,-4(fp)
  811ec0:	10000015 	stw	zero,0(r2)
	}
	if(this->end != this)
  811ec4:	e0bfff17 	ldw	r2,-4(fp)
  811ec8:	10c00717 	ldw	r3,28(r2)
  811ecc:	e0bfff17 	ldw	r2,-4(fp)
  811ed0:	18800326 	beq	r3,r2,811ee0 <killAnimation+0x6c>
		killAnimation(this->next);
  811ed4:	e0bfff17 	ldw	r2,-4(fp)
  811ed8:	11000517 	ldw	r4,20(r2)
  811edc:	0811e740 	call	811e74 <killAnimation>

	this->next = NULL;
  811ee0:	e0bfff17 	ldw	r2,-4(fp)
  811ee4:	10000515 	stw	zero,20(r2)
	this->first = NULL;
  811ee8:	e0bfff17 	ldw	r2,-4(fp)
  811eec:	10000615 	stw	zero,24(r2)
	this->end = NULL;
  811ef0:	e0bfff17 	ldw	r2,-4(fp)
  811ef4:	10000715 	stw	zero,28(r2)
	free(this);
  811ef8:	e13fff17 	ldw	r4,-4(fp)
  811efc:	0814f440 	call	814f44 <free>
	this = NULL;
  811f00:	e03fff15 	stw	zero,-4(fp)
}
  811f04:	e037883a 	mov	sp,fp
  811f08:	dfc00117 	ldw	ra,4(sp)
  811f0c:	df000017 	ldw	fp,0(sp)
  811f10:	dec00204 	addi	sp,sp,8
  811f14:	f800283a 	ret

00811f18 <addImage>:
/*
 * add an image to the animation
 */
void addImage(struct animation *curr, struct animation* n) {
  811f18:	defffd04 	addi	sp,sp,-12
  811f1c:	df000215 	stw	fp,8(sp)
  811f20:	df000204 	addi	fp,sp,8
  811f24:	e13ffe15 	stw	r4,-8(fp)
  811f28:	e17fff15 	stw	r5,-4(fp)
	n->prev = curr->end;
  811f2c:	e0bffe17 	ldw	r2,-8(fp)
  811f30:	10c00717 	ldw	r3,28(r2)
  811f34:	e0bfff17 	ldw	r2,-4(fp)
  811f38:	10c00415 	stw	r3,16(r2)
	curr->end->next = n;
  811f3c:	e0bffe17 	ldw	r2,-8(fp)
  811f40:	10c00717 	ldw	r3,28(r2)
  811f44:	e0bfff17 	ldw	r2,-4(fp)
  811f48:	18800515 	stw	r2,20(r3)
	curr->end = n;
  811f4c:	e0fffe17 	ldw	r3,-8(fp)
  811f50:	e0bfff17 	ldw	r2,-4(fp)
  811f54:	18800715 	stw	r2,28(r3)
	curr->first->prev = n;
  811f58:	e0bffe17 	ldw	r2,-8(fp)
  811f5c:	10c00617 	ldw	r3,24(r2)
  811f60:	e0bfff17 	ldw	r2,-4(fp)
  811f64:	18800415 	stw	r2,16(r3)
	n->first = curr->first;
  811f68:	e0bffe17 	ldw	r2,-8(fp)
  811f6c:	10c00617 	ldw	r3,24(r2)
  811f70:	e0bfff17 	ldw	r2,-4(fp)
  811f74:	10c00615 	stw	r3,24(r2)
	n->next = curr->first;
  811f78:	e0bffe17 	ldw	r2,-8(fp)
  811f7c:	10c00617 	ldw	r3,24(r2)
  811f80:	e0bfff17 	ldw	r2,-4(fp)
  811f84:	10c00515 	stw	r3,20(r2)
}
  811f88:	e037883a 	mov	sp,fp
  811f8c:	df000017 	ldw	fp,0(sp)
  811f90:	dec00104 	addi	sp,sp,4
  811f94:	f800283a 	ret

00811f98 <draw>:

void draw(int pos_x, int pos_y, int* img, int size) {
  811f98:	defff904 	addi	sp,sp,-28
  811f9c:	df000615 	stw	fp,24(sp)
  811fa0:	df000604 	addi	fp,sp,24
  811fa4:	e13ffc15 	stw	r4,-16(fp)
  811fa8:	e17ffd15 	stw	r5,-12(fp)
  811fac:	e1bffe15 	stw	r6,-8(fp)
  811fb0:	e1ffff15 	stw	r7,-4(fp)
	int i, j;
	if(pos_x < 0 || pos_y < 0 || pos_x >= 320 || pos_y >= 240) return;
  811fb4:	e0bffc17 	ldw	r2,-16(fp)
  811fb8:	1004803a 	cmplt	r2,r2,zero
  811fbc:	1000451e 	bne	r2,zero,8120d4 <draw+0x13c>
  811fc0:	e0bffd17 	ldw	r2,-12(fp)
  811fc4:	1004803a 	cmplt	r2,r2,zero
  811fc8:	1000421e 	bne	r2,zero,8120d4 <draw+0x13c>
  811fcc:	e0bffc17 	ldw	r2,-16(fp)
  811fd0:	10805008 	cmpgei	r2,r2,320
  811fd4:	10003f1e 	bne	r2,zero,8120d4 <draw+0x13c>
  811fd8:	e0bffd17 	ldw	r2,-12(fp)
  811fdc:	10803c10 	cmplti	r2,r2,240
  811fe0:	1000011e 	bne	r2,zero,811fe8 <draw+0x50>
  811fe4:	00003b06 	br	8120d4 <draw+0x13c>
	for(i = 0; i < size; i++) {
  811fe8:	e03ffb15 	stw	zero,-20(fp)
  811fec:	00003606 	br	8120c8 <draw+0x130>
	    for(j = 0; j < size; j++) {
  811ff0:	e03ffa15 	stw	zero,-24(fp)
  811ff4:	00002e06 	br	8120b0 <draw+0x118>
	    	if(*(img + j*size+i) != 0) {
  811ff8:	e0fffa17 	ldw	r3,-24(fp)
  811ffc:	e0bfff17 	ldw	r2,-4(fp)
  812000:	1885383a 	mul	r2,r3,r2
  812004:	1007883a 	mov	r3,r2
  812008:	e0bffb17 	ldw	r2,-20(fp)
  81200c:	1885883a 	add	r2,r3,r2
  812010:	1085883a 	add	r2,r2,r2
  812014:	1085883a 	add	r2,r2,r2
  812018:	1007883a 	mov	r3,r2
  81201c:	e0bffe17 	ldw	r2,-8(fp)
  812020:	1885883a 	add	r2,r3,r2
  812024:	10800017 	ldw	r2,0(r2)
  812028:	1005003a 	cmpeq	r2,r2,zero
  81202c:	10001d1e 	bne	r2,zero,8120a4 <draw+0x10c>
	    		 IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((pos_y+j)*320+pos_x+i)*2, *(img + j*size+i));
  812030:	008020f4 	movhi	r2,131
  812034:	109c8a04 	addi	r2,r2,29224
  812038:	10800017 	ldw	r2,0(r2)
  81203c:	10800b17 	ldw	r2,44(r2)
  812040:	1009883a 	mov	r4,r2
  812044:	e0fffd17 	ldw	r3,-12(fp)
  812048:	e0bffa17 	ldw	r2,-24(fp)
  81204c:	1885883a 	add	r2,r3,r2
  812050:	10c05024 	muli	r3,r2,320
  812054:	e0bffc17 	ldw	r2,-16(fp)
  812058:	1887883a 	add	r3,r3,r2
  81205c:	e0bffb17 	ldw	r2,-20(fp)
  812060:	1885883a 	add	r2,r3,r2
  812064:	1085883a 	add	r2,r2,r2
  812068:	2089883a 	add	r4,r4,r2
  81206c:	e0fffa17 	ldw	r3,-24(fp)
  812070:	e0bfff17 	ldw	r2,-4(fp)
  812074:	1885383a 	mul	r2,r3,r2
  812078:	1007883a 	mov	r3,r2
  81207c:	e0bffb17 	ldw	r2,-20(fp)
  812080:	1885883a 	add	r2,r3,r2
  812084:	1085883a 	add	r2,r2,r2
  812088:	1085883a 	add	r2,r2,r2
  81208c:	1007883a 	mov	r3,r2
  812090:	e0bffe17 	ldw	r2,-8(fp)
  812094:	1885883a 	add	r2,r3,r2
  812098:	10c00017 	ldw	r3,0(r2)
  81209c:	2005883a 	mov	r2,r4
  8120a0:	10c0002d 	sthio	r3,0(r2)

void draw(int pos_x, int pos_y, int* img, int size) {
	int i, j;
	if(pos_x < 0 || pos_y < 0 || pos_x >= 320 || pos_y >= 240) return;
	for(i = 0; i < size; i++) {
	    for(j = 0; j < size; j++) {
  8120a4:	e0bffa17 	ldw	r2,-24(fp)
  8120a8:	10800044 	addi	r2,r2,1
  8120ac:	e0bffa15 	stw	r2,-24(fp)
  8120b0:	e0fffa17 	ldw	r3,-24(fp)
  8120b4:	e0bfff17 	ldw	r2,-4(fp)
  8120b8:	18bfcf16 	blt	r3,r2,811ff8 <draw+0x60>
}

void draw(int pos_x, int pos_y, int* img, int size) {
	int i, j;
	if(pos_x < 0 || pos_y < 0 || pos_x >= 320 || pos_y >= 240) return;
	for(i = 0; i < size; i++) {
  8120bc:	e0bffb17 	ldw	r2,-20(fp)
  8120c0:	10800044 	addi	r2,r2,1
  8120c4:	e0bffb15 	stw	r2,-20(fp)
  8120c8:	e0fffb17 	ldw	r3,-20(fp)
  8120cc:	e0bfff17 	ldw	r2,-4(fp)
  8120d0:	18bfc716 	blt	r3,r2,811ff0 <draw+0x58>
	    	if(*(img + j*size+i) != 0) {
	    		 IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((pos_y+j)*320+pos_x+i)*2, *(img + j*size+i));
	    	}
	    }
	}
}
  8120d4:	e037883a 	mov	sp,fp
  8120d8:	df000017 	ldw	fp,0(sp)
  8120dc:	dec00104 	addi	sp,sp,4
  8120e0:	f800283a 	ret

008120e4 <drawRec>:

void drawRec(int pos_x, int pos_y, int* img, int h, int w) {
  8120e4:	defff904 	addi	sp,sp,-28
  8120e8:	df000615 	stw	fp,24(sp)
  8120ec:	df000604 	addi	fp,sp,24
  8120f0:	e13ffc15 	stw	r4,-16(fp)
  8120f4:	e17ffd15 	stw	r5,-12(fp)
  8120f8:	e1bffe15 	stw	r6,-8(fp)
  8120fc:	e1ffff15 	stw	r7,-4(fp)
	int i, j;
	if(pos_x < 0 || pos_y < 0 || pos_x >= 320 || pos_y >= 240) return;
  812100:	e0bffc17 	ldw	r2,-16(fp)
  812104:	1004803a 	cmplt	r2,r2,zero
  812108:	1000451e 	bne	r2,zero,812220 <drawRec+0x13c>
  81210c:	e0bffd17 	ldw	r2,-12(fp)
  812110:	1004803a 	cmplt	r2,r2,zero
  812114:	1000421e 	bne	r2,zero,812220 <drawRec+0x13c>
  812118:	e0bffc17 	ldw	r2,-16(fp)
  81211c:	10805008 	cmpgei	r2,r2,320
  812120:	10003f1e 	bne	r2,zero,812220 <drawRec+0x13c>
  812124:	e0bffd17 	ldw	r2,-12(fp)
  812128:	10803c10 	cmplti	r2,r2,240
  81212c:	1000011e 	bne	r2,zero,812134 <drawRec+0x50>
  812130:	00003b06 	br	812220 <drawRec+0x13c>
	for(i = 0; i < w; i++) {
  812134:	e03ffb15 	stw	zero,-20(fp)
  812138:	00003606 	br	812214 <drawRec+0x130>
		for(j = 0; j < h; j++) {
  81213c:	e03ffa15 	stw	zero,-24(fp)
  812140:	00002e06 	br	8121fc <drawRec+0x118>
		    if(*(img + j*w+i) != 0) {
  812144:	e0fffa17 	ldw	r3,-24(fp)
  812148:	e0800117 	ldw	r2,4(fp)
  81214c:	1885383a 	mul	r2,r3,r2
  812150:	1007883a 	mov	r3,r2
  812154:	e0bffb17 	ldw	r2,-20(fp)
  812158:	1885883a 	add	r2,r3,r2
  81215c:	1085883a 	add	r2,r2,r2
  812160:	1085883a 	add	r2,r2,r2
  812164:	1007883a 	mov	r3,r2
  812168:	e0bffe17 	ldw	r2,-8(fp)
  81216c:	1885883a 	add	r2,r3,r2
  812170:	10800017 	ldw	r2,0(r2)
  812174:	1005003a 	cmpeq	r2,r2,zero
  812178:	10001d1e 	bne	r2,zero,8121f0 <drawRec+0x10c>
		    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((pos_y+j)*320+pos_x+i)*2, *(img + j*w+i));
  81217c:	008020f4 	movhi	r2,131
  812180:	109c8a04 	addi	r2,r2,29224
  812184:	10800017 	ldw	r2,0(r2)
  812188:	10800b17 	ldw	r2,44(r2)
  81218c:	1009883a 	mov	r4,r2
  812190:	e0fffd17 	ldw	r3,-12(fp)
  812194:	e0bffa17 	ldw	r2,-24(fp)
  812198:	1885883a 	add	r2,r3,r2
  81219c:	10c05024 	muli	r3,r2,320
  8121a0:	e0bffc17 	ldw	r2,-16(fp)
  8121a4:	1887883a 	add	r3,r3,r2
  8121a8:	e0bffb17 	ldw	r2,-20(fp)
  8121ac:	1885883a 	add	r2,r3,r2
  8121b0:	1085883a 	add	r2,r2,r2
  8121b4:	2089883a 	add	r4,r4,r2
  8121b8:	e0fffa17 	ldw	r3,-24(fp)
  8121bc:	e0800117 	ldw	r2,4(fp)
  8121c0:	1885383a 	mul	r2,r3,r2
  8121c4:	1007883a 	mov	r3,r2
  8121c8:	e0bffb17 	ldw	r2,-20(fp)
  8121cc:	1885883a 	add	r2,r3,r2
  8121d0:	1085883a 	add	r2,r2,r2
  8121d4:	1085883a 	add	r2,r2,r2
  8121d8:	1007883a 	mov	r3,r2
  8121dc:	e0bffe17 	ldw	r2,-8(fp)
  8121e0:	1885883a 	add	r2,r3,r2
  8121e4:	10c00017 	ldw	r3,0(r2)
  8121e8:	2005883a 	mov	r2,r4
  8121ec:	10c0002d 	sthio	r3,0(r2)

void drawRec(int pos_x, int pos_y, int* img, int h, int w) {
	int i, j;
	if(pos_x < 0 || pos_y < 0 || pos_x >= 320 || pos_y >= 240) return;
	for(i = 0; i < w; i++) {
		for(j = 0; j < h; j++) {
  8121f0:	e0bffa17 	ldw	r2,-24(fp)
  8121f4:	10800044 	addi	r2,r2,1
  8121f8:	e0bffa15 	stw	r2,-24(fp)
  8121fc:	e0fffa17 	ldw	r3,-24(fp)
  812200:	e0bfff17 	ldw	r2,-4(fp)
  812204:	18bfcf16 	blt	r3,r2,812144 <drawRec+0x60>
}

void drawRec(int pos_x, int pos_y, int* img, int h, int w) {
	int i, j;
	if(pos_x < 0 || pos_y < 0 || pos_x >= 320 || pos_y >= 240) return;
	for(i = 0; i < w; i++) {
  812208:	e0bffb17 	ldw	r2,-20(fp)
  81220c:	10800044 	addi	r2,r2,1
  812210:	e0bffb15 	stw	r2,-20(fp)
  812214:	e0fffb17 	ldw	r3,-20(fp)
  812218:	e0800117 	ldw	r2,4(fp)
  81221c:	18bfc716 	blt	r3,r2,81213c <drawRec+0x58>
		    if(*(img + j*w+i) != 0) {
		    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((pos_y+j)*320+pos_x+i)*2, *(img + j*w+i));
		    }
		   }
	}
}
  812220:	e037883a 	mov	sp,fp
  812224:	df000017 	ldw	fp,0(sp)
  812228:	dec00104 	addi	sp,sp,4
  81222c:	f800283a 	ret

00812230 <drawBox>:
void drawBox(int x1, int y1, int x2, int y2, int color, struct Cursor* mouse) {
  812230:	defff304 	addi	sp,sp,-52
  812234:	df000c15 	stw	fp,48(sp)
  812238:	df000c04 	addi	fp,sp,48
  81223c:	e13ffc15 	stw	r4,-16(fp)
  812240:	e17ffd15 	stw	r5,-12(fp)
  812244:	e1bffe15 	stw	r6,-8(fp)
  812248:	e1ffff15 	stw	r7,-4(fp)
	if(x1 < 0 || y1 < 0) return;
  81224c:	e0bffc17 	ldw	r2,-16(fp)
  812250:	1004803a 	cmplt	r2,r2,zero
  812254:	1000581e 	bne	r2,zero,8123b8 <drawBox+0x188>
  812258:	e0bffd17 	ldw	r2,-12(fp)
  81225c:	1004403a 	cmpge	r2,r2,zero
  812260:	1000011e 	bne	r2,zero,812268 <drawBox+0x38>
  812264:	00005406 	br	8123b8 <drawBox+0x188>
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
  812268:	e0fffe17 	ldw	r3,-8(fp)
  81226c:	e0bffc17 	ldw	r2,-16(fp)
  812270:	1885c83a 	sub	r2,r3,r2
  812274:	e0bff515 	stw	r2,-44(fp)
  812278:	e0ffff17 	ldw	r3,-4(fp)
  81227c:	e0bffd17 	ldw	r2,-12(fp)
  812280:	1885c83a 	sub	r2,r3,r2
  812284:	e0bff415 	stw	r2,-48(fp)
		for(i = 0; i < w; i++) {
  812288:	e03ffb15 	stw	zero,-20(fp)
  81228c:	00004706 	br	8123ac <drawBox+0x17c>
		    for(j = 0; j < h; j++) {
  812290:	e03ffa15 	stw	zero,-24(fp)
  812294:	00003f06 	br	812394 <drawBox+0x164>
		    	x = x1+i; y = y1+j;
  812298:	e0fffc17 	ldw	r3,-16(fp)
  81229c:	e0bffb17 	ldw	r2,-20(fp)
  8122a0:	1885883a 	add	r2,r3,r2
  8122a4:	e0bff915 	stw	r2,-28(fp)
  8122a8:	e0fffd17 	ldw	r3,-12(fp)
  8122ac:	e0bffa17 	ldw	r2,-24(fp)
  8122b0:	1885883a 	add	r2,r3,r2
  8122b4:	e0bff815 	stw	r2,-32(fp)
		    	if(mouse != NULL) {
  8122b8:	e0800217 	ldw	r2,8(fp)
  8122bc:	1005003a 	cmpeq	r2,r2,zero
  8122c0:	1000231e 	bne	r2,zero,812350 <drawBox+0x120>
		    		dx = x-mouse->super->x; dy = y-mouse->super->y;
  8122c4:	e0800217 	ldw	r2,8(fp)
  8122c8:	10800017 	ldw	r2,0(r2)
  8122cc:	10c00017 	ldw	r3,0(r2)
  8122d0:	e0bff917 	ldw	r2,-28(fp)
  8122d4:	10c5c83a 	sub	r2,r2,r3
  8122d8:	e0bff715 	stw	r2,-36(fp)
  8122dc:	e0800217 	ldw	r2,8(fp)
  8122e0:	10800017 	ldw	r2,0(r2)
  8122e4:	10c00117 	ldw	r3,4(r2)
  8122e8:	e0bff817 	ldw	r2,-32(fp)
  8122ec:	10c5c83a 	sub	r2,r2,r3
  8122f0:	e0bff615 	stw	r2,-40(fp)
		    		if(dx >= 0 && dx < 10 && dy >= 0 && dy < 10)
  8122f4:	e0bff717 	ldw	r2,-36(fp)
  8122f8:	1004803a 	cmplt	r2,r2,zero
  8122fc:	1000141e 	bne	r2,zero,812350 <drawBox+0x120>
  812300:	e0bff717 	ldw	r2,-36(fp)
  812304:	10800288 	cmpgei	r2,r2,10
  812308:	1000111e 	bne	r2,zero,812350 <drawBox+0x120>
  81230c:	e0bff617 	ldw	r2,-40(fp)
  812310:	1004803a 	cmplt	r2,r2,zero
  812314:	10000e1e 	bne	r2,zero,812350 <drawBox+0x120>
  812318:	e0bff617 	ldw	r2,-40(fp)
  81231c:	10800288 	cmpgei	r2,r2,10
  812320:	10000b1e 	bne	r2,zero,812350 <drawBox+0x120>
		    			*(mouse->overlapImg+dy*10 + dx) = color;
  812324:	e0800217 	ldw	r2,8(fp)
  812328:	11000e17 	ldw	r4,56(r2)
  81232c:	e0bff617 	ldw	r2,-40(fp)
  812330:	10c002a4 	muli	r3,r2,10
  812334:	e0bff717 	ldw	r2,-36(fp)
  812338:	1885883a 	add	r2,r3,r2
  81233c:	1085883a 	add	r2,r2,r2
  812340:	1085883a 	add	r2,r2,r2
  812344:	2087883a 	add	r3,r4,r2
  812348:	e0800117 	ldw	r2,4(fp)
  81234c:	18800015 	stw	r2,0(r3)
		    	}
		    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
  812350:	008020f4 	movhi	r2,131
  812354:	109c8a04 	addi	r2,r2,29224
  812358:	10800017 	ldw	r2,0(r2)
  81235c:	10800b17 	ldw	r2,44(r2)
  812360:	1009883a 	mov	r4,r2
  812364:	e0bff817 	ldw	r2,-32(fp)
  812368:	10c05024 	muli	r3,r2,320
  81236c:	e0bff917 	ldw	r2,-28(fp)
  812370:	1885883a 	add	r2,r3,r2
  812374:	1085883a 	add	r2,r2,r2
  812378:	2085883a 	add	r2,r4,r2
  81237c:	1007883a 	mov	r3,r2
  812380:	e0800117 	ldw	r2,4(fp)
  812384:	1880002d 	sthio	r2,0(r3)
}
void drawBox(int x1, int y1, int x2, int y2, int color, struct Cursor* mouse) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
		for(i = 0; i < w; i++) {
		    for(j = 0; j < h; j++) {
  812388:	e0bffa17 	ldw	r2,-24(fp)
  81238c:	10800044 	addi	r2,r2,1
  812390:	e0bffa15 	stw	r2,-24(fp)
  812394:	e0fffa17 	ldw	r3,-24(fp)
  812398:	e0bff417 	ldw	r2,-48(fp)
  81239c:	18bfbe16 	blt	r3,r2,812298 <drawBox+0x68>
	}
}
void drawBox(int x1, int y1, int x2, int y2, int color, struct Cursor* mouse) {
	if(x1 < 0 || y1 < 0) return;
	int i, j, x, y, dx, dy, w = x2-x1, h = y2-y1;
		for(i = 0; i < w; i++) {
  8123a0:	e0bffb17 	ldw	r2,-20(fp)
  8123a4:	10800044 	addi	r2,r2,1
  8123a8:	e0bffb15 	stw	r2,-20(fp)
  8123ac:	e0fffb17 	ldw	r3,-20(fp)
  8123b0:	e0bff517 	ldw	r2,-44(fp)
  8123b4:	18bfb616 	blt	r3,r2,812290 <drawBox+0x60>
		    			*(mouse->overlapImg+dy*10 + dx) = color;
		    	}
		    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, color);
		}
	}
}
  8123b8:	e037883a 	mov	sp,fp
  8123bc:	df000017 	ldw	fp,0(sp)
  8123c0:	dec00104 	addi	sp,sp,4
  8123c4:	f800283a 	ret

008123c8 <draw_nontransparent>:
void draw_nontransparent(int pos_x, int pos_y, int* img, int size, struct Cursor* mouse) {
  8123c8:	defff504 	addi	sp,sp,-44
  8123cc:	df000a15 	stw	fp,40(sp)
  8123d0:	df000a04 	addi	fp,sp,40
  8123d4:	e13ffc15 	stw	r4,-16(fp)
  8123d8:	e17ffd15 	stw	r5,-12(fp)
  8123dc:	e1bffe15 	stw	r6,-8(fp)
  8123e0:	e1ffff15 	stw	r7,-4(fp)
	int i, j, x, y, dx, dy;
	if(pos_x < 0 || pos_y < 0) return;
  8123e4:	e0bffc17 	ldw	r2,-16(fp)
  8123e8:	1004803a 	cmplt	r2,r2,zero
  8123ec:	1000851e 	bne	r2,zero,812604 <draw_nontransparent+0x23c>
  8123f0:	e0bffd17 	ldw	r2,-12(fp)
  8123f4:	1004403a 	cmpge	r2,r2,zero
  8123f8:	1000011e 	bne	r2,zero,812400 <draw_nontransparent+0x38>
  8123fc:	00008106 	br	812604 <draw_nontransparent+0x23c>
	for(i = 0; i < size; i++) {
  812400:	e03ffb15 	stw	zero,-20(fp)
  812404:	00007c06 	br	8125f8 <draw_nontransparent+0x230>
		for(j = 0; j < size; j++) {
  812408:	e03ffa15 	stw	zero,-24(fp)
  81240c:	00007406 	br	8125e0 <draw_nontransparent+0x218>
			x = pos_x+i; y = pos_y+j;
  812410:	e0fffc17 	ldw	r3,-16(fp)
  812414:	e0bffb17 	ldw	r2,-20(fp)
  812418:	1885883a 	add	r2,r3,r2
  81241c:	e0bff915 	stw	r2,-28(fp)
  812420:	e0fffd17 	ldw	r3,-12(fp)
  812424:	e0bffa17 	ldw	r2,-24(fp)
  812428:	1885883a 	add	r2,r3,r2
  81242c:	e0bff815 	stw	r2,-32(fp)
			if(mouse != NULL) {
  812430:	e0800117 	ldw	r2,4(fp)
  812434:	1005003a 	cmpeq	r2,r2,zero
  812438:	10002e1e 	bne	r2,zero,8124f4 <draw_nontransparent+0x12c>
				dx = x-mouse->super->x; dy = y-mouse->super->y;
  81243c:	e0800117 	ldw	r2,4(fp)
  812440:	10800017 	ldw	r2,0(r2)
  812444:	10c00017 	ldw	r3,0(r2)
  812448:	e0bff917 	ldw	r2,-28(fp)
  81244c:	10c5c83a 	sub	r2,r2,r3
  812450:	e0bff715 	stw	r2,-36(fp)
  812454:	e0800117 	ldw	r2,4(fp)
  812458:	10800017 	ldw	r2,0(r2)
  81245c:	10c00117 	ldw	r3,4(r2)
  812460:	e0bff817 	ldw	r2,-32(fp)
  812464:	10c5c83a 	sub	r2,r2,r3
  812468:	e0bff615 	stw	r2,-40(fp)
				if(dx >= 0 && dx < 20 && dy >= 0 && dy < 20)
  81246c:	e0bff717 	ldw	r2,-36(fp)
  812470:	1004803a 	cmplt	r2,r2,zero
  812474:	10001f1e 	bne	r2,zero,8124f4 <draw_nontransparent+0x12c>
  812478:	e0bff717 	ldw	r2,-36(fp)
  81247c:	10800508 	cmpgei	r2,r2,20
  812480:	10001c1e 	bne	r2,zero,8124f4 <draw_nontransparent+0x12c>
  812484:	e0bff617 	ldw	r2,-40(fp)
  812488:	1004803a 	cmplt	r2,r2,zero
  81248c:	1000191e 	bne	r2,zero,8124f4 <draw_nontransparent+0x12c>
  812490:	e0bff617 	ldw	r2,-40(fp)
  812494:	10800508 	cmpgei	r2,r2,20
  812498:	1000161e 	bne	r2,zero,8124f4 <draw_nontransparent+0x12c>
					*(mouse->dragOverlapImg+dy*20 + dx) = *(img + j*size+i);
  81249c:	e0800117 	ldw	r2,4(fp)
  8124a0:	11000f17 	ldw	r4,60(r2)
  8124a4:	e0bff617 	ldw	r2,-40(fp)
  8124a8:	10c00524 	muli	r3,r2,20
  8124ac:	e0bff717 	ldw	r2,-36(fp)
  8124b0:	1885883a 	add	r2,r3,r2
  8124b4:	1085883a 	add	r2,r2,r2
  8124b8:	1085883a 	add	r2,r2,r2
  8124bc:	2089883a 	add	r4,r4,r2
  8124c0:	e0fffa17 	ldw	r3,-24(fp)
  8124c4:	e0bfff17 	ldw	r2,-4(fp)
  8124c8:	1885383a 	mul	r2,r3,r2
  8124cc:	1007883a 	mov	r3,r2
  8124d0:	e0bffb17 	ldw	r2,-20(fp)
  8124d4:	1885883a 	add	r2,r3,r2
  8124d8:	1085883a 	add	r2,r2,r2
  8124dc:	1085883a 	add	r2,r2,r2
  8124e0:	1007883a 	mov	r3,r2
  8124e4:	e0bffe17 	ldw	r2,-8(fp)
  8124e8:	1885883a 	add	r2,r3,r2
  8124ec:	10800017 	ldw	r2,0(r2)
  8124f0:	20800015 	stw	r2,0(r4)
			}
		    if(swap == 0)
  8124f4:	008020f4 	movhi	r2,131
  8124f8:	109c7d04 	addi	r2,r2,29172
  8124fc:	10800017 	ldw	r2,0(r2)
  812500:	1004c03a 	cmpne	r2,r2,zero
  812504:	10001a1e 	bne	r2,zero,812570 <draw_nontransparent+0x1a8>
		    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, (y*320+x)*2, *(img + j*size+i));
  812508:	008020f4 	movhi	r2,131
  81250c:	109c8a04 	addi	r2,r2,29224
  812510:	10800017 	ldw	r2,0(r2)
  812514:	10800b17 	ldw	r2,44(r2)
  812518:	1009883a 	mov	r4,r2
  81251c:	e0bff817 	ldw	r2,-32(fp)
  812520:	10c05024 	muli	r3,r2,320
  812524:	e0bff917 	ldw	r2,-28(fp)
  812528:	1885883a 	add	r2,r3,r2
  81252c:	1085883a 	add	r2,r2,r2
  812530:	2089883a 	add	r4,r4,r2
  812534:	e0fffa17 	ldw	r3,-24(fp)
  812538:	e0bfff17 	ldw	r2,-4(fp)
  81253c:	1885383a 	mul	r2,r3,r2
  812540:	1007883a 	mov	r3,r2
  812544:	e0bffb17 	ldw	r2,-20(fp)
  812548:	1885883a 	add	r2,r3,r2
  81254c:	1085883a 	add	r2,r2,r2
  812550:	1085883a 	add	r2,r2,r2
  812554:	1007883a 	mov	r3,r2
  812558:	e0bffe17 	ldw	r2,-8(fp)
  81255c:	1885883a 	add	r2,r3,r2
  812560:	10c00017 	ldw	r3,0(r2)
  812564:	2005883a 	mov	r2,r4
  812568:	10c0002d 	sthio	r3,0(r2)
  81256c:	00001906 	br	8125d4 <draw_nontransparent+0x20c>
		    else
		    	IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, (y*320+x)*2, *(img + j*size+i));
  812570:	008020f4 	movhi	r2,131
  812574:	109c8a04 	addi	r2,r2,29224
  812578:	10800017 	ldw	r2,0(r2)
  81257c:	10800c17 	ldw	r2,48(r2)
  812580:	1009883a 	mov	r4,r2
  812584:	e0bff817 	ldw	r2,-32(fp)
  812588:	10c05024 	muli	r3,r2,320
  81258c:	e0bff917 	ldw	r2,-28(fp)
  812590:	1885883a 	add	r2,r3,r2
  812594:	1085883a 	add	r2,r2,r2
  812598:	2089883a 	add	r4,r4,r2
  81259c:	e0fffa17 	ldw	r3,-24(fp)
  8125a0:	e0bfff17 	ldw	r2,-4(fp)
  8125a4:	1885383a 	mul	r2,r3,r2
  8125a8:	1007883a 	mov	r3,r2
  8125ac:	e0bffb17 	ldw	r2,-20(fp)
  8125b0:	1885883a 	add	r2,r3,r2
  8125b4:	1085883a 	add	r2,r2,r2
  8125b8:	1085883a 	add	r2,r2,r2
  8125bc:	1007883a 	mov	r3,r2
  8125c0:	e0bffe17 	ldw	r2,-8(fp)
  8125c4:	1885883a 	add	r2,r3,r2
  8125c8:	10c00017 	ldw	r3,0(r2)
  8125cc:	2005883a 	mov	r2,r4
  8125d0:	10c0002d 	sthio	r3,0(r2)
}
void draw_nontransparent(int pos_x, int pos_y, int* img, int size, struct Cursor* mouse) {
	int i, j, x, y, dx, dy;
	if(pos_x < 0 || pos_y < 0) return;
	for(i = 0; i < size; i++) {
		for(j = 0; j < size; j++) {
  8125d4:	e0bffa17 	ldw	r2,-24(fp)
  8125d8:	10800044 	addi	r2,r2,1
  8125dc:	e0bffa15 	stw	r2,-24(fp)
  8125e0:	e0fffa17 	ldw	r3,-24(fp)
  8125e4:	e0bfff17 	ldw	r2,-4(fp)
  8125e8:	18bf8916 	blt	r3,r2,812410 <draw_nontransparent+0x48>
	}
}
void draw_nontransparent(int pos_x, int pos_y, int* img, int size, struct Cursor* mouse) {
	int i, j, x, y, dx, dy;
	if(pos_x < 0 || pos_y < 0) return;
	for(i = 0; i < size; i++) {
  8125ec:	e0bffb17 	ldw	r2,-20(fp)
  8125f0:	10800044 	addi	r2,r2,1
  8125f4:	e0bffb15 	stw	r2,-20(fp)
  8125f8:	e0fffb17 	ldw	r3,-20(fp)
  8125fc:	e0bfff17 	ldw	r2,-4(fp)
  812600:	18bf8116 	blt	r3,r2,812408 <draw_nontransparent+0x40>
		    	IOWR_16DIRECT(pixel_buffer->buffer_start_address, (y*320+x)*2, *(img + j*size+i));
		    else
		    	IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, (y*320+x)*2, *(img + j*size+i));
		}
	}
}
  812604:	e037883a 	mov	sp,fp
  812608:	df000017 	ldw	fp,0(sp)
  81260c:	dec00104 	addi	sp,sp,4
  812610:	f800283a 	ret

00812614 <cleanDrawing>:
void cleanDrawing(int pos_x, int pos_y, int* img, int size, struct Cursor* mouse) {
  812614:	defff304 	addi	sp,sp,-52
  812618:	df000c15 	stw	fp,48(sp)
  81261c:	df000c04 	addi	fp,sp,48
  812620:	e13ffc15 	stw	r4,-16(fp)
  812624:	e17ffd15 	stw	r5,-12(fp)
  812628:	e1bffe15 	stw	r6,-8(fp)
  81262c:	e1ffff15 	stw	r7,-4(fp)
	int i, j, dx, dy, x, y, buffer_size = 10;
  812630:	00800284 	movi	r2,10
  812634:	e0bff515 	stw	r2,-44(fp)
	if(pos_x < 0 || pos_y < 0 || pos_x >= 320 || pos_y >= 240) return;
  812638:	e0bffc17 	ldw	r2,-16(fp)
  81263c:	1004803a 	cmplt	r2,r2,zero
  812640:	10006f1e 	bne	r2,zero,812800 <cleanDrawing+0x1ec>
  812644:	e0bffd17 	ldw	r2,-12(fp)
  812648:	1004803a 	cmplt	r2,r2,zero
  81264c:	10006c1e 	bne	r2,zero,812800 <cleanDrawing+0x1ec>
  812650:	e0bffc17 	ldw	r2,-16(fp)
  812654:	10805008 	cmpgei	r2,r2,320
  812658:	1000691e 	bne	r2,zero,812800 <cleanDrawing+0x1ec>
  81265c:	e0bffd17 	ldw	r2,-12(fp)
  812660:	10803c10 	cmplti	r2,r2,240
  812664:	1000011e 	bne	r2,zero,81266c <cleanDrawing+0x58>
  812668:	00006506 	br	812800 <cleanDrawing+0x1ec>
	int* buffer_img = mouse->overlapImg;
  81266c:	e0800117 	ldw	r2,4(fp)
  812670:	10800e17 	ldw	r2,56(r2)
  812674:	e0bff415 	stw	r2,-48(fp)
	if(mouse->buttonPushed == 1) {
  812678:	e0800117 	ldw	r2,4(fp)
  81267c:	10800d17 	ldw	r2,52(r2)
  812680:	10800058 	cmpnei	r2,r2,1
  812684:	1000051e 	bne	r2,zero,81269c <cleanDrawing+0x88>
		buffer_size = 20;
  812688:	00800504 	movi	r2,20
  81268c:	e0bff515 	stw	r2,-44(fp)
		buffer_img = mouse->dragOverlapImg;
  812690:	e0800117 	ldw	r2,4(fp)
  812694:	10800f17 	ldw	r2,60(r2)
  812698:	e0bff415 	stw	r2,-48(fp)

	}
	for(i = 0; i < size; i++) {
  81269c:	e03ffb15 	stw	zero,-20(fp)
  8126a0:	00005406 	br	8127f4 <cleanDrawing+0x1e0>
	    for(j = 0; j < size; j++) {
  8126a4:	e03ffa15 	stw	zero,-24(fp)
  8126a8:	00004c06 	br	8127dc <cleanDrawing+0x1c8>
	    	if(*(img + j*size+i) != 0) {
  8126ac:	e0fffa17 	ldw	r3,-24(fp)
  8126b0:	e0bfff17 	ldw	r2,-4(fp)
  8126b4:	1885383a 	mul	r2,r3,r2
  8126b8:	1007883a 	mov	r3,r2
  8126bc:	e0bffb17 	ldw	r2,-20(fp)
  8126c0:	1885883a 	add	r2,r3,r2
  8126c4:	1085883a 	add	r2,r2,r2
  8126c8:	1085883a 	add	r2,r2,r2
  8126cc:	1007883a 	mov	r3,r2
  8126d0:	e0bffe17 	ldw	r2,-8(fp)
  8126d4:	1885883a 	add	r2,r3,r2
  8126d8:	10800017 	ldw	r2,0(r2)
  8126dc:	1005003a 	cmpeq	r2,r2,zero
  8126e0:	10003b1e 	bne	r2,zero,8127d0 <cleanDrawing+0x1bc>
	    		x = pos_x+i; y = pos_y+j;
  8126e4:	e0fffc17 	ldw	r3,-16(fp)
  8126e8:	e0bffb17 	ldw	r2,-20(fp)
  8126ec:	1885883a 	add	r2,r3,r2
  8126f0:	e0bff715 	stw	r2,-36(fp)
  8126f4:	e0fffd17 	ldw	r3,-12(fp)
  8126f8:	e0bffa17 	ldw	r2,-24(fp)
  8126fc:	1885883a 	add	r2,r3,r2
  812700:	e0bff615 	stw	r2,-40(fp)
	    		if(mouse != NULL) {
  812704:	e0800117 	ldw	r2,4(fp)
  812708:	1005003a 	cmpeq	r2,r2,zero
  81270c:	1000241e 	bne	r2,zero,8127a0 <cleanDrawing+0x18c>
					dx = x-mouse->super->x; dy = y-mouse->super->y;
  812710:	e0800117 	ldw	r2,4(fp)
  812714:	10800017 	ldw	r2,0(r2)
  812718:	10c00017 	ldw	r3,0(r2)
  81271c:	e0bff717 	ldw	r2,-36(fp)
  812720:	10c5c83a 	sub	r2,r2,r3
  812724:	e0bff915 	stw	r2,-28(fp)
  812728:	e0800117 	ldw	r2,4(fp)
  81272c:	10800017 	ldw	r2,0(r2)
  812730:	10c00117 	ldw	r3,4(r2)
  812734:	e0bff617 	ldw	r2,-40(fp)
  812738:	10c5c83a 	sub	r2,r2,r3
  81273c:	e0bff815 	stw	r2,-32(fp)
					if(dx >= 0 && dx < buffer_size && dy >= 0 && dy < buffer_size)
  812740:	e0bff917 	ldw	r2,-28(fp)
  812744:	1004803a 	cmplt	r2,r2,zero
  812748:	1000151e 	bne	r2,zero,8127a0 <cleanDrawing+0x18c>
  81274c:	e0fff917 	ldw	r3,-28(fp)
  812750:	e0bff517 	ldw	r2,-44(fp)
  812754:	1880120e 	bge	r3,r2,8127a0 <cleanDrawing+0x18c>
  812758:	e0bff817 	ldw	r2,-32(fp)
  81275c:	1004803a 	cmplt	r2,r2,zero
  812760:	10000f1e 	bne	r2,zero,8127a0 <cleanDrawing+0x18c>
  812764:	e0fff817 	ldw	r3,-32(fp)
  812768:	e0bff517 	ldw	r2,-44(fp)
  81276c:	18800c0e 	bge	r3,r2,8127a0 <cleanDrawing+0x18c>
						*(buffer_img+dy*buffer_size + dx) = 0;
  812770:	e0fff817 	ldw	r3,-32(fp)
  812774:	e0bff517 	ldw	r2,-44(fp)
  812778:	1885383a 	mul	r2,r3,r2
  81277c:	1007883a 	mov	r3,r2
  812780:	e0bff917 	ldw	r2,-28(fp)
  812784:	1885883a 	add	r2,r3,r2
  812788:	1085883a 	add	r2,r2,r2
  81278c:	1085883a 	add	r2,r2,r2
  812790:	1007883a 	mov	r3,r2
  812794:	e0bff417 	ldw	r2,-48(fp)
  812798:	1885883a 	add	r2,r3,r2
  81279c:	10000015 	stw	zero,0(r2)
	    		}
	    		IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, 0x0000);
  8127a0:	008020f4 	movhi	r2,131
  8127a4:	109c8a04 	addi	r2,r2,29224
  8127a8:	10800017 	ldw	r2,0(r2)
  8127ac:	10800b17 	ldw	r2,44(r2)
  8127b0:	1009883a 	mov	r4,r2
  8127b4:	e0bff617 	ldw	r2,-40(fp)
  8127b8:	10c05024 	muli	r3,r2,320
  8127bc:	e0bff717 	ldw	r2,-36(fp)
  8127c0:	1885883a 	add	r2,r3,r2
  8127c4:	1085883a 	add	r2,r2,r2
  8127c8:	2085883a 	add	r2,r4,r2
  8127cc:	1000002d 	sthio	zero,0(r2)
		buffer_size = 20;
		buffer_img = mouse->dragOverlapImg;

	}
	for(i = 0; i < size; i++) {
	    for(j = 0; j < size; j++) {
  8127d0:	e0bffa17 	ldw	r2,-24(fp)
  8127d4:	10800044 	addi	r2,r2,1
  8127d8:	e0bffa15 	stw	r2,-24(fp)
  8127dc:	e0fffa17 	ldw	r3,-24(fp)
  8127e0:	e0bfff17 	ldw	r2,-4(fp)
  8127e4:	18bfb116 	blt	r3,r2,8126ac <cleanDrawing+0x98>
	if(mouse->buttonPushed == 1) {
		buffer_size = 20;
		buffer_img = mouse->dragOverlapImg;

	}
	for(i = 0; i < size; i++) {
  8127e8:	e0bffb17 	ldw	r2,-20(fp)
  8127ec:	10800044 	addi	r2,r2,1
  8127f0:	e0bffb15 	stw	r2,-20(fp)
  8127f4:	e0fffb17 	ldw	r3,-20(fp)
  8127f8:	e0bfff17 	ldw	r2,-4(fp)
  8127fc:	18bfa916 	blt	r3,r2,8126a4 <cleanDrawing+0x90>
	    		}
	    		IOWR_16DIRECT(pixel_buffer->buffer_start_address, ((y)*320+x)*2, 0x0000);
	    	}
	    }
	}
}
  812800:	e037883a 	mov	sp,fp
  812804:	df000017 	ldw	fp,0(sp)
  812808:	dec00104 	addi	sp,sp,4
  81280c:	f800283a 	ret

00812810 <animated>:

/*
 * animate the animation.  Assume the image is size x size matrix.
 * Draw the next image in next round if isForward == 1, otherwise draw the previous image in next round.
 */
void animated(struct animation** curr, int x, int y, int size, int isForward, struct Object* obj, struct Cursor* m) {
  812810:	defff904 	addi	sp,sp,-28
  812814:	dfc00615 	stw	ra,24(sp)
  812818:	df000515 	stw	fp,20(sp)
  81281c:	df000504 	addi	fp,sp,20
  812820:	e13ffc15 	stw	r4,-16(fp)
  812824:	e17ffd15 	stw	r5,-12(fp)
  812828:	e1bffe15 	stw	r6,-8(fp)
  81282c:	e1ffff15 	stw	r7,-4(fp)
	//if(x < 0 || y < 0 || x > 315 || y > 315) return;

	if(*curr != NULL && obj->isShowing == 1) {
  812830:	e0bffc17 	ldw	r2,-16(fp)
  812834:	10800017 	ldw	r2,0(r2)
  812838:	1005003a 	cmpeq	r2,r2,zero
  81283c:	1000491e 	bne	r2,zero,812964 <animated+0x154>
  812840:	e0800317 	ldw	r2,12(fp)
  812844:	10801517 	ldw	r2,84(r2)
  812848:	10800058 	cmpnei	r2,r2,1
  81284c:	1000451e 	bne	r2,zero,812964 <animated+0x154>
		if(obj->startAnimated == 1) {
  812850:	e0800317 	ldw	r2,12(fp)
  812854:	10801417 	ldw	r2,80(r2)
  812858:	10800058 	cmpnei	r2,r2,1
  81285c:	10000a1e 	bne	r2,zero,812888 <animated+0x78>
			obj->startAnimated = 0;
  812860:	e0800317 	ldw	r2,12(fp)
  812864:	10001415 	stw	zero,80(r2)
			obj->animate_prev_x = obj->x;
  812868:	e0800317 	ldw	r2,12(fp)
  81286c:	10c00017 	ldw	r3,0(r2)
  812870:	e0800317 	ldw	r2,12(fp)
  812874:	10c00915 	stw	r3,36(r2)
			obj->animate_prev_y = obj->y;
  812878:	e0800317 	ldw	r2,12(fp)
  81287c:	10c00117 	ldw	r3,4(r2)
  812880:	e0800317 	ldw	r2,12(fp)
  812884:	10c00a15 	stw	r3,40(r2)
		}
		if(isForward > 0) {
  812888:	e0800217 	ldw	r2,8(fp)
  81288c:	10800050 	cmplti	r2,r2,1
  812890:	10000d1e 	bne	r2,zero,8128c8 <animated+0xb8>
			cleanDrawing(obj->animate_prev_x, obj->animate_prev_y, (*curr)->prev->image, size, m);
  812894:	e0800317 	ldw	r2,12(fp)
  812898:	11000917 	ldw	r4,36(r2)
  81289c:	e0800317 	ldw	r2,12(fp)
  8128a0:	11400a17 	ldw	r5,40(r2)
  8128a4:	e0bffc17 	ldw	r2,-16(fp)
  8128a8:	10800017 	ldw	r2,0(r2)
  8128ac:	10800417 	ldw	r2,16(r2)
  8128b0:	11800017 	ldw	r6,0(r2)
  8128b4:	e0800417 	ldw	r2,16(fp)
  8128b8:	d8800015 	stw	r2,0(sp)
  8128bc:	e1ffff17 	ldw	r7,-4(fp)
  8128c0:	08126140 	call	812614 <cleanDrawing>
  8128c4:	00000c06 	br	8128f8 <animated+0xe8>
		} else {
			cleanDrawing(obj->animate_prev_x, obj->animate_prev_y, (*curr)->next->image, size, m);
  8128c8:	e0800317 	ldw	r2,12(fp)
  8128cc:	11000917 	ldw	r4,36(r2)
  8128d0:	e0800317 	ldw	r2,12(fp)
  8128d4:	11400a17 	ldw	r5,40(r2)
  8128d8:	e0bffc17 	ldw	r2,-16(fp)
  8128dc:	10800017 	ldw	r2,0(r2)
  8128e0:	10800517 	ldw	r2,20(r2)
  8128e4:	11800017 	ldw	r6,0(r2)
  8128e8:	e0800417 	ldw	r2,16(fp)
  8128ec:	d8800015 	stw	r2,0(sp)
  8128f0:	e1ffff17 	ldw	r7,-4(fp)
  8128f4:	08126140 	call	812614 <cleanDrawing>
		}

		obj->animate_prev_x = x;
  8128f8:	e0c00317 	ldw	r3,12(fp)
  8128fc:	e0bffd17 	ldw	r2,-12(fp)
  812900:	18800915 	stw	r2,36(r3)
		obj->animate_prev_y = y;
  812904:	e0c00317 	ldw	r3,12(fp)
  812908:	e0bffe17 	ldw	r2,-8(fp)
  81290c:	18800a15 	stw	r2,40(r3)
		draw(x,y,(*curr)->image,size);
  812910:	e0bffc17 	ldw	r2,-16(fp)
  812914:	10800017 	ldw	r2,0(r2)
  812918:	11800017 	ldw	r6,0(r2)
  81291c:	e13ffd17 	ldw	r4,-12(fp)
  812920:	e17ffe17 	ldw	r5,-8(fp)
  812924:	e1ffff17 	ldw	r7,-4(fp)
  812928:	0811f980 	call	811f98 <draw>
		if(isForward > 0) {
  81292c:	e0800217 	ldw	r2,8(fp)
  812930:	10800050 	cmplti	r2,r2,1
  812934:	1000061e 	bne	r2,zero,812950 <animated+0x140>
			*curr = (*curr)->next;
  812938:	e0bffc17 	ldw	r2,-16(fp)
  81293c:	10800017 	ldw	r2,0(r2)
  812940:	10c00517 	ldw	r3,20(r2)
  812944:	e0bffc17 	ldw	r2,-16(fp)
  812948:	10c00015 	stw	r3,0(r2)
  81294c:	00000506 	br	812964 <animated+0x154>
		} else {
			*curr = (*curr)->prev;
  812950:	e0bffc17 	ldw	r2,-16(fp)
  812954:	10800017 	ldw	r2,0(r2)
  812958:	10c00417 	ldw	r3,16(r2)
  81295c:	e0bffc17 	ldw	r2,-16(fp)
  812960:	10c00015 	stw	r3,0(r2)
		}
	}
}
  812964:	e037883a 	mov	sp,fp
  812968:	dfc00117 	ldw	ra,4(sp)
  81296c:	df000017 	ldw	fp,0(sp)
  812970:	dec00204 	addi	sp,sp,8
  812974:	f800283a 	ret

00812978 <backgroundAnimation>:

/*
 * animation for background, non-interacting objects
 */
void backgroundAnimation(int* coord) {
  812978:	defffa04 	addi	sp,sp,-24
  81297c:	dfc00515 	stw	ra,20(sp)
  812980:	df000415 	stw	fp,16(sp)
  812984:	df000404 	addi	fp,sp,16
  812988:	e13fff15 	stw	r4,-4(fp)
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, coord[0], coord[1], 220, 210, 0x0000,swap);
  81298c:	008020f4 	movhi	r2,131
  812990:	109c8a04 	addi	r2,r2,29224
  812994:	11000017 	ldw	r4,0(r2)
  812998:	e0bfff17 	ldw	r2,-4(fp)
  81299c:	11400017 	ldw	r5,0(r2)
  8129a0:	e0bfff17 	ldw	r2,-4(fp)
  8129a4:	10800104 	addi	r2,r2,4
  8129a8:	11800017 	ldw	r6,0(r2)
  8129ac:	008020f4 	movhi	r2,131
  8129b0:	109c7d04 	addi	r2,r2,29172
  8129b4:	10c00017 	ldw	r3,0(r2)
  8129b8:	00803484 	movi	r2,210
  8129bc:	d8800015 	stw	r2,0(sp)
  8129c0:	d8000115 	stw	zero,4(sp)
  8129c4:	d8c00215 	stw	r3,8(sp)
  8129c8:	01c03704 	movi	r7,220
  8129cc:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, coord[1], coord[0], 220, 210, 0x0000, swap);
  8129d0:	008020f4 	movhi	r2,131
  8129d4:	109c8a04 	addi	r2,r2,29224
  8129d8:	11000017 	ldw	r4,0(r2)
  8129dc:	e0bfff17 	ldw	r2,-4(fp)
  8129e0:	10800104 	addi	r2,r2,4
  8129e4:	11400017 	ldw	r5,0(r2)
  8129e8:	e0bfff17 	ldw	r2,-4(fp)
  8129ec:	11800017 	ldw	r6,0(r2)
  8129f0:	008020f4 	movhi	r2,131
  8129f4:	109c7d04 	addi	r2,r2,29172
  8129f8:	10c00017 	ldw	r3,0(r2)
  8129fc:	00803484 	movi	r2,210
  812a00:	d8800015 	stw	r2,0(sp)
  812a04:	d8000115 	stw	zero,4(sp)
  812a08:	d8c00215 	stw	r3,8(sp)
  812a0c:	01c03704 	movi	r7,220
  812a10:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, coord[0]+20, coord[0]+10, 220, 210, 0x0000,swap);
  812a14:	008020f4 	movhi	r2,131
  812a18:	109c8a04 	addi	r2,r2,29224
  812a1c:	11000017 	ldw	r4,0(r2)
  812a20:	e0bfff17 	ldw	r2,-4(fp)
  812a24:	10800017 	ldw	r2,0(r2)
  812a28:	11400504 	addi	r5,r2,20
  812a2c:	e0bfff17 	ldw	r2,-4(fp)
  812a30:	10800017 	ldw	r2,0(r2)
  812a34:	11800284 	addi	r6,r2,10
  812a38:	008020f4 	movhi	r2,131
  812a3c:	109c7d04 	addi	r2,r2,29172
  812a40:	10c00017 	ldw	r3,0(r2)
  812a44:	00803484 	movi	r2,210
  812a48:	d8800015 	stw	r2,0(sp)
  812a4c:	d8000115 	stw	zero,4(sp)
  812a50:	d8c00215 	stw	r3,8(sp)
  812a54:	01c03704 	movi	r7,220
  812a58:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, coord[1]+10, coord[1]+10, 220, 210, 0x0000,swap);
  812a5c:	008020f4 	movhi	r2,131
  812a60:	109c8a04 	addi	r2,r2,29224
  812a64:	11000017 	ldw	r4,0(r2)
  812a68:	e0bfff17 	ldw	r2,-4(fp)
  812a6c:	10800104 	addi	r2,r2,4
  812a70:	10800017 	ldw	r2,0(r2)
  812a74:	11400284 	addi	r5,r2,10
  812a78:	e0bfff17 	ldw	r2,-4(fp)
  812a7c:	10800104 	addi	r2,r2,4
  812a80:	10800017 	ldw	r2,0(r2)
  812a84:	11800284 	addi	r6,r2,10
  812a88:	008020f4 	movhi	r2,131
  812a8c:	109c7d04 	addi	r2,r2,29172
  812a90:	10c00017 	ldw	r3,0(r2)
  812a94:	00803484 	movi	r2,210
  812a98:	d8800015 	stw	r2,0(sp)
  812a9c:	d8000115 	stw	zero,4(sp)
  812aa0:	d8c00215 	stw	r3,8(sp)
  812aa4:	01c03704 	movi	r7,220
  812aa8:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
	coord[0]++;
  812aac:	e0bfff17 	ldw	r2,-4(fp)
  812ab0:	10800017 	ldw	r2,0(r2)
  812ab4:	10c00044 	addi	r3,r2,1
  812ab8:	e0bfff17 	ldw	r2,-4(fp)
  812abc:	10c00015 	stw	r3,0(r2)
	coord[1]--;
  812ac0:	e0bfff17 	ldw	r2,-4(fp)
  812ac4:	10c00104 	addi	r3,r2,4
  812ac8:	18800017 	ldw	r2,0(r3)
  812acc:	10bfffc4 	addi	r2,r2,-1
  812ad0:	18800015 	stw	r2,0(r3)
	if(coord[0] > 200) coord[0] = 150;
  812ad4:	e0bfff17 	ldw	r2,-4(fp)
  812ad8:	10800017 	ldw	r2,0(r2)
  812adc:	10803250 	cmplti	r2,r2,201
  812ae0:	1000031e 	bne	r2,zero,812af0 <backgroundAnimation+0x178>
  812ae4:	e0ffff17 	ldw	r3,-4(fp)
  812ae8:	00802584 	movi	r2,150
  812aec:	18800015 	stw	r2,0(r3)
	if(coord[1] < 150) coord[1] = 200;
  812af0:	e0bfff17 	ldw	r2,-4(fp)
  812af4:	10800104 	addi	r2,r2,4
  812af8:	10800017 	ldw	r2,0(r2)
  812afc:	10802588 	cmpgei	r2,r2,150
  812b00:	1000041e 	bne	r2,zero,812b14 <backgroundAnimation+0x19c>
  812b04:	e0bfff17 	ldw	r2,-4(fp)
  812b08:	10c00104 	addi	r3,r2,4
  812b0c:	00803204 	movi	r2,200
  812b10:	18800015 	stw	r2,0(r3)
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, coord[0], coord[1], 220, 210, 0x3333,swap);
  812b14:	008020f4 	movhi	r2,131
  812b18:	109c8a04 	addi	r2,r2,29224
  812b1c:	11000017 	ldw	r4,0(r2)
  812b20:	e0bfff17 	ldw	r2,-4(fp)
  812b24:	11400017 	ldw	r5,0(r2)
  812b28:	e0bfff17 	ldw	r2,-4(fp)
  812b2c:	10800104 	addi	r2,r2,4
  812b30:	11800017 	ldw	r6,0(r2)
  812b34:	008020f4 	movhi	r2,131
  812b38:	109c7d04 	addi	r2,r2,29172
  812b3c:	10c00017 	ldw	r3,0(r2)
  812b40:	00803484 	movi	r2,210
  812b44:	d8800015 	stw	r2,0(sp)
  812b48:	008cccc4 	movi	r2,13107
  812b4c:	d8800115 	stw	r2,4(sp)
  812b50:	d8c00215 	stw	r3,8(sp)
  812b54:	01c03704 	movi	r7,220
  812b58:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, coord[1], coord[0], 220, 210, 0xFFFF, swap);
  812b5c:	008020f4 	movhi	r2,131
  812b60:	109c8a04 	addi	r2,r2,29224
  812b64:	11000017 	ldw	r4,0(r2)
  812b68:	e0bfff17 	ldw	r2,-4(fp)
  812b6c:	10800104 	addi	r2,r2,4
  812b70:	11400017 	ldw	r5,0(r2)
  812b74:	e0bfff17 	ldw	r2,-4(fp)
  812b78:	11800017 	ldw	r6,0(r2)
  812b7c:	008020f4 	movhi	r2,131
  812b80:	109c7d04 	addi	r2,r2,29172
  812b84:	10c00017 	ldw	r3,0(r2)
  812b88:	00803484 	movi	r2,210
  812b8c:	d8800015 	stw	r2,0(sp)
  812b90:	00bfffd4 	movui	r2,65535
  812b94:	d8800115 	stw	r2,4(sp)
  812b98:	d8c00215 	stw	r3,8(sp)
  812b9c:	01c03704 	movi	r7,220
  812ba0:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, coord[0]+20, coord[0]+10, 220, 210, 0x1111,swap);
  812ba4:	008020f4 	movhi	r2,131
  812ba8:	109c8a04 	addi	r2,r2,29224
  812bac:	11000017 	ldw	r4,0(r2)
  812bb0:	e0bfff17 	ldw	r2,-4(fp)
  812bb4:	10800017 	ldw	r2,0(r2)
  812bb8:	11400504 	addi	r5,r2,20
  812bbc:	e0bfff17 	ldw	r2,-4(fp)
  812bc0:	10800017 	ldw	r2,0(r2)
  812bc4:	11800284 	addi	r6,r2,10
  812bc8:	008020f4 	movhi	r2,131
  812bcc:	109c7d04 	addi	r2,r2,29172
  812bd0:	10c00017 	ldw	r3,0(r2)
  812bd4:	00803484 	movi	r2,210
  812bd8:	d8800015 	stw	r2,0(sp)
  812bdc:	00844444 	movi	r2,4369
  812be0:	d8800115 	stw	r2,4(sp)
  812be4:	d8c00215 	stw	r3,8(sp)
  812be8:	01c03704 	movi	r7,220
  812bec:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer, coord[1]+10, coord[1]+10, 220, 210, 0xAAAA,swap);
  812bf0:	008020f4 	movhi	r2,131
  812bf4:	109c8a04 	addi	r2,r2,29224
  812bf8:	11000017 	ldw	r4,0(r2)
  812bfc:	e0bfff17 	ldw	r2,-4(fp)
  812c00:	10800104 	addi	r2,r2,4
  812c04:	10800017 	ldw	r2,0(r2)
  812c08:	11400284 	addi	r5,r2,10
  812c0c:	e0bfff17 	ldw	r2,-4(fp)
  812c10:	10800104 	addi	r2,r2,4
  812c14:	10800017 	ldw	r2,0(r2)
  812c18:	11800284 	addi	r6,r2,10
  812c1c:	008020f4 	movhi	r2,131
  812c20:	109c7d04 	addi	r2,r2,29172
  812c24:	10c00017 	ldw	r3,0(r2)
  812c28:	00803484 	movi	r2,210
  812c2c:	d8800015 	stw	r2,0(sp)
  812c30:	00aaaa94 	movui	r2,43690
  812c34:	d8800115 	stw	r2,4(sp)
  812c38:	d8c00215 	stw	r3,8(sp)
  812c3c:	01c03704 	movi	r7,220
  812c40:	0822a3c0 	call	822a3c <alt_up_pixel_buffer_dma_draw_line>

}
  812c44:	e037883a 	mov	sp,fp
  812c48:	dfc00117 	ldw	ra,4(sp)
  812c4c:	df000017 	ldw	fp,0(sp)
  812c50:	dec00204 	addi	sp,sp,8
  812c54:	f800283a 	ret

00812c58 <getColor>:

/*helper function to convert 32 bit color code to 16 bit color*/

int getColor(int red, int green, int blue) {
  812c58:	defffc04 	addi	sp,sp,-16
  812c5c:	df000315 	stw	fp,12(sp)
  812c60:	df000304 	addi	fp,sp,12
  812c64:	e13ffd15 	stw	r4,-12(fp)
  812c68:	e17ffe15 	stw	r5,-8(fp)
  812c6c:	e1bfff15 	stw	r6,-4(fp)
	return (int)(((red>>3)<<11) + ((green>>2)<<5) + (blue>>3));
  812c70:	e0bffd17 	ldw	r2,-12(fp)
  812c74:	1005d0fa 	srai	r2,r2,3
  812c78:	100692fa 	slli	r3,r2,11
  812c7c:	e0bffe17 	ldw	r2,-8(fp)
  812c80:	1005d0ba 	srai	r2,r2,2
  812c84:	1004917a 	slli	r2,r2,5
  812c88:	1887883a 	add	r3,r3,r2
  812c8c:	e0bfff17 	ldw	r2,-4(fp)
  812c90:	1005d0fa 	srai	r2,r2,3
  812c94:	1885883a 	add	r2,r3,r2
	//return red*2048+green*32+blue;
}
  812c98:	e037883a 	mov	sp,fp
  812c9c:	df000017 	ldw	fp,0(sp)
  812ca0:	dec00104 	addi	sp,sp,4
  812ca4:	f800283a 	ret

00812ca8 <getColor555>:
int getColor555(int color555) {
  812ca8:	defffd04 	addi	sp,sp,-12
  812cac:	df000215 	stw	fp,8(sp)
  812cb0:	df000204 	addi	fp,sp,8
  812cb4:	e13fff15 	stw	r4,-4(fp)
	int color = color555&0x7FFF;
  812cb8:	e0bfff17 	ldw	r2,-4(fp)
  812cbc:	109fffcc 	andi	r2,r2,32767
  812cc0:	e0bffe15 	stw	r2,-8(fp)
	return (color&0x7C00)*2+(color&0x03E0)*2+(color&0x1F);
  812cc4:	e0bffe17 	ldw	r2,-8(fp)
  812cc8:	109ff80c 	andi	r2,r2,32736
  812ccc:	1085883a 	add	r2,r2,r2
  812cd0:	1007883a 	mov	r3,r2
  812cd4:	e0bffe17 	ldw	r2,-8(fp)
  812cd8:	108007cc 	andi	r2,r2,31
  812cdc:	1885883a 	add	r2,r3,r2
}
  812ce0:	e037883a 	mov	sp,fp
  812ce4:	df000017 	ldw	fp,0(sp)
  812ce8:	dec00104 	addi	sp,sp,4
  812cec:	f800283a 	ret

00812cf0 <audio_ISR>:
 *
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct AudioController* audioController, unsigned int id)
{
  812cf0:	defffb04 	addi	sp,sp,-20
  812cf4:	dfc00415 	stw	ra,16(sp)
  812cf8:	df000315 	stw	fp,12(sp)
  812cfc:	df000304 	addi	fp,sp,12
  812d00:	e13ffe15 	stw	r4,-8(fp)
  812d04:	e17fff15 	stw	r5,-4(fp)
	int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel);

	if (alt_up_audio_write_interrupt_pending(audioController->audio))	// check for write interrupt
  812d08:	e0bffe17 	ldw	r2,-8(fp)
  812d0c:	11000017 	ldw	r4,0(r2)
  812d10:	081fb580 	call	81fb58 <alt_up_audio_write_interrupt_pending>
  812d14:	1005003a 	cmpeq	r2,r2,zero
  812d18:	1000221e 	bne	r2,zero,812da4 <audio_ISR+0xb4>
	{
		int num_to_write = alt_up_audio_write_fifo_space( audioController->audio, ALT_UP_AUDIO_LEFT );
  812d1c:	e0bffe17 	ldw	r2,-8(fp)
  812d20:	11000017 	ldw	r4,0(r2)
  812d24:	000b883a 	mov	r5,zero
  812d28:	081fd6c0 	call	81fd6c <alt_up_audio_write_fifo_space>
  812d2c:	e0bffd15 	stw	r2,-12(fp)

		alt_up_audio_write_fifo( audioController->audio, &(audioController->buffer[audioController->buf_index_play]), num_to_write, ALT_UP_AUDIO_LEFT );
  812d30:	e0bffe17 	ldw	r2,-8(fp)
  812d34:	11000017 	ldw	r4,0(r2)
  812d38:	e0bffe17 	ldw	r2,-8(fp)
  812d3c:	10c00b17 	ldw	r3,44(r2)
  812d40:	e0bffe17 	ldw	r2,-8(fp)
  812d44:	10800117 	ldw	r2,4(r2)
  812d48:	1085883a 	add	r2,r2,r2
  812d4c:	1085883a 	add	r2,r2,r2
  812d50:	1885883a 	add	r2,r3,r2
  812d54:	100b883a 	mov	r5,r2
  812d58:	e1bffd17 	ldw	r6,-12(fp)
  812d5c:	000f883a 	mov	r7,zero
  812d60:	081ffc40 	call	81ffc4 <alt_up_audio_write_fifo>
		alt_up_audio_write_fifo( audioController->audio, &(audioController->buffer[audioController->buf_index_play]), num_to_write, ALT_UP_AUDIO_RIGHT );
  812d64:	e0bffe17 	ldw	r2,-8(fp)
  812d68:	11000017 	ldw	r4,0(r2)
  812d6c:	e0bffe17 	ldw	r2,-8(fp)
  812d70:	10c00b17 	ldw	r3,44(r2)
  812d74:	e0bffe17 	ldw	r2,-8(fp)
  812d78:	10800117 	ldw	r2,4(r2)
  812d7c:	1085883a 	add	r2,r2,r2
  812d80:	1085883a 	add	r2,r2,r2
  812d84:	1885883a 	add	r2,r3,r2
  812d88:	100b883a 	mov	r5,r2
  812d8c:	e1bffd17 	ldw	r6,-12(fp)
  812d90:	01c00044 	movi	r7,1
  812d94:	081ffc40 	call	81ffc4 <alt_up_audio_write_fifo>

		updateAudioController(audioController, num_to_write);
  812d98:	e13ffe17 	ldw	r4,-8(fp)
  812d9c:	e17ffd17 	ldw	r5,-12(fp)
  812da0:	0800ea80 	call	800ea8 <updateAudioController>
	}
	return;
}
  812da4:	e037883a 	mov	sp,fp
  812da8:	dfc00117 	ldw	ra,4(sp)
  812dac:	df000017 	ldw	fp,0(sp)
  812db0:	dec00204 	addi	sp,sp,8
  812db4:	f800283a 	ret

00812db8 <_fpadd_parts>:
  812db8:	21c00017 	ldw	r7,0(r4)
  812dbc:	02000044 	movi	r8,1
  812dc0:	41c0332e 	bgeu	r8,r7,812e90 <_fpadd_parts+0xd8>
  812dc4:	28800017 	ldw	r2,0(r5)
  812dc8:	4080462e 	bgeu	r8,r2,812ee4 <_fpadd_parts+0x12c>
  812dcc:	00c00104 	movi	r3,4
  812dd0:	38c06b26 	beq	r7,r3,812f80 <_fpadd_parts+0x1c8>
  812dd4:	10c04326 	beq	r2,r3,812ee4 <_fpadd_parts+0x12c>
  812dd8:	00c00084 	movi	r3,2
  812ddc:	10c02e26 	beq	r2,r3,812e98 <_fpadd_parts+0xe0>
  812de0:	38c04026 	beq	r7,r3,812ee4 <_fpadd_parts+0x12c>
  812de4:	22800217 	ldw	r10,8(r4)
  812de8:	28c00217 	ldw	r3,8(r5)
  812dec:	23000317 	ldw	r12,12(r4)
  812df0:	2a400317 	ldw	r9,12(r5)
  812df4:	50cfc83a 	sub	r7,r10,r3
  812df8:	3817883a 	mov	r11,r7
  812dfc:	38004f16 	blt	r7,zero,812f3c <_fpadd_parts+0x184>
  812e00:	008007c4 	movi	r2,31
  812e04:	11c03316 	blt	r2,r7,812ed4 <_fpadd_parts+0x11c>
  812e08:	02c0540e 	bge	zero,r11,812f5c <_fpadd_parts+0x1a4>
  812e0c:	41c4983a 	sll	r2,r8,r7
  812e10:	49c6d83a 	srl	r3,r9,r7
  812e14:	10bfffc4 	addi	r2,r2,-1
  812e18:	4884703a 	and	r2,r9,r2
  812e1c:	1004c03a 	cmpne	r2,r2,zero
  812e20:	1892b03a 	or	r9,r3,r2
  812e24:	20c00117 	ldw	r3,4(r4)
  812e28:	28800117 	ldw	r2,4(r5)
  812e2c:	18803c26 	beq	r3,r2,812f20 <_fpadd_parts+0x168>
  812e30:	18002f26 	beq	r3,zero,812ef0 <_fpadd_parts+0x138>
  812e34:	4b05c83a 	sub	r2,r9,r12
  812e38:	10004216 	blt	r2,zero,812f44 <_fpadd_parts+0x18c>
  812e3c:	32800215 	stw	r10,8(r6)
  812e40:	30800315 	stw	r2,12(r6)
  812e44:	30000115 	stw	zero,4(r6)
  812e48:	31000317 	ldw	r4,12(r6)
  812e4c:	01d00034 	movhi	r7,16384
  812e50:	39ffff84 	addi	r7,r7,-2
  812e54:	20bfffc4 	addi	r2,r4,-1
  812e58:	2007883a 	mov	r3,r4
  812e5c:	38800836 	bltu	r7,r2,812e80 <_fpadd_parts+0xc8>
  812e60:	31400217 	ldw	r5,8(r6)
  812e64:	18c9883a 	add	r4,r3,r3
  812e68:	20bfffc4 	addi	r2,r4,-1
  812e6c:	297fffc4 	addi	r5,r5,-1
  812e70:	2007883a 	mov	r3,r4
  812e74:	38bffb2e 	bgeu	r7,r2,812e64 <_fpadd_parts+0xac>
  812e78:	31400215 	stw	r5,8(r6)
  812e7c:	31000315 	stw	r4,12(r6)
  812e80:	008000c4 	movi	r2,3
  812e84:	30800015 	stw	r2,0(r6)
  812e88:	20001b16 	blt	r4,zero,812ef8 <_fpadd_parts+0x140>
  812e8c:	3009883a 	mov	r4,r6
  812e90:	2005883a 	mov	r2,r4
  812e94:	f800283a 	ret
  812e98:	38fffd1e 	bne	r7,r3,812e90 <_fpadd_parts+0xd8>
  812e9c:	31c00015 	stw	r7,0(r6)
  812ea0:	20800117 	ldw	r2,4(r4)
  812ea4:	30800115 	stw	r2,4(r6)
  812ea8:	20c00217 	ldw	r3,8(r4)
  812eac:	30c00215 	stw	r3,8(r6)
  812eb0:	20800317 	ldw	r2,12(r4)
  812eb4:	30800315 	stw	r2,12(r6)
  812eb8:	20c00117 	ldw	r3,4(r4)
  812ebc:	28800117 	ldw	r2,4(r5)
  812ec0:	3009883a 	mov	r4,r6
  812ec4:	1886703a 	and	r3,r3,r2
  812ec8:	2005883a 	mov	r2,r4
  812ecc:	30c00115 	stw	r3,4(r6)
  812ed0:	f800283a 	ret
  812ed4:	1a801716 	blt	r3,r10,812f34 <_fpadd_parts+0x17c>
  812ed8:	1815883a 	mov	r10,r3
  812edc:	0019883a 	mov	r12,zero
  812ee0:	003fd006 	br	812e24 <_fpadd_parts+0x6c>
  812ee4:	2809883a 	mov	r4,r5
  812ee8:	2005883a 	mov	r2,r4
  812eec:	f800283a 	ret
  812ef0:	6245c83a 	sub	r2,r12,r9
  812ef4:	003fd006 	br	812e38 <_fpadd_parts+0x80>
  812ef8:	30800217 	ldw	r2,8(r6)
  812efc:	2006d07a 	srli	r3,r4,1
  812f00:	2100004c 	andi	r4,r4,1
  812f04:	10800044 	addi	r2,r2,1
  812f08:	1906b03a 	or	r3,r3,r4
  812f0c:	3009883a 	mov	r4,r6
  812f10:	30800215 	stw	r2,8(r6)
  812f14:	2005883a 	mov	r2,r4
  812f18:	30c00315 	stw	r3,12(r6)
  812f1c:	f800283a 	ret
  812f20:	4b09883a 	add	r4,r9,r12
  812f24:	30c00115 	stw	r3,4(r6)
  812f28:	32800215 	stw	r10,8(r6)
  812f2c:	31000315 	stw	r4,12(r6)
  812f30:	003fd306 	br	812e80 <_fpadd_parts+0xc8>
  812f34:	0013883a 	mov	r9,zero
  812f38:	003fba06 	br	812e24 <_fpadd_parts+0x6c>
  812f3c:	01cfc83a 	sub	r7,zero,r7
  812f40:	003faf06 	br	812e00 <_fpadd_parts+0x48>
  812f44:	0089c83a 	sub	r4,zero,r2
  812f48:	00800044 	movi	r2,1
  812f4c:	30800115 	stw	r2,4(r6)
  812f50:	32800215 	stw	r10,8(r6)
  812f54:	31000315 	stw	r4,12(r6)
  812f58:	003fbb06 	br	812e48 <_fpadd_parts+0x90>
  812f5c:	583fb126 	beq	r11,zero,812e24 <_fpadd_parts+0x6c>
  812f60:	41c4983a 	sll	r2,r8,r7
  812f64:	61c6d83a 	srl	r3,r12,r7
  812f68:	51d5883a 	add	r10,r10,r7
  812f6c:	10bfffc4 	addi	r2,r2,-1
  812f70:	6084703a 	and	r2,r12,r2
  812f74:	1004c03a 	cmpne	r2,r2,zero
  812f78:	1898b03a 	or	r12,r3,r2
  812f7c:	003fa906 	br	812e24 <_fpadd_parts+0x6c>
  812f80:	11ffc31e 	bne	r2,r7,812e90 <_fpadd_parts+0xd8>
  812f84:	28c00117 	ldw	r3,4(r5)
  812f88:	20800117 	ldw	r2,4(r4)
  812f8c:	10ffc026 	beq	r2,r3,812e90 <_fpadd_parts+0xd8>
  812f90:	010020f4 	movhi	r4,131
  812f94:	2122b604 	addi	r4,r4,-29992
  812f98:	003fbd06 	br	812e90 <_fpadd_parts+0xd8>

00812f9c <__subsf3>:
  812f9c:	deffef04 	addi	sp,sp,-68
  812fa0:	dcc00f15 	stw	r19,60(sp)
  812fa4:	dcc00204 	addi	r19,sp,8
  812fa8:	dc400e15 	stw	r17,56(sp)
  812fac:	d9000015 	stw	r4,0(sp)
  812fb0:	d9400115 	stw	r5,4(sp)
  812fb4:	d809883a 	mov	r4,sp
  812fb8:	980b883a 	mov	r5,r19
  812fbc:	dc400604 	addi	r17,sp,24
  812fc0:	dfc01015 	stw	ra,64(sp)
  812fc4:	08149440 	call	814944 <__unpack_f>
  812fc8:	d9000104 	addi	r4,sp,4
  812fcc:	880b883a 	mov	r5,r17
  812fd0:	08149440 	call	814944 <__unpack_f>
  812fd4:	d8800717 	ldw	r2,28(sp)
  812fd8:	9809883a 	mov	r4,r19
  812fdc:	880b883a 	mov	r5,r17
  812fe0:	d9800a04 	addi	r6,sp,40
  812fe4:	1080005c 	xori	r2,r2,1
  812fe8:	d8800715 	stw	r2,28(sp)
  812fec:	0812db80 	call	812db8 <_fpadd_parts>
  812ff0:	1009883a 	mov	r4,r2
  812ff4:	08147e40 	call	8147e4 <__pack_f>
  812ff8:	dfc01017 	ldw	ra,64(sp)
  812ffc:	dcc00f17 	ldw	r19,60(sp)
  813000:	dc400e17 	ldw	r17,56(sp)
  813004:	dec01104 	addi	sp,sp,68
  813008:	f800283a 	ret

0081300c <__addsf3>:
  81300c:	deffef04 	addi	sp,sp,-68
  813010:	dcc00f15 	stw	r19,60(sp)
  813014:	dcc00204 	addi	r19,sp,8
  813018:	dc400e15 	stw	r17,56(sp)
  81301c:	d9000015 	stw	r4,0(sp)
  813020:	d9400115 	stw	r5,4(sp)
  813024:	d809883a 	mov	r4,sp
  813028:	980b883a 	mov	r5,r19
  81302c:	dc400604 	addi	r17,sp,24
  813030:	dfc01015 	stw	ra,64(sp)
  813034:	08149440 	call	814944 <__unpack_f>
  813038:	d9000104 	addi	r4,sp,4
  81303c:	880b883a 	mov	r5,r17
  813040:	08149440 	call	814944 <__unpack_f>
  813044:	d9800a04 	addi	r6,sp,40
  813048:	9809883a 	mov	r4,r19
  81304c:	880b883a 	mov	r5,r17
  813050:	0812db80 	call	812db8 <_fpadd_parts>
  813054:	1009883a 	mov	r4,r2
  813058:	08147e40 	call	8147e4 <__pack_f>
  81305c:	dfc01017 	ldw	ra,64(sp)
  813060:	dcc00f17 	ldw	r19,60(sp)
  813064:	dc400e17 	ldw	r17,56(sp)
  813068:	dec01104 	addi	sp,sp,68
  81306c:	f800283a 	ret

00813070 <__mulsf3>:
  813070:	deffef04 	addi	sp,sp,-68
  813074:	dc400f15 	stw	r17,60(sp)
  813078:	dc400204 	addi	r17,sp,8
  81307c:	dc000e15 	stw	r16,56(sp)
  813080:	d9000015 	stw	r4,0(sp)
  813084:	d9400115 	stw	r5,4(sp)
  813088:	d809883a 	mov	r4,sp
  81308c:	880b883a 	mov	r5,r17
  813090:	dc000604 	addi	r16,sp,24
  813094:	dfc01015 	stw	ra,64(sp)
  813098:	08149440 	call	814944 <__unpack_f>
  81309c:	d9000104 	addi	r4,sp,4
  8130a0:	800b883a 	mov	r5,r16
  8130a4:	08149440 	call	814944 <__unpack_f>
  8130a8:	d9000217 	ldw	r4,8(sp)
  8130ac:	00800044 	movi	r2,1
  8130b0:	01400104 	movi	r5,4
  8130b4:	1100142e 	bgeu	r2,r4,813108 <__mulsf3+0x98>
  8130b8:	d8c00617 	ldw	r3,24(sp)
  8130bc:	10c0052e 	bgeu	r2,r3,8130d4 <__mulsf3+0x64>
  8130c0:	21400f26 	beq	r4,r5,813100 <__mulsf3+0x90>
  8130c4:	19405d26 	beq	r3,r5,81323c <__mulsf3+0x1cc>
  8130c8:	00800084 	movi	r2,2
  8130cc:	20800e26 	beq	r4,r2,813108 <__mulsf3+0x98>
  8130d0:	1880181e 	bne	r3,r2,813134 <__mulsf3+0xc4>
  8130d4:	d8c00717 	ldw	r3,28(sp)
  8130d8:	d8800317 	ldw	r2,12(sp)
  8130dc:	8009883a 	mov	r4,r16
  8130e0:	10c4c03a 	cmpne	r2,r2,r3
  8130e4:	d8800715 	stw	r2,28(sp)
  8130e8:	08147e40 	call	8147e4 <__pack_f>
  8130ec:	dfc01017 	ldw	ra,64(sp)
  8130f0:	dc400f17 	ldw	r17,60(sp)
  8130f4:	dc000e17 	ldw	r16,56(sp)
  8130f8:	dec01104 	addi	sp,sp,68
  8130fc:	f800283a 	ret
  813100:	00800084 	movi	r2,2
  813104:	18804f26 	beq	r3,r2,813244 <__mulsf3+0x1d4>
  813108:	d8800317 	ldw	r2,12(sp)
  81310c:	d8c00717 	ldw	r3,28(sp)
  813110:	8809883a 	mov	r4,r17
  813114:	10c4c03a 	cmpne	r2,r2,r3
  813118:	d8800315 	stw	r2,12(sp)
  81311c:	08147e40 	call	8147e4 <__pack_f>
  813120:	dfc01017 	ldw	ra,64(sp)
  813124:	dc400f17 	ldw	r17,60(sp)
  813128:	dc000e17 	ldw	r16,56(sp)
  81312c:	dec01104 	addi	sp,sp,68
  813130:	f800283a 	ret
  813134:	d8800517 	ldw	r2,20(sp)
  813138:	da000917 	ldw	r8,36(sp)
  81313c:	0013883a 	mov	r9,zero
  813140:	0007883a 	mov	r3,zero
  813144:	480f883a 	mov	r7,r9
  813148:	180b883a 	mov	r5,r3
  81314c:	400d883a 	mov	r6,r8
  813150:	1009883a 	mov	r4,r2
  813154:	08146cc0 	call	8146cc <__muldi3>
  813158:	da800417 	ldw	r10,16(sp)
  81315c:	d9800817 	ldw	r6,32(sp)
  813160:	da400317 	ldw	r9,12(sp)
  813164:	52800084 	addi	r10,r10,2
  813168:	3295883a 	add	r10,r6,r10
  81316c:	d9800717 	ldw	r6,28(sp)
  813170:	180b883a 	mov	r5,r3
  813174:	180f883a 	mov	r7,r3
  813178:	4992c03a 	cmpne	r9,r9,r6
  81317c:	da400b15 	stw	r9,44(sp)
  813180:	1007883a 	mov	r3,r2
  813184:	da800c15 	stw	r10,48(sp)
  813188:	2800070e 	bge	r5,zero,8131a8 <__mulsf3+0x138>
  81318c:	2880004c 	andi	r2,r5,1
  813190:	1005003a 	cmpeq	r2,r2,zero
  813194:	500d883a 	mov	r6,r10
  813198:	10001e26 	beq	r2,zero,813214 <__mulsf3+0x1a4>
  81319c:	380ed07a 	srli	r7,r7,1
  8131a0:	31800044 	addi	r6,r6,1
  8131a4:	d9800c15 	stw	r6,48(sp)
  8131a8:	01100034 	movhi	r4,16384
  8131ac:	213fffc4 	addi	r4,r4,-1
  8131b0:	21c00b36 	bltu	r4,r7,8131e0 <__mulsf3+0x170>
  8131b4:	d8800c17 	ldw	r2,48(sp)
  8131b8:	00000206 	br	8131c4 <__mulsf3+0x154>
  8131bc:	18c7883a 	add	r3,r3,r3
  8131c0:	21c00636 	bltu	r4,r7,8131dc <__mulsf3+0x16c>
  8131c4:	10bfffc4 	addi	r2,r2,-1
  8131c8:	39cf883a 	add	r7,r7,r7
  8131cc:	183ffb0e 	bge	r3,zero,8131bc <__mulsf3+0x14c>
  8131d0:	39c00054 	ori	r7,r7,1
  8131d4:	18c7883a 	add	r3,r3,r3
  8131d8:	21fffa2e 	bgeu	r4,r7,8131c4 <__mulsf3+0x154>
  8131dc:	d8800c15 	stw	r2,48(sp)
  8131e0:	39001fcc 	andi	r4,r7,127
  8131e4:	00801004 	movi	r2,64
  8131e8:	20800d26 	beq	r4,r2,813220 <__mulsf3+0x1b0>
  8131ec:	008000c4 	movi	r2,3
  8131f0:	d9000a04 	addi	r4,sp,40
  8131f4:	d9c00d15 	stw	r7,52(sp)
  8131f8:	d8800a15 	stw	r2,40(sp)
  8131fc:	08147e40 	call	8147e4 <__pack_f>
  813200:	dfc01017 	ldw	ra,64(sp)
  813204:	dc400f17 	ldw	r17,60(sp)
  813208:	dc000e17 	ldw	r16,56(sp)
  81320c:	dec01104 	addi	sp,sp,68
  813210:	f800283a 	ret
  813214:	1804d07a 	srli	r2,r3,1
  813218:	10e00034 	orhi	r3,r2,32768
  81321c:	003fdf06 	br	81319c <__mulsf3+0x12c>
  813220:	3880200c 	andi	r2,r7,128
  813224:	103ff11e 	bne	r2,zero,8131ec <__mulsf3+0x17c>
  813228:	183ff026 	beq	r3,zero,8131ec <__mulsf3+0x17c>
  81322c:	3907883a 	add	r3,r7,r4
  813230:	00bfe004 	movi	r2,-128
  813234:	188e703a 	and	r7,r3,r2
  813238:	003fec06 	br	8131ec <__mulsf3+0x17c>
  81323c:	00800084 	movi	r2,2
  813240:	20bfa41e 	bne	r4,r2,8130d4 <__mulsf3+0x64>
  813244:	010020f4 	movhi	r4,131
  813248:	2122b604 	addi	r4,r4,-29992
  81324c:	003fb306 	br	81311c <__mulsf3+0xac>

00813250 <__divsf3>:
  813250:	defff304 	addi	sp,sp,-52
  813254:	dc400b15 	stw	r17,44(sp)
  813258:	dc400204 	addi	r17,sp,8
  81325c:	dc000a15 	stw	r16,40(sp)
  813260:	d9000015 	stw	r4,0(sp)
  813264:	d9400115 	stw	r5,4(sp)
  813268:	d809883a 	mov	r4,sp
  81326c:	880b883a 	mov	r5,r17
  813270:	dc000604 	addi	r16,sp,24
  813274:	dfc00c15 	stw	ra,48(sp)
  813278:	08149440 	call	814944 <__unpack_f>
  81327c:	d9000104 	addi	r4,sp,4
  813280:	800b883a 	mov	r5,r16
  813284:	08149440 	call	814944 <__unpack_f>
  813288:	d9000217 	ldw	r4,8(sp)
  81328c:	00800044 	movi	r2,1
  813290:	01800104 	movi	r6,4
  813294:	11000a2e 	bgeu	r2,r4,8132c0 <__divsf3+0x70>
  813298:	d9400617 	ldw	r5,24(sp)
  81329c:	1140432e 	bgeu	r2,r5,8133ac <__divsf3+0x15c>
  8132a0:	d8800317 	ldw	r2,12(sp)
  8132a4:	d8c00717 	ldw	r3,28(sp)
  8132a8:	10c4f03a 	xor	r2,r2,r3
  8132ac:	d8800315 	stw	r2,12(sp)
  8132b0:	21800226 	beq	r4,r6,8132bc <__divsf3+0x6c>
  8132b4:	00800084 	movi	r2,2
  8132b8:	2080101e 	bne	r4,r2,8132fc <__divsf3+0xac>
  8132bc:	29000726 	beq	r5,r4,8132dc <__divsf3+0x8c>
  8132c0:	8809883a 	mov	r4,r17
  8132c4:	08147e40 	call	8147e4 <__pack_f>
  8132c8:	dfc00c17 	ldw	ra,48(sp)
  8132cc:	dc400b17 	ldw	r17,44(sp)
  8132d0:	dc000a17 	ldw	r16,40(sp)
  8132d4:	dec00d04 	addi	sp,sp,52
  8132d8:	f800283a 	ret
  8132dc:	010020f4 	movhi	r4,131
  8132e0:	2122b604 	addi	r4,r4,-29992
  8132e4:	08147e40 	call	8147e4 <__pack_f>
  8132e8:	dfc00c17 	ldw	ra,48(sp)
  8132ec:	dc400b17 	ldw	r17,44(sp)
  8132f0:	dc000a17 	ldw	r16,40(sp)
  8132f4:	dec00d04 	addi	sp,sp,52
  8132f8:	f800283a 	ret
  8132fc:	29802d26 	beq	r5,r6,8133b4 <__divsf3+0x164>
  813300:	28801a26 	beq	r5,r2,81336c <__divsf3+0x11c>
  813304:	d8c00417 	ldw	r3,16(sp)
  813308:	d8800817 	ldw	r2,32(sp)
  81330c:	d9000517 	ldw	r4,20(sp)
  813310:	d9800917 	ldw	r6,36(sp)
  813314:	1885c83a 	sub	r2,r3,r2
  813318:	d8800415 	stw	r2,16(sp)
  81331c:	2180032e 	bgeu	r4,r6,81332c <__divsf3+0xdc>
  813320:	10bfffc4 	addi	r2,r2,-1
  813324:	d8800415 	stw	r2,16(sp)
  813328:	2109883a 	add	r4,r4,r4
  81332c:	01500034 	movhi	r5,16384
  813330:	0007883a 	mov	r3,zero
  813334:	0005883a 	mov	r2,zero
  813338:	01c007c4 	movi	r7,31
  81333c:	10800044 	addi	r2,r2,1
  813340:	21800236 	bltu	r4,r6,81334c <__divsf3+0xfc>
  813344:	1946b03a 	or	r3,r3,r5
  813348:	2189c83a 	sub	r4,r4,r6
  81334c:	280ad07a 	srli	r5,r5,1
  813350:	2109883a 	add	r4,r4,r4
  813354:	11fff91e 	bne	r2,r7,81333c <__divsf3+0xec>
  813358:	19401fcc 	andi	r5,r3,127
  81335c:	00801004 	movi	r2,64
  813360:	28800a26 	beq	r5,r2,81338c <__divsf3+0x13c>
  813364:	d8c00515 	stw	r3,20(sp)
  813368:	003fd506 	br	8132c0 <__divsf3+0x70>
  81336c:	8809883a 	mov	r4,r17
  813370:	d9800215 	stw	r6,8(sp)
  813374:	08147e40 	call	8147e4 <__pack_f>
  813378:	dfc00c17 	ldw	ra,48(sp)
  81337c:	dc400b17 	ldw	r17,44(sp)
  813380:	dc000a17 	ldw	r16,40(sp)
  813384:	dec00d04 	addi	sp,sp,52
  813388:	f800283a 	ret
  81338c:	1880200c 	andi	r2,r3,128
  813390:	103ff41e 	bne	r2,zero,813364 <__divsf3+0x114>
  813394:	203ff326 	beq	r4,zero,813364 <__divsf3+0x114>
  813398:	1947883a 	add	r3,r3,r5
  81339c:	00bfe004 	movi	r2,-128
  8133a0:	1886703a 	and	r3,r3,r2
  8133a4:	d8c00515 	stw	r3,20(sp)
  8133a8:	003fc506 	br	8132c0 <__divsf3+0x70>
  8133ac:	8009883a 	mov	r4,r16
  8133b0:	003fc406 	br	8132c4 <__divsf3+0x74>
  8133b4:	8809883a 	mov	r4,r17
  8133b8:	d8000515 	stw	zero,20(sp)
  8133bc:	d8000415 	stw	zero,16(sp)
  8133c0:	003fc006 	br	8132c4 <__divsf3+0x74>

008133c4 <__gtsf2>:
  8133c4:	defff304 	addi	sp,sp,-52
  8133c8:	dc400b15 	stw	r17,44(sp)
  8133cc:	dc400204 	addi	r17,sp,8
  8133d0:	dc000a15 	stw	r16,40(sp)
  8133d4:	d9000015 	stw	r4,0(sp)
  8133d8:	d9400115 	stw	r5,4(sp)
  8133dc:	d809883a 	mov	r4,sp
  8133e0:	880b883a 	mov	r5,r17
  8133e4:	dc000604 	addi	r16,sp,24
  8133e8:	dfc00c15 	stw	ra,48(sp)
  8133ec:	08149440 	call	814944 <__unpack_f>
  8133f0:	d9000104 	addi	r4,sp,4
  8133f4:	800b883a 	mov	r5,r16
  8133f8:	08149440 	call	814944 <__unpack_f>
  8133fc:	d8800217 	ldw	r2,8(sp)
  813400:	00c00044 	movi	r3,1
  813404:	01bfffc4 	movi	r6,-1
  813408:	1880062e 	bgeu	r3,r2,813424 <__gtsf2+0x60>
  81340c:	d8800617 	ldw	r2,24(sp)
  813410:	8809883a 	mov	r4,r17
  813414:	800b883a 	mov	r5,r16
  813418:	1880022e 	bgeu	r3,r2,813424 <__gtsf2+0x60>
  81341c:	0814a0c0 	call	814a0c <__fpcmp_parts_f>
  813420:	100d883a 	mov	r6,r2
  813424:	3005883a 	mov	r2,r6
  813428:	dfc00c17 	ldw	ra,48(sp)
  81342c:	dc400b17 	ldw	r17,44(sp)
  813430:	dc000a17 	ldw	r16,40(sp)
  813434:	dec00d04 	addi	sp,sp,52
  813438:	f800283a 	ret

0081343c <__gesf2>:
  81343c:	defff304 	addi	sp,sp,-52
  813440:	dc400b15 	stw	r17,44(sp)
  813444:	dc400204 	addi	r17,sp,8
  813448:	dc000a15 	stw	r16,40(sp)
  81344c:	d9000015 	stw	r4,0(sp)
  813450:	d9400115 	stw	r5,4(sp)
  813454:	d809883a 	mov	r4,sp
  813458:	880b883a 	mov	r5,r17
  81345c:	dc000604 	addi	r16,sp,24
  813460:	dfc00c15 	stw	ra,48(sp)
  813464:	08149440 	call	814944 <__unpack_f>
  813468:	d9000104 	addi	r4,sp,4
  81346c:	800b883a 	mov	r5,r16
  813470:	08149440 	call	814944 <__unpack_f>
  813474:	d8800217 	ldw	r2,8(sp)
  813478:	00c00044 	movi	r3,1
  81347c:	01bfffc4 	movi	r6,-1
  813480:	1880062e 	bgeu	r3,r2,81349c <__gesf2+0x60>
  813484:	d8800617 	ldw	r2,24(sp)
  813488:	8809883a 	mov	r4,r17
  81348c:	800b883a 	mov	r5,r16
  813490:	1880022e 	bgeu	r3,r2,81349c <__gesf2+0x60>
  813494:	0814a0c0 	call	814a0c <__fpcmp_parts_f>
  813498:	100d883a 	mov	r6,r2
  81349c:	3005883a 	mov	r2,r6
  8134a0:	dfc00c17 	ldw	ra,48(sp)
  8134a4:	dc400b17 	ldw	r17,44(sp)
  8134a8:	dc000a17 	ldw	r16,40(sp)
  8134ac:	dec00d04 	addi	sp,sp,52
  8134b0:	f800283a 	ret

008134b4 <__ltsf2>:
  8134b4:	defff304 	addi	sp,sp,-52
  8134b8:	dc400b15 	stw	r17,44(sp)
  8134bc:	dc400204 	addi	r17,sp,8
  8134c0:	dc000a15 	stw	r16,40(sp)
  8134c4:	d9000015 	stw	r4,0(sp)
  8134c8:	d9400115 	stw	r5,4(sp)
  8134cc:	d809883a 	mov	r4,sp
  8134d0:	880b883a 	mov	r5,r17
  8134d4:	dc000604 	addi	r16,sp,24
  8134d8:	dfc00c15 	stw	ra,48(sp)
  8134dc:	08149440 	call	814944 <__unpack_f>
  8134e0:	d9000104 	addi	r4,sp,4
  8134e4:	800b883a 	mov	r5,r16
  8134e8:	08149440 	call	814944 <__unpack_f>
  8134ec:	d8800217 	ldw	r2,8(sp)
  8134f0:	00c00044 	movi	r3,1
  8134f4:	180d883a 	mov	r6,r3
  8134f8:	1880062e 	bgeu	r3,r2,813514 <__ltsf2+0x60>
  8134fc:	d8800617 	ldw	r2,24(sp)
  813500:	8809883a 	mov	r4,r17
  813504:	800b883a 	mov	r5,r16
  813508:	1880022e 	bgeu	r3,r2,813514 <__ltsf2+0x60>
  81350c:	0814a0c0 	call	814a0c <__fpcmp_parts_f>
  813510:	100d883a 	mov	r6,r2
  813514:	3005883a 	mov	r2,r6
  813518:	dfc00c17 	ldw	ra,48(sp)
  81351c:	dc400b17 	ldw	r17,44(sp)
  813520:	dc000a17 	ldw	r16,40(sp)
  813524:	dec00d04 	addi	sp,sp,52
  813528:	f800283a 	ret

0081352c <__lesf2>:
  81352c:	defff304 	addi	sp,sp,-52
  813530:	dc400b15 	stw	r17,44(sp)
  813534:	dc400204 	addi	r17,sp,8
  813538:	dc000a15 	stw	r16,40(sp)
  81353c:	d9000015 	stw	r4,0(sp)
  813540:	d9400115 	stw	r5,4(sp)
  813544:	d809883a 	mov	r4,sp
  813548:	880b883a 	mov	r5,r17
  81354c:	dc000604 	addi	r16,sp,24
  813550:	dfc00c15 	stw	ra,48(sp)
  813554:	08149440 	call	814944 <__unpack_f>
  813558:	d9000104 	addi	r4,sp,4
  81355c:	800b883a 	mov	r5,r16
  813560:	08149440 	call	814944 <__unpack_f>
  813564:	d8800217 	ldw	r2,8(sp)
  813568:	00c00044 	movi	r3,1
  81356c:	180d883a 	mov	r6,r3
  813570:	1880062e 	bgeu	r3,r2,81358c <__lesf2+0x60>
  813574:	d8800617 	ldw	r2,24(sp)
  813578:	8809883a 	mov	r4,r17
  81357c:	800b883a 	mov	r5,r16
  813580:	1880022e 	bgeu	r3,r2,81358c <__lesf2+0x60>
  813584:	0814a0c0 	call	814a0c <__fpcmp_parts_f>
  813588:	100d883a 	mov	r6,r2
  81358c:	3005883a 	mov	r2,r6
  813590:	dfc00c17 	ldw	ra,48(sp)
  813594:	dc400b17 	ldw	r17,44(sp)
  813598:	dc000a17 	ldw	r16,40(sp)
  81359c:	dec00d04 	addi	sp,sp,52
  8135a0:	f800283a 	ret

008135a4 <__floatsisf>:
  8135a4:	2006d7fa 	srli	r3,r4,31
  8135a8:	defffa04 	addi	sp,sp,-24
  8135ac:	008000c4 	movi	r2,3
  8135b0:	dfc00515 	stw	ra,20(sp)
  8135b4:	dc000415 	stw	r16,16(sp)
  8135b8:	d8800015 	stw	r2,0(sp)
  8135bc:	d8c00115 	stw	r3,4(sp)
  8135c0:	2000081e 	bne	r4,zero,8135e4 <__floatsisf+0x40>
  8135c4:	00800084 	movi	r2,2
  8135c8:	d8800015 	stw	r2,0(sp)
  8135cc:	d809883a 	mov	r4,sp
  8135d0:	08147e40 	call	8147e4 <__pack_f>
  8135d4:	dfc00517 	ldw	ra,20(sp)
  8135d8:	dc000417 	ldw	r16,16(sp)
  8135dc:	dec00604 	addi	sp,sp,24
  8135e0:	f800283a 	ret
  8135e4:	00800784 	movi	r2,30
  8135e8:	1807003a 	cmpeq	r3,r3,zero
  8135ec:	d8800215 	stw	r2,8(sp)
  8135f0:	18000e1e 	bne	r3,zero,81362c <__floatsisf+0x88>
  8135f4:	00a00034 	movhi	r2,32768
  8135f8:	20800e26 	beq	r4,r2,813634 <__floatsisf+0x90>
  8135fc:	0121c83a 	sub	r16,zero,r4
  813600:	8009883a 	mov	r4,r16
  813604:	dc000315 	stw	r16,12(sp)
  813608:	08147640 	call	814764 <__clzsi2>
  81360c:	117fffc4 	addi	r5,r2,-1
  813610:	017fee0e 	bge	zero,r5,8135cc <__floatsisf+0x28>
  813614:	d8800217 	ldw	r2,8(sp)
  813618:	8146983a 	sll	r3,r16,r5
  81361c:	1145c83a 	sub	r2,r2,r5
  813620:	d8c00315 	stw	r3,12(sp)
  813624:	d8800215 	stw	r2,8(sp)
  813628:	003fe806 	br	8135cc <__floatsisf+0x28>
  81362c:	2021883a 	mov	r16,r4
  813630:	003ff306 	br	813600 <__floatsisf+0x5c>
  813634:	00b3c034 	movhi	r2,52992
  813638:	003fe606 	br	8135d4 <__floatsisf+0x30>

0081363c <__fixsfsi>:
  81363c:	defffa04 	addi	sp,sp,-24
  813640:	d9000015 	stw	r4,0(sp)
  813644:	d9400104 	addi	r5,sp,4
  813648:	d809883a 	mov	r4,sp
  81364c:	dfc00515 	stw	ra,20(sp)
  813650:	08149440 	call	814944 <__unpack_f>
  813654:	d8c00117 	ldw	r3,4(sp)
  813658:	00800084 	movi	r2,2
  81365c:	1880041e 	bne	r3,r2,813670 <__fixsfsi+0x34>
  813660:	0005883a 	mov	r2,zero
  813664:	dfc00517 	ldw	ra,20(sp)
  813668:	dec00604 	addi	sp,sp,24
  81366c:	f800283a 	ret
  813670:	00800044 	movi	r2,1
  813674:	10fffa2e 	bgeu	r2,r3,813660 <__fixsfsi+0x24>
  813678:	00800104 	movi	r2,4
  81367c:	18800426 	beq	r3,r2,813690 <__fixsfsi+0x54>
  813680:	d8800317 	ldw	r2,12(sp)
  813684:	103ff616 	blt	r2,zero,813660 <__fixsfsi+0x24>
  813688:	00c00784 	movi	r3,30
  81368c:	1880070e 	bge	r3,r2,8136ac <__fixsfsi+0x70>
  813690:	d8800217 	ldw	r2,8(sp)
  813694:	10000c1e 	bne	r2,zero,8136c8 <__fixsfsi+0x8c>
  813698:	00a00034 	movhi	r2,32768
  81369c:	10bfffc4 	addi	r2,r2,-1
  8136a0:	dfc00517 	ldw	ra,20(sp)
  8136a4:	dec00604 	addi	sp,sp,24
  8136a8:	f800283a 	ret
  8136ac:	1885c83a 	sub	r2,r3,r2
  8136b0:	d9000217 	ldw	r4,8(sp)
  8136b4:	d8c00417 	ldw	r3,16(sp)
  8136b8:	1884d83a 	srl	r2,r3,r2
  8136bc:	203fe926 	beq	r4,zero,813664 <__fixsfsi+0x28>
  8136c0:	0085c83a 	sub	r2,zero,r2
  8136c4:	003fe706 	br	813664 <__fixsfsi+0x28>
  8136c8:	00a00034 	movhi	r2,32768
  8136cc:	003fe506 	br	813664 <__fixsfsi+0x28>

008136d0 <__extendsfdf2>:
  8136d0:	defff904 	addi	sp,sp,-28
  8136d4:	d9000115 	stw	r4,4(sp)
  8136d8:	d9400204 	addi	r5,sp,8
  8136dc:	d9000104 	addi	r4,sp,4
  8136e0:	dfc00615 	stw	ra,24(sp)
  8136e4:	08149440 	call	814944 <__unpack_f>
  8136e8:	d9c00517 	ldw	r7,20(sp)
  8136ec:	0011883a 	mov	r8,zero
  8136f0:	400697ba 	slli	r3,r8,30
  8136f4:	3812d0ba 	srli	r9,r7,2
  8136f8:	380497ba 	slli	r2,r7,30
  8136fc:	d9000217 	ldw	r4,8(sp)
  813700:	d9400317 	ldw	r5,12(sp)
  813704:	d9800417 	ldw	r6,16(sp)
  813708:	48c6b03a 	or	r3,r9,r3
  81370c:	100f883a 	mov	r7,r2
  813710:	d8c00015 	stw	r3,0(sp)
  813714:	08144d40 	call	8144d4 <__make_dp>
  813718:	dfc00617 	ldw	ra,24(sp)
  81371c:	dec00704 	addi	sp,sp,28
  813720:	f800283a 	ret

00813724 <__floatunsisf>:
  813724:	defff904 	addi	sp,sp,-28
  813728:	dc400515 	stw	r17,20(sp)
  81372c:	dc000415 	stw	r16,16(sp)
  813730:	dfc00615 	stw	ra,24(sp)
  813734:	04400784 	movi	r17,30
  813738:	2021883a 	mov	r16,r4
  81373c:	d8000115 	stw	zero,4(sp)
  813740:	2000091e 	bne	r4,zero,813768 <__floatunsisf+0x44>
  813744:	00800084 	movi	r2,2
  813748:	d8800015 	stw	r2,0(sp)
  81374c:	d809883a 	mov	r4,sp
  813750:	08147e40 	call	8147e4 <__pack_f>
  813754:	dfc00617 	ldw	ra,24(sp)
  813758:	dc400517 	ldw	r17,20(sp)
  81375c:	dc000417 	ldw	r16,16(sp)
  813760:	dec00704 	addi	sp,sp,28
  813764:	f800283a 	ret
  813768:	008000c4 	movi	r2,3
  81376c:	d9000315 	stw	r4,12(sp)
  813770:	d8800015 	stw	r2,0(sp)
  813774:	dc400215 	stw	r17,8(sp)
  813778:	08147640 	call	814764 <__clzsi2>
  81377c:	117fffc4 	addi	r5,r2,-1
  813780:	0147c83a 	sub	r3,zero,r5
  813784:	00800044 	movi	r2,1
  813788:	10c4983a 	sll	r2,r2,r3
  81378c:	80c6d83a 	srl	r3,r16,r3
  813790:	8949c83a 	sub	r4,r17,r5
  813794:	10bfffc4 	addi	r2,r2,-1
  813798:	8084703a 	and	r2,r16,r2
  81379c:	1004c03a 	cmpne	r2,r2,zero
  8137a0:	1886b03a 	or	r3,r3,r2
  8137a4:	28000c16 	blt	r5,zero,8137d8 <__floatunsisf+0xb4>
  8137a8:	8144983a 	sll	r2,r16,r5
  8137ac:	8947c83a 	sub	r3,r17,r5
  8137b0:	283fe626 	beq	r5,zero,81374c <__floatunsisf+0x28>
  8137b4:	d809883a 	mov	r4,sp
  8137b8:	d8800315 	stw	r2,12(sp)
  8137bc:	d8c00215 	stw	r3,8(sp)
  8137c0:	08147e40 	call	8147e4 <__pack_f>
  8137c4:	dfc00617 	ldw	ra,24(sp)
  8137c8:	dc400517 	ldw	r17,20(sp)
  8137cc:	dc000417 	ldw	r16,16(sp)
  8137d0:	dec00704 	addi	sp,sp,28
  8137d4:	f800283a 	ret
  8137d8:	d8c00315 	stw	r3,12(sp)
  8137dc:	d9000215 	stw	r4,8(sp)
  8137e0:	003fda06 	br	81374c <__floatunsisf+0x28>

008137e4 <_fpadd_parts>:
  8137e4:	defff804 	addi	sp,sp,-32
  8137e8:	dcc00315 	stw	r19,12(sp)
  8137ec:	2027883a 	mov	r19,r4
  8137f0:	21000017 	ldw	r4,0(r4)
  8137f4:	00c00044 	movi	r3,1
  8137f8:	dd400515 	stw	r21,20(sp)
  8137fc:	dd000415 	stw	r20,16(sp)
  813800:	ddc00715 	stw	r23,28(sp)
  813804:	dd800615 	stw	r22,24(sp)
  813808:	dc800215 	stw	r18,8(sp)
  81380c:	dc400115 	stw	r17,4(sp)
  813810:	dc000015 	stw	r16,0(sp)
  813814:	282b883a 	mov	r21,r5
  813818:	3029883a 	mov	r20,r6
  81381c:	1900632e 	bgeu	r3,r4,8139ac <_fpadd_parts+0x1c8>
  813820:	28800017 	ldw	r2,0(r5)
  813824:	1880812e 	bgeu	r3,r2,813a2c <_fpadd_parts+0x248>
  813828:	00c00104 	movi	r3,4
  81382c:	20c0dc26 	beq	r4,r3,813ba0 <_fpadd_parts+0x3bc>
  813830:	10c07e26 	beq	r2,r3,813a2c <_fpadd_parts+0x248>
  813834:	00c00084 	movi	r3,2
  813838:	10c06726 	beq	r2,r3,8139d8 <_fpadd_parts+0x1f4>
  81383c:	20c07b26 	beq	r4,r3,813a2c <_fpadd_parts+0x248>
  813840:	9dc00217 	ldw	r23,8(r19)
  813844:	28c00217 	ldw	r3,8(r5)
  813848:	9c400317 	ldw	r17,12(r19)
  81384c:	2bc00317 	ldw	r15,12(r5)
  813850:	b8cdc83a 	sub	r6,r23,r3
  813854:	9c800417 	ldw	r18,16(r19)
  813858:	2c000417 	ldw	r16,16(r5)
  81385c:	3009883a 	mov	r4,r6
  813860:	30009716 	blt	r6,zero,813ac0 <_fpadd_parts+0x2dc>
  813864:	00800fc4 	movi	r2,63
  813868:	11806b16 	blt	r2,r6,813a18 <_fpadd_parts+0x234>
  81386c:	0100a40e 	bge	zero,r4,813b00 <_fpadd_parts+0x31c>
  813870:	35bff804 	addi	r22,r6,-32
  813874:	b000bc16 	blt	r22,zero,813b68 <_fpadd_parts+0x384>
  813878:	8596d83a 	srl	r11,r16,r22
  81387c:	0019883a 	mov	r12,zero
  813880:	0013883a 	mov	r9,zero
  813884:	01000044 	movi	r4,1
  813888:	0015883a 	mov	r10,zero
  81388c:	b000be16 	blt	r22,zero,813b88 <_fpadd_parts+0x3a4>
  813890:	2590983a 	sll	r8,r4,r22
  813894:	000f883a 	mov	r7,zero
  813898:	00bfffc4 	movi	r2,-1
  81389c:	3889883a 	add	r4,r7,r2
  8138a0:	408b883a 	add	r5,r8,r2
  8138a4:	21cd803a 	cmpltu	r6,r4,r7
  8138a8:	314b883a 	add	r5,r6,r5
  8138ac:	7904703a 	and	r2,r15,r4
  8138b0:	8146703a 	and	r3,r16,r5
  8138b4:	10c4b03a 	or	r2,r2,r3
  8138b8:	10000226 	beq	r2,zero,8138c4 <_fpadd_parts+0xe0>
  8138bc:	02400044 	movi	r9,1
  8138c0:	0015883a 	mov	r10,zero
  8138c4:	5a5eb03a 	or	r15,r11,r9
  8138c8:	62a0b03a 	or	r16,r12,r10
  8138cc:	99400117 	ldw	r5,4(r19)
  8138d0:	a8800117 	ldw	r2,4(r21)
  8138d4:	28806e26 	beq	r5,r2,813a90 <_fpadd_parts+0x2ac>
  8138d8:	28006626 	beq	r5,zero,813a74 <_fpadd_parts+0x290>
  8138dc:	7c45c83a 	sub	r2,r15,r17
  8138e0:	7889803a 	cmpltu	r4,r15,r2
  8138e4:	8487c83a 	sub	r3,r16,r18
  8138e8:	1909c83a 	sub	r4,r3,r4
  8138ec:	100d883a 	mov	r6,r2
  8138f0:	200f883a 	mov	r7,r4
  8138f4:	38007716 	blt	r7,zero,813ad4 <_fpadd_parts+0x2f0>
  8138f8:	a5c00215 	stw	r23,8(r20)
  8138fc:	a1c00415 	stw	r7,16(r20)
  813900:	a0000115 	stw	zero,4(r20)
  813904:	a1800315 	stw	r6,12(r20)
  813908:	a2000317 	ldw	r8,12(r20)
  81390c:	a2400417 	ldw	r9,16(r20)
  813910:	00bfffc4 	movi	r2,-1
  813914:	408b883a 	add	r5,r8,r2
  813918:	2a09803a 	cmpltu	r4,r5,r8
  81391c:	488d883a 	add	r6,r9,r2
  813920:	01c40034 	movhi	r7,4096
  813924:	39ffffc4 	addi	r7,r7,-1
  813928:	218d883a 	add	r6,r4,r6
  81392c:	39801736 	bltu	r7,r6,81398c <_fpadd_parts+0x1a8>
  813930:	31c06526 	beq	r6,r7,813ac8 <_fpadd_parts+0x2e4>
  813934:	a3000217 	ldw	r12,8(r20)
  813938:	4209883a 	add	r4,r8,r8
  81393c:	00bfffc4 	movi	r2,-1
  813940:	220f803a 	cmpltu	r7,r4,r8
  813944:	4a4b883a 	add	r5,r9,r9
  813948:	394f883a 	add	r7,r7,r5
  81394c:	2095883a 	add	r10,r4,r2
  813950:	3897883a 	add	r11,r7,r2
  813954:	510d803a 	cmpltu	r6,r10,r4
  813958:	6099883a 	add	r12,r12,r2
  81395c:	32d7883a 	add	r11,r6,r11
  813960:	00840034 	movhi	r2,4096
  813964:	10bfffc4 	addi	r2,r2,-1
  813968:	2011883a 	mov	r8,r4
  81396c:	3813883a 	mov	r9,r7
  813970:	a1000315 	stw	r4,12(r20)
  813974:	a1c00415 	stw	r7,16(r20)
  813978:	a3000215 	stw	r12,8(r20)
  81397c:	12c00336 	bltu	r2,r11,81398c <_fpadd_parts+0x1a8>
  813980:	58bfed1e 	bne	r11,r2,813938 <_fpadd_parts+0x154>
  813984:	00bfff84 	movi	r2,-2
  813988:	12bfeb2e 	bgeu	r2,r10,813938 <_fpadd_parts+0x154>
  81398c:	a2800417 	ldw	r10,16(r20)
  813990:	008000c4 	movi	r2,3
  813994:	00c80034 	movhi	r3,8192
  813998:	18ffffc4 	addi	r3,r3,-1
  81399c:	a2400317 	ldw	r9,12(r20)
  8139a0:	a0800015 	stw	r2,0(r20)
  8139a4:	1a802336 	bltu	r3,r10,813a34 <_fpadd_parts+0x250>
  8139a8:	a027883a 	mov	r19,r20
  8139ac:	9805883a 	mov	r2,r19
  8139b0:	ddc00717 	ldw	r23,28(sp)
  8139b4:	dd800617 	ldw	r22,24(sp)
  8139b8:	dd400517 	ldw	r21,20(sp)
  8139bc:	dd000417 	ldw	r20,16(sp)
  8139c0:	dcc00317 	ldw	r19,12(sp)
  8139c4:	dc800217 	ldw	r18,8(sp)
  8139c8:	dc400117 	ldw	r17,4(sp)
  8139cc:	dc000017 	ldw	r16,0(sp)
  8139d0:	dec00804 	addi	sp,sp,32
  8139d4:	f800283a 	ret
  8139d8:	20fff41e 	bne	r4,r3,8139ac <_fpadd_parts+0x1c8>
  8139dc:	31000015 	stw	r4,0(r6)
  8139e0:	98800117 	ldw	r2,4(r19)
  8139e4:	30800115 	stw	r2,4(r6)
  8139e8:	98c00217 	ldw	r3,8(r19)
  8139ec:	30c00215 	stw	r3,8(r6)
  8139f0:	98800317 	ldw	r2,12(r19)
  8139f4:	30800315 	stw	r2,12(r6)
  8139f8:	98c00417 	ldw	r3,16(r19)
  8139fc:	30c00415 	stw	r3,16(r6)
  813a00:	98800117 	ldw	r2,4(r19)
  813a04:	28c00117 	ldw	r3,4(r5)
  813a08:	3027883a 	mov	r19,r6
  813a0c:	10c4703a 	and	r2,r2,r3
  813a10:	30800115 	stw	r2,4(r6)
  813a14:	003fe506 	br	8139ac <_fpadd_parts+0x1c8>
  813a18:	1dc02616 	blt	r3,r23,813ab4 <_fpadd_parts+0x2d0>
  813a1c:	0023883a 	mov	r17,zero
  813a20:	182f883a 	mov	r23,r3
  813a24:	0025883a 	mov	r18,zero
  813a28:	003fa806 	br	8138cc <_fpadd_parts+0xe8>
  813a2c:	a827883a 	mov	r19,r21
  813a30:	003fde06 	br	8139ac <_fpadd_parts+0x1c8>
  813a34:	01800044 	movi	r6,1
  813a38:	500497fa 	slli	r2,r10,31
  813a3c:	4808d07a 	srli	r4,r9,1
  813a40:	518ad83a 	srl	r5,r10,r6
  813a44:	a2000217 	ldw	r8,8(r20)
  813a48:	1108b03a 	or	r4,r2,r4
  813a4c:	0007883a 	mov	r3,zero
  813a50:	4984703a 	and	r2,r9,r6
  813a54:	208cb03a 	or	r6,r4,r2
  813a58:	28ceb03a 	or	r7,r5,r3
  813a5c:	42000044 	addi	r8,r8,1
  813a60:	a027883a 	mov	r19,r20
  813a64:	a1c00415 	stw	r7,16(r20)
  813a68:	a2000215 	stw	r8,8(r20)
  813a6c:	a1800315 	stw	r6,12(r20)
  813a70:	003fce06 	br	8139ac <_fpadd_parts+0x1c8>
  813a74:	8bc5c83a 	sub	r2,r17,r15
  813a78:	8889803a 	cmpltu	r4,r17,r2
  813a7c:	9407c83a 	sub	r3,r18,r16
  813a80:	1909c83a 	sub	r4,r3,r4
  813a84:	100d883a 	mov	r6,r2
  813a88:	200f883a 	mov	r7,r4
  813a8c:	003f9906 	br	8138f4 <_fpadd_parts+0x110>
  813a90:	7c45883a 	add	r2,r15,r17
  813a94:	13c9803a 	cmpltu	r4,r2,r15
  813a98:	8487883a 	add	r3,r16,r18
  813a9c:	20c9883a 	add	r4,r4,r3
  813aa0:	a1400115 	stw	r5,4(r20)
  813aa4:	a5c00215 	stw	r23,8(r20)
  813aa8:	a0800315 	stw	r2,12(r20)
  813aac:	a1000415 	stw	r4,16(r20)
  813ab0:	003fb606 	br	81398c <_fpadd_parts+0x1a8>
  813ab4:	001f883a 	mov	r15,zero
  813ab8:	0021883a 	mov	r16,zero
  813abc:	003f8306 	br	8138cc <_fpadd_parts+0xe8>
  813ac0:	018dc83a 	sub	r6,zero,r6
  813ac4:	003f6706 	br	813864 <_fpadd_parts+0x80>
  813ac8:	00bfff84 	movi	r2,-2
  813acc:	117faf36 	bltu	r2,r5,81398c <_fpadd_parts+0x1a8>
  813ad0:	003f9806 	br	813934 <_fpadd_parts+0x150>
  813ad4:	0005883a 	mov	r2,zero
  813ad8:	1189c83a 	sub	r4,r2,r6
  813adc:	1105803a 	cmpltu	r2,r2,r4
  813ae0:	01cbc83a 	sub	r5,zero,r7
  813ae4:	2885c83a 	sub	r2,r5,r2
  813ae8:	01800044 	movi	r6,1
  813aec:	a1800115 	stw	r6,4(r20)
  813af0:	a5c00215 	stw	r23,8(r20)
  813af4:	a1000315 	stw	r4,12(r20)
  813af8:	a0800415 	stw	r2,16(r20)
  813afc:	003f8206 	br	813908 <_fpadd_parts+0x124>
  813b00:	203f7226 	beq	r4,zero,8138cc <_fpadd_parts+0xe8>
  813b04:	35bff804 	addi	r22,r6,-32
  813b08:	b9af883a 	add	r23,r23,r6
  813b0c:	b0003116 	blt	r22,zero,813bd4 <_fpadd_parts+0x3f0>
  813b10:	959ad83a 	srl	r13,r18,r22
  813b14:	001d883a 	mov	r14,zero
  813b18:	000f883a 	mov	r7,zero
  813b1c:	01000044 	movi	r4,1
  813b20:	0011883a 	mov	r8,zero
  813b24:	b0002516 	blt	r22,zero,813bbc <_fpadd_parts+0x3d8>
  813b28:	2594983a 	sll	r10,r4,r22
  813b2c:	0013883a 	mov	r9,zero
  813b30:	00bfffc4 	movi	r2,-1
  813b34:	4889883a 	add	r4,r9,r2
  813b38:	508b883a 	add	r5,r10,r2
  813b3c:	224d803a 	cmpltu	r6,r4,r9
  813b40:	314b883a 	add	r5,r6,r5
  813b44:	8904703a 	and	r2,r17,r4
  813b48:	9146703a 	and	r3,r18,r5
  813b4c:	10c4b03a 	or	r2,r2,r3
  813b50:	10000226 	beq	r2,zero,813b5c <_fpadd_parts+0x378>
  813b54:	01c00044 	movi	r7,1
  813b58:	0011883a 	mov	r8,zero
  813b5c:	69e2b03a 	or	r17,r13,r7
  813b60:	7224b03a 	or	r18,r14,r8
  813b64:	003f5906 	br	8138cc <_fpadd_parts+0xe8>
  813b68:	8407883a 	add	r3,r16,r16
  813b6c:	008007c4 	movi	r2,31
  813b70:	1185c83a 	sub	r2,r2,r6
  813b74:	1886983a 	sll	r3,r3,r2
  813b78:	7996d83a 	srl	r11,r15,r6
  813b7c:	8198d83a 	srl	r12,r16,r6
  813b80:	1ad6b03a 	or	r11,r3,r11
  813b84:	003f3e06 	br	813880 <_fpadd_parts+0x9c>
  813b88:	2006d07a 	srli	r3,r4,1
  813b8c:	008007c4 	movi	r2,31
  813b90:	1185c83a 	sub	r2,r2,r6
  813b94:	1890d83a 	srl	r8,r3,r2
  813b98:	218e983a 	sll	r7,r4,r6
  813b9c:	003f3e06 	br	813898 <_fpadd_parts+0xb4>
  813ba0:	113f821e 	bne	r2,r4,8139ac <_fpadd_parts+0x1c8>
  813ba4:	28c00117 	ldw	r3,4(r5)
  813ba8:	98800117 	ldw	r2,4(r19)
  813bac:	10ff7f26 	beq	r2,r3,8139ac <_fpadd_parts+0x1c8>
  813bb0:	04c020f4 	movhi	r19,131
  813bb4:	9ce2ba04 	addi	r19,r19,-29976
  813bb8:	003f7c06 	br	8139ac <_fpadd_parts+0x1c8>
  813bbc:	2006d07a 	srli	r3,r4,1
  813bc0:	008007c4 	movi	r2,31
  813bc4:	1185c83a 	sub	r2,r2,r6
  813bc8:	1894d83a 	srl	r10,r3,r2
  813bcc:	2192983a 	sll	r9,r4,r6
  813bd0:	003fd706 	br	813b30 <_fpadd_parts+0x34c>
  813bd4:	9487883a 	add	r3,r18,r18
  813bd8:	008007c4 	movi	r2,31
  813bdc:	1185c83a 	sub	r2,r2,r6
  813be0:	1886983a 	sll	r3,r3,r2
  813be4:	899ad83a 	srl	r13,r17,r6
  813be8:	919cd83a 	srl	r14,r18,r6
  813bec:	1b5ab03a 	or	r13,r3,r13
  813bf0:	003fc906 	br	813b18 <_fpadd_parts+0x334>

00813bf4 <__subdf3>:
  813bf4:	deffea04 	addi	sp,sp,-88
  813bf8:	dcc01415 	stw	r19,80(sp)
  813bfc:	dcc00404 	addi	r19,sp,16
  813c00:	2011883a 	mov	r8,r4
  813c04:	2813883a 	mov	r9,r5
  813c08:	dc401315 	stw	r17,76(sp)
  813c0c:	d809883a 	mov	r4,sp
  813c10:	980b883a 	mov	r5,r19
  813c14:	dc400904 	addi	r17,sp,36
  813c18:	dfc01515 	stw	ra,84(sp)
  813c1c:	da400115 	stw	r9,4(sp)
  813c20:	d9c00315 	stw	r7,12(sp)
  813c24:	da000015 	stw	r8,0(sp)
  813c28:	d9800215 	stw	r6,8(sp)
  813c2c:	0814df40 	call	814df4 <__unpack_d>
  813c30:	d9000204 	addi	r4,sp,8
  813c34:	880b883a 	mov	r5,r17
  813c38:	0814df40 	call	814df4 <__unpack_d>
  813c3c:	d8800a17 	ldw	r2,40(sp)
  813c40:	880b883a 	mov	r5,r17
  813c44:	9809883a 	mov	r4,r19
  813c48:	d9800e04 	addi	r6,sp,56
  813c4c:	1080005c 	xori	r2,r2,1
  813c50:	d8800a15 	stw	r2,40(sp)
  813c54:	08137e40 	call	8137e4 <_fpadd_parts>
  813c58:	1009883a 	mov	r4,r2
  813c5c:	0814ae00 	call	814ae0 <__pack_d>
  813c60:	dfc01517 	ldw	ra,84(sp)
  813c64:	dcc01417 	ldw	r19,80(sp)
  813c68:	dc401317 	ldw	r17,76(sp)
  813c6c:	dec01604 	addi	sp,sp,88
  813c70:	f800283a 	ret

00813c74 <__adddf3>:
  813c74:	deffea04 	addi	sp,sp,-88
  813c78:	dcc01415 	stw	r19,80(sp)
  813c7c:	dcc00404 	addi	r19,sp,16
  813c80:	2011883a 	mov	r8,r4
  813c84:	2813883a 	mov	r9,r5
  813c88:	dc401315 	stw	r17,76(sp)
  813c8c:	d809883a 	mov	r4,sp
  813c90:	980b883a 	mov	r5,r19
  813c94:	dc400904 	addi	r17,sp,36
  813c98:	dfc01515 	stw	ra,84(sp)
  813c9c:	da400115 	stw	r9,4(sp)
  813ca0:	d9c00315 	stw	r7,12(sp)
  813ca4:	da000015 	stw	r8,0(sp)
  813ca8:	d9800215 	stw	r6,8(sp)
  813cac:	0814df40 	call	814df4 <__unpack_d>
  813cb0:	d9000204 	addi	r4,sp,8
  813cb4:	880b883a 	mov	r5,r17
  813cb8:	0814df40 	call	814df4 <__unpack_d>
  813cbc:	d9800e04 	addi	r6,sp,56
  813cc0:	9809883a 	mov	r4,r19
  813cc4:	880b883a 	mov	r5,r17
  813cc8:	08137e40 	call	8137e4 <_fpadd_parts>
  813ccc:	1009883a 	mov	r4,r2
  813cd0:	0814ae00 	call	814ae0 <__pack_d>
  813cd4:	dfc01517 	ldw	ra,84(sp)
  813cd8:	dcc01417 	ldw	r19,80(sp)
  813cdc:	dc401317 	ldw	r17,76(sp)
  813ce0:	dec01604 	addi	sp,sp,88
  813ce4:	f800283a 	ret

00813ce8 <__muldf3>:
  813ce8:	deffe004 	addi	sp,sp,-128
  813cec:	dc401815 	stw	r17,96(sp)
  813cf0:	dc400404 	addi	r17,sp,16
  813cf4:	2011883a 	mov	r8,r4
  813cf8:	2813883a 	mov	r9,r5
  813cfc:	dc001715 	stw	r16,92(sp)
  813d00:	d809883a 	mov	r4,sp
  813d04:	880b883a 	mov	r5,r17
  813d08:	dc000904 	addi	r16,sp,36
  813d0c:	dfc01f15 	stw	ra,124(sp)
  813d10:	da400115 	stw	r9,4(sp)
  813d14:	d9c00315 	stw	r7,12(sp)
  813d18:	da000015 	stw	r8,0(sp)
  813d1c:	d9800215 	stw	r6,8(sp)
  813d20:	ddc01e15 	stw	r23,120(sp)
  813d24:	dd801d15 	stw	r22,116(sp)
  813d28:	dd401c15 	stw	r21,112(sp)
  813d2c:	dd001b15 	stw	r20,108(sp)
  813d30:	dcc01a15 	stw	r19,104(sp)
  813d34:	dc801915 	stw	r18,100(sp)
  813d38:	0814df40 	call	814df4 <__unpack_d>
  813d3c:	d9000204 	addi	r4,sp,8
  813d40:	800b883a 	mov	r5,r16
  813d44:	0814df40 	call	814df4 <__unpack_d>
  813d48:	d9000417 	ldw	r4,16(sp)
  813d4c:	00800044 	movi	r2,1
  813d50:	1100102e 	bgeu	r2,r4,813d94 <__muldf3+0xac>
  813d54:	d8c00917 	ldw	r3,36(sp)
  813d58:	10c0062e 	bgeu	r2,r3,813d74 <__muldf3+0x8c>
  813d5c:	00800104 	movi	r2,4
  813d60:	20800a26 	beq	r4,r2,813d8c <__muldf3+0xa4>
  813d64:	1880cc26 	beq	r3,r2,814098 <__muldf3+0x3b0>
  813d68:	00800084 	movi	r2,2
  813d6c:	20800926 	beq	r4,r2,813d94 <__muldf3+0xac>
  813d70:	1880191e 	bne	r3,r2,813dd8 <__muldf3+0xf0>
  813d74:	d8c00a17 	ldw	r3,40(sp)
  813d78:	d8800517 	ldw	r2,20(sp)
  813d7c:	8009883a 	mov	r4,r16
  813d80:	10c4c03a 	cmpne	r2,r2,r3
  813d84:	d8800a15 	stw	r2,40(sp)
  813d88:	00000706 	br	813da8 <__muldf3+0xc0>
  813d8c:	00800084 	movi	r2,2
  813d90:	1880c326 	beq	r3,r2,8140a0 <__muldf3+0x3b8>
  813d94:	d8800517 	ldw	r2,20(sp)
  813d98:	d8c00a17 	ldw	r3,40(sp)
  813d9c:	8809883a 	mov	r4,r17
  813da0:	10c4c03a 	cmpne	r2,r2,r3
  813da4:	d8800515 	stw	r2,20(sp)
  813da8:	0814ae00 	call	814ae0 <__pack_d>
  813dac:	dfc01f17 	ldw	ra,124(sp)
  813db0:	ddc01e17 	ldw	r23,120(sp)
  813db4:	dd801d17 	ldw	r22,116(sp)
  813db8:	dd401c17 	ldw	r21,112(sp)
  813dbc:	dd001b17 	ldw	r20,108(sp)
  813dc0:	dcc01a17 	ldw	r19,104(sp)
  813dc4:	dc801917 	ldw	r18,100(sp)
  813dc8:	dc401817 	ldw	r17,96(sp)
  813dcc:	dc001717 	ldw	r16,92(sp)
  813dd0:	dec02004 	addi	sp,sp,128
  813dd4:	f800283a 	ret
  813dd8:	dd800717 	ldw	r22,28(sp)
  813ddc:	dc800c17 	ldw	r18,48(sp)
  813de0:	002b883a 	mov	r21,zero
  813de4:	0023883a 	mov	r17,zero
  813de8:	a80b883a 	mov	r5,r21
  813dec:	b00d883a 	mov	r6,r22
  813df0:	880f883a 	mov	r7,r17
  813df4:	ddc00817 	ldw	r23,32(sp)
  813df8:	dcc00d17 	ldw	r19,52(sp)
  813dfc:	9009883a 	mov	r4,r18
  813e00:	08146cc0 	call	8146cc <__muldi3>
  813e04:	001b883a 	mov	r13,zero
  813e08:	680f883a 	mov	r7,r13
  813e0c:	b009883a 	mov	r4,r22
  813e10:	000b883a 	mov	r5,zero
  813e14:	980d883a 	mov	r6,r19
  813e18:	b82d883a 	mov	r22,r23
  813e1c:	002f883a 	mov	r23,zero
  813e20:	db401615 	stw	r13,88(sp)
  813e24:	d8801315 	stw	r2,76(sp)
  813e28:	d8c01415 	stw	r3,80(sp)
  813e2c:	dcc01515 	stw	r19,84(sp)
  813e30:	08146cc0 	call	8146cc <__muldi3>
  813e34:	b00d883a 	mov	r6,r22
  813e38:	000b883a 	mov	r5,zero
  813e3c:	9009883a 	mov	r4,r18
  813e40:	b80f883a 	mov	r7,r23
  813e44:	1021883a 	mov	r16,r2
  813e48:	1823883a 	mov	r17,r3
  813e4c:	08146cc0 	call	8146cc <__muldi3>
  813e50:	8085883a 	add	r2,r16,r2
  813e54:	140d803a 	cmpltu	r6,r2,r16
  813e58:	88c7883a 	add	r3,r17,r3
  813e5c:	30cd883a 	add	r6,r6,r3
  813e60:	1029883a 	mov	r20,r2
  813e64:	302b883a 	mov	r21,r6
  813e68:	da801317 	ldw	r10,76(sp)
  813e6c:	dac01417 	ldw	r11,80(sp)
  813e70:	db001517 	ldw	r12,84(sp)
  813e74:	db401617 	ldw	r13,88(sp)
  813e78:	3440612e 	bgeu	r6,r17,814000 <__muldf3+0x318>
  813e7c:	0009883a 	mov	r4,zero
  813e80:	5105883a 	add	r2,r10,r4
  813e84:	128d803a 	cmpltu	r6,r2,r10
  813e88:	5d07883a 	add	r3,r11,r20
  813e8c:	30cd883a 	add	r6,r6,r3
  813e90:	0021883a 	mov	r16,zero
  813e94:	04400044 	movi	r17,1
  813e98:	1025883a 	mov	r18,r2
  813e9c:	3027883a 	mov	r19,r6
  813ea0:	32c06236 	bltu	r6,r11,81402c <__muldf3+0x344>
  813ea4:	59807a26 	beq	r11,r6,814090 <__muldf3+0x3a8>
  813ea8:	680b883a 	mov	r5,r13
  813eac:	b80f883a 	mov	r7,r23
  813eb0:	6009883a 	mov	r4,r12
  813eb4:	b00d883a 	mov	r6,r22
  813eb8:	08146cc0 	call	8146cc <__muldi3>
  813ebc:	1009883a 	mov	r4,r2
  813ec0:	000f883a 	mov	r7,zero
  813ec4:	1545883a 	add	r2,r2,r21
  813ec8:	1111803a 	cmpltu	r8,r2,r4
  813ecc:	19c7883a 	add	r3,r3,r7
  813ed0:	40c7883a 	add	r3,r8,r3
  813ed4:	88cb883a 	add	r5,r17,r3
  813ed8:	d8c00617 	ldw	r3,24(sp)
  813edc:	8089883a 	add	r4,r16,r2
  813ee0:	d8800b17 	ldw	r2,44(sp)
  813ee4:	18c00104 	addi	r3,r3,4
  813ee8:	240d803a 	cmpltu	r6,r4,r16
  813eec:	10c7883a 	add	r3,r2,r3
  813ef0:	2013883a 	mov	r9,r4
  813ef4:	d8800a17 	ldw	r2,40(sp)
  813ef8:	d9000517 	ldw	r4,20(sp)
  813efc:	314d883a 	add	r6,r6,r5
  813f00:	3015883a 	mov	r10,r6
  813f04:	2088c03a 	cmpne	r4,r4,r2
  813f08:	00880034 	movhi	r2,8192
  813f0c:	10bfffc4 	addi	r2,r2,-1
  813f10:	d9000f15 	stw	r4,60(sp)
  813f14:	d8c01015 	stw	r3,64(sp)
  813f18:	1180162e 	bgeu	r2,r6,813f74 <__muldf3+0x28c>
  813f1c:	1811883a 	mov	r8,r3
  813f20:	101f883a 	mov	r15,r2
  813f24:	980497fa 	slli	r2,r19,31
  813f28:	9016d07a 	srli	r11,r18,1
  813f2c:	500697fa 	slli	r3,r10,31
  813f30:	480cd07a 	srli	r6,r9,1
  813f34:	500ed07a 	srli	r7,r10,1
  813f38:	12d6b03a 	or	r11,r2,r11
  813f3c:	00800044 	movi	r2,1
  813f40:	198cb03a 	or	r6,r3,r6
  813f44:	4888703a 	and	r4,r9,r2
  813f48:	9818d07a 	srli	r12,r19,1
  813f4c:	001b883a 	mov	r13,zero
  813f50:	03a00034 	movhi	r14,32768
  813f54:	3013883a 	mov	r9,r6
  813f58:	3815883a 	mov	r10,r7
  813f5c:	4091883a 	add	r8,r8,r2
  813f60:	20000226 	beq	r4,zero,813f6c <__muldf3+0x284>
  813f64:	5b64b03a 	or	r18,r11,r13
  813f68:	63a6b03a 	or	r19,r12,r14
  813f6c:	7abfed36 	bltu	r15,r10,813f24 <__muldf3+0x23c>
  813f70:	da001015 	stw	r8,64(sp)
  813f74:	00840034 	movhi	r2,4096
  813f78:	10bfffc4 	addi	r2,r2,-1
  813f7c:	12801436 	bltu	r2,r10,813fd0 <__muldf3+0x2e8>
  813f80:	da001017 	ldw	r8,64(sp)
  813f84:	101f883a 	mov	r15,r2
  813f88:	4a45883a 	add	r2,r9,r9
  813f8c:	124d803a 	cmpltu	r6,r2,r9
  813f90:	5287883a 	add	r3,r10,r10
  813f94:	9497883a 	add	r11,r18,r18
  813f98:	5c8f803a 	cmpltu	r7,r11,r18
  813f9c:	9cd9883a 	add	r12,r19,r19
  813fa0:	01000044 	movi	r4,1
  813fa4:	30cd883a 	add	r6,r6,r3
  813fa8:	3b0f883a 	add	r7,r7,r12
  813fac:	423fffc4 	addi	r8,r8,-1
  813fb0:	1013883a 	mov	r9,r2
  813fb4:	3015883a 	mov	r10,r6
  813fb8:	111ab03a 	or	r13,r2,r4
  813fbc:	98003016 	blt	r19,zero,814080 <__muldf3+0x398>
  813fc0:	5825883a 	mov	r18,r11
  813fc4:	3827883a 	mov	r19,r7
  813fc8:	7abfef2e 	bgeu	r15,r10,813f88 <__muldf3+0x2a0>
  813fcc:	da001015 	stw	r8,64(sp)
  813fd0:	00803fc4 	movi	r2,255
  813fd4:	488e703a 	and	r7,r9,r2
  813fd8:	00802004 	movi	r2,128
  813fdc:	0007883a 	mov	r3,zero
  813fe0:	0011883a 	mov	r8,zero
  813fe4:	38801826 	beq	r7,r2,814048 <__muldf3+0x360>
  813fe8:	008000c4 	movi	r2,3
  813fec:	d9000e04 	addi	r4,sp,56
  813ff0:	da801215 	stw	r10,72(sp)
  813ff4:	d8800e15 	stw	r2,56(sp)
  813ff8:	da401115 	stw	r9,68(sp)
  813ffc:	003f6a06 	br	813da8 <__muldf3+0xc0>
  814000:	89802126 	beq	r17,r6,814088 <__muldf3+0x3a0>
  814004:	0009883a 	mov	r4,zero
  814008:	5105883a 	add	r2,r10,r4
  81400c:	128d803a 	cmpltu	r6,r2,r10
  814010:	5d07883a 	add	r3,r11,r20
  814014:	30cd883a 	add	r6,r6,r3
  814018:	0021883a 	mov	r16,zero
  81401c:	0023883a 	mov	r17,zero
  814020:	1025883a 	mov	r18,r2
  814024:	3027883a 	mov	r19,r6
  814028:	32ff9e2e 	bgeu	r6,r11,813ea4 <__muldf3+0x1bc>
  81402c:	00800044 	movi	r2,1
  814030:	8089883a 	add	r4,r16,r2
  814034:	240d803a 	cmpltu	r6,r4,r16
  814038:	344d883a 	add	r6,r6,r17
  81403c:	2021883a 	mov	r16,r4
  814040:	3023883a 	mov	r17,r6
  814044:	003f9806 	br	813ea8 <__muldf3+0x1c0>
  814048:	403fe71e 	bne	r8,zero,813fe8 <__muldf3+0x300>
  81404c:	01004004 	movi	r4,256
  814050:	4904703a 	and	r2,r9,r4
  814054:	10c4b03a 	or	r2,r2,r3
  814058:	103fe31e 	bne	r2,zero,813fe8 <__muldf3+0x300>
  81405c:	94c4b03a 	or	r2,r18,r19
  814060:	103fe126 	beq	r2,zero,813fe8 <__muldf3+0x300>
  814064:	49c5883a 	add	r2,r9,r7
  814068:	1251803a 	cmpltu	r8,r2,r9
  81406c:	4291883a 	add	r8,r8,r10
  814070:	013fc004 	movi	r4,-256
  814074:	1112703a 	and	r9,r2,r4
  814078:	4015883a 	mov	r10,r8
  81407c:	003fda06 	br	813fe8 <__muldf3+0x300>
  814080:	6813883a 	mov	r9,r13
  814084:	003fce06 	br	813fc0 <__muldf3+0x2d8>
  814088:	143f7c36 	bltu	r2,r16,813e7c <__muldf3+0x194>
  81408c:	003fdd06 	br	814004 <__muldf3+0x31c>
  814090:	12bf852e 	bgeu	r2,r10,813ea8 <__muldf3+0x1c0>
  814094:	003fe506 	br	81402c <__muldf3+0x344>
  814098:	00800084 	movi	r2,2
  81409c:	20bf351e 	bne	r4,r2,813d74 <__muldf3+0x8c>
  8140a0:	010020f4 	movhi	r4,131
  8140a4:	2122ba04 	addi	r4,r4,-29976
  8140a8:	003f3f06 	br	813da8 <__muldf3+0xc0>

008140ac <__divdf3>:
  8140ac:	deffed04 	addi	sp,sp,-76
  8140b0:	dcc01115 	stw	r19,68(sp)
  8140b4:	dcc00404 	addi	r19,sp,16
  8140b8:	2011883a 	mov	r8,r4
  8140bc:	2813883a 	mov	r9,r5
  8140c0:	dc000e15 	stw	r16,56(sp)
  8140c4:	d809883a 	mov	r4,sp
  8140c8:	980b883a 	mov	r5,r19
  8140cc:	dc000904 	addi	r16,sp,36
  8140d0:	dfc01215 	stw	ra,72(sp)
  8140d4:	da400115 	stw	r9,4(sp)
  8140d8:	d9c00315 	stw	r7,12(sp)
  8140dc:	da000015 	stw	r8,0(sp)
  8140e0:	d9800215 	stw	r6,8(sp)
  8140e4:	dc801015 	stw	r18,64(sp)
  8140e8:	dc400f15 	stw	r17,60(sp)
  8140ec:	0814df40 	call	814df4 <__unpack_d>
  8140f0:	d9000204 	addi	r4,sp,8
  8140f4:	800b883a 	mov	r5,r16
  8140f8:	0814df40 	call	814df4 <__unpack_d>
  8140fc:	d9000417 	ldw	r4,16(sp)
  814100:	00800044 	movi	r2,1
  814104:	11000b2e 	bgeu	r2,r4,814134 <__divdf3+0x88>
  814108:	d9400917 	ldw	r5,36(sp)
  81410c:	1140762e 	bgeu	r2,r5,8142e8 <__divdf3+0x23c>
  814110:	d8800517 	ldw	r2,20(sp)
  814114:	d8c00a17 	ldw	r3,40(sp)
  814118:	01800104 	movi	r6,4
  81411c:	10c4f03a 	xor	r2,r2,r3
  814120:	d8800515 	stw	r2,20(sp)
  814124:	21800226 	beq	r4,r6,814130 <__divdf3+0x84>
  814128:	00800084 	movi	r2,2
  81412c:	2080141e 	bne	r4,r2,814180 <__divdf3+0xd4>
  814130:	29000926 	beq	r5,r4,814158 <__divdf3+0xac>
  814134:	9809883a 	mov	r4,r19
  814138:	0814ae00 	call	814ae0 <__pack_d>
  81413c:	dfc01217 	ldw	ra,72(sp)
  814140:	dcc01117 	ldw	r19,68(sp)
  814144:	dc801017 	ldw	r18,64(sp)
  814148:	dc400f17 	ldw	r17,60(sp)
  81414c:	dc000e17 	ldw	r16,56(sp)
  814150:	dec01304 	addi	sp,sp,76
  814154:	f800283a 	ret
  814158:	010020f4 	movhi	r4,131
  81415c:	2122ba04 	addi	r4,r4,-29976
  814160:	0814ae00 	call	814ae0 <__pack_d>
  814164:	dfc01217 	ldw	ra,72(sp)
  814168:	dcc01117 	ldw	r19,68(sp)
  81416c:	dc801017 	ldw	r18,64(sp)
  814170:	dc400f17 	ldw	r17,60(sp)
  814174:	dc000e17 	ldw	r16,56(sp)
  814178:	dec01304 	addi	sp,sp,76
  81417c:	f800283a 	ret
  814180:	29805b26 	beq	r5,r6,8142f0 <__divdf3+0x244>
  814184:	28802d26 	beq	r5,r2,81423c <__divdf3+0x190>
  814188:	d8c00617 	ldw	r3,24(sp)
  81418c:	d8800b17 	ldw	r2,44(sp)
  814190:	d9c00817 	ldw	r7,32(sp)
  814194:	dc400d17 	ldw	r17,52(sp)
  814198:	188bc83a 	sub	r5,r3,r2
  81419c:	d9800717 	ldw	r6,28(sp)
  8141a0:	dc000c17 	ldw	r16,48(sp)
  8141a4:	d9400615 	stw	r5,24(sp)
  8141a8:	3c403836 	bltu	r7,r17,81428c <__divdf3+0x1e0>
  8141ac:	89c03626 	beq	r17,r7,814288 <__divdf3+0x1dc>
  8141b0:	0015883a 	mov	r10,zero
  8141b4:	001d883a 	mov	r14,zero
  8141b8:	02c40034 	movhi	r11,4096
  8141bc:	001f883a 	mov	r15,zero
  8141c0:	003f883a 	mov	ra,zero
  8141c4:	04800f44 	movi	r18,61
  8141c8:	00000f06 	br	814208 <__divdf3+0x15c>
  8141cc:	601d883a 	mov	r14,r12
  8141d0:	681f883a 	mov	r15,r13
  8141d4:	400d883a 	mov	r6,r8
  8141d8:	100f883a 	mov	r7,r2
  8141dc:	3191883a 	add	r8,r6,r6
  8141e0:	5808d07a 	srli	r4,r11,1
  8141e4:	4185803a 	cmpltu	r2,r8,r6
  8141e8:	39d3883a 	add	r9,r7,r7
  8141ec:	28c6b03a 	or	r3,r5,r3
  8141f0:	1245883a 	add	r2,r2,r9
  8141f4:	1815883a 	mov	r10,r3
  8141f8:	2017883a 	mov	r11,r4
  8141fc:	400d883a 	mov	r6,r8
  814200:	100f883a 	mov	r7,r2
  814204:	fc801726 	beq	ra,r18,814264 <__divdf3+0x1b8>
  814208:	580a97fa 	slli	r5,r11,31
  81420c:	5006d07a 	srli	r3,r10,1
  814210:	ffc00044 	addi	ra,ra,1
  814214:	3c7ff136 	bltu	r7,r17,8141dc <__divdf3+0x130>
  814218:	3411c83a 	sub	r8,r6,r16
  81421c:	3205803a 	cmpltu	r2,r6,r8
  814220:	3c53c83a 	sub	r9,r7,r17
  814224:	7298b03a 	or	r12,r14,r10
  814228:	7adab03a 	or	r13,r15,r11
  81422c:	4885c83a 	sub	r2,r9,r2
  814230:	89ffe61e 	bne	r17,r7,8141cc <__divdf3+0x120>
  814234:	343fe936 	bltu	r6,r16,8141dc <__divdf3+0x130>
  814238:	003fe406 	br	8141cc <__divdf3+0x120>
  81423c:	9809883a 	mov	r4,r19
  814240:	d9800415 	stw	r6,16(sp)
  814244:	0814ae00 	call	814ae0 <__pack_d>
  814248:	dfc01217 	ldw	ra,72(sp)
  81424c:	dcc01117 	ldw	r19,68(sp)
  814250:	dc801017 	ldw	r18,64(sp)
  814254:	dc400f17 	ldw	r17,60(sp)
  814258:	dc000e17 	ldw	r16,56(sp)
  81425c:	dec01304 	addi	sp,sp,76
  814260:	f800283a 	ret
  814264:	00803fc4 	movi	r2,255
  814268:	7090703a 	and	r8,r14,r2
  81426c:	00802004 	movi	r2,128
  814270:	0007883a 	mov	r3,zero
  814274:	0013883a 	mov	r9,zero
  814278:	40800d26 	beq	r8,r2,8142b0 <__divdf3+0x204>
  81427c:	dbc00815 	stw	r15,32(sp)
  814280:	db800715 	stw	r14,28(sp)
  814284:	003fab06 	br	814134 <__divdf3+0x88>
  814288:	343fc92e 	bgeu	r6,r16,8141b0 <__divdf3+0x104>
  81428c:	3185883a 	add	r2,r6,r6
  814290:	1189803a 	cmpltu	r4,r2,r6
  814294:	39c7883a 	add	r3,r7,r7
  814298:	20c9883a 	add	r4,r4,r3
  81429c:	297fffc4 	addi	r5,r5,-1
  8142a0:	100d883a 	mov	r6,r2
  8142a4:	200f883a 	mov	r7,r4
  8142a8:	d9400615 	stw	r5,24(sp)
  8142ac:	003fc006 	br	8141b0 <__divdf3+0x104>
  8142b0:	483ff21e 	bne	r9,zero,81427c <__divdf3+0x1d0>
  8142b4:	01004004 	movi	r4,256
  8142b8:	7104703a 	and	r2,r14,r4
  8142bc:	10c4b03a 	or	r2,r2,r3
  8142c0:	103fee1e 	bne	r2,zero,81427c <__divdf3+0x1d0>
  8142c4:	31c4b03a 	or	r2,r6,r7
  8142c8:	103fec26 	beq	r2,zero,81427c <__divdf3+0x1d0>
  8142cc:	7205883a 	add	r2,r14,r8
  8142d0:	1391803a 	cmpltu	r8,r2,r14
  8142d4:	43d1883a 	add	r8,r8,r15
  8142d8:	013fc004 	movi	r4,-256
  8142dc:	111c703a 	and	r14,r2,r4
  8142e0:	401f883a 	mov	r15,r8
  8142e4:	003fe506 	br	81427c <__divdf3+0x1d0>
  8142e8:	8009883a 	mov	r4,r16
  8142ec:	003f9206 	br	814138 <__divdf3+0x8c>
  8142f0:	9809883a 	mov	r4,r19
  8142f4:	d8000715 	stw	zero,28(sp)
  8142f8:	d8000815 	stw	zero,32(sp)
  8142fc:	d8000615 	stw	zero,24(sp)
  814300:	003f8d06 	br	814138 <__divdf3+0x8c>

00814304 <__floatsidf>:
  814304:	2006d7fa 	srli	r3,r4,31
  814308:	defff604 	addi	sp,sp,-40
  81430c:	008000c4 	movi	r2,3
  814310:	dfc00915 	stw	ra,36(sp)
  814314:	dcc00815 	stw	r19,32(sp)
  814318:	dc800715 	stw	r18,28(sp)
  81431c:	dc400615 	stw	r17,24(sp)
  814320:	dc000515 	stw	r16,20(sp)
  814324:	d8800015 	stw	r2,0(sp)
  814328:	d8c00115 	stw	r3,4(sp)
  81432c:	20000f1e 	bne	r4,zero,81436c <__floatsidf+0x68>
  814330:	00800084 	movi	r2,2
  814334:	d8800015 	stw	r2,0(sp)
  814338:	d809883a 	mov	r4,sp
  81433c:	0814ae00 	call	814ae0 <__pack_d>
  814340:	1009883a 	mov	r4,r2
  814344:	180b883a 	mov	r5,r3
  814348:	2005883a 	mov	r2,r4
  81434c:	2807883a 	mov	r3,r5
  814350:	dfc00917 	ldw	ra,36(sp)
  814354:	dcc00817 	ldw	r19,32(sp)
  814358:	dc800717 	ldw	r18,28(sp)
  81435c:	dc400617 	ldw	r17,24(sp)
  814360:	dc000517 	ldw	r16,20(sp)
  814364:	dec00a04 	addi	sp,sp,40
  814368:	f800283a 	ret
  81436c:	00800f04 	movi	r2,60
  814370:	1807003a 	cmpeq	r3,r3,zero
  814374:	d8800215 	stw	r2,8(sp)
  814378:	18001126 	beq	r3,zero,8143c0 <__floatsidf+0xbc>
  81437c:	0027883a 	mov	r19,zero
  814380:	2025883a 	mov	r18,r4
  814384:	d9000315 	stw	r4,12(sp)
  814388:	dcc00415 	stw	r19,16(sp)
  81438c:	08147640 	call	814764 <__clzsi2>
  814390:	11000744 	addi	r4,r2,29
  814394:	013fe80e 	bge	zero,r4,814338 <__floatsidf+0x34>
  814398:	10bfff44 	addi	r2,r2,-3
  81439c:	10000c16 	blt	r2,zero,8143d0 <__floatsidf+0xcc>
  8143a0:	90a2983a 	sll	r17,r18,r2
  8143a4:	0021883a 	mov	r16,zero
  8143a8:	d8800217 	ldw	r2,8(sp)
  8143ac:	dc400415 	stw	r17,16(sp)
  8143b0:	dc000315 	stw	r16,12(sp)
  8143b4:	1105c83a 	sub	r2,r2,r4
  8143b8:	d8800215 	stw	r2,8(sp)
  8143bc:	003fde06 	br	814338 <__floatsidf+0x34>
  8143c0:	00a00034 	movhi	r2,32768
  8143c4:	20800a26 	beq	r4,r2,8143f0 <__floatsidf+0xec>
  8143c8:	0109c83a 	sub	r4,zero,r4
  8143cc:	003feb06 	br	81437c <__floatsidf+0x78>
  8143d0:	9006d07a 	srli	r3,r18,1
  8143d4:	008007c4 	movi	r2,31
  8143d8:	1105c83a 	sub	r2,r2,r4
  8143dc:	1886d83a 	srl	r3,r3,r2
  8143e0:	9922983a 	sll	r17,r19,r4
  8143e4:	9120983a 	sll	r16,r18,r4
  8143e8:	1c62b03a 	or	r17,r3,r17
  8143ec:	003fee06 	br	8143a8 <__floatsidf+0xa4>
  8143f0:	0009883a 	mov	r4,zero
  8143f4:	01707834 	movhi	r5,49632
  8143f8:	003fd306 	br	814348 <__floatsidf+0x44>

008143fc <__fixdfsi>:
  8143fc:	defff804 	addi	sp,sp,-32
  814400:	2005883a 	mov	r2,r4
  814404:	2807883a 	mov	r3,r5
  814408:	d809883a 	mov	r4,sp
  81440c:	d9400204 	addi	r5,sp,8
  814410:	d8c00115 	stw	r3,4(sp)
  814414:	d8800015 	stw	r2,0(sp)
  814418:	dfc00715 	stw	ra,28(sp)
  81441c:	0814df40 	call	814df4 <__unpack_d>
  814420:	d8c00217 	ldw	r3,8(sp)
  814424:	00800084 	movi	r2,2
  814428:	1880051e 	bne	r3,r2,814440 <__fixdfsi+0x44>
  81442c:	0007883a 	mov	r3,zero
  814430:	1805883a 	mov	r2,r3
  814434:	dfc00717 	ldw	ra,28(sp)
  814438:	dec00804 	addi	sp,sp,32
  81443c:	f800283a 	ret
  814440:	00800044 	movi	r2,1
  814444:	10fff92e 	bgeu	r2,r3,81442c <__fixdfsi+0x30>
  814448:	00800104 	movi	r2,4
  81444c:	18800426 	beq	r3,r2,814460 <__fixdfsi+0x64>
  814450:	d8c00417 	ldw	r3,16(sp)
  814454:	183ff516 	blt	r3,zero,81442c <__fixdfsi+0x30>
  814458:	00800784 	movi	r2,30
  81445c:	10c0080e 	bge	r2,r3,814480 <__fixdfsi+0x84>
  814460:	d8800317 	ldw	r2,12(sp)
  814464:	1000121e 	bne	r2,zero,8144b0 <__fixdfsi+0xb4>
  814468:	00e00034 	movhi	r3,32768
  81446c:	18ffffc4 	addi	r3,r3,-1
  814470:	1805883a 	mov	r2,r3
  814474:	dfc00717 	ldw	ra,28(sp)
  814478:	dec00804 	addi	sp,sp,32
  81447c:	f800283a 	ret
  814480:	00800f04 	movi	r2,60
  814484:	10d1c83a 	sub	r8,r2,r3
  814488:	40bff804 	addi	r2,r8,-32
  81448c:	d9800517 	ldw	r6,20(sp)
  814490:	d9c00617 	ldw	r7,24(sp)
  814494:	10000816 	blt	r2,zero,8144b8 <__fixdfsi+0xbc>
  814498:	3888d83a 	srl	r4,r7,r2
  81449c:	d8800317 	ldw	r2,12(sp)
  8144a0:	2007883a 	mov	r3,r4
  8144a4:	103fe226 	beq	r2,zero,814430 <__fixdfsi+0x34>
  8144a8:	0107c83a 	sub	r3,zero,r4
  8144ac:	003fe006 	br	814430 <__fixdfsi+0x34>
  8144b0:	00e00034 	movhi	r3,32768
  8144b4:	003fde06 	br	814430 <__fixdfsi+0x34>
  8144b8:	39c7883a 	add	r3,r7,r7
  8144bc:	008007c4 	movi	r2,31
  8144c0:	1205c83a 	sub	r2,r2,r8
  8144c4:	1886983a 	sll	r3,r3,r2
  8144c8:	3208d83a 	srl	r4,r6,r8
  8144cc:	1908b03a 	or	r4,r3,r4
  8144d0:	003ff206 	br	81449c <__fixdfsi+0xa0>

008144d4 <__make_dp>:
  8144d4:	defff904 	addi	sp,sp,-28
  8144d8:	d8c00717 	ldw	r3,28(sp)
  8144dc:	d9000015 	stw	r4,0(sp)
  8144e0:	d809883a 	mov	r4,sp
  8144e4:	dfc00515 	stw	ra,20(sp)
  8144e8:	d9c00615 	stw	r7,24(sp)
  8144ec:	d9400115 	stw	r5,4(sp)
  8144f0:	d9800215 	stw	r6,8(sp)
  8144f4:	d8c00415 	stw	r3,16(sp)
  8144f8:	d9c00315 	stw	r7,12(sp)
  8144fc:	0814ae00 	call	814ae0 <__pack_d>
  814500:	dfc00517 	ldw	ra,20(sp)
  814504:	dec00704 	addi	sp,sp,28
  814508:	f800283a 	ret

0081450c <__truncdfsf2>:
  81450c:	defff804 	addi	sp,sp,-32
  814510:	2005883a 	mov	r2,r4
  814514:	2807883a 	mov	r3,r5
  814518:	d809883a 	mov	r4,sp
  81451c:	d9400204 	addi	r5,sp,8
  814520:	d8c00115 	stw	r3,4(sp)
  814524:	d8800015 	stw	r2,0(sp)
  814528:	dfc00715 	stw	ra,28(sp)
  81452c:	0814df40 	call	814df4 <__unpack_d>
  814530:	d9c00517 	ldw	r7,20(sp)
  814534:	da000617 	ldw	r8,24(sp)
  814538:	02d00034 	movhi	r11,16384
  81453c:	5affffc4 	addi	r11,r11,-1
  814540:	3812d7ba 	srli	r9,r7,30
  814544:	401a90ba 	slli	r13,r8,2
  814548:	3ac4703a 	and	r2,r7,r11
  81454c:	0007883a 	mov	r3,zero
  814550:	6a52b03a 	or	r9,r13,r9
  814554:	10c4b03a 	or	r2,r2,r3
  814558:	d9000217 	ldw	r4,8(sp)
  81455c:	d9400317 	ldw	r5,12(sp)
  814560:	d9800417 	ldw	r6,16(sp)
  814564:	480f883a 	mov	r7,r9
  814568:	10000126 	beq	r2,zero,814570 <__truncdfsf2+0x64>
  81456c:	49c00054 	ori	r7,r9,1
  814570:	0814ab40 	call	814ab4 <__make_fp>
  814574:	dfc00717 	ldw	ra,28(sp)
  814578:	dec00804 	addi	sp,sp,32
  81457c:	f800283a 	ret

00814580 <udivmodsi4>:
  814580:	29001b2e 	bgeu	r5,r4,8145f0 <udivmodsi4+0x70>
  814584:	28001a16 	blt	r5,zero,8145f0 <udivmodsi4+0x70>
  814588:	00800044 	movi	r2,1
  81458c:	0007883a 	mov	r3,zero
  814590:	01c007c4 	movi	r7,31
  814594:	00000306 	br	8145a4 <udivmodsi4+0x24>
  814598:	19c01326 	beq	r3,r7,8145e8 <udivmodsi4+0x68>
  81459c:	18c00044 	addi	r3,r3,1
  8145a0:	28000416 	blt	r5,zero,8145b4 <udivmodsi4+0x34>
  8145a4:	294b883a 	add	r5,r5,r5
  8145a8:	1085883a 	add	r2,r2,r2
  8145ac:	293ffa36 	bltu	r5,r4,814598 <udivmodsi4+0x18>
  8145b0:	10000d26 	beq	r2,zero,8145e8 <udivmodsi4+0x68>
  8145b4:	0007883a 	mov	r3,zero
  8145b8:	21400236 	bltu	r4,r5,8145c4 <udivmodsi4+0x44>
  8145bc:	2149c83a 	sub	r4,r4,r5
  8145c0:	1886b03a 	or	r3,r3,r2
  8145c4:	1004d07a 	srli	r2,r2,1
  8145c8:	280ad07a 	srli	r5,r5,1
  8145cc:	103ffa1e 	bne	r2,zero,8145b8 <udivmodsi4+0x38>
  8145d0:	30000226 	beq	r6,zero,8145dc <udivmodsi4+0x5c>
  8145d4:	2005883a 	mov	r2,r4
  8145d8:	f800283a 	ret
  8145dc:	1809883a 	mov	r4,r3
  8145e0:	2005883a 	mov	r2,r4
  8145e4:	f800283a 	ret
  8145e8:	0007883a 	mov	r3,zero
  8145ec:	003ff806 	br	8145d0 <udivmodsi4+0x50>
  8145f0:	00800044 	movi	r2,1
  8145f4:	0007883a 	mov	r3,zero
  8145f8:	003fef06 	br	8145b8 <udivmodsi4+0x38>

008145fc <__divsi3>:
  8145fc:	defffe04 	addi	sp,sp,-8
  814600:	dc000015 	stw	r16,0(sp)
  814604:	dfc00115 	stw	ra,4(sp)
  814608:	0021883a 	mov	r16,zero
  81460c:	20000c16 	blt	r4,zero,814640 <__divsi3+0x44>
  814610:	000d883a 	mov	r6,zero
  814614:	28000e16 	blt	r5,zero,814650 <__divsi3+0x54>
  814618:	08145800 	call	814580 <udivmodsi4>
  81461c:	1007883a 	mov	r3,r2
  814620:	8005003a 	cmpeq	r2,r16,zero
  814624:	1000011e 	bne	r2,zero,81462c <__divsi3+0x30>
  814628:	00c7c83a 	sub	r3,zero,r3
  81462c:	1805883a 	mov	r2,r3
  814630:	dfc00117 	ldw	ra,4(sp)
  814634:	dc000017 	ldw	r16,0(sp)
  814638:	dec00204 	addi	sp,sp,8
  81463c:	f800283a 	ret
  814640:	0109c83a 	sub	r4,zero,r4
  814644:	04000044 	movi	r16,1
  814648:	000d883a 	mov	r6,zero
  81464c:	283ff20e 	bge	r5,zero,814618 <__divsi3+0x1c>
  814650:	014bc83a 	sub	r5,zero,r5
  814654:	8021003a 	cmpeq	r16,r16,zero
  814658:	003fef06 	br	814618 <__divsi3+0x1c>

0081465c <__modsi3>:
  81465c:	deffff04 	addi	sp,sp,-4
  814660:	dfc00015 	stw	ra,0(sp)
  814664:	01800044 	movi	r6,1
  814668:	2807883a 	mov	r3,r5
  81466c:	20000416 	blt	r4,zero,814680 <__modsi3+0x24>
  814670:	28000c16 	blt	r5,zero,8146a4 <__modsi3+0x48>
  814674:	dfc00017 	ldw	ra,0(sp)
  814678:	dec00104 	addi	sp,sp,4
  81467c:	08145801 	jmpi	814580 <udivmodsi4>
  814680:	0109c83a 	sub	r4,zero,r4
  814684:	28000b16 	blt	r5,zero,8146b4 <__modsi3+0x58>
  814688:	180b883a 	mov	r5,r3
  81468c:	01800044 	movi	r6,1
  814690:	08145800 	call	814580 <udivmodsi4>
  814694:	0085c83a 	sub	r2,zero,r2
  814698:	dfc00017 	ldw	ra,0(sp)
  81469c:	dec00104 	addi	sp,sp,4
  8146a0:	f800283a 	ret
  8146a4:	014bc83a 	sub	r5,zero,r5
  8146a8:	dfc00017 	ldw	ra,0(sp)
  8146ac:	dec00104 	addi	sp,sp,4
  8146b0:	08145801 	jmpi	814580 <udivmodsi4>
  8146b4:	0147c83a 	sub	r3,zero,r5
  8146b8:	003ff306 	br	814688 <__modsi3+0x2c>

008146bc <__udivsi3>:
  8146bc:	000d883a 	mov	r6,zero
  8146c0:	08145801 	jmpi	814580 <udivmodsi4>

008146c4 <__umodsi3>:
  8146c4:	01800044 	movi	r6,1
  8146c8:	08145801 	jmpi	814580 <udivmodsi4>

008146cc <__muldi3>:
  8146cc:	2011883a 	mov	r8,r4
  8146d0:	427fffcc 	andi	r9,r8,65535
  8146d4:	4018d43a 	srli	r12,r8,16
  8146d8:	32bfffcc 	andi	r10,r6,65535
  8146dc:	3016d43a 	srli	r11,r6,16
  8146e0:	4a85383a 	mul	r2,r9,r10
  8146e4:	6295383a 	mul	r10,r12,r10
  8146e8:	4ad3383a 	mul	r9,r9,r11
  8146ec:	113fffcc 	andi	r4,r2,65535
  8146f0:	1004d43a 	srli	r2,r2,16
  8146f4:	4a93883a 	add	r9,r9,r10
  8146f8:	3807883a 	mov	r3,r7
  8146fc:	1245883a 	add	r2,r2,r9
  814700:	280f883a 	mov	r7,r5
  814704:	180b883a 	mov	r5,r3
  814708:	1006943a 	slli	r3,r2,16
  81470c:	defffd04 	addi	sp,sp,-12
  814710:	dc800215 	stw	r18,8(sp)
  814714:	1907883a 	add	r3,r3,r4
  814718:	dc400115 	stw	r17,4(sp)
  81471c:	dc000015 	stw	r16,0(sp)
  814720:	4165383a 	mul	r18,r8,r5
  814724:	31e3383a 	mul	r17,r6,r7
  814728:	1012d43a 	srli	r9,r2,16
  81472c:	62d9383a 	mul	r12,r12,r11
  814730:	181f883a 	mov	r15,r3
  814734:	1280022e 	bgeu	r2,r10,814740 <__muldi3+0x74>
  814738:	00800074 	movhi	r2,1
  81473c:	6099883a 	add	r12,r12,r2
  814740:	624d883a 	add	r6,r12,r9
  814744:	9187883a 	add	r3,r18,r6
  814748:	88c7883a 	add	r3,r17,r3
  81474c:	7805883a 	mov	r2,r15
  814750:	dc800217 	ldw	r18,8(sp)
  814754:	dc400117 	ldw	r17,4(sp)
  814758:	dc000017 	ldw	r16,0(sp)
  81475c:	dec00304 	addi	sp,sp,12
  814760:	f800283a 	ret

00814764 <__clzsi2>:
  814764:	00bfffd4 	movui	r2,65535
  814768:	11000e36 	bltu	r2,r4,8147a4 <__clzsi2+0x40>
  81476c:	00803fc4 	movi	r2,255
  814770:	01400204 	movi	r5,8
  814774:	0007883a 	mov	r3,zero
  814778:	11001036 	bltu	r2,r4,8147bc <__clzsi2+0x58>
  81477c:	000b883a 	mov	r5,zero
  814780:	20c6d83a 	srl	r3,r4,r3
  814784:	008020f4 	movhi	r2,131
  814788:	10a2bf04 	addi	r2,r2,-29956
  81478c:	1887883a 	add	r3,r3,r2
  814790:	18800003 	ldbu	r2,0(r3)
  814794:	00c00804 	movi	r3,32
  814798:	2885883a 	add	r2,r5,r2
  81479c:	1885c83a 	sub	r2,r3,r2
  8147a0:	f800283a 	ret
  8147a4:	01400404 	movi	r5,16
  8147a8:	00804034 	movhi	r2,256
  8147ac:	10bfffc4 	addi	r2,r2,-1
  8147b0:	2807883a 	mov	r3,r5
  8147b4:	113ff22e 	bgeu	r2,r4,814780 <__clzsi2+0x1c>
  8147b8:	01400604 	movi	r5,24
  8147bc:	2807883a 	mov	r3,r5
  8147c0:	20c6d83a 	srl	r3,r4,r3
  8147c4:	008020f4 	movhi	r2,131
  8147c8:	10a2bf04 	addi	r2,r2,-29956
  8147cc:	1887883a 	add	r3,r3,r2
  8147d0:	18800003 	ldbu	r2,0(r3)
  8147d4:	00c00804 	movi	r3,32
  8147d8:	2885883a 	add	r2,r5,r2
  8147dc:	1885c83a 	sub	r2,r3,r2
  8147e0:	f800283a 	ret

008147e4 <__pack_f>:
  8147e4:	20c00017 	ldw	r3,0(r4)
  8147e8:	01c00044 	movi	r7,1
  8147ec:	21800317 	ldw	r6,12(r4)
  8147f0:	21400117 	ldw	r5,4(r4)
  8147f4:	38c02d2e 	bgeu	r7,r3,8148ac <__pack_f+0xc8>
  8147f8:	00800104 	movi	r2,4
  8147fc:	18802826 	beq	r3,r2,8148a0 <__pack_f+0xbc>
  814800:	00800084 	movi	r2,2
  814804:	18800126 	beq	r3,r2,81480c <__pack_f+0x28>
  814808:	3000101e 	bne	r6,zero,81484c <__pack_f+0x68>
  81480c:	000d883a 	mov	r6,zero
  814810:	0007883a 	mov	r3,zero
  814814:	19003fcc 	andi	r4,r3,255
  814818:	200895fa 	slli	r4,r4,23
  81481c:	00c02034 	movhi	r3,128
  814820:	18ffffc4 	addi	r3,r3,-1
  814824:	30c6703a 	and	r3,r6,r3
  814828:	10a0002c 	andhi	r2,r2,32768
  81482c:	10c4b03a 	or	r2,r2,r3
  814830:	280a97fa 	slli	r5,r5,31
  814834:	1104b03a 	or	r2,r2,r4
  814838:	00e00034 	movhi	r3,32768
  81483c:	18ffffc4 	addi	r3,r3,-1
  814840:	10c4703a 	and	r2,r2,r3
  814844:	1144b03a 	or	r2,r2,r5
  814848:	f800283a 	ret
  81484c:	21000217 	ldw	r4,8(r4)
  814850:	00bfe084 	movi	r2,-126
  814854:	20801b16 	blt	r4,r2,8148c4 <__pack_f+0xe0>
  814858:	00801fc4 	movi	r2,127
  81485c:	11001016 	blt	r2,r4,8148a0 <__pack_f+0xbc>
  814860:	308e703a 	and	r7,r6,r2
  814864:	2087883a 	add	r3,r4,r2
  814868:	00801004 	movi	r2,64
  81486c:	38800526 	beq	r7,r2,814884 <__pack_f+0xa0>
  814870:	31800fc4 	addi	r6,r6,63
  814874:	30000716 	blt	r6,zero,814894 <__pack_f+0xb0>
  814878:	300490ba 	slli	r2,r6,2
  81487c:	100cd27a 	srli	r6,r2,9
  814880:	003fe406 	br	814814 <__pack_f+0x30>
  814884:	3080200c 	andi	r2,r6,128
  814888:	103ffa26 	beq	r2,zero,814874 <__pack_f+0x90>
  81488c:	31cd883a 	add	r6,r6,r7
  814890:	003ff806 	br	814874 <__pack_f+0x90>
  814894:	300cd07a 	srli	r6,r6,1
  814898:	18c00044 	addi	r3,r3,1
  81489c:	003ff606 	br	814878 <__pack_f+0x94>
  8148a0:	000d883a 	mov	r6,zero
  8148a4:	00ffffc4 	movi	r3,-1
  8148a8:	003fda06 	br	814814 <__pack_f+0x30>
  8148ac:	31800434 	orhi	r6,r6,16
  8148b0:	00802034 	movhi	r2,128
  8148b4:	10bfffc4 	addi	r2,r2,-1
  8148b8:	308c703a 	and	r6,r6,r2
  8148bc:	00ffffc4 	movi	r3,-1
  8148c0:	003fd406 	br	814814 <__pack_f+0x30>
  8148c4:	1109c83a 	sub	r4,r2,r4
  8148c8:	00800644 	movi	r2,25
  8148cc:	11001216 	blt	r2,r4,814918 <__pack_f+0x134>
  8148d0:	3904983a 	sll	r2,r7,r4
  8148d4:	3106d83a 	srl	r3,r6,r4
  8148d8:	10bfffc4 	addi	r2,r2,-1
  8148dc:	3084703a 	and	r2,r6,r2
  8148e0:	1004c03a 	cmpne	r2,r2,zero
  8148e4:	1886b03a 	or	r3,r3,r2
  8148e8:	19001fcc 	andi	r4,r3,127
  8148ec:	00801004 	movi	r2,64
  8148f0:	20800c26 	beq	r4,r2,814924 <__pack_f+0x140>
  8148f4:	18c00fc4 	addi	r3,r3,63
  8148f8:	00900034 	movhi	r2,16384
  8148fc:	10bfffc4 	addi	r2,r2,-1
  814900:	180cd1fa 	srli	r6,r3,7
  814904:	10c7803a 	cmpltu	r3,r2,r3
  814908:	00802034 	movhi	r2,128
  81490c:	10bfffc4 	addi	r2,r2,-1
  814910:	308c703a 	and	r6,r6,r2
  814914:	003fbf06 	br	814814 <__pack_f+0x30>
  814918:	0007883a 	mov	r3,zero
  81491c:	000d883a 	mov	r6,zero
  814920:	003ff906 	br	814908 <__pack_f+0x124>
  814924:	1880200c 	andi	r2,r3,128
  814928:	10000126 	beq	r2,zero,814930 <__pack_f+0x14c>
  81492c:	1907883a 	add	r3,r3,r4
  814930:	180cd1fa 	srli	r6,r3,7
  814934:	00900034 	movhi	r2,16384
  814938:	10bfffc4 	addi	r2,r2,-1
  81493c:	10c7803a 	cmpltu	r3,r2,r3
  814940:	003ff106 	br	814908 <__pack_f+0x124>

00814944 <__unpack_f>:
  814944:	21800017 	ldw	r6,0(r4)
  814948:	00c02034 	movhi	r3,128
  81494c:	18ffffc4 	addi	r3,r3,-1
  814950:	3004d5fa 	srli	r2,r6,23
  814954:	3008d7fa 	srli	r4,r6,31
  814958:	30ce703a 	and	r7,r6,r3
  81495c:	10c03fcc 	andi	r3,r2,255
  814960:	29000115 	stw	r4,4(r5)
  814964:	1800131e 	bne	r3,zero,8149b4 <__unpack_f+0x70>
  814968:	38000f26 	beq	r7,zero,8149a8 <__unpack_f+0x64>
  81496c:	380691fa 	slli	r3,r7,7
  814970:	01bfe084 	movi	r6,-126
  814974:	008000c4 	movi	r2,3
  814978:	01100034 	movhi	r4,16384
  81497c:	213fffc4 	addi	r4,r4,-1
  814980:	28800015 	stw	r2,0(r5)
  814984:	29800215 	stw	r6,8(r5)
  814988:	20c00536 	bltu	r4,r3,8149a0 <__unpack_f+0x5c>
  81498c:	3005883a 	mov	r2,r6
  814990:	18c7883a 	add	r3,r3,r3
  814994:	10bfffc4 	addi	r2,r2,-1
  814998:	20fffd2e 	bgeu	r4,r3,814990 <__unpack_f+0x4c>
  81499c:	28800215 	stw	r2,8(r5)
  8149a0:	28c00315 	stw	r3,12(r5)
  8149a4:	f800283a 	ret
  8149a8:	00800084 	movi	r2,2
  8149ac:	28800015 	stw	r2,0(r5)
  8149b0:	f800283a 	ret
  8149b4:	00803fc4 	movi	r2,255
  8149b8:	18800826 	beq	r3,r2,8149dc <__unpack_f+0x98>
  8149bc:	380491fa 	slli	r2,r7,7
  8149c0:	18ffe044 	addi	r3,r3,-127
  8149c4:	28c00215 	stw	r3,8(r5)
  8149c8:	10900034 	orhi	r2,r2,16384
  8149cc:	28800315 	stw	r2,12(r5)
  8149d0:	008000c4 	movi	r2,3
  8149d4:	28800015 	stw	r2,0(r5)
  8149d8:	f800283a 	ret
  8149dc:	3800031e 	bne	r7,zero,8149ec <__unpack_f+0xa8>
  8149e0:	00800104 	movi	r2,4
  8149e4:	28800015 	stw	r2,0(r5)
  8149e8:	f800283a 	ret
  8149ec:	3080042c 	andhi	r2,r6,16
  8149f0:	10000426 	beq	r2,zero,814a04 <__unpack_f+0xc0>
  8149f4:	00800044 	movi	r2,1
  8149f8:	28800015 	stw	r2,0(r5)
  8149fc:	29c00315 	stw	r7,12(r5)
  814a00:	f800283a 	ret
  814a04:	28000015 	stw	zero,0(r5)
  814a08:	003ffc06 	br	8149fc <__unpack_f+0xb8>

00814a0c <__fpcmp_parts_f>:
  814a0c:	21800017 	ldw	r6,0(r4)
  814a10:	00c00044 	movi	r3,1
  814a14:	19800a2e 	bgeu	r3,r6,814a40 <__fpcmp_parts_f+0x34>
  814a18:	28800017 	ldw	r2,0(r5)
  814a1c:	1880082e 	bgeu	r3,r2,814a40 <__fpcmp_parts_f+0x34>
  814a20:	00c00104 	movi	r3,4
  814a24:	30c01e26 	beq	r6,r3,814aa0 <__fpcmp_parts_f+0x94>
  814a28:	10c01a26 	beq	r2,r3,814a94 <__fpcmp_parts_f+0x88>
  814a2c:	00c00084 	movi	r3,2
  814a30:	30c00526 	beq	r6,r3,814a48 <__fpcmp_parts_f+0x3c>
  814a34:	10c0071e 	bne	r2,r3,814a54 <__fpcmp_parts_f+0x48>
  814a38:	20800117 	ldw	r2,4(r4)
  814a3c:	1000091e 	bne	r2,zero,814a64 <__fpcmp_parts_f+0x58>
  814a40:	00800044 	movi	r2,1
  814a44:	f800283a 	ret
  814a48:	10c0121e 	bne	r2,r3,814a94 <__fpcmp_parts_f+0x88>
  814a4c:	0005883a 	mov	r2,zero
  814a50:	f800283a 	ret
  814a54:	20c00117 	ldw	r3,4(r4)
  814a58:	28800117 	ldw	r2,4(r5)
  814a5c:	18800326 	beq	r3,r2,814a6c <__fpcmp_parts_f+0x60>
  814a60:	183ff726 	beq	r3,zero,814a40 <__fpcmp_parts_f+0x34>
  814a64:	00bfffc4 	movi	r2,-1
  814a68:	f800283a 	ret
  814a6c:	21800217 	ldw	r6,8(r4)
  814a70:	28800217 	ldw	r2,8(r5)
  814a74:	11bffa16 	blt	r2,r6,814a60 <__fpcmp_parts_f+0x54>
  814a78:	30800416 	blt	r6,r2,814a8c <__fpcmp_parts_f+0x80>
  814a7c:	21000317 	ldw	r4,12(r4)
  814a80:	29400317 	ldw	r5,12(r5)
  814a84:	293ff636 	bltu	r5,r4,814a60 <__fpcmp_parts_f+0x54>
  814a88:	217ff02e 	bgeu	r4,r5,814a4c <__fpcmp_parts_f+0x40>
  814a8c:	183fec1e 	bne	r3,zero,814a40 <__fpcmp_parts_f+0x34>
  814a90:	003ff406 	br	814a64 <__fpcmp_parts_f+0x58>
  814a94:	28800117 	ldw	r2,4(r5)
  814a98:	103fe91e 	bne	r2,zero,814a40 <__fpcmp_parts_f+0x34>
  814a9c:	003ff106 	br	814a64 <__fpcmp_parts_f+0x58>
  814aa0:	11bfe51e 	bne	r2,r6,814a38 <__fpcmp_parts_f+0x2c>
  814aa4:	28c00117 	ldw	r3,4(r5)
  814aa8:	20800117 	ldw	r2,4(r4)
  814aac:	1885c83a 	sub	r2,r3,r2
  814ab0:	f800283a 	ret

00814ab4 <__make_fp>:
  814ab4:	defffb04 	addi	sp,sp,-20
  814ab8:	d9000015 	stw	r4,0(sp)
  814abc:	d809883a 	mov	r4,sp
  814ac0:	dfc00415 	stw	ra,16(sp)
  814ac4:	d9400115 	stw	r5,4(sp)
  814ac8:	d9800215 	stw	r6,8(sp)
  814acc:	d9c00315 	stw	r7,12(sp)
  814ad0:	08147e40 	call	8147e4 <__pack_f>
  814ad4:	dfc00417 	ldw	ra,16(sp)
  814ad8:	dec00504 	addi	sp,sp,20
  814adc:	f800283a 	ret

00814ae0 <__pack_d>:
  814ae0:	20c00017 	ldw	r3,0(r4)
  814ae4:	defffd04 	addi	sp,sp,-12
  814ae8:	dc000015 	stw	r16,0(sp)
  814aec:	dc800215 	stw	r18,8(sp)
  814af0:	dc400115 	stw	r17,4(sp)
  814af4:	00800044 	movi	r2,1
  814af8:	22000317 	ldw	r8,12(r4)
  814afc:	001f883a 	mov	r15,zero
  814b00:	22400417 	ldw	r9,16(r4)
  814b04:	24000117 	ldw	r16,4(r4)
  814b08:	10c0552e 	bgeu	r2,r3,814c60 <__pack_d+0x180>
  814b0c:	00800104 	movi	r2,4
  814b10:	18804f26 	beq	r3,r2,814c50 <__pack_d+0x170>
  814b14:	00800084 	movi	r2,2
  814b18:	18800226 	beq	r3,r2,814b24 <__pack_d+0x44>
  814b1c:	4244b03a 	or	r2,r8,r9
  814b20:	10001a1e 	bne	r2,zero,814b8c <__pack_d+0xac>
  814b24:	000d883a 	mov	r6,zero
  814b28:	000f883a 	mov	r7,zero
  814b2c:	0011883a 	mov	r8,zero
  814b30:	00800434 	movhi	r2,16
  814b34:	10bfffc4 	addi	r2,r2,-1
  814b38:	301d883a 	mov	r14,r6
  814b3c:	3884703a 	and	r2,r7,r2
  814b40:	400a953a 	slli	r5,r8,20
  814b44:	79bffc2c 	andhi	r6,r15,65520
  814b48:	308cb03a 	or	r6,r6,r2
  814b4c:	00e00434 	movhi	r3,32784
  814b50:	18ffffc4 	addi	r3,r3,-1
  814b54:	800497fa 	slli	r2,r16,31
  814b58:	30c6703a 	and	r3,r6,r3
  814b5c:	1946b03a 	or	r3,r3,r5
  814b60:	01600034 	movhi	r5,32768
  814b64:	297fffc4 	addi	r5,r5,-1
  814b68:	194a703a 	and	r5,r3,r5
  814b6c:	288ab03a 	or	r5,r5,r2
  814b70:	2807883a 	mov	r3,r5
  814b74:	7005883a 	mov	r2,r14
  814b78:	dc800217 	ldw	r18,8(sp)
  814b7c:	dc400117 	ldw	r17,4(sp)
  814b80:	dc000017 	ldw	r16,0(sp)
  814b84:	dec00304 	addi	sp,sp,12
  814b88:	f800283a 	ret
  814b8c:	21000217 	ldw	r4,8(r4)
  814b90:	00bf0084 	movi	r2,-1022
  814b94:	20803f16 	blt	r4,r2,814c94 <__pack_d+0x1b4>
  814b98:	0080ffc4 	movi	r2,1023
  814b9c:	11002c16 	blt	r2,r4,814c50 <__pack_d+0x170>
  814ba0:	00803fc4 	movi	r2,255
  814ba4:	408c703a 	and	r6,r8,r2
  814ba8:	00802004 	movi	r2,128
  814bac:	0007883a 	mov	r3,zero
  814bb0:	000f883a 	mov	r7,zero
  814bb4:	2280ffc4 	addi	r10,r4,1023
  814bb8:	30801e26 	beq	r6,r2,814c34 <__pack_d+0x154>
  814bbc:	00801fc4 	movi	r2,127
  814bc0:	4089883a 	add	r4,r8,r2
  814bc4:	220d803a 	cmpltu	r6,r4,r8
  814bc8:	324d883a 	add	r6,r6,r9
  814bcc:	2011883a 	mov	r8,r4
  814bd0:	3013883a 	mov	r9,r6
  814bd4:	00880034 	movhi	r2,8192
  814bd8:	10bfffc4 	addi	r2,r2,-1
  814bdc:	12400d36 	bltu	r2,r9,814c14 <__pack_d+0x134>
  814be0:	4804963a 	slli	r2,r9,24
  814be4:	400cd23a 	srli	r6,r8,8
  814be8:	480ed23a 	srli	r7,r9,8
  814bec:	013fffc4 	movi	r4,-1
  814bf0:	118cb03a 	or	r6,r2,r6
  814bf4:	01400434 	movhi	r5,16
  814bf8:	297fffc4 	addi	r5,r5,-1
  814bfc:	3104703a 	and	r2,r6,r4
  814c00:	3946703a 	and	r3,r7,r5
  814c04:	5201ffcc 	andi	r8,r10,2047
  814c08:	100d883a 	mov	r6,r2
  814c0c:	180f883a 	mov	r7,r3
  814c10:	003fc706 	br	814b30 <__pack_d+0x50>
  814c14:	480897fa 	slli	r4,r9,31
  814c18:	4004d07a 	srli	r2,r8,1
  814c1c:	4806d07a 	srli	r3,r9,1
  814c20:	52800044 	addi	r10,r10,1
  814c24:	2084b03a 	or	r2,r4,r2
  814c28:	1011883a 	mov	r8,r2
  814c2c:	1813883a 	mov	r9,r3
  814c30:	003feb06 	br	814be0 <__pack_d+0x100>
  814c34:	383fe11e 	bne	r7,zero,814bbc <__pack_d+0xdc>
  814c38:	01004004 	movi	r4,256
  814c3c:	4104703a 	and	r2,r8,r4
  814c40:	10c4b03a 	or	r2,r2,r3
  814c44:	103fe326 	beq	r2,zero,814bd4 <__pack_d+0xf4>
  814c48:	3005883a 	mov	r2,r6
  814c4c:	003fdc06 	br	814bc0 <__pack_d+0xe0>
  814c50:	000d883a 	mov	r6,zero
  814c54:	000f883a 	mov	r7,zero
  814c58:	0201ffc4 	movi	r8,2047
  814c5c:	003fb406 	br	814b30 <__pack_d+0x50>
  814c60:	0005883a 	mov	r2,zero
  814c64:	00c00234 	movhi	r3,8
  814c68:	408cb03a 	or	r6,r8,r2
  814c6c:	48ceb03a 	or	r7,r9,r3
  814c70:	013fffc4 	movi	r4,-1
  814c74:	01400434 	movhi	r5,16
  814c78:	297fffc4 	addi	r5,r5,-1
  814c7c:	3104703a 	and	r2,r6,r4
  814c80:	3946703a 	and	r3,r7,r5
  814c84:	100d883a 	mov	r6,r2
  814c88:	180f883a 	mov	r7,r3
  814c8c:	0201ffc4 	movi	r8,2047
  814c90:	003fa706 	br	814b30 <__pack_d+0x50>
  814c94:	1109c83a 	sub	r4,r2,r4
  814c98:	00800e04 	movi	r2,56
  814c9c:	11004316 	blt	r2,r4,814dac <__pack_d+0x2cc>
  814ca0:	21fff804 	addi	r7,r4,-32
  814ca4:	38004516 	blt	r7,zero,814dbc <__pack_d+0x2dc>
  814ca8:	49d8d83a 	srl	r12,r9,r7
  814cac:	001b883a 	mov	r13,zero
  814cb0:	0023883a 	mov	r17,zero
  814cb4:	01400044 	movi	r5,1
  814cb8:	0025883a 	mov	r18,zero
  814cbc:	38004716 	blt	r7,zero,814ddc <__pack_d+0x2fc>
  814cc0:	29d6983a 	sll	r11,r5,r7
  814cc4:	0015883a 	mov	r10,zero
  814cc8:	00bfffc4 	movi	r2,-1
  814ccc:	5089883a 	add	r4,r10,r2
  814cd0:	588b883a 	add	r5,r11,r2
  814cd4:	228d803a 	cmpltu	r6,r4,r10
  814cd8:	314b883a 	add	r5,r6,r5
  814cdc:	4104703a 	and	r2,r8,r4
  814ce0:	4946703a 	and	r3,r9,r5
  814ce4:	10c4b03a 	or	r2,r2,r3
  814ce8:	10000226 	beq	r2,zero,814cf4 <__pack_d+0x214>
  814cec:	04400044 	movi	r17,1
  814cf0:	0025883a 	mov	r18,zero
  814cf4:	00803fc4 	movi	r2,255
  814cf8:	644eb03a 	or	r7,r12,r17
  814cfc:	3892703a 	and	r9,r7,r2
  814d00:	00802004 	movi	r2,128
  814d04:	6c90b03a 	or	r8,r13,r18
  814d08:	0015883a 	mov	r10,zero
  814d0c:	48801626 	beq	r9,r2,814d68 <__pack_d+0x288>
  814d10:	01001fc4 	movi	r4,127
  814d14:	3905883a 	add	r2,r7,r4
  814d18:	11cd803a 	cmpltu	r6,r2,r7
  814d1c:	320d883a 	add	r6,r6,r8
  814d20:	100f883a 	mov	r7,r2
  814d24:	00840034 	movhi	r2,4096
  814d28:	10bfffc4 	addi	r2,r2,-1
  814d2c:	3011883a 	mov	r8,r6
  814d30:	0007883a 	mov	r3,zero
  814d34:	11801b36 	bltu	r2,r6,814da4 <__pack_d+0x2c4>
  814d38:	4004963a 	slli	r2,r8,24
  814d3c:	3808d23a 	srli	r4,r7,8
  814d40:	400ad23a 	srli	r5,r8,8
  814d44:	1813883a 	mov	r9,r3
  814d48:	1108b03a 	or	r4,r2,r4
  814d4c:	00bfffc4 	movi	r2,-1
  814d50:	00c00434 	movhi	r3,16
  814d54:	18ffffc4 	addi	r3,r3,-1
  814d58:	208c703a 	and	r6,r4,r2
  814d5c:	28ce703a 	and	r7,r5,r3
  814d60:	4a01ffcc 	andi	r8,r9,2047
  814d64:	003f7206 	br	814b30 <__pack_d+0x50>
  814d68:	503fe91e 	bne	r10,zero,814d10 <__pack_d+0x230>
  814d6c:	01004004 	movi	r4,256
  814d70:	3904703a 	and	r2,r7,r4
  814d74:	0007883a 	mov	r3,zero
  814d78:	10c4b03a 	or	r2,r2,r3
  814d7c:	10000626 	beq	r2,zero,814d98 <__pack_d+0x2b8>
  814d80:	3a45883a 	add	r2,r7,r9
  814d84:	11cd803a 	cmpltu	r6,r2,r7
  814d88:	320d883a 	add	r6,r6,r8
  814d8c:	100f883a 	mov	r7,r2
  814d90:	3011883a 	mov	r8,r6
  814d94:	0007883a 	mov	r3,zero
  814d98:	00840034 	movhi	r2,4096
  814d9c:	10bfffc4 	addi	r2,r2,-1
  814da0:	123fe52e 	bgeu	r2,r8,814d38 <__pack_d+0x258>
  814da4:	00c00044 	movi	r3,1
  814da8:	003fe306 	br	814d38 <__pack_d+0x258>
  814dac:	0009883a 	mov	r4,zero
  814db0:	0013883a 	mov	r9,zero
  814db4:	000b883a 	mov	r5,zero
  814db8:	003fe406 	br	814d4c <__pack_d+0x26c>
  814dbc:	4a47883a 	add	r3,r9,r9
  814dc0:	008007c4 	movi	r2,31
  814dc4:	1105c83a 	sub	r2,r2,r4
  814dc8:	1886983a 	sll	r3,r3,r2
  814dcc:	4118d83a 	srl	r12,r8,r4
  814dd0:	491ad83a 	srl	r13,r9,r4
  814dd4:	1b18b03a 	or	r12,r3,r12
  814dd8:	003fb506 	br	814cb0 <__pack_d+0x1d0>
  814ddc:	2806d07a 	srli	r3,r5,1
  814de0:	008007c4 	movi	r2,31
  814de4:	1105c83a 	sub	r2,r2,r4
  814de8:	1896d83a 	srl	r11,r3,r2
  814dec:	2914983a 	sll	r10,r5,r4
  814df0:	003fb506 	br	814cc8 <__pack_d+0x1e8>

00814df4 <__unpack_d>:
  814df4:	20c00117 	ldw	r3,4(r4)
  814df8:	22400017 	ldw	r9,0(r4)
  814dfc:	00800434 	movhi	r2,16
  814e00:	10bfffc4 	addi	r2,r2,-1
  814e04:	1808d53a 	srli	r4,r3,20
  814e08:	180cd7fa 	srli	r6,r3,31
  814e0c:	1894703a 	and	r10,r3,r2
  814e10:	2201ffcc 	andi	r8,r4,2047
  814e14:	281b883a 	mov	r13,r5
  814e18:	4817883a 	mov	r11,r9
  814e1c:	29800115 	stw	r6,4(r5)
  814e20:	5019883a 	mov	r12,r10
  814e24:	40001e1e 	bne	r8,zero,814ea0 <__unpack_d+0xac>
  814e28:	4a84b03a 	or	r2,r9,r10
  814e2c:	10001926 	beq	r2,zero,814e94 <__unpack_d+0xa0>
  814e30:	4804d63a 	srli	r2,r9,24
  814e34:	500c923a 	slli	r6,r10,8
  814e38:	013f0084 	movi	r4,-1022
  814e3c:	00c40034 	movhi	r3,4096
  814e40:	18ffffc4 	addi	r3,r3,-1
  814e44:	118cb03a 	or	r6,r2,r6
  814e48:	008000c4 	movi	r2,3
  814e4c:	480a923a 	slli	r5,r9,8
  814e50:	68800015 	stw	r2,0(r13)
  814e54:	69000215 	stw	r4,8(r13)
  814e58:	19800b36 	bltu	r3,r6,814e88 <__unpack_d+0x94>
  814e5c:	200f883a 	mov	r7,r4
  814e60:	1811883a 	mov	r8,r3
  814e64:	2945883a 	add	r2,r5,r5
  814e68:	1149803a 	cmpltu	r4,r2,r5
  814e6c:	3187883a 	add	r3,r6,r6
  814e70:	20c9883a 	add	r4,r4,r3
  814e74:	100b883a 	mov	r5,r2
  814e78:	200d883a 	mov	r6,r4
  814e7c:	39ffffc4 	addi	r7,r7,-1
  814e80:	413ff82e 	bgeu	r8,r4,814e64 <__unpack_d+0x70>
  814e84:	69c00215 	stw	r7,8(r13)
  814e88:	69800415 	stw	r6,16(r13)
  814e8c:	69400315 	stw	r5,12(r13)
  814e90:	f800283a 	ret
  814e94:	00800084 	movi	r2,2
  814e98:	28800015 	stw	r2,0(r5)
  814e9c:	f800283a 	ret
  814ea0:	0081ffc4 	movi	r2,2047
  814ea4:	40800f26 	beq	r8,r2,814ee4 <__unpack_d+0xf0>
  814ea8:	480cd63a 	srli	r6,r9,24
  814eac:	5006923a 	slli	r3,r10,8
  814eb0:	4804923a 	slli	r2,r9,8
  814eb4:	0009883a 	mov	r4,zero
  814eb8:	30c6b03a 	or	r3,r6,r3
  814ebc:	01440034 	movhi	r5,4096
  814ec0:	110cb03a 	or	r6,r2,r4
  814ec4:	423f0044 	addi	r8,r8,-1023
  814ec8:	194eb03a 	or	r7,r3,r5
  814ecc:	008000c4 	movi	r2,3
  814ed0:	69c00415 	stw	r7,16(r13)
  814ed4:	6a000215 	stw	r8,8(r13)
  814ed8:	68800015 	stw	r2,0(r13)
  814edc:	69800315 	stw	r6,12(r13)
  814ee0:	f800283a 	ret
  814ee4:	4a84b03a 	or	r2,r9,r10
  814ee8:	1000031e 	bne	r2,zero,814ef8 <__unpack_d+0x104>
  814eec:	00800104 	movi	r2,4
  814ef0:	28800015 	stw	r2,0(r5)
  814ef4:	f800283a 	ret
  814ef8:	0009883a 	mov	r4,zero
  814efc:	01400234 	movhi	r5,8
  814f00:	4904703a 	and	r2,r9,r4
  814f04:	5146703a 	and	r3,r10,r5
  814f08:	10c4b03a 	or	r2,r2,r3
  814f0c:	10000526 	beq	r2,zero,814f24 <__unpack_d+0x130>
  814f10:	00800044 	movi	r2,1
  814f14:	68800015 	stw	r2,0(r13)
  814f18:	6b000415 	stw	r12,16(r13)
  814f1c:	6ac00315 	stw	r11,12(r13)
  814f20:	f800283a 	ret
  814f24:	68000015 	stw	zero,0(r13)
  814f28:	003ffb06 	br	814f18 <__unpack_d+0x124>

00814f2c <_atoi_r>:
  814f2c:	000d883a 	mov	r6,zero
  814f30:	01c00284 	movi	r7,10
  814f34:	0815cbc1 	jmpi	815cbc <_strtol_r>

00814f38 <atoi>:
  814f38:	000b883a 	mov	r5,zero
  814f3c:	01800284 	movi	r6,10
  814f40:	0815f001 	jmpi	815f00 <strtol>

00814f44 <free>:
  814f44:	008020f4 	movhi	r2,131
  814f48:	10805b04 	addi	r2,r2,364
  814f4c:	200b883a 	mov	r5,r4
  814f50:	11000017 	ldw	r4,0(r2)
  814f54:	0819d701 	jmpi	819d70 <_free_r>

00814f58 <malloc>:
  814f58:	008020f4 	movhi	r2,131
  814f5c:	10805b04 	addi	r2,r2,364
  814f60:	200b883a 	mov	r5,r4
  814f64:	11000017 	ldw	r4,0(r2)
  814f68:	0814f6c1 	jmpi	814f6c <_malloc_r>

00814f6c <_malloc_r>:
  814f6c:	defff604 	addi	sp,sp,-40
  814f70:	28c002c4 	addi	r3,r5,11
  814f74:	00800584 	movi	r2,22
  814f78:	dc800215 	stw	r18,8(sp)
  814f7c:	dfc00915 	stw	ra,36(sp)
  814f80:	df000815 	stw	fp,32(sp)
  814f84:	ddc00715 	stw	r23,28(sp)
  814f88:	dd800615 	stw	r22,24(sp)
  814f8c:	dd400515 	stw	r21,20(sp)
  814f90:	dd000415 	stw	r20,16(sp)
  814f94:	dcc00315 	stw	r19,12(sp)
  814f98:	dc400115 	stw	r17,4(sp)
  814f9c:	dc000015 	stw	r16,0(sp)
  814fa0:	2025883a 	mov	r18,r4
  814fa4:	10c01236 	bltu	r2,r3,814ff0 <_malloc_r+0x84>
  814fa8:	04400404 	movi	r17,16
  814fac:	8940142e 	bgeu	r17,r5,815000 <_malloc_r+0x94>
  814fb0:	00800304 	movi	r2,12
  814fb4:	0007883a 	mov	r3,zero
  814fb8:	90800015 	stw	r2,0(r18)
  814fbc:	1805883a 	mov	r2,r3
  814fc0:	dfc00917 	ldw	ra,36(sp)
  814fc4:	df000817 	ldw	fp,32(sp)
  814fc8:	ddc00717 	ldw	r23,28(sp)
  814fcc:	dd800617 	ldw	r22,24(sp)
  814fd0:	dd400517 	ldw	r21,20(sp)
  814fd4:	dd000417 	ldw	r20,16(sp)
  814fd8:	dcc00317 	ldw	r19,12(sp)
  814fdc:	dc800217 	ldw	r18,8(sp)
  814fe0:	dc400117 	ldw	r17,4(sp)
  814fe4:	dc000017 	ldw	r16,0(sp)
  814fe8:	dec00a04 	addi	sp,sp,40
  814fec:	f800283a 	ret
  814ff0:	00bffe04 	movi	r2,-8
  814ff4:	18a2703a 	and	r17,r3,r2
  814ff8:	883fed16 	blt	r17,zero,814fb0 <_malloc_r+0x44>
  814ffc:	897fec36 	bltu	r17,r5,814fb0 <_malloc_r+0x44>
  815000:	9009883a 	mov	r4,r18
  815004:	081e2700 	call	81e270 <__malloc_lock>
  815008:	00807dc4 	movi	r2,503
  81500c:	14402b2e 	bgeu	r2,r17,8150bc <_malloc_r+0x150>
  815010:	8806d27a 	srli	r3,r17,9
  815014:	18003f1e 	bne	r3,zero,815114 <_malloc_r+0x1a8>
  815018:	880cd0fa 	srli	r6,r17,3
  81501c:	300490fa 	slli	r2,r6,3
  815020:	02c020f4 	movhi	r11,131
  815024:	5af96d04 	addi	r11,r11,-6732
  815028:	12cb883a 	add	r5,r2,r11
  81502c:	2c000317 	ldw	r16,12(r5)
  815030:	580f883a 	mov	r7,r11
  815034:	2c00041e 	bne	r5,r16,815048 <_malloc_r+0xdc>
  815038:	00000a06 	br	815064 <_malloc_r+0xf8>
  81503c:	1800860e 	bge	r3,zero,815258 <_malloc_r+0x2ec>
  815040:	84000317 	ldw	r16,12(r16)
  815044:	2c000726 	beq	r5,r16,815064 <_malloc_r+0xf8>
  815048:	80800117 	ldw	r2,4(r16)
  81504c:	00ffff04 	movi	r3,-4
  815050:	10c8703a 	and	r4,r2,r3
  815054:	2447c83a 	sub	r3,r4,r17
  815058:	008003c4 	movi	r2,15
  81505c:	10fff70e 	bge	r2,r3,81503c <_malloc_r+0xd0>
  815060:	31bfffc4 	addi	r6,r6,-1
  815064:	32400044 	addi	r9,r6,1
  815068:	028020f4 	movhi	r10,131
  81506c:	52b96f04 	addi	r10,r10,-6724
  815070:	54000217 	ldw	r16,8(r10)
  815074:	8280a026 	beq	r16,r10,8152f8 <_malloc_r+0x38c>
  815078:	80800117 	ldw	r2,4(r16)
  81507c:	00ffff04 	movi	r3,-4
  815080:	10ca703a 	and	r5,r2,r3
  815084:	2c4dc83a 	sub	r6,r5,r17
  815088:	008003c4 	movi	r2,15
  81508c:	11808316 	blt	r2,r6,81529c <_malloc_r+0x330>
  815090:	52800315 	stw	r10,12(r10)
  815094:	52800215 	stw	r10,8(r10)
  815098:	30002916 	blt	r6,zero,815140 <_malloc_r+0x1d4>
  81509c:	8147883a 	add	r3,r16,r5
  8150a0:	18800117 	ldw	r2,4(r3)
  8150a4:	9009883a 	mov	r4,r18
  8150a8:	10800054 	ori	r2,r2,1
  8150ac:	18800115 	stw	r2,4(r3)
  8150b0:	081e2900 	call	81e290 <__malloc_unlock>
  8150b4:	80c00204 	addi	r3,r16,8
  8150b8:	003fc006 	br	814fbc <_malloc_r+0x50>
  8150bc:	02c020f4 	movhi	r11,131
  8150c0:	5af96d04 	addi	r11,r11,-6732
  8150c4:	8ac5883a 	add	r2,r17,r11
  8150c8:	14000317 	ldw	r16,12(r2)
  8150cc:	580f883a 	mov	r7,r11
  8150d0:	8806d0fa 	srli	r3,r17,3
  8150d4:	14006c26 	beq	r2,r16,815288 <_malloc_r+0x31c>
  8150d8:	80c00117 	ldw	r3,4(r16)
  8150dc:	00bfff04 	movi	r2,-4
  8150e0:	81800317 	ldw	r6,12(r16)
  8150e4:	1886703a 	and	r3,r3,r2
  8150e8:	80c7883a 	add	r3,r16,r3
  8150ec:	18800117 	ldw	r2,4(r3)
  8150f0:	81400217 	ldw	r5,8(r16)
  8150f4:	9009883a 	mov	r4,r18
  8150f8:	10800054 	ori	r2,r2,1
  8150fc:	18800115 	stw	r2,4(r3)
  815100:	31400215 	stw	r5,8(r6)
  815104:	29800315 	stw	r6,12(r5)
  815108:	081e2900 	call	81e290 <__malloc_unlock>
  81510c:	80c00204 	addi	r3,r16,8
  815110:	003faa06 	br	814fbc <_malloc_r+0x50>
  815114:	00800104 	movi	r2,4
  815118:	10c0052e 	bgeu	r2,r3,815130 <_malloc_r+0x1c4>
  81511c:	00800504 	movi	r2,20
  815120:	10c07836 	bltu	r2,r3,815304 <_malloc_r+0x398>
  815124:	198016c4 	addi	r6,r3,91
  815128:	300490fa 	slli	r2,r6,3
  81512c:	003fbc06 	br	815020 <_malloc_r+0xb4>
  815130:	8804d1ba 	srli	r2,r17,6
  815134:	11800e04 	addi	r6,r2,56
  815138:	300490fa 	slli	r2,r6,3
  81513c:	003fb806 	br	815020 <_malloc_r+0xb4>
  815140:	00807fc4 	movi	r2,511
  815144:	1140bb36 	bltu	r2,r5,815434 <_malloc_r+0x4c8>
  815148:	2806d0fa 	srli	r3,r5,3
  81514c:	573ffe04 	addi	fp,r10,-8
  815150:	00800044 	movi	r2,1
  815154:	180890fa 	slli	r4,r3,3
  815158:	1807d0ba 	srai	r3,r3,2
  81515c:	e1c00117 	ldw	r7,4(fp)
  815160:	5909883a 	add	r4,r11,r4
  815164:	21400217 	ldw	r5,8(r4)
  815168:	10c4983a 	sll	r2,r2,r3
  81516c:	81000315 	stw	r4,12(r16)
  815170:	81400215 	stw	r5,8(r16)
  815174:	388eb03a 	or	r7,r7,r2
  815178:	2c000315 	stw	r16,12(r5)
  81517c:	24000215 	stw	r16,8(r4)
  815180:	e1c00115 	stw	r7,4(fp)
  815184:	4807883a 	mov	r3,r9
  815188:	4800cd16 	blt	r9,zero,8154c0 <_malloc_r+0x554>
  81518c:	1807d0ba 	srai	r3,r3,2
  815190:	00800044 	movi	r2,1
  815194:	10c8983a 	sll	r4,r2,r3
  815198:	39004436 	bltu	r7,r4,8152ac <_malloc_r+0x340>
  81519c:	21c4703a 	and	r2,r4,r7
  8151a0:	10000a1e 	bne	r2,zero,8151cc <_malloc_r+0x260>
  8151a4:	2109883a 	add	r4,r4,r4
  8151a8:	00bfff04 	movi	r2,-4
  8151ac:	4884703a 	and	r2,r9,r2
  8151b0:	3906703a 	and	r3,r7,r4
  8151b4:	12400104 	addi	r9,r2,4
  8151b8:	1800041e 	bne	r3,zero,8151cc <_malloc_r+0x260>
  8151bc:	2109883a 	add	r4,r4,r4
  8151c0:	3904703a 	and	r2,r7,r4
  8151c4:	4a400104 	addi	r9,r9,4
  8151c8:	103ffc26 	beq	r2,zero,8151bc <_malloc_r+0x250>
  8151cc:	480490fa 	slli	r2,r9,3
  8151d0:	4819883a 	mov	r12,r9
  8151d4:	023fff04 	movi	r8,-4
  8151d8:	589b883a 	add	r13,r11,r2
  8151dc:	6807883a 	mov	r3,r13
  8151e0:	014003c4 	movi	r5,15
  8151e4:	1c000317 	ldw	r16,12(r3)
  8151e8:	1c00041e 	bne	r3,r16,8151fc <_malloc_r+0x290>
  8151ec:	0000a706 	br	81548c <_malloc_r+0x520>
  8151f0:	3000ab0e 	bge	r6,zero,8154a0 <_malloc_r+0x534>
  8151f4:	84000317 	ldw	r16,12(r16)
  8151f8:	1c00a426 	beq	r3,r16,81548c <_malloc_r+0x520>
  8151fc:	80800117 	ldw	r2,4(r16)
  815200:	1204703a 	and	r2,r2,r8
  815204:	144dc83a 	sub	r6,r2,r17
  815208:	29bff90e 	bge	r5,r6,8151f0 <_malloc_r+0x284>
  81520c:	81000317 	ldw	r4,12(r16)
  815210:	80c00217 	ldw	r3,8(r16)
  815214:	89400054 	ori	r5,r17,1
  815218:	8445883a 	add	r2,r16,r17
  81521c:	20c00215 	stw	r3,8(r4)
  815220:	19000315 	stw	r4,12(r3)
  815224:	81400115 	stw	r5,4(r16)
  815228:	1187883a 	add	r3,r2,r6
  81522c:	31000054 	ori	r4,r6,1
  815230:	50800315 	stw	r2,12(r10)
  815234:	50800215 	stw	r2,8(r10)
  815238:	19800015 	stw	r6,0(r3)
  81523c:	11000115 	stw	r4,4(r2)
  815240:	12800215 	stw	r10,8(r2)
  815244:	12800315 	stw	r10,12(r2)
  815248:	9009883a 	mov	r4,r18
  81524c:	081e2900 	call	81e290 <__malloc_unlock>
  815250:	80c00204 	addi	r3,r16,8
  815254:	003f5906 	br	814fbc <_malloc_r+0x50>
  815258:	8109883a 	add	r4,r16,r4
  81525c:	20800117 	ldw	r2,4(r4)
  815260:	80c00217 	ldw	r3,8(r16)
  815264:	81400317 	ldw	r5,12(r16)
  815268:	10800054 	ori	r2,r2,1
  81526c:	20800115 	stw	r2,4(r4)
  815270:	28c00215 	stw	r3,8(r5)
  815274:	19400315 	stw	r5,12(r3)
  815278:	9009883a 	mov	r4,r18
  81527c:	081e2900 	call	81e290 <__malloc_unlock>
  815280:	80c00204 	addi	r3,r16,8
  815284:	003f4d06 	br	814fbc <_malloc_r+0x50>
  815288:	80800204 	addi	r2,r16,8
  81528c:	14000317 	ldw	r16,12(r2)
  815290:	143f911e 	bne	r2,r16,8150d8 <_malloc_r+0x16c>
  815294:	1a400084 	addi	r9,r3,2
  815298:	003f7306 	br	815068 <_malloc_r+0xfc>
  81529c:	88c00054 	ori	r3,r17,1
  8152a0:	8445883a 	add	r2,r16,r17
  8152a4:	80c00115 	stw	r3,4(r16)
  8152a8:	003fdf06 	br	815228 <_malloc_r+0x2bc>
  8152ac:	e4000217 	ldw	r16,8(fp)
  8152b0:	00bfff04 	movi	r2,-4
  8152b4:	80c00117 	ldw	r3,4(r16)
  8152b8:	802d883a 	mov	r22,r16
  8152bc:	18aa703a 	and	r21,r3,r2
  8152c0:	ac401636 	bltu	r21,r17,81531c <_malloc_r+0x3b0>
  8152c4:	ac49c83a 	sub	r4,r21,r17
  8152c8:	008003c4 	movi	r2,15
  8152cc:	1100130e 	bge	r2,r4,81531c <_malloc_r+0x3b0>
  8152d0:	88800054 	ori	r2,r17,1
  8152d4:	8447883a 	add	r3,r16,r17
  8152d8:	80800115 	stw	r2,4(r16)
  8152dc:	20800054 	ori	r2,r4,1
  8152e0:	18800115 	stw	r2,4(r3)
  8152e4:	e0c00215 	stw	r3,8(fp)
  8152e8:	9009883a 	mov	r4,r18
  8152ec:	081e2900 	call	81e290 <__malloc_unlock>
  8152f0:	80c00204 	addi	r3,r16,8
  8152f4:	003f3106 	br	814fbc <_malloc_r+0x50>
  8152f8:	39c00117 	ldw	r7,4(r7)
  8152fc:	573ffe04 	addi	fp,r10,-8
  815300:	003fa006 	br	815184 <_malloc_r+0x218>
  815304:	00801504 	movi	r2,84
  815308:	10c06736 	bltu	r2,r3,8154a8 <_malloc_r+0x53c>
  81530c:	8804d33a 	srli	r2,r17,12
  815310:	11801b84 	addi	r6,r2,110
  815314:	300490fa 	slli	r2,r6,3
  815318:	003f4106 	br	815020 <_malloc_r+0xb4>
  81531c:	d0bc3717 	ldw	r2,-3876(gp)
  815320:	d0e00217 	ldw	r3,-32760(gp)
  815324:	053fffc4 	movi	r20,-1
  815328:	10800404 	addi	r2,r2,16
  81532c:	88a7883a 	add	r19,r17,r2
  815330:	1d000326 	beq	r3,r20,815340 <_malloc_r+0x3d4>
  815334:	98c3ffc4 	addi	r3,r19,4095
  815338:	00bc0004 	movi	r2,-4096
  81533c:	18a6703a 	and	r19,r3,r2
  815340:	9009883a 	mov	r4,r18
  815344:	980b883a 	mov	r5,r19
  815348:	081590c0 	call	81590c <_sbrk_r>
  81534c:	1009883a 	mov	r4,r2
  815350:	15000426 	beq	r2,r20,815364 <_malloc_r+0x3f8>
  815354:	854b883a 	add	r5,r16,r21
  815358:	1029883a 	mov	r20,r2
  81535c:	11405a2e 	bgeu	r2,r5,8154c8 <_malloc_r+0x55c>
  815360:	87000c26 	beq	r16,fp,815394 <_malloc_r+0x428>
  815364:	e4000217 	ldw	r16,8(fp)
  815368:	80c00117 	ldw	r3,4(r16)
  81536c:	00bfff04 	movi	r2,-4
  815370:	1884703a 	and	r2,r3,r2
  815374:	14400336 	bltu	r2,r17,815384 <_malloc_r+0x418>
  815378:	1449c83a 	sub	r4,r2,r17
  81537c:	008003c4 	movi	r2,15
  815380:	113fd316 	blt	r2,r4,8152d0 <_malloc_r+0x364>
  815384:	9009883a 	mov	r4,r18
  815388:	081e2900 	call	81e290 <__malloc_unlock>
  81538c:	0007883a 	mov	r3,zero
  815390:	003f0a06 	br	814fbc <_malloc_r+0x50>
  815394:	05c020f4 	movhi	r23,131
  815398:	bddcaa04 	addi	r23,r23,29352
  81539c:	b8800017 	ldw	r2,0(r23)
  8153a0:	988d883a 	add	r6,r19,r2
  8153a4:	b9800015 	stw	r6,0(r23)
  8153a8:	d0e00217 	ldw	r3,-32760(gp)
  8153ac:	00bfffc4 	movi	r2,-1
  8153b0:	18808e26 	beq	r3,r2,8155ec <_malloc_r+0x680>
  8153b4:	2145c83a 	sub	r2,r4,r5
  8153b8:	3085883a 	add	r2,r6,r2
  8153bc:	b8800015 	stw	r2,0(r23)
  8153c0:	20c001cc 	andi	r3,r4,7
  8153c4:	18005f1e 	bne	r3,zero,815544 <_malloc_r+0x5d8>
  8153c8:	000b883a 	mov	r5,zero
  8153cc:	a4c5883a 	add	r2,r20,r19
  8153d0:	1083ffcc 	andi	r2,r2,4095
  8153d4:	00c40004 	movi	r3,4096
  8153d8:	1887c83a 	sub	r3,r3,r2
  8153dc:	28e7883a 	add	r19,r5,r3
  8153e0:	9009883a 	mov	r4,r18
  8153e4:	980b883a 	mov	r5,r19
  8153e8:	081590c0 	call	81590c <_sbrk_r>
  8153ec:	1007883a 	mov	r3,r2
  8153f0:	00bfffc4 	movi	r2,-1
  8153f4:	18807a26 	beq	r3,r2,8155e0 <_malloc_r+0x674>
  8153f8:	1d05c83a 	sub	r2,r3,r20
  8153fc:	9885883a 	add	r2,r19,r2
  815400:	10c00054 	ori	r3,r2,1
  815404:	b8800017 	ldw	r2,0(r23)
  815408:	a021883a 	mov	r16,r20
  81540c:	a0c00115 	stw	r3,4(r20)
  815410:	9885883a 	add	r2,r19,r2
  815414:	b8800015 	stw	r2,0(r23)
  815418:	e5000215 	stw	r20,8(fp)
  81541c:	b7003626 	beq	r22,fp,8154f8 <_malloc_r+0x58c>
  815420:	018003c4 	movi	r6,15
  815424:	35404b36 	bltu	r6,r21,815554 <_malloc_r+0x5e8>
  815428:	00800044 	movi	r2,1
  81542c:	a0800115 	stw	r2,4(r20)
  815430:	003fcd06 	br	815368 <_malloc_r+0x3fc>
  815434:	2808d27a 	srli	r4,r5,9
  815438:	2000371e 	bne	r4,zero,815518 <_malloc_r+0x5ac>
  81543c:	2808d0fa 	srli	r4,r5,3
  815440:	200690fa 	slli	r3,r4,3
  815444:	1ad1883a 	add	r8,r3,r11
  815448:	41800217 	ldw	r6,8(r8)
  81544c:	41805b26 	beq	r8,r6,8155bc <_malloc_r+0x650>
  815450:	30800117 	ldw	r2,4(r6)
  815454:	00ffff04 	movi	r3,-4
  815458:	10c4703a 	and	r2,r2,r3
  81545c:	2880022e 	bgeu	r5,r2,815468 <_malloc_r+0x4fc>
  815460:	31800217 	ldw	r6,8(r6)
  815464:	41bffa1e 	bne	r8,r6,815450 <_malloc_r+0x4e4>
  815468:	32000317 	ldw	r8,12(r6)
  81546c:	39c00117 	ldw	r7,4(r7)
  815470:	82000315 	stw	r8,12(r16)
  815474:	81800215 	stw	r6,8(r16)
  815478:	070020f4 	movhi	fp,131
  81547c:	e7396d04 	addi	fp,fp,-6732
  815480:	34000315 	stw	r16,12(r6)
  815484:	44000215 	stw	r16,8(r8)
  815488:	003f3e06 	br	815184 <_malloc_r+0x218>
  81548c:	63000044 	addi	r12,r12,1
  815490:	608000cc 	andi	r2,r12,3
  815494:	10005d26 	beq	r2,zero,81560c <_malloc_r+0x6a0>
  815498:	18c00204 	addi	r3,r3,8
  81549c:	003f5106 	br	8151e4 <_malloc_r+0x278>
  8154a0:	8089883a 	add	r4,r16,r2
  8154a4:	003f6d06 	br	81525c <_malloc_r+0x2f0>
  8154a8:	00805504 	movi	r2,340
  8154ac:	10c02036 	bltu	r2,r3,815530 <_malloc_r+0x5c4>
  8154b0:	8804d3fa 	srli	r2,r17,15
  8154b4:	11801dc4 	addi	r6,r2,119
  8154b8:	300490fa 	slli	r2,r6,3
  8154bc:	003ed806 	br	815020 <_malloc_r+0xb4>
  8154c0:	48c000c4 	addi	r3,r9,3
  8154c4:	003f3106 	br	81518c <_malloc_r+0x220>
  8154c8:	05c020f4 	movhi	r23,131
  8154cc:	bddcaa04 	addi	r23,r23,29352
  8154d0:	b8800017 	ldw	r2,0(r23)
  8154d4:	988d883a 	add	r6,r19,r2
  8154d8:	b9800015 	stw	r6,0(r23)
  8154dc:	293fb21e 	bne	r5,r4,8153a8 <_malloc_r+0x43c>
  8154e0:	2083ffcc 	andi	r2,r4,4095
  8154e4:	103fb01e 	bne	r2,zero,8153a8 <_malloc_r+0x43c>
  8154e8:	e4000217 	ldw	r16,8(fp)
  8154ec:	9d45883a 	add	r2,r19,r21
  8154f0:	10800054 	ori	r2,r2,1
  8154f4:	80800115 	stw	r2,4(r16)
  8154f8:	b8c00017 	ldw	r3,0(r23)
  8154fc:	d0bc3817 	ldw	r2,-3872(gp)
  815500:	10c0012e 	bgeu	r2,r3,815508 <_malloc_r+0x59c>
  815504:	d0fc3815 	stw	r3,-3872(gp)
  815508:	d0bc3917 	ldw	r2,-3868(gp)
  81550c:	10ff962e 	bgeu	r2,r3,815368 <_malloc_r+0x3fc>
  815510:	d0fc3915 	stw	r3,-3868(gp)
  815514:	003f9406 	br	815368 <_malloc_r+0x3fc>
  815518:	00800104 	movi	r2,4
  81551c:	11001e36 	bltu	r2,r4,815598 <_malloc_r+0x62c>
  815520:	2804d1ba 	srli	r2,r5,6
  815524:	11000e04 	addi	r4,r2,56
  815528:	200690fa 	slli	r3,r4,3
  81552c:	003fc506 	br	815444 <_malloc_r+0x4d8>
  815530:	00815504 	movi	r2,1364
  815534:	10c01d2e 	bgeu	r2,r3,8155ac <_malloc_r+0x640>
  815538:	01801f84 	movi	r6,126
  81553c:	0080fc04 	movi	r2,1008
  815540:	003eb706 	br	815020 <_malloc_r+0xb4>
  815544:	00800204 	movi	r2,8
  815548:	10cbc83a 	sub	r5,r2,r3
  81554c:	2169883a 	add	r20,r4,r5
  815550:	003f9e06 	br	8153cc <_malloc_r+0x460>
  815554:	00bffe04 	movi	r2,-8
  815558:	a93ffd04 	addi	r4,r21,-12
  81555c:	2088703a 	and	r4,r4,r2
  815560:	b10b883a 	add	r5,r22,r4
  815564:	00c00144 	movi	r3,5
  815568:	28c00215 	stw	r3,8(r5)
  81556c:	28c00115 	stw	r3,4(r5)
  815570:	b0800117 	ldw	r2,4(r22)
  815574:	1080004c 	andi	r2,r2,1
  815578:	2084b03a 	or	r2,r4,r2
  81557c:	b0800115 	stw	r2,4(r22)
  815580:	313fdd2e 	bgeu	r6,r4,8154f8 <_malloc_r+0x58c>
  815584:	b1400204 	addi	r5,r22,8
  815588:	9009883a 	mov	r4,r18
  81558c:	0819d700 	call	819d70 <_free_r>
  815590:	e4000217 	ldw	r16,8(fp)
  815594:	003fd806 	br	8154f8 <_malloc_r+0x58c>
  815598:	00800504 	movi	r2,20
  81559c:	11001536 	bltu	r2,r4,8155f4 <_malloc_r+0x688>
  8155a0:	210016c4 	addi	r4,r4,91
  8155a4:	200690fa 	slli	r3,r4,3
  8155a8:	003fa606 	br	815444 <_malloc_r+0x4d8>
  8155ac:	8804d4ba 	srli	r2,r17,18
  8155b0:	11801f04 	addi	r6,r2,124
  8155b4:	300490fa 	slli	r2,r6,3
  8155b8:	003e9906 	br	815020 <_malloc_r+0xb4>
  8155bc:	2009d0ba 	srai	r4,r4,2
  8155c0:	014020f4 	movhi	r5,131
  8155c4:	29796d04 	addi	r5,r5,-6732
  8155c8:	00c00044 	movi	r3,1
  8155cc:	28800117 	ldw	r2,4(r5)
  8155d0:	1906983a 	sll	r3,r3,r4
  8155d4:	10c4b03a 	or	r2,r2,r3
  8155d8:	28800115 	stw	r2,4(r5)
  8155dc:	003fa306 	br	81546c <_malloc_r+0x500>
  8155e0:	0027883a 	mov	r19,zero
  8155e4:	00c00044 	movi	r3,1
  8155e8:	003f8606 	br	815404 <_malloc_r+0x498>
  8155ec:	d1200215 	stw	r4,-32760(gp)
  8155f0:	003f7306 	br	8153c0 <_malloc_r+0x454>
  8155f4:	00801504 	movi	r2,84
  8155f8:	11001936 	bltu	r2,r4,815660 <_malloc_r+0x6f4>
  8155fc:	2804d33a 	srli	r2,r5,12
  815600:	11001b84 	addi	r4,r2,110
  815604:	200690fa 	slli	r3,r4,3
  815608:	003f8e06 	br	815444 <_malloc_r+0x4d8>
  81560c:	480b883a 	mov	r5,r9
  815610:	6807883a 	mov	r3,r13
  815614:	288000cc 	andi	r2,r5,3
  815618:	18fffe04 	addi	r3,r3,-8
  81561c:	297fffc4 	addi	r5,r5,-1
  815620:	10001526 	beq	r2,zero,815678 <_malloc_r+0x70c>
  815624:	18800217 	ldw	r2,8(r3)
  815628:	10fffa26 	beq	r2,r3,815614 <_malloc_r+0x6a8>
  81562c:	2109883a 	add	r4,r4,r4
  815630:	393f1e36 	bltu	r7,r4,8152ac <_malloc_r+0x340>
  815634:	203f1d26 	beq	r4,zero,8152ac <_malloc_r+0x340>
  815638:	21c4703a 	and	r2,r4,r7
  81563c:	10000226 	beq	r2,zero,815648 <_malloc_r+0x6dc>
  815640:	6013883a 	mov	r9,r12
  815644:	003ee106 	br	8151cc <_malloc_r+0x260>
  815648:	2109883a 	add	r4,r4,r4
  81564c:	3904703a 	and	r2,r7,r4
  815650:	63000104 	addi	r12,r12,4
  815654:	103ffc26 	beq	r2,zero,815648 <_malloc_r+0x6dc>
  815658:	6013883a 	mov	r9,r12
  81565c:	003edb06 	br	8151cc <_malloc_r+0x260>
  815660:	00805504 	movi	r2,340
  815664:	11000836 	bltu	r2,r4,815688 <_malloc_r+0x71c>
  815668:	2804d3fa 	srli	r2,r5,15
  81566c:	11001dc4 	addi	r4,r2,119
  815670:	200690fa 	slli	r3,r4,3
  815674:	003f7306 	br	815444 <_malloc_r+0x4d8>
  815678:	0104303a 	nor	r2,zero,r4
  81567c:	388e703a 	and	r7,r7,r2
  815680:	e1c00115 	stw	r7,4(fp)
  815684:	003fe906 	br	81562c <_malloc_r+0x6c0>
  815688:	00815504 	movi	r2,1364
  81568c:	1100032e 	bgeu	r2,r4,81569c <_malloc_r+0x730>
  815690:	01001f84 	movi	r4,126
  815694:	00c0fc04 	movi	r3,1008
  815698:	003f6a06 	br	815444 <_malloc_r+0x4d8>
  81569c:	2804d4ba 	srli	r2,r5,18
  8156a0:	11001f04 	addi	r4,r2,124
  8156a4:	200690fa 	slli	r3,r4,3
  8156a8:	003f6606 	br	815444 <_malloc_r+0x4d8>

008156ac <memcpy>:
  8156ac:	01c003c4 	movi	r7,15
  8156b0:	2007883a 	mov	r3,r4
  8156b4:	3980032e 	bgeu	r7,r6,8156c4 <memcpy+0x18>
  8156b8:	2904b03a 	or	r2,r5,r4
  8156bc:	108000cc 	andi	r2,r2,3
  8156c0:	10000926 	beq	r2,zero,8156e8 <memcpy+0x3c>
  8156c4:	30000626 	beq	r6,zero,8156e0 <memcpy+0x34>
  8156c8:	30cd883a 	add	r6,r6,r3
  8156cc:	28800003 	ldbu	r2,0(r5)
  8156d0:	29400044 	addi	r5,r5,1
  8156d4:	18800005 	stb	r2,0(r3)
  8156d8:	18c00044 	addi	r3,r3,1
  8156dc:	30fffb1e 	bne	r6,r3,8156cc <memcpy+0x20>
  8156e0:	2005883a 	mov	r2,r4
  8156e4:	f800283a 	ret
  8156e8:	3811883a 	mov	r8,r7
  8156ec:	200f883a 	mov	r7,r4
  8156f0:	28c00017 	ldw	r3,0(r5)
  8156f4:	31bffc04 	addi	r6,r6,-16
  8156f8:	38c00015 	stw	r3,0(r7)
  8156fc:	28800117 	ldw	r2,4(r5)
  815700:	38800115 	stw	r2,4(r7)
  815704:	28c00217 	ldw	r3,8(r5)
  815708:	38c00215 	stw	r3,8(r7)
  81570c:	28800317 	ldw	r2,12(r5)
  815710:	29400404 	addi	r5,r5,16
  815714:	38800315 	stw	r2,12(r7)
  815718:	39c00404 	addi	r7,r7,16
  81571c:	41bff436 	bltu	r8,r6,8156f0 <memcpy+0x44>
  815720:	008000c4 	movi	r2,3
  815724:	1180072e 	bgeu	r2,r6,815744 <memcpy+0x98>
  815728:	1007883a 	mov	r3,r2
  81572c:	28800017 	ldw	r2,0(r5)
  815730:	31bfff04 	addi	r6,r6,-4
  815734:	29400104 	addi	r5,r5,4
  815738:	38800015 	stw	r2,0(r7)
  81573c:	39c00104 	addi	r7,r7,4
  815740:	19bffa36 	bltu	r3,r6,81572c <memcpy+0x80>
  815744:	3807883a 	mov	r3,r7
  815748:	003fde06 	br	8156c4 <memcpy+0x18>

0081574c <printf>:
  81574c:	defffb04 	addi	sp,sp,-20
  815750:	dfc00115 	stw	ra,4(sp)
  815754:	d9400215 	stw	r5,8(sp)
  815758:	d9800315 	stw	r6,12(sp)
  81575c:	d9c00415 	stw	r7,16(sp)
  815760:	008020f4 	movhi	r2,131
  815764:	10805b04 	addi	r2,r2,364
  815768:	10c00017 	ldw	r3,0(r2)
  81576c:	200b883a 	mov	r5,r4
  815770:	d8800204 	addi	r2,sp,8
  815774:	19000217 	ldw	r4,8(r3)
  815778:	100d883a 	mov	r6,r2
  81577c:	d8800015 	stw	r2,0(sp)
  815780:	0817e280 	call	817e28 <__vfprintf_internal>
  815784:	dfc00117 	ldw	ra,4(sp)
  815788:	dec00504 	addi	sp,sp,20
  81578c:	f800283a 	ret

00815790 <_printf_r>:
  815790:	defffc04 	addi	sp,sp,-16
  815794:	dfc00115 	stw	ra,4(sp)
  815798:	d9800215 	stw	r6,8(sp)
  81579c:	d9c00315 	stw	r7,12(sp)
  8157a0:	280d883a 	mov	r6,r5
  8157a4:	21400217 	ldw	r5,8(r4)
  8157a8:	d8c00204 	addi	r3,sp,8
  8157ac:	180f883a 	mov	r7,r3
  8157b0:	d8c00015 	stw	r3,0(sp)
  8157b4:	0815f7c0 	call	815f7c <___vfprintf_internal_r>
  8157b8:	dfc00117 	ldw	ra,4(sp)
  8157bc:	dec00404 	addi	sp,sp,16
  8157c0:	f800283a 	ret

008157c4 <_puts_r>:
  8157c4:	defff604 	addi	sp,sp,-40
  8157c8:	dc400715 	stw	r17,28(sp)
  8157cc:	2023883a 	mov	r17,r4
  8157d0:	2809883a 	mov	r4,r5
  8157d4:	dfc00915 	stw	ra,36(sp)
  8157d8:	dcc00815 	stw	r19,32(sp)
  8157dc:	2827883a 	mov	r19,r5
  8157e0:	0815adc0 	call	815adc <strlen>
  8157e4:	89400217 	ldw	r5,8(r17)
  8157e8:	00c020f4 	movhi	r3,131
  8157ec:	18e2ff04 	addi	r3,r3,-29700
  8157f0:	01c00044 	movi	r7,1
  8157f4:	12000044 	addi	r8,r2,1
  8157f8:	d8c00515 	stw	r3,20(sp)
  8157fc:	d9c00615 	stw	r7,24(sp)
  815800:	d8c00304 	addi	r3,sp,12
  815804:	01c00084 	movi	r7,2
  815808:	8809883a 	mov	r4,r17
  81580c:	d80d883a 	mov	r6,sp
  815810:	d8c00015 	stw	r3,0(sp)
  815814:	dcc00315 	stw	r19,12(sp)
  815818:	da000215 	stw	r8,8(sp)
  81581c:	d9c00115 	stw	r7,4(sp)
  815820:	d8800415 	stw	r2,16(sp)
  815824:	081a0840 	call	81a084 <__sfvwrite_r>
  815828:	00ffffc4 	movi	r3,-1
  81582c:	10000626 	beq	r2,zero,815848 <_puts_r+0x84>
  815830:	1805883a 	mov	r2,r3
  815834:	dfc00917 	ldw	ra,36(sp)
  815838:	dcc00817 	ldw	r19,32(sp)
  81583c:	dc400717 	ldw	r17,28(sp)
  815840:	dec00a04 	addi	sp,sp,40
  815844:	f800283a 	ret
  815848:	00c00284 	movi	r3,10
  81584c:	1805883a 	mov	r2,r3
  815850:	dfc00917 	ldw	ra,36(sp)
  815854:	dcc00817 	ldw	r19,32(sp)
  815858:	dc400717 	ldw	r17,28(sp)
  81585c:	dec00a04 	addi	sp,sp,40
  815860:	f800283a 	ret

00815864 <puts>:
  815864:	008020f4 	movhi	r2,131
  815868:	10805b04 	addi	r2,r2,364
  81586c:	200b883a 	mov	r5,r4
  815870:	11000017 	ldw	r4,0(r2)
  815874:	08157c41 	jmpi	8157c4 <_puts_r>

00815878 <srand>:
  815878:	008020f4 	movhi	r2,131
  81587c:	10805b04 	addi	r2,r2,364
  815880:	11400017 	ldw	r5,0(r2)
  815884:	0007883a 	mov	r3,zero
  815888:	28c02a15 	stw	r3,168(r5)
  81588c:	29002915 	stw	r4,164(r5)
  815890:	f800283a 	ret

00815894 <rand>:
  815894:	defffe04 	addi	sp,sp,-8
  815898:	008020f4 	movhi	r2,131
  81589c:	10805b04 	addi	r2,r2,364
  8158a0:	dc000015 	stw	r16,0(sp)
  8158a4:	14000017 	ldw	r16,0(r2)
  8158a8:	dfc00115 	stw	ra,4(sp)
  8158ac:	00932574 	movhi	r2,19605
  8158b0:	109fcb44 	addi	r2,r2,32557
  8158b4:	82002917 	ldw	r8,164(r16)
  8158b8:	82402a17 	ldw	r9,168(r16)
  8158bc:	00d614b4 	movhi	r3,22610
  8158c0:	18fd0b44 	addi	r3,r3,-3027
  8158c4:	4009883a 	mov	r4,r8
  8158c8:	180f883a 	mov	r7,r3
  8158cc:	100d883a 	mov	r6,r2
  8158d0:	480b883a 	mov	r5,r9
  8158d4:	08146cc0 	call	8146cc <__muldi3>
  8158d8:	02000044 	movi	r8,1
  8158dc:	1209883a 	add	r4,r2,r8
  8158e0:	2095803a 	cmpltu	r10,r4,r2
  8158e4:	50d5883a 	add	r10,r10,r3
  8158e8:	81002915 	stw	r4,164(r16)
  8158ec:	01200034 	movhi	r4,32768
  8158f0:	213fffc4 	addi	r4,r4,-1
  8158f4:	2284703a 	and	r2,r4,r10
  8158f8:	82802a15 	stw	r10,168(r16)
  8158fc:	dfc00117 	ldw	ra,4(sp)
  815900:	dc000017 	ldw	r16,0(sp)
  815904:	dec00204 	addi	sp,sp,8
  815908:	f800283a 	ret

0081590c <_sbrk_r>:
  81590c:	defffd04 	addi	sp,sp,-12
  815910:	dc000015 	stw	r16,0(sp)
  815914:	040020f4 	movhi	r16,131
  815918:	841c9104 	addi	r16,r16,29252
  81591c:	dc400115 	stw	r17,4(sp)
  815920:	80000015 	stw	zero,0(r16)
  815924:	2023883a 	mov	r17,r4
  815928:	2809883a 	mov	r4,r5
  81592c:	dfc00215 	stw	ra,8(sp)
  815930:	081e4900 	call	81e490 <sbrk>
  815934:	1007883a 	mov	r3,r2
  815938:	00bfffc4 	movi	r2,-1
  81593c:	18800626 	beq	r3,r2,815958 <_sbrk_r+0x4c>
  815940:	1805883a 	mov	r2,r3
  815944:	dfc00217 	ldw	ra,8(sp)
  815948:	dc400117 	ldw	r17,4(sp)
  81594c:	dc000017 	ldw	r16,0(sp)
  815950:	dec00304 	addi	sp,sp,12
  815954:	f800283a 	ret
  815958:	80800017 	ldw	r2,0(r16)
  81595c:	103ff826 	beq	r2,zero,815940 <_sbrk_r+0x34>
  815960:	88800015 	stw	r2,0(r17)
  815964:	1805883a 	mov	r2,r3
  815968:	dfc00217 	ldw	ra,8(sp)
  81596c:	dc400117 	ldw	r17,4(sp)
  815970:	dc000017 	ldw	r16,0(sp)
  815974:	dec00304 	addi	sp,sp,12
  815978:	f800283a 	ret

0081597c <sprintf>:
  81597c:	deffe504 	addi	sp,sp,-108
  815980:	2013883a 	mov	r9,r4
  815984:	dfc01815 	stw	ra,96(sp)
  815988:	d9801915 	stw	r6,100(sp)
  81598c:	d9c01a15 	stw	r7,104(sp)
  815990:	d8801904 	addi	r2,sp,100
  815994:	d8800015 	stw	r2,0(sp)
  815998:	008020f4 	movhi	r2,131
  81599c:	10805b04 	addi	r2,r2,364
  8159a0:	11000017 	ldw	r4,0(r2)
  8159a4:	d9c00017 	ldw	r7,0(sp)
  8159a8:	00808204 	movi	r2,520
  8159ac:	00e00034 	movhi	r3,32768
  8159b0:	18ffffc4 	addi	r3,r3,-1
  8159b4:	280d883a 	mov	r6,r5
  8159b8:	d880040d 	sth	r2,16(sp)
  8159bc:	d9400104 	addi	r5,sp,4
  8159c0:	00bfffc4 	movi	r2,-1
  8159c4:	d8c00615 	stw	r3,24(sp)
  8159c8:	d8c00315 	stw	r3,12(sp)
  8159cc:	da400515 	stw	r9,20(sp)
  8159d0:	d880048d 	sth	r2,18(sp)
  8159d4:	da400115 	stw	r9,4(sp)
  8159d8:	0815f7c0 	call	815f7c <___vfprintf_internal_r>
  8159dc:	d8c00117 	ldw	r3,4(sp)
  8159e0:	18000005 	stb	zero,0(r3)
  8159e4:	dfc01817 	ldw	ra,96(sp)
  8159e8:	dec01b04 	addi	sp,sp,108
  8159ec:	f800283a 	ret

008159f0 <_sprintf_r>:
  8159f0:	deffe604 	addi	sp,sp,-104
  8159f4:	2813883a 	mov	r9,r5
  8159f8:	dfc01815 	stw	ra,96(sp)
  8159fc:	d9c01915 	stw	r7,100(sp)
  815a00:	d8801904 	addi	r2,sp,100
  815a04:	d8800015 	stw	r2,0(sp)
  815a08:	100f883a 	mov	r7,r2
  815a0c:	00808204 	movi	r2,520
  815a10:	00e00034 	movhi	r3,32768
  815a14:	18ffffc4 	addi	r3,r3,-1
  815a18:	d880040d 	sth	r2,16(sp)
  815a1c:	d9400104 	addi	r5,sp,4
  815a20:	00bfffc4 	movi	r2,-1
  815a24:	d8c00615 	stw	r3,24(sp)
  815a28:	d8c00315 	stw	r3,12(sp)
  815a2c:	da400515 	stw	r9,20(sp)
  815a30:	d880048d 	sth	r2,18(sp)
  815a34:	da400115 	stw	r9,4(sp)
  815a38:	0815f7c0 	call	815f7c <___vfprintf_internal_r>
  815a3c:	d8c00117 	ldw	r3,4(sp)
  815a40:	18000005 	stb	zero,0(r3)
  815a44:	dfc01817 	ldw	ra,96(sp)
  815a48:	dec01a04 	addi	sp,sp,104
  815a4c:	f800283a 	ret

00815a50 <strcpy>:
  815a50:	2904b03a 	or	r2,r5,r4
  815a54:	108000cc 	andi	r2,r2,3
  815a58:	10000826 	beq	r2,zero,815a7c <strcpy+0x2c>
  815a5c:	2007883a 	mov	r3,r4
  815a60:	28800003 	ldbu	r2,0(r5)
  815a64:	29400044 	addi	r5,r5,1
  815a68:	18800005 	stb	r2,0(r3)
  815a6c:	18c00044 	addi	r3,r3,1
  815a70:	103ffb1e 	bne	r2,zero,815a60 <strcpy+0x10>
  815a74:	2005883a 	mov	r2,r4
  815a78:	f800283a 	ret
  815a7c:	29800017 	ldw	r6,0(r5)
  815a80:	023fbff4 	movhi	r8,65279
  815a84:	423fbfc4 	addi	r8,r8,-257
  815a88:	02a02074 	movhi	r10,32897
  815a8c:	52a02004 	addi	r10,r10,-32640
  815a90:	3205883a 	add	r2,r6,r8
  815a94:	0186303a 	nor	r3,zero,r6
  815a98:	10c4703a 	and	r2,r2,r3
  815a9c:	1284703a 	and	r2,r2,r10
  815aa0:	200f883a 	mov	r7,r4
  815aa4:	10000b1e 	bne	r2,zero,815ad4 <strcpy+0x84>
  815aa8:	4013883a 	mov	r9,r8
  815aac:	5011883a 	mov	r8,r10
  815ab0:	39800015 	stw	r6,0(r7)
  815ab4:	29400104 	addi	r5,r5,4
  815ab8:	29800017 	ldw	r6,0(r5)
  815abc:	39c00104 	addi	r7,r7,4
  815ac0:	3245883a 	add	r2,r6,r9
  815ac4:	0186303a 	nor	r3,zero,r6
  815ac8:	10c4703a 	and	r2,r2,r3
  815acc:	1204703a 	and	r2,r2,r8
  815ad0:	103ff726 	beq	r2,zero,815ab0 <strcpy+0x60>
  815ad4:	3807883a 	mov	r3,r7
  815ad8:	003fe106 	br	815a60 <strcpy+0x10>

00815adc <strlen>:
  815adc:	208000cc 	andi	r2,r4,3
  815ae0:	2011883a 	mov	r8,r4
  815ae4:	1000161e 	bne	r2,zero,815b40 <strlen+0x64>
  815ae8:	20c00017 	ldw	r3,0(r4)
  815aec:	017fbff4 	movhi	r5,65279
  815af0:	297fbfc4 	addi	r5,r5,-257
  815af4:	01e02074 	movhi	r7,32897
  815af8:	39e02004 	addi	r7,r7,-32640
  815afc:	1945883a 	add	r2,r3,r5
  815b00:	11c4703a 	and	r2,r2,r7
  815b04:	00c6303a 	nor	r3,zero,r3
  815b08:	1886703a 	and	r3,r3,r2
  815b0c:	18000c1e 	bne	r3,zero,815b40 <strlen+0x64>
  815b10:	280d883a 	mov	r6,r5
  815b14:	380b883a 	mov	r5,r7
  815b18:	21000104 	addi	r4,r4,4
  815b1c:	20800017 	ldw	r2,0(r4)
  815b20:	1187883a 	add	r3,r2,r6
  815b24:	1946703a 	and	r3,r3,r5
  815b28:	0084303a 	nor	r2,zero,r2
  815b2c:	10c4703a 	and	r2,r2,r3
  815b30:	103ff926 	beq	r2,zero,815b18 <strlen+0x3c>
  815b34:	20800007 	ldb	r2,0(r4)
  815b38:	10000326 	beq	r2,zero,815b48 <strlen+0x6c>
  815b3c:	21000044 	addi	r4,r4,1
  815b40:	20800007 	ldb	r2,0(r4)
  815b44:	103ffd1e 	bne	r2,zero,815b3c <strlen+0x60>
  815b48:	2205c83a 	sub	r2,r4,r8
  815b4c:	f800283a 	ret

00815b50 <strncat>:
  815b50:	208000cc 	andi	r2,r4,3
  815b54:	10001426 	beq	r2,zero,815ba8 <strncat+0x58>
  815b58:	2007883a 	mov	r3,r4
  815b5c:	00000106 	br	815b64 <strncat+0x14>
  815b60:	18c00044 	addi	r3,r3,1
  815b64:	18800007 	ldb	r2,0(r3)
  815b68:	103ffd1e 	bne	r2,zero,815b60 <strncat+0x10>
  815b6c:	31bfffc4 	addi	r6,r6,-1
  815b70:	00bfffc4 	movi	r2,-1
  815b74:	30800a26 	beq	r6,r2,815ba0 <strncat+0x50>
  815b78:	28800003 	ldbu	r2,0(r5)
  815b7c:	29400044 	addi	r5,r5,1
  815b80:	18800005 	stb	r2,0(r3)
  815b84:	10000626 	beq	r2,zero,815ba0 <strncat+0x50>
  815b88:	18c00044 	addi	r3,r3,1
  815b8c:	303ff71e 	bne	r6,zero,815b6c <strncat+0x1c>
  815b90:	31bfffc4 	addi	r6,r6,-1
  815b94:	00bfffc4 	movi	r2,-1
  815b98:	18000005 	stb	zero,0(r3)
  815b9c:	30bff61e 	bne	r6,r2,815b78 <strncat+0x28>
  815ba0:	2005883a 	mov	r2,r4
  815ba4:	f800283a 	ret
  815ba8:	20c00017 	ldw	r3,0(r4)
  815bac:	023fbff4 	movhi	r8,65279
  815bb0:	423fbfc4 	addi	r8,r8,-257
  815bb4:	02a02074 	movhi	r10,32897
  815bb8:	52a02004 	addi	r10,r10,-32640
  815bbc:	1a05883a 	add	r2,r3,r8
  815bc0:	1284703a 	and	r2,r2,r10
  815bc4:	00c6303a 	nor	r3,zero,r3
  815bc8:	1886703a 	and	r3,r3,r2
  815bcc:	200f883a 	mov	r7,r4
  815bd0:	1800091e 	bne	r3,zero,815bf8 <strncat+0xa8>
  815bd4:	4013883a 	mov	r9,r8
  815bd8:	5011883a 	mov	r8,r10
  815bdc:	39c00104 	addi	r7,r7,4
  815be0:	38800017 	ldw	r2,0(r7)
  815be4:	1247883a 	add	r3,r2,r9
  815be8:	1a06703a 	and	r3,r3,r8
  815bec:	0084303a 	nor	r2,zero,r2
  815bf0:	10c4703a 	and	r2,r2,r3
  815bf4:	103ff926 	beq	r2,zero,815bdc <strncat+0x8c>
  815bf8:	3807883a 	mov	r3,r7
  815bfc:	003fd906 	br	815b64 <strncat+0x14>

00815c00 <strncpy>:
  815c00:	2904b03a 	or	r2,r5,r4
  815c04:	108000cc 	andi	r2,r2,3
  815c08:	00c000c4 	movi	r3,3
  815c0c:	1000291e 	bne	r2,zero,815cb4 <strncpy+0xb4>
  815c10:	1980282e 	bgeu	r3,r6,815cb4 <strncpy+0xb4>
  815c14:	1817883a 	mov	r11,r3
  815c18:	2011883a 	mov	r8,r4
  815c1c:	02bfbff4 	movhi	r10,65279
  815c20:	52bfbfc4 	addi	r10,r10,-257
  815c24:	02602074 	movhi	r9,32897
  815c28:	4a602004 	addi	r9,r9,-32640
  815c2c:	29c00017 	ldw	r7,0(r5)
  815c30:	3a85883a 	add	r2,r7,r10
  815c34:	01c6303a 	nor	r3,zero,r7
  815c38:	10c4703a 	and	r2,r2,r3
  815c3c:	1244703a 	and	r2,r2,r9
  815c40:	1000051e 	bne	r2,zero,815c58 <strncpy+0x58>
  815c44:	31bfff04 	addi	r6,r6,-4
  815c48:	41c00015 	stw	r7,0(r8)
  815c4c:	29400104 	addi	r5,r5,4
  815c50:	42000104 	addi	r8,r8,4
  815c54:	59bff536 	bltu	r11,r6,815c2c <strncpy+0x2c>
  815c58:	400f883a 	mov	r7,r8
  815c5c:	30001326 	beq	r6,zero,815cac <strncpy+0xac>
  815c60:	28800003 	ldbu	r2,0(r5)
  815c64:	31bfffc4 	addi	r6,r6,-1
  815c68:	38c00044 	addi	r3,r7,1
  815c6c:	38800005 	stb	r2,0(r7)
  815c70:	10000826 	beq	r2,zero,815c94 <strncpy+0x94>
  815c74:	29400044 	addi	r5,r5,1
  815c78:	30000c26 	beq	r6,zero,815cac <strncpy+0xac>
  815c7c:	28800003 	ldbu	r2,0(r5)
  815c80:	31bfffc4 	addi	r6,r6,-1
  815c84:	29400044 	addi	r5,r5,1
  815c88:	18800005 	stb	r2,0(r3)
  815c8c:	18c00044 	addi	r3,r3,1
  815c90:	103ff91e 	bne	r2,zero,815c78 <strncpy+0x78>
  815c94:	30000526 	beq	r6,zero,815cac <strncpy+0xac>
  815c98:	1805883a 	mov	r2,r3
  815c9c:	30cd883a 	add	r6,r6,r3
  815ca0:	10000005 	stb	zero,0(r2)
  815ca4:	10800044 	addi	r2,r2,1
  815ca8:	30bffd1e 	bne	r6,r2,815ca0 <strncpy+0xa0>
  815cac:	2005883a 	mov	r2,r4
  815cb0:	f800283a 	ret
  815cb4:	200f883a 	mov	r7,r4
  815cb8:	003fe806 	br	815c5c <strncpy+0x5c>

00815cbc <_strtol_r>:
  815cbc:	defff304 	addi	sp,sp,-52
  815cc0:	008020f4 	movhi	r2,131
  815cc4:	10805a04 	addi	r2,r2,360
  815cc8:	dcc00615 	stw	r19,24(sp)
  815ccc:	14c00017 	ldw	r19,0(r2)
  815cd0:	ddc00a15 	stw	r23,40(sp)
  815cd4:	dc000315 	stw	r16,12(sp)
  815cd8:	dfc00c15 	stw	ra,48(sp)
  815cdc:	df000b15 	stw	fp,44(sp)
  815ce0:	dd800915 	stw	r22,36(sp)
  815ce4:	dd400815 	stw	r21,32(sp)
  815ce8:	dd000715 	stw	r20,28(sp)
  815cec:	dc800515 	stw	r18,20(sp)
  815cf0:	dc400415 	stw	r17,16(sp)
  815cf4:	282f883a 	mov	r23,r5
  815cf8:	d9000015 	stw	r4,0(sp)
  815cfc:	d9800115 	stw	r6,4(sp)
  815d00:	2821883a 	mov	r16,r5
  815d04:	84400007 	ldb	r17,0(r16)
  815d08:	84000044 	addi	r16,r16,1
  815d0c:	9c47883a 	add	r3,r19,r17
  815d10:	18800003 	ldbu	r2,0(r3)
  815d14:	1080020c 	andi	r2,r2,8
  815d18:	103ffa1e 	bne	r2,zero,815d04 <_strtol_r+0x48>
  815d1c:	00800b44 	movi	r2,45
  815d20:	88805c26 	beq	r17,r2,815e94 <_strtol_r+0x1d8>
  815d24:	00800ac4 	movi	r2,43
  815d28:	88805726 	beq	r17,r2,815e88 <_strtol_r+0x1cc>
  815d2c:	0039883a 	mov	fp,zero
  815d30:	3807003a 	cmpeq	r3,r7,zero
  815d34:	1800431e 	bne	r3,zero,815e44 <_strtol_r+0x188>
  815d38:	00800404 	movi	r2,16
  815d3c:	38804126 	beq	r7,r2,815e44 <_strtol_r+0x188>
  815d40:	3829883a 	mov	r20,r7
  815d44:	e02cc03a 	cmpne	r22,fp,zero
  815d48:	b0004b1e 	bne	r22,zero,815e78 <_strtol_r+0x1bc>
  815d4c:	04a00034 	movhi	r18,32768
  815d50:	94bfffc4 	addi	r18,r18,-1
  815d54:	9009883a 	mov	r4,r18
  815d58:	a00b883a 	mov	r5,r20
  815d5c:	d9c00215 	stw	r7,8(sp)
  815d60:	08146c40 	call	8146c4 <__umodsi3>
  815d64:	9009883a 	mov	r4,r18
  815d68:	a00b883a 	mov	r5,r20
  815d6c:	102b883a 	mov	r21,r2
  815d70:	08146bc0 	call	8146bc <__udivsi3>
  815d74:	1011883a 	mov	r8,r2
  815d78:	9c45883a 	add	r2,r19,r17
  815d7c:	11000003 	ldbu	r4,0(r2)
  815d80:	000b883a 	mov	r5,zero
  815d84:	000d883a 	mov	r6,zero
  815d88:	20c0010c 	andi	r3,r4,4
  815d8c:	d9c00217 	ldw	r7,8(sp)
  815d90:	18000e26 	beq	r3,zero,815dcc <_strtol_r+0x110>
  815d94:	88fff404 	addi	r3,r17,-48
  815d98:	19c0140e 	bge	r3,r7,815dec <_strtol_r+0x130>
  815d9c:	30003116 	blt	r6,zero,815e64 <_strtol_r+0x1a8>
  815da0:	41403036 	bltu	r8,r5,815e64 <_strtol_r+0x1a8>
  815da4:	2a002e26 	beq	r5,r8,815e60 <_strtol_r+0x1a4>
  815da8:	2d05383a 	mul	r2,r5,r20
  815dac:	01800044 	movi	r6,1
  815db0:	10cb883a 	add	r5,r2,r3
  815db4:	84400007 	ldb	r17,0(r16)
  815db8:	84000044 	addi	r16,r16,1
  815dbc:	9c45883a 	add	r2,r19,r17
  815dc0:	11000003 	ldbu	r4,0(r2)
  815dc4:	20c0010c 	andi	r3,r4,4
  815dc8:	183ff21e 	bne	r3,zero,815d94 <_strtol_r+0xd8>
  815dcc:	208000cc 	andi	r2,r4,3
  815dd0:	10000626 	beq	r2,zero,815dec <_strtol_r+0x130>
  815dd4:	2080004c 	andi	r2,r4,1
  815dd8:	1005003a 	cmpeq	r2,r2,zero
  815ddc:	1000231e 	bne	r2,zero,815e6c <_strtol_r+0x1b0>
  815de0:	00800dc4 	movi	r2,55
  815de4:	8887c83a 	sub	r3,r17,r2
  815de8:	19ffec16 	blt	r3,r7,815d9c <_strtol_r+0xe0>
  815dec:	30002d16 	blt	r6,zero,815ea4 <_strtol_r+0x1e8>
  815df0:	b000231e 	bne	r22,zero,815e80 <_strtol_r+0x1c4>
  815df4:	2807883a 	mov	r3,r5
  815df8:	d8800117 	ldw	r2,4(sp)
  815dfc:	10000426 	beq	r2,zero,815e10 <_strtol_r+0x154>
  815e00:	30000126 	beq	r6,zero,815e08 <_strtol_r+0x14c>
  815e04:	85ffffc4 	addi	r23,r16,-1
  815e08:	d9000117 	ldw	r4,4(sp)
  815e0c:	25c00015 	stw	r23,0(r4)
  815e10:	1805883a 	mov	r2,r3
  815e14:	dfc00c17 	ldw	ra,48(sp)
  815e18:	df000b17 	ldw	fp,44(sp)
  815e1c:	ddc00a17 	ldw	r23,40(sp)
  815e20:	dd800917 	ldw	r22,36(sp)
  815e24:	dd400817 	ldw	r21,32(sp)
  815e28:	dd000717 	ldw	r20,28(sp)
  815e2c:	dcc00617 	ldw	r19,24(sp)
  815e30:	dc800517 	ldw	r18,20(sp)
  815e34:	dc400417 	ldw	r17,16(sp)
  815e38:	dc000317 	ldw	r16,12(sp)
  815e3c:	dec00d04 	addi	sp,sp,52
  815e40:	f800283a 	ret
  815e44:	00800c04 	movi	r2,48
  815e48:	88801d26 	beq	r17,r2,815ec0 <_strtol_r+0x204>
  815e4c:	183fbc26 	beq	r3,zero,815d40 <_strtol_r+0x84>
  815e50:	00800c04 	movi	r2,48
  815e54:	88802726 	beq	r17,r2,815ef4 <_strtol_r+0x238>
  815e58:	01c00284 	movi	r7,10
  815e5c:	003fb806 	br	815d40 <_strtol_r+0x84>
  815e60:	a8ffd10e 	bge	r21,r3,815da8 <_strtol_r+0xec>
  815e64:	01bfffc4 	movi	r6,-1
  815e68:	003fd206 	br	815db4 <_strtol_r+0xf8>
  815e6c:	008015c4 	movi	r2,87
  815e70:	8887c83a 	sub	r3,r17,r2
  815e74:	003fdc06 	br	815de8 <_strtol_r+0x12c>
  815e78:	04a00034 	movhi	r18,32768
  815e7c:	003fb506 	br	815d54 <_strtol_r+0x98>
  815e80:	0147c83a 	sub	r3,zero,r5
  815e84:	003fdc06 	br	815df8 <_strtol_r+0x13c>
  815e88:	84400007 	ldb	r17,0(r16)
  815e8c:	84000044 	addi	r16,r16,1
  815e90:	003fa606 	br	815d2c <_strtol_r+0x70>
  815e94:	84400007 	ldb	r17,0(r16)
  815e98:	07000044 	movi	fp,1
  815e9c:	84000044 	addi	r16,r16,1
  815ea0:	003fa306 	br	815d30 <_strtol_r+0x74>
  815ea4:	e005003a 	cmpeq	r2,fp,zero
  815ea8:	10000f1e 	bne	r2,zero,815ee8 <_strtol_r+0x22c>
  815eac:	00e00034 	movhi	r3,32768
  815eb0:	d9000017 	ldw	r4,0(sp)
  815eb4:	00800884 	movi	r2,34
  815eb8:	20800015 	stw	r2,0(r4)
  815ebc:	003fce06 	br	815df8 <_strtol_r+0x13c>
  815ec0:	81000007 	ldb	r4,0(r16)
  815ec4:	00801e04 	movi	r2,120
  815ec8:	20800226 	beq	r4,r2,815ed4 <_strtol_r+0x218>
  815ecc:	00801604 	movi	r2,88
  815ed0:	20bfde1e 	bne	r4,r2,815e4c <_strtol_r+0x190>
  815ed4:	84400047 	ldb	r17,1(r16)
  815ed8:	01c00404 	movi	r7,16
  815edc:	84000084 	addi	r16,r16,2
  815ee0:	3829883a 	mov	r20,r7
  815ee4:	003f9706 	br	815d44 <_strtol_r+0x88>
  815ee8:	00e00034 	movhi	r3,32768
  815eec:	18ffffc4 	addi	r3,r3,-1
  815ef0:	003fef06 	br	815eb0 <_strtol_r+0x1f4>
  815ef4:	01c00204 	movi	r7,8
  815ef8:	3829883a 	mov	r20,r7
  815efc:	003f9106 	br	815d44 <_strtol_r+0x88>

00815f00 <strtol>:
  815f00:	008020f4 	movhi	r2,131
  815f04:	10805b04 	addi	r2,r2,364
  815f08:	2013883a 	mov	r9,r4
  815f0c:	11000017 	ldw	r4,0(r2)
  815f10:	2805883a 	mov	r2,r5
  815f14:	300f883a 	mov	r7,r6
  815f18:	480b883a 	mov	r5,r9
  815f1c:	100d883a 	mov	r6,r2
  815f20:	0815cbc1 	jmpi	815cbc <_strtol_r>

00815f24 <__sprint_r>:
  815f24:	30800217 	ldw	r2,8(r6)
  815f28:	defffe04 	addi	sp,sp,-8
  815f2c:	dc000015 	stw	r16,0(sp)
  815f30:	dfc00115 	stw	ra,4(sp)
  815f34:	3021883a 	mov	r16,r6
  815f38:	0007883a 	mov	r3,zero
  815f3c:	1000061e 	bne	r2,zero,815f58 <__sprint_r+0x34>
  815f40:	1805883a 	mov	r2,r3
  815f44:	30000115 	stw	zero,4(r6)
  815f48:	dfc00117 	ldw	ra,4(sp)
  815f4c:	dc000017 	ldw	r16,0(sp)
  815f50:	dec00204 	addi	sp,sp,8
  815f54:	f800283a 	ret
  815f58:	081a0840 	call	81a084 <__sfvwrite_r>
  815f5c:	1007883a 	mov	r3,r2
  815f60:	1805883a 	mov	r2,r3
  815f64:	80000115 	stw	zero,4(r16)
  815f68:	80000215 	stw	zero,8(r16)
  815f6c:	dfc00117 	ldw	ra,4(sp)
  815f70:	dc000017 	ldw	r16,0(sp)
  815f74:	dec00204 	addi	sp,sp,8
  815f78:	f800283a 	ret

00815f7c <___vfprintf_internal_r>:
  815f7c:	defea404 	addi	sp,sp,-1392
  815f80:	dd815815 	stw	r22,1376(sp)
  815f84:	dc015215 	stw	r16,1352(sp)
  815f88:	d9c15115 	stw	r7,1348(sp)
  815f8c:	dfc15b15 	stw	ra,1388(sp)
  815f90:	df015a15 	stw	fp,1384(sp)
  815f94:	ddc15915 	stw	r23,1380(sp)
  815f98:	dd415715 	stw	r21,1372(sp)
  815f9c:	dd015615 	stw	r20,1368(sp)
  815fa0:	dcc15515 	stw	r19,1364(sp)
  815fa4:	dc815415 	stw	r18,1360(sp)
  815fa8:	dc415315 	stw	r17,1356(sp)
  815fac:	282d883a 	mov	r22,r5
  815fb0:	3021883a 	mov	r16,r6
  815fb4:	d9014f15 	stw	r4,1340(sp)
  815fb8:	081a6a80 	call	81a6a8 <_localeconv_r>
  815fbc:	10800017 	ldw	r2,0(r2)
  815fc0:	d9c15117 	ldw	r7,1348(sp)
  815fc4:	d8814915 	stw	r2,1316(sp)
  815fc8:	d8814f17 	ldw	r2,1340(sp)
  815fcc:	10000226 	beq	r2,zero,815fd8 <___vfprintf_internal_r+0x5c>
  815fd0:	10800e17 	ldw	r2,56(r2)
  815fd4:	10020d26 	beq	r2,zero,81680c <___vfprintf_internal_r+0x890>
  815fd8:	b080030b 	ldhu	r2,12(r22)
  815fdc:	1080020c 	andi	r2,r2,8
  815fe0:	10020e26 	beq	r2,zero,81681c <___vfprintf_internal_r+0x8a0>
  815fe4:	b0800417 	ldw	r2,16(r22)
  815fe8:	10020c26 	beq	r2,zero,81681c <___vfprintf_internal_r+0x8a0>
  815fec:	b200030b 	ldhu	r8,12(r22)
  815ff0:	00800284 	movi	r2,10
  815ff4:	40c0068c 	andi	r3,r8,26
  815ff8:	18802f1e 	bne	r3,r2,8160b8 <___vfprintf_internal_r+0x13c>
  815ffc:	b080038f 	ldh	r2,14(r22)
  816000:	10002d16 	blt	r2,zero,8160b8 <___vfprintf_internal_r+0x13c>
  816004:	b240038b 	ldhu	r9,14(r22)
  816008:	b2800717 	ldw	r10,28(r22)
  81600c:	b2c00917 	ldw	r11,36(r22)
  816010:	d9014f17 	ldw	r4,1340(sp)
  816014:	dc402904 	addi	r17,sp,164
  816018:	d8804004 	addi	r2,sp,256
  81601c:	00c10004 	movi	r3,1024
  816020:	423fff4c 	andi	r8,r8,65533
  816024:	800d883a 	mov	r6,r16
  816028:	880b883a 	mov	r5,r17
  81602c:	da002c0d 	sth	r8,176(sp)
  816030:	da402c8d 	sth	r9,178(sp)
  816034:	da803015 	stw	r10,192(sp)
  816038:	dac03215 	stw	r11,200(sp)
  81603c:	d8802d15 	stw	r2,180(sp)
  816040:	d8c02e15 	stw	r3,184(sp)
  816044:	d8802915 	stw	r2,164(sp)
  816048:	d8c02b15 	stw	r3,172(sp)
  81604c:	d8002f15 	stw	zero,188(sp)
  816050:	0815f7c0 	call	815f7c <___vfprintf_internal_r>
  816054:	d8814b15 	stw	r2,1324(sp)
  816058:	10000416 	blt	r2,zero,81606c <___vfprintf_internal_r+0xf0>
  81605c:	d9014f17 	ldw	r4,1340(sp)
  816060:	880b883a 	mov	r5,r17
  816064:	08197540 	call	819754 <_fflush_r>
  816068:	1002321e 	bne	r2,zero,816934 <___vfprintf_internal_r+0x9b8>
  81606c:	d8802c0b 	ldhu	r2,176(sp)
  816070:	1080100c 	andi	r2,r2,64
  816074:	10000326 	beq	r2,zero,816084 <___vfprintf_internal_r+0x108>
  816078:	b080030b 	ldhu	r2,12(r22)
  81607c:	10801014 	ori	r2,r2,64
  816080:	b080030d 	sth	r2,12(r22)
  816084:	d8814b17 	ldw	r2,1324(sp)
  816088:	dfc15b17 	ldw	ra,1388(sp)
  81608c:	df015a17 	ldw	fp,1384(sp)
  816090:	ddc15917 	ldw	r23,1380(sp)
  816094:	dd815817 	ldw	r22,1376(sp)
  816098:	dd415717 	ldw	r21,1372(sp)
  81609c:	dd015617 	ldw	r20,1368(sp)
  8160a0:	dcc15517 	ldw	r19,1364(sp)
  8160a4:	dc815417 	ldw	r18,1360(sp)
  8160a8:	dc415317 	ldw	r17,1356(sp)
  8160ac:	dc015217 	ldw	r16,1352(sp)
  8160b0:	dec15c04 	addi	sp,sp,1392
  8160b4:	f800283a 	ret
  8160b8:	0005883a 	mov	r2,zero
  8160bc:	0007883a 	mov	r3,zero
  8160c0:	dd401904 	addi	r21,sp,100
  8160c4:	d8814215 	stw	r2,1288(sp)
  8160c8:	802f883a 	mov	r23,r16
  8160cc:	d8c14315 	stw	r3,1292(sp)
  8160d0:	d8014b15 	stw	zero,1324(sp)
  8160d4:	d8014815 	stw	zero,1312(sp)
  8160d8:	d8014415 	stw	zero,1296(sp)
  8160dc:	d8014715 	stw	zero,1308(sp)
  8160e0:	dd400c15 	stw	r21,48(sp)
  8160e4:	d8000e15 	stw	zero,56(sp)
  8160e8:	d8000d15 	stw	zero,52(sp)
  8160ec:	b8800007 	ldb	r2,0(r23)
  8160f0:	10001926 	beq	r2,zero,816158 <___vfprintf_internal_r+0x1dc>
  8160f4:	00c00944 	movi	r3,37
  8160f8:	10c01726 	beq	r2,r3,816158 <___vfprintf_internal_r+0x1dc>
  8160fc:	b821883a 	mov	r16,r23
  816100:	00000106 	br	816108 <___vfprintf_internal_r+0x18c>
  816104:	10c00326 	beq	r2,r3,816114 <___vfprintf_internal_r+0x198>
  816108:	84000044 	addi	r16,r16,1
  81610c:	80800007 	ldb	r2,0(r16)
  816110:	103ffc1e 	bne	r2,zero,816104 <___vfprintf_internal_r+0x188>
  816114:	85e7c83a 	sub	r19,r16,r23
  816118:	98000e26 	beq	r19,zero,816154 <___vfprintf_internal_r+0x1d8>
  81611c:	dc800e17 	ldw	r18,56(sp)
  816120:	dc400d17 	ldw	r17,52(sp)
  816124:	008001c4 	movi	r2,7
  816128:	94e5883a 	add	r18,r18,r19
  81612c:	8c400044 	addi	r17,r17,1
  816130:	adc00015 	stw	r23,0(r21)
  816134:	dc800e15 	stw	r18,56(sp)
  816138:	acc00115 	stw	r19,4(r21)
  81613c:	dc400d15 	stw	r17,52(sp)
  816140:	14428b16 	blt	r2,r17,816b70 <___vfprintf_internal_r+0xbf4>
  816144:	ad400204 	addi	r21,r21,8
  816148:	d9014b17 	ldw	r4,1324(sp)
  81614c:	24c9883a 	add	r4,r4,r19
  816150:	d9014b15 	stw	r4,1324(sp)
  816154:	802f883a 	mov	r23,r16
  816158:	b8800007 	ldb	r2,0(r23)
  81615c:	10013c26 	beq	r2,zero,816650 <___vfprintf_internal_r+0x6d4>
  816160:	bdc00044 	addi	r23,r23,1
  816164:	d8000405 	stb	zero,16(sp)
  816168:	b8c00007 	ldb	r3,0(r23)
  81616c:	04ffffc4 	movi	r19,-1
  816170:	d8014c15 	stw	zero,1328(sp)
  816174:	d8014a15 	stw	zero,1320(sp)
  816178:	d8c14d15 	stw	r3,1332(sp)
  81617c:	bdc00044 	addi	r23,r23,1
  816180:	d9414d17 	ldw	r5,1332(sp)
  816184:	00801604 	movi	r2,88
  816188:	28fff804 	addi	r3,r5,-32
  81618c:	10c06036 	bltu	r2,r3,816310 <___vfprintf_internal_r+0x394>
  816190:	18c5883a 	add	r2,r3,r3
  816194:	1085883a 	add	r2,r2,r2
  816198:	00c02074 	movhi	r3,129
  81619c:	18d86b04 	addi	r3,r3,25004
  8161a0:	10c5883a 	add	r2,r2,r3
  8161a4:	11000017 	ldw	r4,0(r2)
  8161a8:	2000683a 	jmp	r4
  8161ac:	00817120 	cmpeqi	r2,zero,1476
  8161b0:	00816310 	cmplti	r2,zero,1420
  8161b4:	00816310 	cmplti	r2,zero,1420
  8161b8:	0081710c 	andi	r2,zero,1476
  8161bc:	00816310 	cmplti	r2,zero,1420
  8161c0:	00816310 	cmplti	r2,zero,1420
  8161c4:	00816310 	cmplti	r2,zero,1420
  8161c8:	00816310 	cmplti	r2,zero,1420
  8161cc:	00816310 	cmplti	r2,zero,1420
  8161d0:	00816310 	cmplti	r2,zero,1420
  8161d4:	00816eec 	andhi	r2,zero,1467
  8161d8:	008170fc 	xorhi	r2,zero,1475
  8161dc:	00816310 	cmplti	r2,zero,1420
  8161e0:	00816f04 	movi	r2,1468
  8161e4:	00817198 	cmpnei	r2,zero,1478
  8161e8:	00816310 	cmplti	r2,zero,1420
  8161ec:	00817184 	movi	r2,1478
  8161f0:	0081714c 	andi	r2,zero,1477
  8161f4:	0081714c 	andi	r2,zero,1477
  8161f8:	0081714c 	andi	r2,zero,1477
  8161fc:	0081714c 	andi	r2,zero,1477
  816200:	0081714c 	andi	r2,zero,1477
  816204:	0081714c 	andi	r2,zero,1477
  816208:	0081714c 	andi	r2,zero,1477
  81620c:	0081714c 	andi	r2,zero,1477
  816210:	0081714c 	andi	r2,zero,1477
  816214:	00816310 	cmplti	r2,zero,1420
  816218:	00816310 	cmplti	r2,zero,1420
  81621c:	00816310 	cmplti	r2,zero,1420
  816220:	00816310 	cmplti	r2,zero,1420
  816224:	00816310 	cmplti	r2,zero,1420
  816228:	00816310 	cmplti	r2,zero,1420
  81622c:	00816310 	cmplti	r2,zero,1420
  816230:	00816310 	cmplti	r2,zero,1420
  816234:	00816310 	cmplti	r2,zero,1420
  816238:	00816310 	cmplti	r2,zero,1420
  81623c:	00816968 	cmpgeui	r2,zero,1445
  816240:	00816fd4 	movui	r2,1471
  816244:	00816310 	cmplti	r2,zero,1420
  816248:	00816fd4 	movui	r2,1471
  81624c:	00816310 	cmplti	r2,zero,1420
  816250:	00816310 	cmplti	r2,zero,1420
  816254:	00816310 	cmplti	r2,zero,1420
  816258:	00816310 	cmplti	r2,zero,1420
  81625c:	00817138 	rdprs	r2,zero,1476
  816260:	00816310 	cmplti	r2,zero,1420
  816264:	00816310 	cmplti	r2,zero,1420
  816268:	00816a1c 	xori	r2,zero,1448
  81626c:	00816310 	cmplti	r2,zero,1420
  816270:	00816310 	cmplti	r2,zero,1420
  816274:	00816310 	cmplti	r2,zero,1420
  816278:	00816310 	cmplti	r2,zero,1420
  81627c:	00816310 	cmplti	r2,zero,1420
  816280:	00816a68 	cmpgeui	r2,zero,1449
  816284:	00816310 	cmplti	r2,zero,1420
  816288:	00816310 	cmplti	r2,zero,1420
  81628c:	00817088 	cmpgei	r2,zero,1474
  816290:	00816310 	cmplti	r2,zero,1420
  816294:	00816310 	cmplti	r2,zero,1420
  816298:	00816310 	cmplti	r2,zero,1420
  81629c:	00816310 	cmplti	r2,zero,1420
  8162a0:	00816310 	cmplti	r2,zero,1420
  8162a4:	00816310 	cmplti	r2,zero,1420
  8162a8:	00816310 	cmplti	r2,zero,1420
  8162ac:	00816310 	cmplti	r2,zero,1420
  8162b0:	00816310 	cmplti	r2,zero,1420
  8162b4:	00816310 	cmplti	r2,zero,1420
  8162b8:	0081705c 	xori	r2,zero,1473
  8162bc:	00816974 	movhi	r2,1445
  8162c0:	00816fd4 	movui	r2,1471
  8162c4:	00816fd4 	movui	r2,1471
  8162c8:	00816fd4 	movui	r2,1471
  8162cc:	00816fc0 	call	816fc <__alt_mem_sdram-0x77e904>
  8162d0:	00816974 	movhi	r2,1445
  8162d4:	00816310 	cmplti	r2,zero,1420
  8162d8:	00816310 	cmplti	r2,zero,1420
  8162dc:	00816f48 	cmpgei	r2,zero,1469
  8162e0:	00816310 	cmplti	r2,zero,1420
  8162e4:	00816f18 	cmpnei	r2,zero,1468
  8162e8:	00816a28 	cmpgeui	r2,zero,1448
  8162ec:	00816f78 	rdprs	r2,zero,1469
  8162f0:	00816f64 	muli	r2,zero,1469
  8162f4:	00816310 	cmplti	r2,zero,1420
  8162f8:	008171f4 	movhi	r2,1479
  8162fc:	00816310 	cmplti	r2,zero,1420
  816300:	00816a74 	movhi	r2,1449
  816304:	00816310 	cmplti	r2,zero,1420
  816308:	00816310 	cmplti	r2,zero,1420
  81630c:	008170ec 	andhi	r2,zero,1475
  816310:	d9014d17 	ldw	r4,1332(sp)
  816314:	2000ce26 	beq	r4,zero,816650 <___vfprintf_internal_r+0x6d4>
  816318:	01400044 	movi	r5,1
  81631c:	d9800f04 	addi	r6,sp,60
  816320:	d9c14015 	stw	r7,1280(sp)
  816324:	d9414515 	stw	r5,1300(sp)
  816328:	d9814115 	stw	r6,1284(sp)
  81632c:	280f883a 	mov	r7,r5
  816330:	d9000f05 	stb	r4,60(sp)
  816334:	d8000405 	stb	zero,16(sp)
  816338:	d8014615 	stw	zero,1304(sp)
  81633c:	d8c14c17 	ldw	r3,1328(sp)
  816340:	1880008c 	andi	r2,r3,2
  816344:	1005003a 	cmpeq	r2,r2,zero
  816348:	d8815015 	stw	r2,1344(sp)
  81634c:	1000031e 	bne	r2,zero,81635c <___vfprintf_internal_r+0x3e0>
  816350:	d9014517 	ldw	r4,1300(sp)
  816354:	21000084 	addi	r4,r4,2
  816358:	d9014515 	stw	r4,1300(sp)
  81635c:	d9414c17 	ldw	r5,1328(sp)
  816360:	2940210c 	andi	r5,r5,132
  816364:	d9414e15 	stw	r5,1336(sp)
  816368:	28002d1e 	bne	r5,zero,816420 <___vfprintf_internal_r+0x4a4>
  81636c:	d9814a17 	ldw	r6,1320(sp)
  816370:	d8814517 	ldw	r2,1300(sp)
  816374:	30a1c83a 	sub	r16,r6,r2
  816378:	0400290e 	bge	zero,r16,816420 <___vfprintf_internal_r+0x4a4>
  81637c:	00800404 	movi	r2,16
  816380:	1404580e 	bge	r2,r16,8174e4 <___vfprintf_internal_r+0x1568>
  816384:	dc800e17 	ldw	r18,56(sp)
  816388:	dc400d17 	ldw	r17,52(sp)
  81638c:	1027883a 	mov	r19,r2
  816390:	070020f4 	movhi	fp,131
  816394:	e7231b84 	addi	fp,fp,-29586
  816398:	050001c4 	movi	r20,7
  81639c:	00000306 	br	8163ac <___vfprintf_internal_r+0x430>
  8163a0:	843ffc04 	addi	r16,r16,-16
  8163a4:	ad400204 	addi	r21,r21,8
  8163a8:	9c00130e 	bge	r19,r16,8163f8 <___vfprintf_internal_r+0x47c>
  8163ac:	94800404 	addi	r18,r18,16
  8163b0:	8c400044 	addi	r17,r17,1
  8163b4:	af000015 	stw	fp,0(r21)
  8163b8:	acc00115 	stw	r19,4(r21)
  8163bc:	dc800e15 	stw	r18,56(sp)
  8163c0:	dc400d15 	stw	r17,52(sp)
  8163c4:	a47ff60e 	bge	r20,r17,8163a0 <___vfprintf_internal_r+0x424>
  8163c8:	d9014f17 	ldw	r4,1340(sp)
  8163cc:	b00b883a 	mov	r5,r22
  8163d0:	d9800c04 	addi	r6,sp,48
  8163d4:	d9c15115 	stw	r7,1348(sp)
  8163d8:	0815f240 	call	815f24 <__sprint_r>
  8163dc:	d9c15117 	ldw	r7,1348(sp)
  8163e0:	10009e1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  8163e4:	843ffc04 	addi	r16,r16,-16
  8163e8:	dc800e17 	ldw	r18,56(sp)
  8163ec:	dc400d17 	ldw	r17,52(sp)
  8163f0:	dd401904 	addi	r21,sp,100
  8163f4:	9c3fed16 	blt	r19,r16,8163ac <___vfprintf_internal_r+0x430>
  8163f8:	9425883a 	add	r18,r18,r16
  8163fc:	8c400044 	addi	r17,r17,1
  816400:	008001c4 	movi	r2,7
  816404:	af000015 	stw	fp,0(r21)
  816408:	ac000115 	stw	r16,4(r21)
  81640c:	dc800e15 	stw	r18,56(sp)
  816410:	dc400d15 	stw	r17,52(sp)
  816414:	1441f516 	blt	r2,r17,816bec <___vfprintf_internal_r+0xc70>
  816418:	ad400204 	addi	r21,r21,8
  81641c:	00000206 	br	816428 <___vfprintf_internal_r+0x4ac>
  816420:	dc800e17 	ldw	r18,56(sp)
  816424:	dc400d17 	ldw	r17,52(sp)
  816428:	d8800407 	ldb	r2,16(sp)
  81642c:	10000b26 	beq	r2,zero,81645c <___vfprintf_internal_r+0x4e0>
  816430:	00800044 	movi	r2,1
  816434:	94800044 	addi	r18,r18,1
  816438:	8c400044 	addi	r17,r17,1
  81643c:	a8800115 	stw	r2,4(r21)
  816440:	d8c00404 	addi	r3,sp,16
  816444:	008001c4 	movi	r2,7
  816448:	a8c00015 	stw	r3,0(r21)
  81644c:	dc800e15 	stw	r18,56(sp)
  816450:	dc400d15 	stw	r17,52(sp)
  816454:	1441da16 	blt	r2,r17,816bc0 <___vfprintf_internal_r+0xc44>
  816458:	ad400204 	addi	r21,r21,8
  81645c:	d9015017 	ldw	r4,1344(sp)
  816460:	20000b1e 	bne	r4,zero,816490 <___vfprintf_internal_r+0x514>
  816464:	d8800444 	addi	r2,sp,17
  816468:	94800084 	addi	r18,r18,2
  81646c:	8c400044 	addi	r17,r17,1
  816470:	a8800015 	stw	r2,0(r21)
  816474:	00c00084 	movi	r3,2
  816478:	008001c4 	movi	r2,7
  81647c:	a8c00115 	stw	r3,4(r21)
  816480:	dc800e15 	stw	r18,56(sp)
  816484:	dc400d15 	stw	r17,52(sp)
  816488:	1441c216 	blt	r2,r17,816b94 <___vfprintf_internal_r+0xc18>
  81648c:	ad400204 	addi	r21,r21,8
  816490:	d9414e17 	ldw	r5,1336(sp)
  816494:	00802004 	movi	r2,128
  816498:	2880b126 	beq	r5,r2,816760 <___vfprintf_internal_r+0x7e4>
  81649c:	d8c14617 	ldw	r3,1304(sp)
  8164a0:	19e1c83a 	sub	r16,r3,r7
  8164a4:	0400260e 	bge	zero,r16,816540 <___vfprintf_internal_r+0x5c4>
  8164a8:	00800404 	movi	r2,16
  8164ac:	1403c90e 	bge	r2,r16,8173d4 <___vfprintf_internal_r+0x1458>
  8164b0:	1027883a 	mov	r19,r2
  8164b4:	070020f4 	movhi	fp,131
  8164b8:	e7231784 	addi	fp,fp,-29602
  8164bc:	050001c4 	movi	r20,7
  8164c0:	00000306 	br	8164d0 <___vfprintf_internal_r+0x554>
  8164c4:	843ffc04 	addi	r16,r16,-16
  8164c8:	ad400204 	addi	r21,r21,8
  8164cc:	9c00130e 	bge	r19,r16,81651c <___vfprintf_internal_r+0x5a0>
  8164d0:	94800404 	addi	r18,r18,16
  8164d4:	8c400044 	addi	r17,r17,1
  8164d8:	af000015 	stw	fp,0(r21)
  8164dc:	acc00115 	stw	r19,4(r21)
  8164e0:	dc800e15 	stw	r18,56(sp)
  8164e4:	dc400d15 	stw	r17,52(sp)
  8164e8:	a47ff60e 	bge	r20,r17,8164c4 <___vfprintf_internal_r+0x548>
  8164ec:	d9014f17 	ldw	r4,1340(sp)
  8164f0:	b00b883a 	mov	r5,r22
  8164f4:	d9800c04 	addi	r6,sp,48
  8164f8:	d9c15115 	stw	r7,1348(sp)
  8164fc:	0815f240 	call	815f24 <__sprint_r>
  816500:	d9c15117 	ldw	r7,1348(sp)
  816504:	1000551e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816508:	843ffc04 	addi	r16,r16,-16
  81650c:	dc800e17 	ldw	r18,56(sp)
  816510:	dc400d17 	ldw	r17,52(sp)
  816514:	dd401904 	addi	r21,sp,100
  816518:	9c3fed16 	blt	r19,r16,8164d0 <___vfprintf_internal_r+0x554>
  81651c:	9425883a 	add	r18,r18,r16
  816520:	8c400044 	addi	r17,r17,1
  816524:	008001c4 	movi	r2,7
  816528:	af000015 	stw	fp,0(r21)
  81652c:	ac000115 	stw	r16,4(r21)
  816530:	dc800e15 	stw	r18,56(sp)
  816534:	dc400d15 	stw	r17,52(sp)
  816538:	14418216 	blt	r2,r17,816b44 <___vfprintf_internal_r+0xbc8>
  81653c:	ad400204 	addi	r21,r21,8
  816540:	d9014c17 	ldw	r4,1328(sp)
  816544:	2080400c 	andi	r2,r4,256
  816548:	10004a1e 	bne	r2,zero,816674 <___vfprintf_internal_r+0x6f8>
  81654c:	d9414117 	ldw	r5,1284(sp)
  816550:	91e5883a 	add	r18,r18,r7
  816554:	8c400044 	addi	r17,r17,1
  816558:	008001c4 	movi	r2,7
  81655c:	a9400015 	stw	r5,0(r21)
  816560:	a9c00115 	stw	r7,4(r21)
  816564:	dc800e15 	stw	r18,56(sp)
  816568:	dc400d15 	stw	r17,52(sp)
  81656c:	14416716 	blt	r2,r17,816b0c <___vfprintf_internal_r+0xb90>
  816570:	a8c00204 	addi	r3,r21,8
  816574:	d9814c17 	ldw	r6,1328(sp)
  816578:	3080010c 	andi	r2,r6,4
  81657c:	10002826 	beq	r2,zero,816620 <___vfprintf_internal_r+0x6a4>
  816580:	d8814a17 	ldw	r2,1320(sp)
  816584:	d9014517 	ldw	r4,1300(sp)
  816588:	1121c83a 	sub	r16,r2,r4
  81658c:	0400240e 	bge	zero,r16,816620 <___vfprintf_internal_r+0x6a4>
  816590:	00800404 	movi	r2,16
  816594:	14044f0e 	bge	r2,r16,8176d4 <___vfprintf_internal_r+0x1758>
  816598:	dc400d17 	ldw	r17,52(sp)
  81659c:	1027883a 	mov	r19,r2
  8165a0:	070020f4 	movhi	fp,131
  8165a4:	e7231b84 	addi	fp,fp,-29586
  8165a8:	050001c4 	movi	r20,7
  8165ac:	00000306 	br	8165bc <___vfprintf_internal_r+0x640>
  8165b0:	843ffc04 	addi	r16,r16,-16
  8165b4:	18c00204 	addi	r3,r3,8
  8165b8:	9c00110e 	bge	r19,r16,816600 <___vfprintf_internal_r+0x684>
  8165bc:	94800404 	addi	r18,r18,16
  8165c0:	8c400044 	addi	r17,r17,1
  8165c4:	1f000015 	stw	fp,0(r3)
  8165c8:	1cc00115 	stw	r19,4(r3)
  8165cc:	dc800e15 	stw	r18,56(sp)
  8165d0:	dc400d15 	stw	r17,52(sp)
  8165d4:	a47ff60e 	bge	r20,r17,8165b0 <___vfprintf_internal_r+0x634>
  8165d8:	d9014f17 	ldw	r4,1340(sp)
  8165dc:	b00b883a 	mov	r5,r22
  8165e0:	d9800c04 	addi	r6,sp,48
  8165e4:	0815f240 	call	815f24 <__sprint_r>
  8165e8:	10001c1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  8165ec:	843ffc04 	addi	r16,r16,-16
  8165f0:	dc800e17 	ldw	r18,56(sp)
  8165f4:	dc400d17 	ldw	r17,52(sp)
  8165f8:	d8c01904 	addi	r3,sp,100
  8165fc:	9c3fef16 	blt	r19,r16,8165bc <___vfprintf_internal_r+0x640>
  816600:	9425883a 	add	r18,r18,r16
  816604:	8c400044 	addi	r17,r17,1
  816608:	008001c4 	movi	r2,7
  81660c:	1f000015 	stw	fp,0(r3)
  816610:	1c000115 	stw	r16,4(r3)
  816614:	dc800e15 	stw	r18,56(sp)
  816618:	dc400d15 	stw	r17,52(sp)
  81661c:	1440cb16 	blt	r2,r17,81694c <___vfprintf_internal_r+0x9d0>
  816620:	d8814a17 	ldw	r2,1320(sp)
  816624:	d9414517 	ldw	r5,1300(sp)
  816628:	1140010e 	bge	r2,r5,816630 <___vfprintf_internal_r+0x6b4>
  81662c:	2805883a 	mov	r2,r5
  816630:	d9814b17 	ldw	r6,1324(sp)
  816634:	308d883a 	add	r6,r6,r2
  816638:	d9814b15 	stw	r6,1324(sp)
  81663c:	90013b1e 	bne	r18,zero,816b2c <___vfprintf_internal_r+0xbb0>
  816640:	d9c14017 	ldw	r7,1280(sp)
  816644:	dd401904 	addi	r21,sp,100
  816648:	d8000d15 	stw	zero,52(sp)
  81664c:	003ea706 	br	8160ec <___vfprintf_internal_r+0x170>
  816650:	d8800e17 	ldw	r2,56(sp)
  816654:	10053f1e 	bne	r2,zero,817b54 <___vfprintf_internal_r+0x1bd8>
  816658:	d8000d15 	stw	zero,52(sp)
  81665c:	b080030b 	ldhu	r2,12(r22)
  816660:	1080100c 	andi	r2,r2,64
  816664:	103e8726 	beq	r2,zero,816084 <___vfprintf_internal_r+0x108>
  816668:	00bfffc4 	movi	r2,-1
  81666c:	d8814b15 	stw	r2,1324(sp)
  816670:	003e8406 	br	816084 <___vfprintf_internal_r+0x108>
  816674:	d9814d17 	ldw	r6,1332(sp)
  816678:	00801944 	movi	r2,101
  81667c:	11806e16 	blt	r2,r6,816838 <___vfprintf_internal_r+0x8bc>
  816680:	d9414717 	ldw	r5,1308(sp)
  816684:	00c00044 	movi	r3,1
  816688:	1943430e 	bge	r3,r5,817398 <___vfprintf_internal_r+0x141c>
  81668c:	d8814117 	ldw	r2,1284(sp)
  816690:	94800044 	addi	r18,r18,1
  816694:	8c400044 	addi	r17,r17,1
  816698:	a8800015 	stw	r2,0(r21)
  81669c:	008001c4 	movi	r2,7
  8166a0:	a8c00115 	stw	r3,4(r21)
  8166a4:	dc800e15 	stw	r18,56(sp)
  8166a8:	dc400d15 	stw	r17,52(sp)
  8166ac:	1441ca16 	blt	r2,r17,816dd8 <___vfprintf_internal_r+0xe5c>
  8166b0:	a8c00204 	addi	r3,r21,8
  8166b4:	d9014917 	ldw	r4,1316(sp)
  8166b8:	00800044 	movi	r2,1
  8166bc:	94800044 	addi	r18,r18,1
  8166c0:	8c400044 	addi	r17,r17,1
  8166c4:	18800115 	stw	r2,4(r3)
  8166c8:	008001c4 	movi	r2,7
  8166cc:	19000015 	stw	r4,0(r3)
  8166d0:	dc800e15 	stw	r18,56(sp)
  8166d4:	dc400d15 	stw	r17,52(sp)
  8166d8:	1441b616 	blt	r2,r17,816db4 <___vfprintf_internal_r+0xe38>
  8166dc:	1cc00204 	addi	r19,r3,8
  8166e0:	d9014217 	ldw	r4,1288(sp)
  8166e4:	d9414317 	ldw	r5,1292(sp)
  8166e8:	000d883a 	mov	r6,zero
  8166ec:	000f883a 	mov	r7,zero
  8166f0:	081d45c0 	call	81d45c <__nedf2>
  8166f4:	10017426 	beq	r2,zero,816cc8 <___vfprintf_internal_r+0xd4c>
  8166f8:	d9414717 	ldw	r5,1308(sp)
  8166fc:	d9814117 	ldw	r6,1284(sp)
  816700:	8c400044 	addi	r17,r17,1
  816704:	2c85883a 	add	r2,r5,r18
  816708:	14bfffc4 	addi	r18,r2,-1
  81670c:	28bfffc4 	addi	r2,r5,-1
  816710:	30c00044 	addi	r3,r6,1
  816714:	98800115 	stw	r2,4(r19)
  816718:	008001c4 	movi	r2,7
  81671c:	98c00015 	stw	r3,0(r19)
  816720:	dc800e15 	stw	r18,56(sp)
  816724:	dc400d15 	stw	r17,52(sp)
  816728:	14418e16 	blt	r2,r17,816d64 <___vfprintf_internal_r+0xde8>
  81672c:	9cc00204 	addi	r19,r19,8
  816730:	d9414817 	ldw	r5,1312(sp)
  816734:	d8800804 	addi	r2,sp,32
  816738:	8c400044 	addi	r17,r17,1
  81673c:	9165883a 	add	r18,r18,r5
  816740:	98800015 	stw	r2,0(r19)
  816744:	008001c4 	movi	r2,7
  816748:	99400115 	stw	r5,4(r19)
  81674c:	dc800e15 	stw	r18,56(sp)
  816750:	dc400d15 	stw	r17,52(sp)
  816754:	1440ed16 	blt	r2,r17,816b0c <___vfprintf_internal_r+0xb90>
  816758:	98c00204 	addi	r3,r19,8
  81675c:	003f8506 	br	816574 <___vfprintf_internal_r+0x5f8>
  816760:	d9814a17 	ldw	r6,1320(sp)
  816764:	d8814517 	ldw	r2,1300(sp)
  816768:	30a1c83a 	sub	r16,r6,r2
  81676c:	043f4b0e 	bge	zero,r16,81649c <___vfprintf_internal_r+0x520>
  816770:	00800404 	movi	r2,16
  816774:	1404340e 	bge	r2,r16,817848 <___vfprintf_internal_r+0x18cc>
  816778:	1027883a 	mov	r19,r2
  81677c:	070020f4 	movhi	fp,131
  816780:	e7231784 	addi	fp,fp,-29602
  816784:	050001c4 	movi	r20,7
  816788:	00000306 	br	816798 <___vfprintf_internal_r+0x81c>
  81678c:	843ffc04 	addi	r16,r16,-16
  816790:	ad400204 	addi	r21,r21,8
  816794:	9c00130e 	bge	r19,r16,8167e4 <___vfprintf_internal_r+0x868>
  816798:	94800404 	addi	r18,r18,16
  81679c:	8c400044 	addi	r17,r17,1
  8167a0:	af000015 	stw	fp,0(r21)
  8167a4:	acc00115 	stw	r19,4(r21)
  8167a8:	dc800e15 	stw	r18,56(sp)
  8167ac:	dc400d15 	stw	r17,52(sp)
  8167b0:	a47ff60e 	bge	r20,r17,81678c <___vfprintf_internal_r+0x810>
  8167b4:	d9014f17 	ldw	r4,1340(sp)
  8167b8:	b00b883a 	mov	r5,r22
  8167bc:	d9800c04 	addi	r6,sp,48
  8167c0:	d9c15115 	stw	r7,1348(sp)
  8167c4:	0815f240 	call	815f24 <__sprint_r>
  8167c8:	d9c15117 	ldw	r7,1348(sp)
  8167cc:	103fa31e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  8167d0:	843ffc04 	addi	r16,r16,-16
  8167d4:	dc800e17 	ldw	r18,56(sp)
  8167d8:	dc400d17 	ldw	r17,52(sp)
  8167dc:	dd401904 	addi	r21,sp,100
  8167e0:	9c3fed16 	blt	r19,r16,816798 <___vfprintf_internal_r+0x81c>
  8167e4:	9425883a 	add	r18,r18,r16
  8167e8:	8c400044 	addi	r17,r17,1
  8167ec:	008001c4 	movi	r2,7
  8167f0:	af000015 	stw	fp,0(r21)
  8167f4:	ac000115 	stw	r16,4(r21)
  8167f8:	dc800e15 	stw	r18,56(sp)
  8167fc:	dc400d15 	stw	r17,52(sp)
  816800:	14416116 	blt	r2,r17,816d88 <___vfprintf_internal_r+0xe0c>
  816804:	ad400204 	addi	r21,r21,8
  816808:	003f2406 	br	81649c <___vfprintf_internal_r+0x520>
  81680c:	d9014f17 	ldw	r4,1340(sp)
  816810:	08199ec0 	call	8199ec <__sinit>
  816814:	d9c15117 	ldw	r7,1348(sp)
  816818:	003def06 	br	815fd8 <___vfprintf_internal_r+0x5c>
  81681c:	d9014f17 	ldw	r4,1340(sp)
  816820:	b00b883a 	mov	r5,r22
  816824:	d9c15115 	stw	r7,1348(sp)
  816828:	0817e4c0 	call	817e4c <__swsetup_r>
  81682c:	d9c15117 	ldw	r7,1348(sp)
  816830:	103dee26 	beq	r2,zero,815fec <___vfprintf_internal_r+0x70>
  816834:	003f8c06 	br	816668 <___vfprintf_internal_r+0x6ec>
  816838:	d9014217 	ldw	r4,1288(sp)
  81683c:	d9414317 	ldw	r5,1292(sp)
  816840:	000d883a 	mov	r6,zero
  816844:	000f883a 	mov	r7,zero
  816848:	081d3d40 	call	81d3d4 <__eqdf2>
  81684c:	1000f21e 	bne	r2,zero,816c18 <___vfprintf_internal_r+0xc9c>
  816850:	008020f4 	movhi	r2,131
  816854:	10a31704 	addi	r2,r2,-29604
  816858:	94800044 	addi	r18,r18,1
  81685c:	8c400044 	addi	r17,r17,1
  816860:	a8800015 	stw	r2,0(r21)
  816864:	00c00044 	movi	r3,1
  816868:	008001c4 	movi	r2,7
  81686c:	a8c00115 	stw	r3,4(r21)
  816870:	dc800e15 	stw	r18,56(sp)
  816874:	dc400d15 	stw	r17,52(sp)
  816878:	1442fa16 	blt	r2,r17,817464 <___vfprintf_internal_r+0x14e8>
  81687c:	a8c00204 	addi	r3,r21,8
  816880:	d8800517 	ldw	r2,20(sp)
  816884:	d9014717 	ldw	r4,1308(sp)
  816888:	11015c0e 	bge	r2,r4,816dfc <___vfprintf_internal_r+0xe80>
  81688c:	dc400d17 	ldw	r17,52(sp)
  816890:	d9814917 	ldw	r6,1316(sp)
  816894:	00800044 	movi	r2,1
  816898:	94800044 	addi	r18,r18,1
  81689c:	8c400044 	addi	r17,r17,1
  8168a0:	18800115 	stw	r2,4(r3)
  8168a4:	008001c4 	movi	r2,7
  8168a8:	19800015 	stw	r6,0(r3)
  8168ac:	dc800e15 	stw	r18,56(sp)
  8168b0:	dc400d15 	stw	r17,52(sp)
  8168b4:	14431016 	blt	r2,r17,8174f8 <___vfprintf_internal_r+0x157c>
  8168b8:	18c00204 	addi	r3,r3,8
  8168bc:	d8814717 	ldw	r2,1308(sp)
  8168c0:	143fffc4 	addi	r16,r2,-1
  8168c4:	043f2b0e 	bge	zero,r16,816574 <___vfprintf_internal_r+0x5f8>
  8168c8:	00800404 	movi	r2,16
  8168cc:	1402a20e 	bge	r2,r16,817358 <___vfprintf_internal_r+0x13dc>
  8168d0:	dc400d17 	ldw	r17,52(sp)
  8168d4:	1027883a 	mov	r19,r2
  8168d8:	070020f4 	movhi	fp,131
  8168dc:	e7231784 	addi	fp,fp,-29602
  8168e0:	050001c4 	movi	r20,7
  8168e4:	00000306 	br	8168f4 <___vfprintf_internal_r+0x978>
  8168e8:	18c00204 	addi	r3,r3,8
  8168ec:	843ffc04 	addi	r16,r16,-16
  8168f0:	9c029c0e 	bge	r19,r16,817364 <___vfprintf_internal_r+0x13e8>
  8168f4:	94800404 	addi	r18,r18,16
  8168f8:	8c400044 	addi	r17,r17,1
  8168fc:	1f000015 	stw	fp,0(r3)
  816900:	1cc00115 	stw	r19,4(r3)
  816904:	dc800e15 	stw	r18,56(sp)
  816908:	dc400d15 	stw	r17,52(sp)
  81690c:	a47ff60e 	bge	r20,r17,8168e8 <___vfprintf_internal_r+0x96c>
  816910:	d9014f17 	ldw	r4,1340(sp)
  816914:	b00b883a 	mov	r5,r22
  816918:	d9800c04 	addi	r6,sp,48
  81691c:	0815f240 	call	815f24 <__sprint_r>
  816920:	103f4e1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816924:	dc800e17 	ldw	r18,56(sp)
  816928:	dc400d17 	ldw	r17,52(sp)
  81692c:	d8c01904 	addi	r3,sp,100
  816930:	003fee06 	br	8168ec <___vfprintf_internal_r+0x970>
  816934:	d8802c0b 	ldhu	r2,176(sp)
  816938:	00ffffc4 	movi	r3,-1
  81693c:	d8c14b15 	stw	r3,1324(sp)
  816940:	1080100c 	andi	r2,r2,64
  816944:	103dcc1e 	bne	r2,zero,816078 <___vfprintf_internal_r+0xfc>
  816948:	003dce06 	br	816084 <___vfprintf_internal_r+0x108>
  81694c:	d9014f17 	ldw	r4,1340(sp)
  816950:	b00b883a 	mov	r5,r22
  816954:	d9800c04 	addi	r6,sp,48
  816958:	0815f240 	call	815f24 <__sprint_r>
  81695c:	103f3f1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816960:	dc800e17 	ldw	r18,56(sp)
  816964:	003f2e06 	br	816620 <___vfprintf_internal_r+0x6a4>
  816968:	d9414c17 	ldw	r5,1328(sp)
  81696c:	29400414 	ori	r5,r5,16
  816970:	d9414c15 	stw	r5,1328(sp)
  816974:	d9814c17 	ldw	r6,1328(sp)
  816978:	3080080c 	andi	r2,r6,32
  81697c:	10014f1e 	bne	r2,zero,816ebc <___vfprintf_internal_r+0xf40>
  816980:	d8c14c17 	ldw	r3,1328(sp)
  816984:	1880040c 	andi	r2,r3,16
  816988:	1002ea1e 	bne	r2,zero,817534 <___vfprintf_internal_r+0x15b8>
  81698c:	d9014c17 	ldw	r4,1328(sp)
  816990:	2080100c 	andi	r2,r4,64
  816994:	1002e726 	beq	r2,zero,817534 <___vfprintf_internal_r+0x15b8>
  816998:	3880000f 	ldh	r2,0(r7)
  81699c:	39c00104 	addi	r7,r7,4
  8169a0:	d9c14015 	stw	r7,1280(sp)
  8169a4:	1023d7fa 	srai	r17,r2,31
  8169a8:	1021883a 	mov	r16,r2
  8169ac:	88037216 	blt	r17,zero,817778 <___vfprintf_internal_r+0x17fc>
  8169b0:	01000044 	movi	r4,1
  8169b4:	98000416 	blt	r19,zero,8169c8 <___vfprintf_internal_r+0xa4c>
  8169b8:	d8c14c17 	ldw	r3,1328(sp)
  8169bc:	00bfdfc4 	movi	r2,-129
  8169c0:	1886703a 	and	r3,r3,r2
  8169c4:	d8c14c15 	stw	r3,1328(sp)
  8169c8:	8444b03a 	or	r2,r16,r17
  8169cc:	1002261e 	bne	r2,zero,817268 <___vfprintf_internal_r+0x12ec>
  8169d0:	9802251e 	bne	r19,zero,817268 <___vfprintf_internal_r+0x12ec>
  8169d4:	20803fcc 	andi	r2,r4,255
  8169d8:	10029b26 	beq	r2,zero,817448 <___vfprintf_internal_r+0x14cc>
  8169dc:	d8c01904 	addi	r3,sp,100
  8169e0:	dd000f04 	addi	r20,sp,60
  8169e4:	d8c14115 	stw	r3,1284(sp)
  8169e8:	d8c14117 	ldw	r3,1284(sp)
  8169ec:	dcc14515 	stw	r19,1300(sp)
  8169f0:	a0c5c83a 	sub	r2,r20,r3
  8169f4:	11c00a04 	addi	r7,r2,40
  8169f8:	99c0010e 	bge	r19,r7,816a00 <___vfprintf_internal_r+0xa84>
  8169fc:	d9c14515 	stw	r7,1300(sp)
  816a00:	dcc14615 	stw	r19,1304(sp)
  816a04:	d8800407 	ldb	r2,16(sp)
  816a08:	103e4c26 	beq	r2,zero,81633c <___vfprintf_internal_r+0x3c0>
  816a0c:	d8814517 	ldw	r2,1300(sp)
  816a10:	10800044 	addi	r2,r2,1
  816a14:	d8814515 	stw	r2,1300(sp)
  816a18:	003e4806 	br	81633c <___vfprintf_internal_r+0x3c0>
  816a1c:	d9814c17 	ldw	r6,1328(sp)
  816a20:	31800414 	ori	r6,r6,16
  816a24:	d9814c15 	stw	r6,1328(sp)
  816a28:	d8c14c17 	ldw	r3,1328(sp)
  816a2c:	1880080c 	andi	r2,r3,32
  816a30:	1001271e 	bne	r2,zero,816ed0 <___vfprintf_internal_r+0xf54>
  816a34:	d9414c17 	ldw	r5,1328(sp)
  816a38:	2880040c 	andi	r2,r5,16
  816a3c:	1002b61e 	bne	r2,zero,817518 <___vfprintf_internal_r+0x159c>
  816a40:	d9814c17 	ldw	r6,1328(sp)
  816a44:	3080100c 	andi	r2,r6,64
  816a48:	1002b326 	beq	r2,zero,817518 <___vfprintf_internal_r+0x159c>
  816a4c:	3c00000b 	ldhu	r16,0(r7)
  816a50:	0009883a 	mov	r4,zero
  816a54:	39c00104 	addi	r7,r7,4
  816a58:	0023883a 	mov	r17,zero
  816a5c:	d9c14015 	stw	r7,1280(sp)
  816a60:	d8000405 	stb	zero,16(sp)
  816a64:	003fd306 	br	8169b4 <___vfprintf_internal_r+0xa38>
  816a68:	d9014c17 	ldw	r4,1328(sp)
  816a6c:	21000414 	ori	r4,r4,16
  816a70:	d9014c15 	stw	r4,1328(sp)
  816a74:	d9414c17 	ldw	r5,1328(sp)
  816a78:	2880080c 	andi	r2,r5,32
  816a7c:	1001081e 	bne	r2,zero,816ea0 <___vfprintf_internal_r+0xf24>
  816a80:	d8c14c17 	ldw	r3,1328(sp)
  816a84:	1880040c 	andi	r2,r3,16
  816a88:	1002b01e 	bne	r2,zero,81754c <___vfprintf_internal_r+0x15d0>
  816a8c:	d9014c17 	ldw	r4,1328(sp)
  816a90:	2080100c 	andi	r2,r4,64
  816a94:	1002ad26 	beq	r2,zero,81754c <___vfprintf_internal_r+0x15d0>
  816a98:	3c00000b 	ldhu	r16,0(r7)
  816a9c:	01000044 	movi	r4,1
  816aa0:	39c00104 	addi	r7,r7,4
  816aa4:	0023883a 	mov	r17,zero
  816aa8:	d9c14015 	stw	r7,1280(sp)
  816aac:	d8000405 	stb	zero,16(sp)
  816ab0:	003fc006 	br	8169b4 <___vfprintf_internal_r+0xa38>
  816ab4:	d9014f17 	ldw	r4,1340(sp)
  816ab8:	b00b883a 	mov	r5,r22
  816abc:	d9800c04 	addi	r6,sp,48
  816ac0:	0815f240 	call	815f24 <__sprint_r>
  816ac4:	103ee51e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816ac8:	dc800e17 	ldw	r18,56(sp)
  816acc:	d8c01904 	addi	r3,sp,100
  816ad0:	d9814c17 	ldw	r6,1328(sp)
  816ad4:	3080004c 	andi	r2,r6,1
  816ad8:	1005003a 	cmpeq	r2,r2,zero
  816adc:	103ea51e 	bne	r2,zero,816574 <___vfprintf_internal_r+0x5f8>
  816ae0:	00800044 	movi	r2,1
  816ae4:	dc400d17 	ldw	r17,52(sp)
  816ae8:	18800115 	stw	r2,4(r3)
  816aec:	d8814917 	ldw	r2,1316(sp)
  816af0:	94800044 	addi	r18,r18,1
  816af4:	8c400044 	addi	r17,r17,1
  816af8:	18800015 	stw	r2,0(r3)
  816afc:	008001c4 	movi	r2,7
  816b00:	dc800e15 	stw	r18,56(sp)
  816b04:	dc400d15 	stw	r17,52(sp)
  816b08:	14421e0e 	bge	r2,r17,817384 <___vfprintf_internal_r+0x1408>
  816b0c:	d9014f17 	ldw	r4,1340(sp)
  816b10:	b00b883a 	mov	r5,r22
  816b14:	d9800c04 	addi	r6,sp,48
  816b18:	0815f240 	call	815f24 <__sprint_r>
  816b1c:	103ecf1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816b20:	dc800e17 	ldw	r18,56(sp)
  816b24:	d8c01904 	addi	r3,sp,100
  816b28:	003e9206 	br	816574 <___vfprintf_internal_r+0x5f8>
  816b2c:	d9014f17 	ldw	r4,1340(sp)
  816b30:	b00b883a 	mov	r5,r22
  816b34:	d9800c04 	addi	r6,sp,48
  816b38:	0815f240 	call	815f24 <__sprint_r>
  816b3c:	103ec026 	beq	r2,zero,816640 <___vfprintf_internal_r+0x6c4>
  816b40:	003ec606 	br	81665c <___vfprintf_internal_r+0x6e0>
  816b44:	d9014f17 	ldw	r4,1340(sp)
  816b48:	b00b883a 	mov	r5,r22
  816b4c:	d9800c04 	addi	r6,sp,48
  816b50:	d9c15115 	stw	r7,1348(sp)
  816b54:	0815f240 	call	815f24 <__sprint_r>
  816b58:	d9c15117 	ldw	r7,1348(sp)
  816b5c:	103ebf1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816b60:	dc800e17 	ldw	r18,56(sp)
  816b64:	dc400d17 	ldw	r17,52(sp)
  816b68:	dd401904 	addi	r21,sp,100
  816b6c:	003e7406 	br	816540 <___vfprintf_internal_r+0x5c4>
  816b70:	d9014f17 	ldw	r4,1340(sp)
  816b74:	b00b883a 	mov	r5,r22
  816b78:	d9800c04 	addi	r6,sp,48
  816b7c:	d9c15115 	stw	r7,1348(sp)
  816b80:	0815f240 	call	815f24 <__sprint_r>
  816b84:	d9c15117 	ldw	r7,1348(sp)
  816b88:	103eb41e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816b8c:	dd401904 	addi	r21,sp,100
  816b90:	003d6d06 	br	816148 <___vfprintf_internal_r+0x1cc>
  816b94:	d9014f17 	ldw	r4,1340(sp)
  816b98:	b00b883a 	mov	r5,r22
  816b9c:	d9800c04 	addi	r6,sp,48
  816ba0:	d9c15115 	stw	r7,1348(sp)
  816ba4:	0815f240 	call	815f24 <__sprint_r>
  816ba8:	d9c15117 	ldw	r7,1348(sp)
  816bac:	103eab1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816bb0:	dc800e17 	ldw	r18,56(sp)
  816bb4:	dc400d17 	ldw	r17,52(sp)
  816bb8:	dd401904 	addi	r21,sp,100
  816bbc:	003e3406 	br	816490 <___vfprintf_internal_r+0x514>
  816bc0:	d9014f17 	ldw	r4,1340(sp)
  816bc4:	b00b883a 	mov	r5,r22
  816bc8:	d9800c04 	addi	r6,sp,48
  816bcc:	d9c15115 	stw	r7,1348(sp)
  816bd0:	0815f240 	call	815f24 <__sprint_r>
  816bd4:	d9c15117 	ldw	r7,1348(sp)
  816bd8:	103ea01e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816bdc:	dc800e17 	ldw	r18,56(sp)
  816be0:	dc400d17 	ldw	r17,52(sp)
  816be4:	dd401904 	addi	r21,sp,100
  816be8:	003e1c06 	br	81645c <___vfprintf_internal_r+0x4e0>
  816bec:	d9014f17 	ldw	r4,1340(sp)
  816bf0:	b00b883a 	mov	r5,r22
  816bf4:	d9800c04 	addi	r6,sp,48
  816bf8:	d9c15115 	stw	r7,1348(sp)
  816bfc:	0815f240 	call	815f24 <__sprint_r>
  816c00:	d9c15117 	ldw	r7,1348(sp)
  816c04:	103e951e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816c08:	dc800e17 	ldw	r18,56(sp)
  816c0c:	dc400d17 	ldw	r17,52(sp)
  816c10:	dd401904 	addi	r21,sp,100
  816c14:	003e0406 	br	816428 <___vfprintf_internal_r+0x4ac>
  816c18:	d9000517 	ldw	r4,20(sp)
  816c1c:	0102520e 	bge	zero,r4,817568 <___vfprintf_internal_r+0x15ec>
  816c20:	d9814717 	ldw	r6,1308(sp)
  816c24:	21807a16 	blt	r4,r6,816e10 <___vfprintf_internal_r+0xe94>
  816c28:	d8814117 	ldw	r2,1284(sp)
  816c2c:	91a5883a 	add	r18,r18,r6
  816c30:	8c400044 	addi	r17,r17,1
  816c34:	a8800015 	stw	r2,0(r21)
  816c38:	008001c4 	movi	r2,7
  816c3c:	a9800115 	stw	r6,4(r21)
  816c40:	dc800e15 	stw	r18,56(sp)
  816c44:	dc400d15 	stw	r17,52(sp)
  816c48:	1442f616 	blt	r2,r17,817824 <___vfprintf_internal_r+0x18a8>
  816c4c:	a8c00204 	addi	r3,r21,8
  816c50:	d9414717 	ldw	r5,1308(sp)
  816c54:	2161c83a 	sub	r16,r4,r5
  816c58:	043f9d0e 	bge	zero,r16,816ad0 <___vfprintf_internal_r+0xb54>
  816c5c:	00800404 	movi	r2,16
  816c60:	1402130e 	bge	r2,r16,8174b0 <___vfprintf_internal_r+0x1534>
  816c64:	dc400d17 	ldw	r17,52(sp)
  816c68:	1027883a 	mov	r19,r2
  816c6c:	070020f4 	movhi	fp,131
  816c70:	e7231784 	addi	fp,fp,-29602
  816c74:	050001c4 	movi	r20,7
  816c78:	00000306 	br	816c88 <___vfprintf_internal_r+0xd0c>
  816c7c:	18c00204 	addi	r3,r3,8
  816c80:	843ffc04 	addi	r16,r16,-16
  816c84:	9c020d0e 	bge	r19,r16,8174bc <___vfprintf_internal_r+0x1540>
  816c88:	94800404 	addi	r18,r18,16
  816c8c:	8c400044 	addi	r17,r17,1
  816c90:	1f000015 	stw	fp,0(r3)
  816c94:	1cc00115 	stw	r19,4(r3)
  816c98:	dc800e15 	stw	r18,56(sp)
  816c9c:	dc400d15 	stw	r17,52(sp)
  816ca0:	a47ff60e 	bge	r20,r17,816c7c <___vfprintf_internal_r+0xd00>
  816ca4:	d9014f17 	ldw	r4,1340(sp)
  816ca8:	b00b883a 	mov	r5,r22
  816cac:	d9800c04 	addi	r6,sp,48
  816cb0:	0815f240 	call	815f24 <__sprint_r>
  816cb4:	103e691e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816cb8:	dc800e17 	ldw	r18,56(sp)
  816cbc:	dc400d17 	ldw	r17,52(sp)
  816cc0:	d8c01904 	addi	r3,sp,100
  816cc4:	003fee06 	br	816c80 <___vfprintf_internal_r+0xd04>
  816cc8:	d8814717 	ldw	r2,1308(sp)
  816ccc:	143fffc4 	addi	r16,r2,-1
  816cd0:	043e970e 	bge	zero,r16,816730 <___vfprintf_internal_r+0x7b4>
  816cd4:	00800404 	movi	r2,16
  816cd8:	1400180e 	bge	r2,r16,816d3c <___vfprintf_internal_r+0xdc0>
  816cdc:	1029883a 	mov	r20,r2
  816ce0:	070020f4 	movhi	fp,131
  816ce4:	e7231784 	addi	fp,fp,-29602
  816ce8:	054001c4 	movi	r21,7
  816cec:	00000306 	br	816cfc <___vfprintf_internal_r+0xd80>
  816cf0:	9cc00204 	addi	r19,r19,8
  816cf4:	843ffc04 	addi	r16,r16,-16
  816cf8:	a400120e 	bge	r20,r16,816d44 <___vfprintf_internal_r+0xdc8>
  816cfc:	94800404 	addi	r18,r18,16
  816d00:	8c400044 	addi	r17,r17,1
  816d04:	9f000015 	stw	fp,0(r19)
  816d08:	9d000115 	stw	r20,4(r19)
  816d0c:	dc800e15 	stw	r18,56(sp)
  816d10:	dc400d15 	stw	r17,52(sp)
  816d14:	ac7ff60e 	bge	r21,r17,816cf0 <___vfprintf_internal_r+0xd74>
  816d18:	d9014f17 	ldw	r4,1340(sp)
  816d1c:	b00b883a 	mov	r5,r22
  816d20:	d9800c04 	addi	r6,sp,48
  816d24:	0815f240 	call	815f24 <__sprint_r>
  816d28:	103e4c1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816d2c:	dc800e17 	ldw	r18,56(sp)
  816d30:	dc400d17 	ldw	r17,52(sp)
  816d34:	dcc01904 	addi	r19,sp,100
  816d38:	003fee06 	br	816cf4 <___vfprintf_internal_r+0xd78>
  816d3c:	070020f4 	movhi	fp,131
  816d40:	e7231784 	addi	fp,fp,-29602
  816d44:	9425883a 	add	r18,r18,r16
  816d48:	8c400044 	addi	r17,r17,1
  816d4c:	008001c4 	movi	r2,7
  816d50:	9f000015 	stw	fp,0(r19)
  816d54:	9c000115 	stw	r16,4(r19)
  816d58:	dc800e15 	stw	r18,56(sp)
  816d5c:	dc400d15 	stw	r17,52(sp)
  816d60:	147e720e 	bge	r2,r17,81672c <___vfprintf_internal_r+0x7b0>
  816d64:	d9014f17 	ldw	r4,1340(sp)
  816d68:	b00b883a 	mov	r5,r22
  816d6c:	d9800c04 	addi	r6,sp,48
  816d70:	0815f240 	call	815f24 <__sprint_r>
  816d74:	103e391e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816d78:	dc800e17 	ldw	r18,56(sp)
  816d7c:	dc400d17 	ldw	r17,52(sp)
  816d80:	dcc01904 	addi	r19,sp,100
  816d84:	003e6a06 	br	816730 <___vfprintf_internal_r+0x7b4>
  816d88:	d9014f17 	ldw	r4,1340(sp)
  816d8c:	b00b883a 	mov	r5,r22
  816d90:	d9800c04 	addi	r6,sp,48
  816d94:	d9c15115 	stw	r7,1348(sp)
  816d98:	0815f240 	call	815f24 <__sprint_r>
  816d9c:	d9c15117 	ldw	r7,1348(sp)
  816da0:	103e2e1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816da4:	dc800e17 	ldw	r18,56(sp)
  816da8:	dc400d17 	ldw	r17,52(sp)
  816dac:	dd401904 	addi	r21,sp,100
  816db0:	003dba06 	br	81649c <___vfprintf_internal_r+0x520>
  816db4:	d9014f17 	ldw	r4,1340(sp)
  816db8:	b00b883a 	mov	r5,r22
  816dbc:	d9800c04 	addi	r6,sp,48
  816dc0:	0815f240 	call	815f24 <__sprint_r>
  816dc4:	103e251e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816dc8:	dc800e17 	ldw	r18,56(sp)
  816dcc:	dc400d17 	ldw	r17,52(sp)
  816dd0:	dcc01904 	addi	r19,sp,100
  816dd4:	003e4206 	br	8166e0 <___vfprintf_internal_r+0x764>
  816dd8:	d9014f17 	ldw	r4,1340(sp)
  816ddc:	b00b883a 	mov	r5,r22
  816de0:	d9800c04 	addi	r6,sp,48
  816de4:	0815f240 	call	815f24 <__sprint_r>
  816de8:	103e1c1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  816dec:	dc800e17 	ldw	r18,56(sp)
  816df0:	dc400d17 	ldw	r17,52(sp)
  816df4:	d8c01904 	addi	r3,sp,100
  816df8:	003e2e06 	br	8166b4 <___vfprintf_internal_r+0x738>
  816dfc:	d9414c17 	ldw	r5,1328(sp)
  816e00:	2880004c 	andi	r2,r5,1
  816e04:	1005003a 	cmpeq	r2,r2,zero
  816e08:	103dda1e 	bne	r2,zero,816574 <___vfprintf_internal_r+0x5f8>
  816e0c:	003e9f06 	br	81688c <___vfprintf_internal_r+0x910>
  816e10:	d8c14117 	ldw	r3,1284(sp)
  816e14:	9125883a 	add	r18,r18,r4
  816e18:	8c400044 	addi	r17,r17,1
  816e1c:	008001c4 	movi	r2,7
  816e20:	a8c00015 	stw	r3,0(r21)
  816e24:	a9000115 	stw	r4,4(r21)
  816e28:	dc800e15 	stw	r18,56(sp)
  816e2c:	dc400d15 	stw	r17,52(sp)
  816e30:	14426616 	blt	r2,r17,8177cc <___vfprintf_internal_r+0x1850>
  816e34:	a8c00204 	addi	r3,r21,8
  816e38:	d9414917 	ldw	r5,1316(sp)
  816e3c:	00800044 	movi	r2,1
  816e40:	94800044 	addi	r18,r18,1
  816e44:	8c400044 	addi	r17,r17,1
  816e48:	18800115 	stw	r2,4(r3)
  816e4c:	008001c4 	movi	r2,7
  816e50:	19400015 	stw	r5,0(r3)
  816e54:	dc800e15 	stw	r18,56(sp)
  816e58:	dc400d15 	stw	r17,52(sp)
  816e5c:	2021883a 	mov	r16,r4
  816e60:	14425016 	blt	r2,r17,8177a4 <___vfprintf_internal_r+0x1828>
  816e64:	19400204 	addi	r5,r3,8
  816e68:	d9814717 	ldw	r6,1308(sp)
  816e6c:	8c400044 	addi	r17,r17,1
  816e70:	dc400d15 	stw	r17,52(sp)
  816e74:	3107c83a 	sub	r3,r6,r4
  816e78:	d9014117 	ldw	r4,1284(sp)
  816e7c:	90e5883a 	add	r18,r18,r3
  816e80:	28c00115 	stw	r3,4(r5)
  816e84:	8105883a 	add	r2,r16,r4
  816e88:	28800015 	stw	r2,0(r5)
  816e8c:	008001c4 	movi	r2,7
  816e90:	dc800e15 	stw	r18,56(sp)
  816e94:	147f1d16 	blt	r2,r17,816b0c <___vfprintf_internal_r+0xb90>
  816e98:	28c00204 	addi	r3,r5,8
  816e9c:	003db506 	br	816574 <___vfprintf_internal_r+0x5f8>
  816ea0:	3c000017 	ldw	r16,0(r7)
  816ea4:	3c400117 	ldw	r17,4(r7)
  816ea8:	39800204 	addi	r6,r7,8
  816eac:	01000044 	movi	r4,1
  816eb0:	d9814015 	stw	r6,1280(sp)
  816eb4:	d8000405 	stb	zero,16(sp)
  816eb8:	003ebe06 	br	8169b4 <___vfprintf_internal_r+0xa38>
  816ebc:	3c000017 	ldw	r16,0(r7)
  816ec0:	3c400117 	ldw	r17,4(r7)
  816ec4:	38800204 	addi	r2,r7,8
  816ec8:	d8814015 	stw	r2,1280(sp)
  816ecc:	003eb706 	br	8169ac <___vfprintf_internal_r+0xa30>
  816ed0:	3c000017 	ldw	r16,0(r7)
  816ed4:	3c400117 	ldw	r17,4(r7)
  816ed8:	39000204 	addi	r4,r7,8
  816edc:	d9014015 	stw	r4,1280(sp)
  816ee0:	0009883a 	mov	r4,zero
  816ee4:	d8000405 	stb	zero,16(sp)
  816ee8:	003eb206 	br	8169b4 <___vfprintf_internal_r+0xa38>
  816eec:	38c00017 	ldw	r3,0(r7)
  816ef0:	39c00104 	addi	r7,r7,4
  816ef4:	d8c14a15 	stw	r3,1320(sp)
  816ef8:	1800d10e 	bge	r3,zero,817240 <___vfprintf_internal_r+0x12c4>
  816efc:	00c7c83a 	sub	r3,zero,r3
  816f00:	d8c14a15 	stw	r3,1320(sp)
  816f04:	d9014c17 	ldw	r4,1328(sp)
  816f08:	b8c00007 	ldb	r3,0(r23)
  816f0c:	21000114 	ori	r4,r4,4
  816f10:	d9014c15 	stw	r4,1328(sp)
  816f14:	003c9806 	br	816178 <___vfprintf_internal_r+0x1fc>
  816f18:	d9814c17 	ldw	r6,1328(sp)
  816f1c:	3080080c 	andi	r2,r6,32
  816f20:	1001f026 	beq	r2,zero,8176e4 <___vfprintf_internal_r+0x1768>
  816f24:	d9014b17 	ldw	r4,1324(sp)
  816f28:	38800017 	ldw	r2,0(r7)
  816f2c:	39c00104 	addi	r7,r7,4
  816f30:	d9c14015 	stw	r7,1280(sp)
  816f34:	2007d7fa 	srai	r3,r4,31
  816f38:	d9c14017 	ldw	r7,1280(sp)
  816f3c:	11000015 	stw	r4,0(r2)
  816f40:	10c00115 	stw	r3,4(r2)
  816f44:	003c6906 	br	8160ec <___vfprintf_internal_r+0x170>
  816f48:	b8c00007 	ldb	r3,0(r23)
  816f4c:	00801b04 	movi	r2,108
  816f50:	18824f26 	beq	r3,r2,817890 <___vfprintf_internal_r+0x1914>
  816f54:	d9414c17 	ldw	r5,1328(sp)
  816f58:	29400414 	ori	r5,r5,16
  816f5c:	d9414c15 	stw	r5,1328(sp)
  816f60:	003c8506 	br	816178 <___vfprintf_internal_r+0x1fc>
  816f64:	d9814c17 	ldw	r6,1328(sp)
  816f68:	b8c00007 	ldb	r3,0(r23)
  816f6c:	31800814 	ori	r6,r6,32
  816f70:	d9814c15 	stw	r6,1328(sp)
  816f74:	003c8006 	br	816178 <___vfprintf_internal_r+0x1fc>
  816f78:	d8814c17 	ldw	r2,1328(sp)
  816f7c:	3c000017 	ldw	r16,0(r7)
  816f80:	00c01e04 	movi	r3,120
  816f84:	10800094 	ori	r2,r2,2
  816f88:	d8814c15 	stw	r2,1328(sp)
  816f8c:	39c00104 	addi	r7,r7,4
  816f90:	014020f4 	movhi	r5,131
  816f94:	29630004 	addi	r5,r5,-29696
  816f98:	00800c04 	movi	r2,48
  816f9c:	0023883a 	mov	r17,zero
  816fa0:	01000084 	movi	r4,2
  816fa4:	d9c14015 	stw	r7,1280(sp)
  816fa8:	d8c14d15 	stw	r3,1332(sp)
  816fac:	d9414415 	stw	r5,1296(sp)
  816fb0:	d8800445 	stb	r2,17(sp)
  816fb4:	d8c00485 	stb	r3,18(sp)
  816fb8:	d8000405 	stb	zero,16(sp)
  816fbc:	003e7d06 	br	8169b4 <___vfprintf_internal_r+0xa38>
  816fc0:	d8814c17 	ldw	r2,1328(sp)
  816fc4:	b8c00007 	ldb	r3,0(r23)
  816fc8:	10801014 	ori	r2,r2,64
  816fcc:	d8814c15 	stw	r2,1328(sp)
  816fd0:	003c6906 	br	816178 <___vfprintf_internal_r+0x1fc>
  816fd4:	d9414c17 	ldw	r5,1328(sp)
  816fd8:	2880020c 	andi	r2,r5,8
  816fdc:	1001df26 	beq	r2,zero,81775c <___vfprintf_internal_r+0x17e0>
  816fe0:	39800017 	ldw	r6,0(r7)
  816fe4:	38800204 	addi	r2,r7,8
  816fe8:	d8814015 	stw	r2,1280(sp)
  816fec:	d9814215 	stw	r6,1288(sp)
  816ff0:	39c00117 	ldw	r7,4(r7)
  816ff4:	d9c14315 	stw	r7,1292(sp)
  816ff8:	d9014217 	ldw	r4,1288(sp)
  816ffc:	d9414317 	ldw	r5,1292(sp)
  817000:	081c13c0 	call	81c13c <__isinfd>
  817004:	10021726 	beq	r2,zero,817864 <___vfprintf_internal_r+0x18e8>
  817008:	d9014217 	ldw	r4,1288(sp)
  81700c:	d9414317 	ldw	r5,1292(sp)
  817010:	000d883a 	mov	r6,zero
  817014:	000f883a 	mov	r7,zero
  817018:	081d5f40 	call	81d5f4 <__ltdf2>
  81701c:	1002ca16 	blt	r2,zero,817b48 <___vfprintf_internal_r+0x1bcc>
  817020:	d9414d17 	ldw	r5,1332(sp)
  817024:	008011c4 	movi	r2,71
  817028:	11420a16 	blt	r2,r5,817854 <___vfprintf_internal_r+0x18d8>
  81702c:	018020f4 	movhi	r6,131
  817030:	31a30504 	addi	r6,r6,-29676
  817034:	d9814115 	stw	r6,1284(sp)
  817038:	d9014c17 	ldw	r4,1328(sp)
  81703c:	00c000c4 	movi	r3,3
  817040:	00bfdfc4 	movi	r2,-129
  817044:	2088703a 	and	r4,r4,r2
  817048:	180f883a 	mov	r7,r3
  81704c:	d8c14515 	stw	r3,1300(sp)
  817050:	d9014c15 	stw	r4,1328(sp)
  817054:	d8014615 	stw	zero,1304(sp)
  817058:	003e6a06 	br	816a04 <___vfprintf_internal_r+0xa88>
  81705c:	38800017 	ldw	r2,0(r7)
  817060:	00c00044 	movi	r3,1
  817064:	39c00104 	addi	r7,r7,4
  817068:	d9c14015 	stw	r7,1280(sp)
  81706c:	d9000f04 	addi	r4,sp,60
  817070:	180f883a 	mov	r7,r3
  817074:	d8c14515 	stw	r3,1300(sp)
  817078:	d9014115 	stw	r4,1284(sp)
  81707c:	d8800f05 	stb	r2,60(sp)
  817080:	d8000405 	stb	zero,16(sp)
  817084:	003cac06 	br	816338 <___vfprintf_internal_r+0x3bc>
  817088:	014020f4 	movhi	r5,131
  81708c:	29630b04 	addi	r5,r5,-29652
  817090:	d9414415 	stw	r5,1296(sp)
  817094:	d9814c17 	ldw	r6,1328(sp)
  817098:	3080080c 	andi	r2,r6,32
  81709c:	1000f926 	beq	r2,zero,817484 <___vfprintf_internal_r+0x1508>
  8170a0:	3c000017 	ldw	r16,0(r7)
  8170a4:	3c400117 	ldw	r17,4(r7)
  8170a8:	38800204 	addi	r2,r7,8
  8170ac:	d8814015 	stw	r2,1280(sp)
  8170b0:	d9414c17 	ldw	r5,1328(sp)
  8170b4:	2880004c 	andi	r2,r5,1
  8170b8:	1005003a 	cmpeq	r2,r2,zero
  8170bc:	1000b31e 	bne	r2,zero,81738c <___vfprintf_internal_r+0x1410>
  8170c0:	8444b03a 	or	r2,r16,r17
  8170c4:	1000b126 	beq	r2,zero,81738c <___vfprintf_internal_r+0x1410>
  8170c8:	d9814d17 	ldw	r6,1332(sp)
  8170cc:	29400094 	ori	r5,r5,2
  8170d0:	00800c04 	movi	r2,48
  8170d4:	01000084 	movi	r4,2
  8170d8:	d9414c15 	stw	r5,1328(sp)
  8170dc:	d8800445 	stb	r2,17(sp)
  8170e0:	d9800485 	stb	r6,18(sp)
  8170e4:	d8000405 	stb	zero,16(sp)
  8170e8:	003e3206 	br	8169b4 <___vfprintf_internal_r+0xa38>
  8170ec:	018020f4 	movhi	r6,131
  8170f0:	31a30004 	addi	r6,r6,-29696
  8170f4:	d9814415 	stw	r6,1296(sp)
  8170f8:	003fe606 	br	817094 <___vfprintf_internal_r+0x1118>
  8170fc:	00800ac4 	movi	r2,43
  817100:	d8800405 	stb	r2,16(sp)
  817104:	b8c00007 	ldb	r3,0(r23)
  817108:	003c1b06 	br	816178 <___vfprintf_internal_r+0x1fc>
  81710c:	d8814c17 	ldw	r2,1328(sp)
  817110:	b8c00007 	ldb	r3,0(r23)
  817114:	10800054 	ori	r2,r2,1
  817118:	d8814c15 	stw	r2,1328(sp)
  81711c:	003c1606 	br	816178 <___vfprintf_internal_r+0x1fc>
  817120:	d8800407 	ldb	r2,16(sp)
  817124:	1000461e 	bne	r2,zero,817240 <___vfprintf_internal_r+0x12c4>
  817128:	00800804 	movi	r2,32
  81712c:	d8800405 	stb	r2,16(sp)
  817130:	b8c00007 	ldb	r3,0(r23)
  817134:	003c1006 	br	816178 <___vfprintf_internal_r+0x1fc>
  817138:	d9814c17 	ldw	r6,1328(sp)
  81713c:	b8c00007 	ldb	r3,0(r23)
  817140:	31800214 	ori	r6,r6,8
  817144:	d9814c15 	stw	r6,1328(sp)
  817148:	003c0b06 	br	816178 <___vfprintf_internal_r+0x1fc>
  81714c:	0007883a 	mov	r3,zero
  817150:	01000244 	movi	r4,9
  817154:	188002a4 	muli	r2,r3,10
  817158:	b8c00007 	ldb	r3,0(r23)
  81715c:	d9814d17 	ldw	r6,1332(sp)
  817160:	bdc00044 	addi	r23,r23,1
  817164:	d8c14d15 	stw	r3,1332(sp)
  817168:	d9414d17 	ldw	r5,1332(sp)
  81716c:	3085883a 	add	r2,r6,r2
  817170:	10fff404 	addi	r3,r2,-48
  817174:	28bff404 	addi	r2,r5,-48
  817178:	20bff62e 	bgeu	r4,r2,817154 <___vfprintf_internal_r+0x11d8>
  81717c:	d8c14a15 	stw	r3,1320(sp)
  817180:	003bff06 	br	816180 <___vfprintf_internal_r+0x204>
  817184:	d9414c17 	ldw	r5,1328(sp)
  817188:	b8c00007 	ldb	r3,0(r23)
  81718c:	29402014 	ori	r5,r5,128
  817190:	d9414c15 	stw	r5,1328(sp)
  817194:	003bf806 	br	816178 <___vfprintf_internal_r+0x1fc>
  817198:	b8c00007 	ldb	r3,0(r23)
  81719c:	00800a84 	movi	r2,42
  8171a0:	bdc00044 	addi	r23,r23,1
  8171a4:	18831526 	beq	r3,r2,817dfc <___vfprintf_internal_r+0x1e80>
  8171a8:	d8c14d15 	stw	r3,1332(sp)
  8171ac:	18bff404 	addi	r2,r3,-48
  8171b0:	00c00244 	movi	r3,9
  8171b4:	18827836 	bltu	r3,r2,817b98 <___vfprintf_internal_r+0x1c1c>
  8171b8:	000d883a 	mov	r6,zero
  8171bc:	308002a4 	muli	r2,r6,10
  8171c0:	b9800007 	ldb	r6,0(r23)
  8171c4:	d9414d17 	ldw	r5,1332(sp)
  8171c8:	bdc00044 	addi	r23,r23,1
  8171cc:	d9814d15 	stw	r6,1332(sp)
  8171d0:	d9014d17 	ldw	r4,1332(sp)
  8171d4:	1145883a 	add	r2,r2,r5
  8171d8:	11bff404 	addi	r6,r2,-48
  8171dc:	20bff404 	addi	r2,r4,-48
  8171e0:	18bff62e 	bgeu	r3,r2,8171bc <___vfprintf_internal_r+0x1240>
  8171e4:	3027883a 	mov	r19,r6
  8171e8:	303be50e 	bge	r6,zero,816180 <___vfprintf_internal_r+0x204>
  8171ec:	04ffffc4 	movi	r19,-1
  8171f0:	003be306 	br	816180 <___vfprintf_internal_r+0x204>
  8171f4:	d8000405 	stb	zero,16(sp)
  8171f8:	39800017 	ldw	r6,0(r7)
  8171fc:	39c00104 	addi	r7,r7,4
  817200:	d9c14015 	stw	r7,1280(sp)
  817204:	d9814115 	stw	r6,1284(sp)
  817208:	3001c926 	beq	r6,zero,817930 <___vfprintf_internal_r+0x19b4>
  81720c:	98000e16 	blt	r19,zero,817248 <___vfprintf_internal_r+0x12cc>
  817210:	d9014117 	ldw	r4,1284(sp)
  817214:	000b883a 	mov	r5,zero
  817218:	980d883a 	mov	r6,r19
  81721c:	081a8f80 	call	81a8f8 <memchr>
  817220:	10025926 	beq	r2,zero,817b88 <___vfprintf_internal_r+0x1c0c>
  817224:	d8c14117 	ldw	r3,1284(sp)
  817228:	10cfc83a 	sub	r7,r2,r3
  81722c:	99c19e16 	blt	r19,r7,8178a8 <___vfprintf_internal_r+0x192c>
  817230:	d9c14515 	stw	r7,1300(sp)
  817234:	38000916 	blt	r7,zero,81725c <___vfprintf_internal_r+0x12e0>
  817238:	d8014615 	stw	zero,1304(sp)
  81723c:	003df106 	br	816a04 <___vfprintf_internal_r+0xa88>
  817240:	b8c00007 	ldb	r3,0(r23)
  817244:	003bcc06 	br	816178 <___vfprintf_internal_r+0x1fc>
  817248:	d9014117 	ldw	r4,1284(sp)
  81724c:	0815adc0 	call	815adc <strlen>
  817250:	d8814515 	stw	r2,1300(sp)
  817254:	100f883a 	mov	r7,r2
  817258:	103ff70e 	bge	r2,zero,817238 <___vfprintf_internal_r+0x12bc>
  81725c:	d8014515 	stw	zero,1300(sp)
  817260:	d8014615 	stw	zero,1304(sp)
  817264:	003de706 	br	816a04 <___vfprintf_internal_r+0xa88>
  817268:	20c03fcc 	andi	r3,r4,255
  81726c:	00800044 	movi	r2,1
  817270:	18802d26 	beq	r3,r2,817328 <___vfprintf_internal_r+0x13ac>
  817274:	18800e36 	bltu	r3,r2,8172b0 <___vfprintf_internal_r+0x1334>
  817278:	00800084 	movi	r2,2
  81727c:	1880fa26 	beq	r3,r2,817668 <___vfprintf_internal_r+0x16ec>
  817280:	010020f4 	movhi	r4,131
  817284:	21231004 	addi	r4,r4,-29632
  817288:	0815adc0 	call	815adc <strlen>
  81728c:	100f883a 	mov	r7,r2
  817290:	dcc14515 	stw	r19,1300(sp)
  817294:	9880010e 	bge	r19,r2,81729c <___vfprintf_internal_r+0x1320>
  817298:	d8814515 	stw	r2,1300(sp)
  81729c:	008020f4 	movhi	r2,131
  8172a0:	10a31004 	addi	r2,r2,-29632
  8172a4:	dcc14615 	stw	r19,1304(sp)
  8172a8:	d8814115 	stw	r2,1284(sp)
  8172ac:	003dd506 	br	816a04 <___vfprintf_internal_r+0xa88>
  8172b0:	d9401904 	addi	r5,sp,100
  8172b4:	dd000f04 	addi	r20,sp,60
  8172b8:	d9414115 	stw	r5,1284(sp)
  8172bc:	880a977a 	slli	r5,r17,29
  8172c0:	d9814117 	ldw	r6,1284(sp)
  8172c4:	8004d0fa 	srli	r2,r16,3
  8172c8:	8806d0fa 	srli	r3,r17,3
  8172cc:	810001cc 	andi	r4,r16,7
  8172d0:	2884b03a 	or	r2,r5,r2
  8172d4:	31bfffc4 	addi	r6,r6,-1
  8172d8:	21000c04 	addi	r4,r4,48
  8172dc:	d9814115 	stw	r6,1284(sp)
  8172e0:	10cab03a 	or	r5,r2,r3
  8172e4:	31000005 	stb	r4,0(r6)
  8172e8:	1021883a 	mov	r16,r2
  8172ec:	1823883a 	mov	r17,r3
  8172f0:	283ff21e 	bne	r5,zero,8172bc <___vfprintf_internal_r+0x1340>
  8172f4:	d8c14c17 	ldw	r3,1328(sp)
  8172f8:	1880004c 	andi	r2,r3,1
  8172fc:	1005003a 	cmpeq	r2,r2,zero
  817300:	103db91e 	bne	r2,zero,8169e8 <___vfprintf_internal_r+0xa6c>
  817304:	20803fcc 	andi	r2,r4,255
  817308:	1080201c 	xori	r2,r2,128
  81730c:	10bfe004 	addi	r2,r2,-128
  817310:	00c00c04 	movi	r3,48
  817314:	10fdb426 	beq	r2,r3,8169e8 <___vfprintf_internal_r+0xa6c>
  817318:	31bfffc4 	addi	r6,r6,-1
  81731c:	d9814115 	stw	r6,1284(sp)
  817320:	30c00005 	stb	r3,0(r6)
  817324:	003db006 	br	8169e8 <___vfprintf_internal_r+0xa6c>
  817328:	88800068 	cmpgeui	r2,r17,1
  81732c:	10002c1e 	bne	r2,zero,8173e0 <___vfprintf_internal_r+0x1464>
  817330:	8800021e 	bne	r17,zero,81733c <___vfprintf_internal_r+0x13c0>
  817334:	00800244 	movi	r2,9
  817338:	14002936 	bltu	r2,r16,8173e0 <___vfprintf_internal_r+0x1464>
  81733c:	d90018c4 	addi	r4,sp,99
  817340:	dd000f04 	addi	r20,sp,60
  817344:	d9014115 	stw	r4,1284(sp)
  817348:	d9014117 	ldw	r4,1284(sp)
  81734c:	80800c04 	addi	r2,r16,48
  817350:	20800005 	stb	r2,0(r4)
  817354:	003da406 	br	8169e8 <___vfprintf_internal_r+0xa6c>
  817358:	dc400d17 	ldw	r17,52(sp)
  81735c:	070020f4 	movhi	fp,131
  817360:	e7231784 	addi	fp,fp,-29602
  817364:	9425883a 	add	r18,r18,r16
  817368:	8c400044 	addi	r17,r17,1
  81736c:	008001c4 	movi	r2,7
  817370:	1f000015 	stw	fp,0(r3)
  817374:	1c000115 	stw	r16,4(r3)
  817378:	dc800e15 	stw	r18,56(sp)
  81737c:	dc400d15 	stw	r17,52(sp)
  817380:	147de216 	blt	r2,r17,816b0c <___vfprintf_internal_r+0xb90>
  817384:	18c00204 	addi	r3,r3,8
  817388:	003c7a06 	br	816574 <___vfprintf_internal_r+0x5f8>
  81738c:	01000084 	movi	r4,2
  817390:	d8000405 	stb	zero,16(sp)
  817394:	003d8706 	br	8169b4 <___vfprintf_internal_r+0xa38>
  817398:	d9814c17 	ldw	r6,1328(sp)
  81739c:	30c4703a 	and	r2,r6,r3
  8173a0:	1005003a 	cmpeq	r2,r2,zero
  8173a4:	103cb926 	beq	r2,zero,81668c <___vfprintf_internal_r+0x710>
  8173a8:	d9014117 	ldw	r4,1284(sp)
  8173ac:	94800044 	addi	r18,r18,1
  8173b0:	8c400044 	addi	r17,r17,1
  8173b4:	008001c4 	movi	r2,7
  8173b8:	a9000015 	stw	r4,0(r21)
  8173bc:	a8c00115 	stw	r3,4(r21)
  8173c0:	dc800e15 	stw	r18,56(sp)
  8173c4:	dc400d15 	stw	r17,52(sp)
  8173c8:	147e6616 	blt	r2,r17,816d64 <___vfprintf_internal_r+0xde8>
  8173cc:	acc00204 	addi	r19,r21,8
  8173d0:	003cd706 	br	816730 <___vfprintf_internal_r+0x7b4>
  8173d4:	070020f4 	movhi	fp,131
  8173d8:	e7231784 	addi	fp,fp,-29602
  8173dc:	003c4f06 	br	81651c <___vfprintf_internal_r+0x5a0>
  8173e0:	dd000f04 	addi	r20,sp,60
  8173e4:	dc801904 	addi	r18,sp,100
  8173e8:	8009883a 	mov	r4,r16
  8173ec:	880b883a 	mov	r5,r17
  8173f0:	01800284 	movi	r6,10
  8173f4:	000f883a 	mov	r7,zero
  8173f8:	081ce240 	call	81ce24 <__umoddi3>
  8173fc:	12000c04 	addi	r8,r2,48
  817400:	94bfffc4 	addi	r18,r18,-1
  817404:	8009883a 	mov	r4,r16
  817408:	880b883a 	mov	r5,r17
  81740c:	01800284 	movi	r6,10
  817410:	000f883a 	mov	r7,zero
  817414:	92000005 	stb	r8,0(r18)
  817418:	081c8480 	call	81c848 <__udivdi3>
  81741c:	1009883a 	mov	r4,r2
  817420:	1021883a 	mov	r16,r2
  817424:	18800068 	cmpgeui	r2,r3,1
  817428:	1823883a 	mov	r17,r3
  81742c:	103fee1e 	bne	r2,zero,8173e8 <___vfprintf_internal_r+0x146c>
  817430:	1800021e 	bne	r3,zero,81743c <___vfprintf_internal_r+0x14c0>
  817434:	00800244 	movi	r2,9
  817438:	113feb36 	bltu	r2,r4,8173e8 <___vfprintf_internal_r+0x146c>
  81743c:	94bfffc4 	addi	r18,r18,-1
  817440:	dc814115 	stw	r18,1284(sp)
  817444:	003fc006 	br	817348 <___vfprintf_internal_r+0x13cc>
  817448:	d9014c17 	ldw	r4,1328(sp)
  81744c:	2080004c 	andi	r2,r4,1
  817450:	10009a1e 	bne	r2,zero,8176bc <___vfprintf_internal_r+0x1740>
  817454:	d9401904 	addi	r5,sp,100
  817458:	dd000f04 	addi	r20,sp,60
  81745c:	d9414115 	stw	r5,1284(sp)
  817460:	003d6106 	br	8169e8 <___vfprintf_internal_r+0xa6c>
  817464:	d9014f17 	ldw	r4,1340(sp)
  817468:	b00b883a 	mov	r5,r22
  81746c:	d9800c04 	addi	r6,sp,48
  817470:	0815f240 	call	815f24 <__sprint_r>
  817474:	103c791e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  817478:	dc800e17 	ldw	r18,56(sp)
  81747c:	d8c01904 	addi	r3,sp,100
  817480:	003cff06 	br	816880 <___vfprintf_internal_r+0x904>
  817484:	d8c14c17 	ldw	r3,1328(sp)
  817488:	1880040c 	andi	r2,r3,16
  81748c:	1000711e 	bne	r2,zero,817654 <___vfprintf_internal_r+0x16d8>
  817490:	d9014c17 	ldw	r4,1328(sp)
  817494:	2080100c 	andi	r2,r4,64
  817498:	10006e26 	beq	r2,zero,817654 <___vfprintf_internal_r+0x16d8>
  81749c:	3c00000b 	ldhu	r16,0(r7)
  8174a0:	0023883a 	mov	r17,zero
  8174a4:	39c00104 	addi	r7,r7,4
  8174a8:	d9c14015 	stw	r7,1280(sp)
  8174ac:	003f0006 	br	8170b0 <___vfprintf_internal_r+0x1134>
  8174b0:	dc400d17 	ldw	r17,52(sp)
  8174b4:	070020f4 	movhi	fp,131
  8174b8:	e7231784 	addi	fp,fp,-29602
  8174bc:	9425883a 	add	r18,r18,r16
  8174c0:	8c400044 	addi	r17,r17,1
  8174c4:	008001c4 	movi	r2,7
  8174c8:	1f000015 	stw	fp,0(r3)
  8174cc:	1c000115 	stw	r16,4(r3)
  8174d0:	dc800e15 	stw	r18,56(sp)
  8174d4:	dc400d15 	stw	r17,52(sp)
  8174d8:	147d7616 	blt	r2,r17,816ab4 <___vfprintf_internal_r+0xb38>
  8174dc:	18c00204 	addi	r3,r3,8
  8174e0:	003d7b06 	br	816ad0 <___vfprintf_internal_r+0xb54>
  8174e4:	dc800e17 	ldw	r18,56(sp)
  8174e8:	dc400d17 	ldw	r17,52(sp)
  8174ec:	070020f4 	movhi	fp,131
  8174f0:	e7231b84 	addi	fp,fp,-29586
  8174f4:	003bc006 	br	8163f8 <___vfprintf_internal_r+0x47c>
  8174f8:	d9014f17 	ldw	r4,1340(sp)
  8174fc:	b00b883a 	mov	r5,r22
  817500:	d9800c04 	addi	r6,sp,48
  817504:	0815f240 	call	815f24 <__sprint_r>
  817508:	103c541e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  81750c:	dc800e17 	ldw	r18,56(sp)
  817510:	d8c01904 	addi	r3,sp,100
  817514:	003ce906 	br	8168bc <___vfprintf_internal_r+0x940>
  817518:	3c000017 	ldw	r16,0(r7)
  81751c:	0009883a 	mov	r4,zero
  817520:	39c00104 	addi	r7,r7,4
  817524:	0023883a 	mov	r17,zero
  817528:	d9c14015 	stw	r7,1280(sp)
  81752c:	d8000405 	stb	zero,16(sp)
  817530:	003d2006 	br	8169b4 <___vfprintf_internal_r+0xa38>
  817534:	38800017 	ldw	r2,0(r7)
  817538:	39c00104 	addi	r7,r7,4
  81753c:	d9c14015 	stw	r7,1280(sp)
  817540:	1023d7fa 	srai	r17,r2,31
  817544:	1021883a 	mov	r16,r2
  817548:	003d1806 	br	8169ac <___vfprintf_internal_r+0xa30>
  81754c:	3c000017 	ldw	r16,0(r7)
  817550:	01000044 	movi	r4,1
  817554:	39c00104 	addi	r7,r7,4
  817558:	0023883a 	mov	r17,zero
  81755c:	d9c14015 	stw	r7,1280(sp)
  817560:	d8000405 	stb	zero,16(sp)
  817564:	003d1306 	br	8169b4 <___vfprintf_internal_r+0xa38>
  817568:	008020f4 	movhi	r2,131
  81756c:	10a31704 	addi	r2,r2,-29604
  817570:	94800044 	addi	r18,r18,1
  817574:	8c400044 	addi	r17,r17,1
  817578:	a8800015 	stw	r2,0(r21)
  81757c:	00c00044 	movi	r3,1
  817580:	008001c4 	movi	r2,7
  817584:	a8c00115 	stw	r3,4(r21)
  817588:	dc800e15 	stw	r18,56(sp)
  81758c:	dc400d15 	stw	r17,52(sp)
  817590:	1440ca16 	blt	r2,r17,8178bc <___vfprintf_internal_r+0x1940>
  817594:	a8c00204 	addi	r3,r21,8
  817598:	2000061e 	bne	r4,zero,8175b4 <___vfprintf_internal_r+0x1638>
  81759c:	d9414717 	ldw	r5,1308(sp)
  8175a0:	2800041e 	bne	r5,zero,8175b4 <___vfprintf_internal_r+0x1638>
  8175a4:	d9814c17 	ldw	r6,1328(sp)
  8175a8:	3080004c 	andi	r2,r6,1
  8175ac:	1005003a 	cmpeq	r2,r2,zero
  8175b0:	103bf01e 	bne	r2,zero,816574 <___vfprintf_internal_r+0x5f8>
  8175b4:	00800044 	movi	r2,1
  8175b8:	dc400d17 	ldw	r17,52(sp)
  8175bc:	18800115 	stw	r2,4(r3)
  8175c0:	d8814917 	ldw	r2,1316(sp)
  8175c4:	94800044 	addi	r18,r18,1
  8175c8:	8c400044 	addi	r17,r17,1
  8175cc:	18800015 	stw	r2,0(r3)
  8175d0:	008001c4 	movi	r2,7
  8175d4:	dc800e15 	stw	r18,56(sp)
  8175d8:	dc400d15 	stw	r17,52(sp)
  8175dc:	1440ca16 	blt	r2,r17,817908 <___vfprintf_internal_r+0x198c>
  8175e0:	18c00204 	addi	r3,r3,8
  8175e4:	0121c83a 	sub	r16,zero,r4
  8175e8:	0400500e 	bge	zero,r16,81772c <___vfprintf_internal_r+0x17b0>
  8175ec:	00800404 	movi	r2,16
  8175f0:	1400800e 	bge	r2,r16,8177f4 <___vfprintf_internal_r+0x1878>
  8175f4:	1027883a 	mov	r19,r2
  8175f8:	070020f4 	movhi	fp,131
  8175fc:	e7231784 	addi	fp,fp,-29602
  817600:	050001c4 	movi	r20,7
  817604:	00000306 	br	817614 <___vfprintf_internal_r+0x1698>
  817608:	18c00204 	addi	r3,r3,8
  81760c:	843ffc04 	addi	r16,r16,-16
  817610:	9c007a0e 	bge	r19,r16,8177fc <___vfprintf_internal_r+0x1880>
  817614:	94800404 	addi	r18,r18,16
  817618:	8c400044 	addi	r17,r17,1
  81761c:	1f000015 	stw	fp,0(r3)
  817620:	1cc00115 	stw	r19,4(r3)
  817624:	dc800e15 	stw	r18,56(sp)
  817628:	dc400d15 	stw	r17,52(sp)
  81762c:	a47ff60e 	bge	r20,r17,817608 <___vfprintf_internal_r+0x168c>
  817630:	d9014f17 	ldw	r4,1340(sp)
  817634:	b00b883a 	mov	r5,r22
  817638:	d9800c04 	addi	r6,sp,48
  81763c:	0815f240 	call	815f24 <__sprint_r>
  817640:	103c061e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  817644:	dc800e17 	ldw	r18,56(sp)
  817648:	dc400d17 	ldw	r17,52(sp)
  81764c:	d8c01904 	addi	r3,sp,100
  817650:	003fee06 	br	81760c <___vfprintf_internal_r+0x1690>
  817654:	3c000017 	ldw	r16,0(r7)
  817658:	0023883a 	mov	r17,zero
  81765c:	39c00104 	addi	r7,r7,4
  817660:	d9c14015 	stw	r7,1280(sp)
  817664:	003e9206 	br	8170b0 <___vfprintf_internal_r+0x1134>
  817668:	d9401904 	addi	r5,sp,100
  81766c:	dd000f04 	addi	r20,sp,60
  817670:	d9414115 	stw	r5,1284(sp)
  817674:	d9814417 	ldw	r6,1296(sp)
  817678:	880a973a 	slli	r5,r17,28
  81767c:	8004d13a 	srli	r2,r16,4
  817680:	810003cc 	andi	r4,r16,15
  817684:	3109883a 	add	r4,r6,r4
  817688:	2884b03a 	or	r2,r5,r2
  81768c:	21400003 	ldbu	r5,0(r4)
  817690:	d9014117 	ldw	r4,1284(sp)
  817694:	8806d13a 	srli	r3,r17,4
  817698:	1021883a 	mov	r16,r2
  81769c:	213fffc4 	addi	r4,r4,-1
  8176a0:	d9014115 	stw	r4,1284(sp)
  8176a4:	d9814117 	ldw	r6,1284(sp)
  8176a8:	10c8b03a 	or	r4,r2,r3
  8176ac:	1823883a 	mov	r17,r3
  8176b0:	31400005 	stb	r5,0(r6)
  8176b4:	203fef1e 	bne	r4,zero,817674 <___vfprintf_internal_r+0x16f8>
  8176b8:	003ccb06 	br	8169e8 <___vfprintf_internal_r+0xa6c>
  8176bc:	00800c04 	movi	r2,48
  8176c0:	d98018c4 	addi	r6,sp,99
  8176c4:	dd000f04 	addi	r20,sp,60
  8176c8:	d88018c5 	stb	r2,99(sp)
  8176cc:	d9814115 	stw	r6,1284(sp)
  8176d0:	003cc506 	br	8169e8 <___vfprintf_internal_r+0xa6c>
  8176d4:	dc400d17 	ldw	r17,52(sp)
  8176d8:	070020f4 	movhi	fp,131
  8176dc:	e7231b84 	addi	fp,fp,-29586
  8176e0:	003bc706 	br	816600 <___vfprintf_internal_r+0x684>
  8176e4:	d9414c17 	ldw	r5,1328(sp)
  8176e8:	2880040c 	andi	r2,r5,16
  8176ec:	10007c26 	beq	r2,zero,8178e0 <___vfprintf_internal_r+0x1964>
  8176f0:	38800017 	ldw	r2,0(r7)
  8176f4:	39c00104 	addi	r7,r7,4
  8176f8:	d9c14015 	stw	r7,1280(sp)
  8176fc:	d9814b17 	ldw	r6,1324(sp)
  817700:	d9c14017 	ldw	r7,1280(sp)
  817704:	11800015 	stw	r6,0(r2)
  817708:	003a7806 	br	8160ec <___vfprintf_internal_r+0x170>
  81770c:	d9014f17 	ldw	r4,1340(sp)
  817710:	b00b883a 	mov	r5,r22
  817714:	d9800c04 	addi	r6,sp,48
  817718:	0815f240 	call	815f24 <__sprint_r>
  81771c:	103bcf1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  817720:	dc800e17 	ldw	r18,56(sp)
  817724:	dc400d17 	ldw	r17,52(sp)
  817728:	d8c01904 	addi	r3,sp,100
  81772c:	d9014717 	ldw	r4,1308(sp)
  817730:	d9414117 	ldw	r5,1284(sp)
  817734:	8c400044 	addi	r17,r17,1
  817738:	9125883a 	add	r18,r18,r4
  81773c:	008001c4 	movi	r2,7
  817740:	19400015 	stw	r5,0(r3)
  817744:	19000115 	stw	r4,4(r3)
  817748:	dc800e15 	stw	r18,56(sp)
  81774c:	dc400d15 	stw	r17,52(sp)
  817750:	147cee16 	blt	r2,r17,816b0c <___vfprintf_internal_r+0xb90>
  817754:	18c00204 	addi	r3,r3,8
  817758:	003b8606 	br	816574 <___vfprintf_internal_r+0x5f8>
  81775c:	38c00017 	ldw	r3,0(r7)
  817760:	39000204 	addi	r4,r7,8
  817764:	d9014015 	stw	r4,1280(sp)
  817768:	d8c14215 	stw	r3,1288(sp)
  81776c:	39c00117 	ldw	r7,4(r7)
  817770:	d9c14315 	stw	r7,1292(sp)
  817774:	003e2006 	br	816ff8 <___vfprintf_internal_r+0x107c>
  817778:	0005883a 	mov	r2,zero
  81777c:	1409c83a 	sub	r4,r2,r16
  817780:	1105803a 	cmpltu	r2,r2,r4
  817784:	044bc83a 	sub	r5,zero,r17
  817788:	2885c83a 	sub	r2,r5,r2
  81778c:	2021883a 	mov	r16,r4
  817790:	1023883a 	mov	r17,r2
  817794:	01000044 	movi	r4,1
  817798:	00800b44 	movi	r2,45
  81779c:	d8800405 	stb	r2,16(sp)
  8177a0:	003c8406 	br	8169b4 <___vfprintf_internal_r+0xa38>
  8177a4:	d9014f17 	ldw	r4,1340(sp)
  8177a8:	b00b883a 	mov	r5,r22
  8177ac:	d9800c04 	addi	r6,sp,48
  8177b0:	0815f240 	call	815f24 <__sprint_r>
  8177b4:	103ba91e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  8177b8:	dc800e17 	ldw	r18,56(sp)
  8177bc:	dc400d17 	ldw	r17,52(sp)
  8177c0:	d9000517 	ldw	r4,20(sp)
  8177c4:	d9401904 	addi	r5,sp,100
  8177c8:	003da706 	br	816e68 <___vfprintf_internal_r+0xeec>
  8177cc:	d9014f17 	ldw	r4,1340(sp)
  8177d0:	b00b883a 	mov	r5,r22
  8177d4:	d9800c04 	addi	r6,sp,48
  8177d8:	0815f240 	call	815f24 <__sprint_r>
  8177dc:	103b9f1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  8177e0:	dc800e17 	ldw	r18,56(sp)
  8177e4:	dc400d17 	ldw	r17,52(sp)
  8177e8:	d9000517 	ldw	r4,20(sp)
  8177ec:	d8c01904 	addi	r3,sp,100
  8177f0:	003d9106 	br	816e38 <___vfprintf_internal_r+0xebc>
  8177f4:	070020f4 	movhi	fp,131
  8177f8:	e7231784 	addi	fp,fp,-29602
  8177fc:	9425883a 	add	r18,r18,r16
  817800:	8c400044 	addi	r17,r17,1
  817804:	008001c4 	movi	r2,7
  817808:	1f000015 	stw	fp,0(r3)
  81780c:	1c000115 	stw	r16,4(r3)
  817810:	dc800e15 	stw	r18,56(sp)
  817814:	dc400d15 	stw	r17,52(sp)
  817818:	147fbc16 	blt	r2,r17,81770c <___vfprintf_internal_r+0x1790>
  81781c:	18c00204 	addi	r3,r3,8
  817820:	003fc206 	br	81772c <___vfprintf_internal_r+0x17b0>
  817824:	d9014f17 	ldw	r4,1340(sp)
  817828:	b00b883a 	mov	r5,r22
  81782c:	d9800c04 	addi	r6,sp,48
  817830:	0815f240 	call	815f24 <__sprint_r>
  817834:	103b891e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  817838:	dc800e17 	ldw	r18,56(sp)
  81783c:	d9000517 	ldw	r4,20(sp)
  817840:	d8c01904 	addi	r3,sp,100
  817844:	003d0206 	br	816c50 <___vfprintf_internal_r+0xcd4>
  817848:	070020f4 	movhi	fp,131
  81784c:	e7231784 	addi	fp,fp,-29602
  817850:	003be406 	br	8167e4 <___vfprintf_internal_r+0x868>
  817854:	008020f4 	movhi	r2,131
  817858:	10a30604 	addi	r2,r2,-29672
  81785c:	d8814115 	stw	r2,1284(sp)
  817860:	003df506 	br	817038 <___vfprintf_internal_r+0x10bc>
  817864:	d9014217 	ldw	r4,1288(sp)
  817868:	d9414317 	ldw	r5,1292(sp)
  81786c:	081c17c0 	call	81c17c <__isnand>
  817870:	10003926 	beq	r2,zero,817958 <___vfprintf_internal_r+0x19dc>
  817874:	d9414d17 	ldw	r5,1332(sp)
  817878:	008011c4 	movi	r2,71
  81787c:	1140ce16 	blt	r2,r5,817bb8 <___vfprintf_internal_r+0x1c3c>
  817880:	018020f4 	movhi	r6,131
  817884:	31a30704 	addi	r6,r6,-29668
  817888:	d9814115 	stw	r6,1284(sp)
  81788c:	003dea06 	br	817038 <___vfprintf_internal_r+0x10bc>
  817890:	d9014c17 	ldw	r4,1328(sp)
  817894:	bdc00044 	addi	r23,r23,1
  817898:	b8c00007 	ldb	r3,0(r23)
  81789c:	21000814 	ori	r4,r4,32
  8178a0:	d9014c15 	stw	r4,1328(sp)
  8178a4:	003a3406 	br	816178 <___vfprintf_internal_r+0x1fc>
  8178a8:	dcc14515 	stw	r19,1300(sp)
  8178ac:	98011016 	blt	r19,zero,817cf0 <___vfprintf_internal_r+0x1d74>
  8178b0:	980f883a 	mov	r7,r19
  8178b4:	d8014615 	stw	zero,1304(sp)
  8178b8:	003c5206 	br	816a04 <___vfprintf_internal_r+0xa88>
  8178bc:	d9014f17 	ldw	r4,1340(sp)
  8178c0:	b00b883a 	mov	r5,r22
  8178c4:	d9800c04 	addi	r6,sp,48
  8178c8:	0815f240 	call	815f24 <__sprint_r>
  8178cc:	103b631e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  8178d0:	dc800e17 	ldw	r18,56(sp)
  8178d4:	d9000517 	ldw	r4,20(sp)
  8178d8:	d8c01904 	addi	r3,sp,100
  8178dc:	003f2e06 	br	817598 <___vfprintf_internal_r+0x161c>
  8178e0:	d8c14c17 	ldw	r3,1328(sp)
  8178e4:	1880100c 	andi	r2,r3,64
  8178e8:	1000a026 	beq	r2,zero,817b6c <___vfprintf_internal_r+0x1bf0>
  8178ec:	38800017 	ldw	r2,0(r7)
  8178f0:	39c00104 	addi	r7,r7,4
  8178f4:	d9c14015 	stw	r7,1280(sp)
  8178f8:	d9014b17 	ldw	r4,1324(sp)
  8178fc:	d9c14017 	ldw	r7,1280(sp)
  817900:	1100000d 	sth	r4,0(r2)
  817904:	0039f906 	br	8160ec <___vfprintf_internal_r+0x170>
  817908:	d9014f17 	ldw	r4,1340(sp)
  81790c:	b00b883a 	mov	r5,r22
  817910:	d9800c04 	addi	r6,sp,48
  817914:	0815f240 	call	815f24 <__sprint_r>
  817918:	103b501e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  81791c:	dc800e17 	ldw	r18,56(sp)
  817920:	dc400d17 	ldw	r17,52(sp)
  817924:	d9000517 	ldw	r4,20(sp)
  817928:	d8c01904 	addi	r3,sp,100
  81792c:	003f2d06 	br	8175e4 <___vfprintf_internal_r+0x1668>
  817930:	00800184 	movi	r2,6
  817934:	14c09a36 	bltu	r2,r19,817ba0 <___vfprintf_internal_r+0x1c24>
  817938:	dcc14515 	stw	r19,1300(sp)
  81793c:	9800010e 	bge	r19,zero,817944 <___vfprintf_internal_r+0x19c8>
  817940:	d8014515 	stw	zero,1300(sp)
  817944:	008020f4 	movhi	r2,131
  817948:	10a30904 	addi	r2,r2,-29660
  81794c:	980f883a 	mov	r7,r19
  817950:	d8814115 	stw	r2,1284(sp)
  817954:	003a7806 	br	816338 <___vfprintf_internal_r+0x3bc>
  817958:	00bfffc4 	movi	r2,-1
  81795c:	9880e226 	beq	r19,r2,817ce8 <___vfprintf_internal_r+0x1d6c>
  817960:	d9414d17 	ldw	r5,1332(sp)
  817964:	008019c4 	movi	r2,103
  817968:	2880dc26 	beq	r5,r2,817cdc <___vfprintf_internal_r+0x1d60>
  81796c:	008011c4 	movi	r2,71
  817970:	2880da26 	beq	r5,r2,817cdc <___vfprintf_internal_r+0x1d60>
  817974:	d9414c17 	ldw	r5,1328(sp)
  817978:	d9014317 	ldw	r4,1292(sp)
  81797c:	d9814217 	ldw	r6,1288(sp)
  817980:	29404014 	ori	r5,r5,256
  817984:	d9414c15 	stw	r5,1328(sp)
  817988:	2000cc16 	blt	r4,zero,817cbc <___vfprintf_internal_r+0x1d40>
  81798c:	3021883a 	mov	r16,r6
  817990:	2023883a 	mov	r17,r4
  817994:	0039883a 	mov	fp,zero
  817998:	d9414d17 	ldw	r5,1332(sp)
  81799c:	00801984 	movi	r2,102
  8179a0:	2880b726 	beq	r5,r2,817c80 <___vfprintf_internal_r+0x1d04>
  8179a4:	00801184 	movi	r2,70
  8179a8:	2880b526 	beq	r5,r2,817c80 <___vfprintf_internal_r+0x1d04>
  8179ac:	00801944 	movi	r2,101
  8179b0:	2880c826 	beq	r5,r2,817cd4 <___vfprintf_internal_r+0x1d58>
  8179b4:	00801144 	movi	r2,69
  8179b8:	2880c626 	beq	r5,r2,817cd4 <___vfprintf_internal_r+0x1d58>
  8179bc:	9829883a 	mov	r20,r19
  8179c0:	d9014f17 	ldw	r4,1340(sp)
  8179c4:	d8800504 	addi	r2,sp,20
  8179c8:	880d883a 	mov	r6,r17
  8179cc:	d8800115 	stw	r2,4(sp)
  8179d0:	d8c00604 	addi	r3,sp,24
  8179d4:	d8800704 	addi	r2,sp,28
  8179d8:	800b883a 	mov	r5,r16
  8179dc:	01c00084 	movi	r7,2
  8179e0:	d8c00215 	stw	r3,8(sp)
  8179e4:	d8800315 	stw	r2,12(sp)
  8179e8:	dd000015 	stw	r20,0(sp)
  8179ec:	08181a00 	call	8181a0 <_dtoa_r>
  8179f0:	d9814d17 	ldw	r6,1332(sp)
  8179f4:	d8814115 	stw	r2,1284(sp)
  8179f8:	008019c4 	movi	r2,103
  8179fc:	30809526 	beq	r6,r2,817c54 <___vfprintf_internal_r+0x1cd8>
  817a00:	d8c14d17 	ldw	r3,1332(sp)
  817a04:	008011c4 	movi	r2,71
  817a08:	18809226 	beq	r3,r2,817c54 <___vfprintf_internal_r+0x1cd8>
  817a0c:	d9414117 	ldw	r5,1284(sp)
  817a10:	d9814d17 	ldw	r6,1332(sp)
  817a14:	00801984 	movi	r2,102
  817a18:	2d25883a 	add	r18,r5,r20
  817a1c:	30808626 	beq	r6,r2,817c38 <___vfprintf_internal_r+0x1cbc>
  817a20:	00801184 	movi	r2,70
  817a24:	30808426 	beq	r6,r2,817c38 <___vfprintf_internal_r+0x1cbc>
  817a28:	000d883a 	mov	r6,zero
  817a2c:	000f883a 	mov	r7,zero
  817a30:	880b883a 	mov	r5,r17
  817a34:	8009883a 	mov	r4,r16
  817a38:	081d3d40 	call	81d3d4 <__eqdf2>
  817a3c:	1000751e 	bne	r2,zero,817c14 <___vfprintf_internal_r+0x1c98>
  817a40:	9005883a 	mov	r2,r18
  817a44:	dc800715 	stw	r18,28(sp)
  817a48:	d9014117 	ldw	r4,1284(sp)
  817a4c:	d9414d17 	ldw	r5,1332(sp)
  817a50:	00c019c4 	movi	r3,103
  817a54:	1125c83a 	sub	r18,r2,r4
  817a58:	28c06826 	beq	r5,r3,817bfc <___vfprintf_internal_r+0x1c80>
  817a5c:	008011c4 	movi	r2,71
  817a60:	28806626 	beq	r5,r2,817bfc <___vfprintf_internal_r+0x1c80>
  817a64:	d9000517 	ldw	r4,20(sp)
  817a68:	d8c14d17 	ldw	r3,1332(sp)
  817a6c:	00801944 	movi	r2,101
  817a70:	10c05516 	blt	r2,r3,817bc8 <___vfprintf_internal_r+0x1c4c>
  817a74:	213fffc4 	addi	r4,r4,-1
  817a78:	d9000515 	stw	r4,20(sp)
  817a7c:	d8c00805 	stb	r3,32(sp)
  817a80:	2021883a 	mov	r16,r4
  817a84:	2000c116 	blt	r4,zero,817d8c <___vfprintf_internal_r+0x1e10>
  817a88:	00800ac4 	movi	r2,43
  817a8c:	d8800845 	stb	r2,33(sp)
  817a90:	00800244 	movi	r2,9
  817a94:	1400af0e 	bge	r2,r16,817d54 <___vfprintf_internal_r+0x1dd8>
  817a98:	1027883a 	mov	r19,r2
  817a9c:	dc400b84 	addi	r17,sp,46
  817aa0:	8009883a 	mov	r4,r16
  817aa4:	01400284 	movi	r5,10
  817aa8:	081465c0 	call	81465c <__modsi3>
  817aac:	10800c04 	addi	r2,r2,48
  817ab0:	8c7fffc4 	addi	r17,r17,-1
  817ab4:	8009883a 	mov	r4,r16
  817ab8:	01400284 	movi	r5,10
  817abc:	88800005 	stb	r2,0(r17)
  817ac0:	08145fc0 	call	8145fc <__divsi3>
  817ac4:	1021883a 	mov	r16,r2
  817ac8:	98bff516 	blt	r19,r2,817aa0 <___vfprintf_internal_r+0x1b24>
  817acc:	10c00c04 	addi	r3,r2,48
  817ad0:	d88009c4 	addi	r2,sp,39
  817ad4:	108001c4 	addi	r2,r2,7
  817ad8:	897fffc4 	addi	r5,r17,-1
  817adc:	88ffffc5 	stb	r3,-1(r17)
  817ae0:	2880a72e 	bgeu	r5,r2,817d80 <___vfprintf_internal_r+0x1e04>
  817ae4:	1009883a 	mov	r4,r2
  817ae8:	d9800804 	addi	r6,sp,32
  817aec:	d8c00884 	addi	r3,sp,34
  817af0:	28800003 	ldbu	r2,0(r5)
  817af4:	29400044 	addi	r5,r5,1
  817af8:	18800005 	stb	r2,0(r3)
  817afc:	18c00044 	addi	r3,r3,1
  817b00:	293ffb36 	bltu	r5,r4,817af0 <___vfprintf_internal_r+0x1b74>
  817b04:	1987c83a 	sub	r3,r3,r6
  817b08:	00800044 	movi	r2,1
  817b0c:	d8c14815 	stw	r3,1312(sp)
  817b10:	90cf883a 	add	r7,r18,r3
  817b14:	1480960e 	bge	r2,r18,817d70 <___vfprintf_internal_r+0x1df4>
  817b18:	39c00044 	addi	r7,r7,1
  817b1c:	d9c14515 	stw	r7,1300(sp)
  817b20:	38003416 	blt	r7,zero,817bf4 <___vfprintf_internal_r+0x1c78>
  817b24:	e0803fcc 	andi	r2,fp,255
  817b28:	1080201c 	xori	r2,r2,128
  817b2c:	10bfe004 	addi	r2,r2,-128
  817b30:	10004e26 	beq	r2,zero,817c6c <___vfprintf_internal_r+0x1cf0>
  817b34:	00800b44 	movi	r2,45
  817b38:	dc814715 	stw	r18,1308(sp)
  817b3c:	d8014615 	stw	zero,1304(sp)
  817b40:	d8800405 	stb	r2,16(sp)
  817b44:	003bb106 	br	816a0c <___vfprintf_internal_r+0xa90>
  817b48:	00800b44 	movi	r2,45
  817b4c:	d8800405 	stb	r2,16(sp)
  817b50:	003d3306 	br	817020 <___vfprintf_internal_r+0x10a4>
  817b54:	d9014f17 	ldw	r4,1340(sp)
  817b58:	b00b883a 	mov	r5,r22
  817b5c:	d9800c04 	addi	r6,sp,48
  817b60:	0815f240 	call	815f24 <__sprint_r>
  817b64:	103abd1e 	bne	r2,zero,81665c <___vfprintf_internal_r+0x6e0>
  817b68:	003abb06 	br	816658 <___vfprintf_internal_r+0x6dc>
  817b6c:	38800017 	ldw	r2,0(r7)
  817b70:	39c00104 	addi	r7,r7,4
  817b74:	d9c14015 	stw	r7,1280(sp)
  817b78:	d9414b17 	ldw	r5,1324(sp)
  817b7c:	d9c14017 	ldw	r7,1280(sp)
  817b80:	11400015 	stw	r5,0(r2)
  817b84:	00395906 	br	8160ec <___vfprintf_internal_r+0x170>
  817b88:	980f883a 	mov	r7,r19
  817b8c:	dcc14515 	stw	r19,1300(sp)
  817b90:	d8014615 	stw	zero,1304(sp)
  817b94:	003b9b06 	br	816a04 <___vfprintf_internal_r+0xa88>
  817b98:	0027883a 	mov	r19,zero
  817b9c:	00397806 	br	816180 <___vfprintf_internal_r+0x204>
  817ba0:	00c020f4 	movhi	r3,131
  817ba4:	18e30904 	addi	r3,r3,-29660
  817ba8:	100f883a 	mov	r7,r2
  817bac:	d8814515 	stw	r2,1300(sp)
  817bb0:	d8c14115 	stw	r3,1284(sp)
  817bb4:	0039e006 	br	816338 <___vfprintf_internal_r+0x3bc>
  817bb8:	008020f4 	movhi	r2,131
  817bbc:	10a30804 	addi	r2,r2,-29664
  817bc0:	d8814115 	stw	r2,1284(sp)
  817bc4:	003d1c06 	br	817038 <___vfprintf_internal_r+0x10bc>
  817bc8:	d9414d17 	ldw	r5,1332(sp)
  817bcc:	00801984 	movi	r2,102
  817bd0:	28804926 	beq	r5,r2,817cf8 <___vfprintf_internal_r+0x1d7c>
  817bd4:	200f883a 	mov	r7,r4
  817bd8:	24805716 	blt	r4,r18,817d38 <___vfprintf_internal_r+0x1dbc>
  817bdc:	d9414c17 	ldw	r5,1328(sp)
  817be0:	2880004c 	andi	r2,r5,1
  817be4:	10000126 	beq	r2,zero,817bec <___vfprintf_internal_r+0x1c70>
  817be8:	21c00044 	addi	r7,r4,1
  817bec:	d9c14515 	stw	r7,1300(sp)
  817bf0:	383fcc0e 	bge	r7,zero,817b24 <___vfprintf_internal_r+0x1ba8>
  817bf4:	d8014515 	stw	zero,1300(sp)
  817bf8:	003fca06 	br	817b24 <___vfprintf_internal_r+0x1ba8>
  817bfc:	d9000517 	ldw	r4,20(sp)
  817c00:	00bfff04 	movi	r2,-4
  817c04:	1100480e 	bge	r2,r4,817d28 <___vfprintf_internal_r+0x1dac>
  817c08:	99004716 	blt	r19,r4,817d28 <___vfprintf_internal_r+0x1dac>
  817c0c:	d8c14d15 	stw	r3,1332(sp)
  817c10:	003ff006 	br	817bd4 <___vfprintf_internal_r+0x1c58>
  817c14:	d8800717 	ldw	r2,28(sp)
  817c18:	14bf8b2e 	bgeu	r2,r18,817a48 <___vfprintf_internal_r+0x1acc>
  817c1c:	9007883a 	mov	r3,r18
  817c20:	01000c04 	movi	r4,48
  817c24:	11000005 	stb	r4,0(r2)
  817c28:	10800044 	addi	r2,r2,1
  817c2c:	d8800715 	stw	r2,28(sp)
  817c30:	18bffc1e 	bne	r3,r2,817c24 <___vfprintf_internal_r+0x1ca8>
  817c34:	003f8406 	br	817a48 <___vfprintf_internal_r+0x1acc>
  817c38:	d8814117 	ldw	r2,1284(sp)
  817c3c:	10c00007 	ldb	r3,0(r2)
  817c40:	00800c04 	movi	r2,48
  817c44:	18805b26 	beq	r3,r2,817db4 <___vfprintf_internal_r+0x1e38>
  817c48:	d9000517 	ldw	r4,20(sp)
  817c4c:	9125883a 	add	r18,r18,r4
  817c50:	003f7506 	br	817a28 <___vfprintf_internal_r+0x1aac>
  817c54:	d9014c17 	ldw	r4,1328(sp)
  817c58:	2080004c 	andi	r2,r4,1
  817c5c:	1005003a 	cmpeq	r2,r2,zero
  817c60:	103f6a26 	beq	r2,zero,817a0c <___vfprintf_internal_r+0x1a90>
  817c64:	d8800717 	ldw	r2,28(sp)
  817c68:	003f7706 	br	817a48 <___vfprintf_internal_r+0x1acc>
  817c6c:	d9c14515 	stw	r7,1300(sp)
  817c70:	38004d16 	blt	r7,zero,817da8 <___vfprintf_internal_r+0x1e2c>
  817c74:	dc814715 	stw	r18,1308(sp)
  817c78:	d8014615 	stw	zero,1304(sp)
  817c7c:	003b6106 	br	816a04 <___vfprintf_internal_r+0xa88>
  817c80:	d9014f17 	ldw	r4,1340(sp)
  817c84:	d8800504 	addi	r2,sp,20
  817c88:	d8800115 	stw	r2,4(sp)
  817c8c:	d8c00604 	addi	r3,sp,24
  817c90:	d8800704 	addi	r2,sp,28
  817c94:	800b883a 	mov	r5,r16
  817c98:	880d883a 	mov	r6,r17
  817c9c:	01c000c4 	movi	r7,3
  817ca0:	d8c00215 	stw	r3,8(sp)
  817ca4:	d8800315 	stw	r2,12(sp)
  817ca8:	dcc00015 	stw	r19,0(sp)
  817cac:	9829883a 	mov	r20,r19
  817cb0:	08181a00 	call	8181a0 <_dtoa_r>
  817cb4:	d8814115 	stw	r2,1284(sp)
  817cb8:	003f5106 	br	817a00 <___vfprintf_internal_r+0x1a84>
  817cbc:	d8c14217 	ldw	r3,1288(sp)
  817cc0:	d9014317 	ldw	r4,1292(sp)
  817cc4:	07000b44 	movi	fp,45
  817cc8:	1821883a 	mov	r16,r3
  817ccc:	2460003c 	xorhi	r17,r4,32768
  817cd0:	003f3106 	br	817998 <___vfprintf_internal_r+0x1a1c>
  817cd4:	9d000044 	addi	r20,r19,1
  817cd8:	003f3906 	br	8179c0 <___vfprintf_internal_r+0x1a44>
  817cdc:	983f251e 	bne	r19,zero,817974 <___vfprintf_internal_r+0x19f8>
  817ce0:	04c00044 	movi	r19,1
  817ce4:	003f2306 	br	817974 <___vfprintf_internal_r+0x19f8>
  817ce8:	04c00184 	movi	r19,6
  817cec:	003f2106 	br	817974 <___vfprintf_internal_r+0x19f8>
  817cf0:	d8014515 	stw	zero,1300(sp)
  817cf4:	003eee06 	br	8178b0 <___vfprintf_internal_r+0x1934>
  817cf8:	200f883a 	mov	r7,r4
  817cfc:	0100370e 	bge	zero,r4,817ddc <___vfprintf_internal_r+0x1e60>
  817d00:	9800031e 	bne	r19,zero,817d10 <___vfprintf_internal_r+0x1d94>
  817d04:	d9814c17 	ldw	r6,1328(sp)
  817d08:	3080004c 	andi	r2,r6,1
  817d0c:	103fb726 	beq	r2,zero,817bec <___vfprintf_internal_r+0x1c70>
  817d10:	20800044 	addi	r2,r4,1
  817d14:	98a7883a 	add	r19,r19,r2
  817d18:	dcc14515 	stw	r19,1300(sp)
  817d1c:	980f883a 	mov	r7,r19
  817d20:	983f800e 	bge	r19,zero,817b24 <___vfprintf_internal_r+0x1ba8>
  817d24:	003fb306 	br	817bf4 <___vfprintf_internal_r+0x1c78>
  817d28:	d9814d17 	ldw	r6,1332(sp)
  817d2c:	31bfff84 	addi	r6,r6,-2
  817d30:	d9814d15 	stw	r6,1332(sp)
  817d34:	003f4c06 	br	817a68 <___vfprintf_internal_r+0x1aec>
  817d38:	0100180e 	bge	zero,r4,817d9c <___vfprintf_internal_r+0x1e20>
  817d3c:	00800044 	movi	r2,1
  817d40:	1485883a 	add	r2,r2,r18
  817d44:	d8814515 	stw	r2,1300(sp)
  817d48:	100f883a 	mov	r7,r2
  817d4c:	103f750e 	bge	r2,zero,817b24 <___vfprintf_internal_r+0x1ba8>
  817d50:	003fa806 	br	817bf4 <___vfprintf_internal_r+0x1c78>
  817d54:	80c00c04 	addi	r3,r16,48
  817d58:	00800c04 	movi	r2,48
  817d5c:	d8c008c5 	stb	r3,35(sp)
  817d60:	d9800804 	addi	r6,sp,32
  817d64:	d8c00904 	addi	r3,sp,36
  817d68:	d8800885 	stb	r2,34(sp)
  817d6c:	003f6506 	br	817b04 <___vfprintf_internal_r+0x1b88>
  817d70:	d9014c17 	ldw	r4,1328(sp)
  817d74:	2084703a 	and	r2,r4,r2
  817d78:	103f9c26 	beq	r2,zero,817bec <___vfprintf_internal_r+0x1c70>
  817d7c:	003f6606 	br	817b18 <___vfprintf_internal_r+0x1b9c>
  817d80:	d9800804 	addi	r6,sp,32
  817d84:	d8c00884 	addi	r3,sp,34
  817d88:	003f5e06 	br	817b04 <___vfprintf_internal_r+0x1b88>
  817d8c:	00800b44 	movi	r2,45
  817d90:	0121c83a 	sub	r16,zero,r4
  817d94:	d8800845 	stb	r2,33(sp)
  817d98:	003f3d06 	br	817a90 <___vfprintf_internal_r+0x1b14>
  817d9c:	00800084 	movi	r2,2
  817da0:	1105c83a 	sub	r2,r2,r4
  817da4:	003fe606 	br	817d40 <___vfprintf_internal_r+0x1dc4>
  817da8:	d8014515 	stw	zero,1300(sp)
  817dac:	dc814715 	stw	r18,1308(sp)
  817db0:	003fb106 	br	817c78 <___vfprintf_internal_r+0x1cfc>
  817db4:	000d883a 	mov	r6,zero
  817db8:	000f883a 	mov	r7,zero
  817dbc:	8009883a 	mov	r4,r16
  817dc0:	880b883a 	mov	r5,r17
  817dc4:	081d45c0 	call	81d45c <__nedf2>
  817dc8:	103f9f26 	beq	r2,zero,817c48 <___vfprintf_internal_r+0x1ccc>
  817dcc:	00800044 	movi	r2,1
  817dd0:	1509c83a 	sub	r4,r2,r20
  817dd4:	d9000515 	stw	r4,20(sp)
  817dd8:	003f9b06 	br	817c48 <___vfprintf_internal_r+0x1ccc>
  817ddc:	98000d1e 	bne	r19,zero,817e14 <___vfprintf_internal_r+0x1e98>
  817de0:	d8c14c17 	ldw	r3,1328(sp)
  817de4:	1880004c 	andi	r2,r3,1
  817de8:	10000a1e 	bne	r2,zero,817e14 <___vfprintf_internal_r+0x1e98>
  817dec:	01000044 	movi	r4,1
  817df0:	200f883a 	mov	r7,r4
  817df4:	d9014515 	stw	r4,1300(sp)
  817df8:	003f4a06 	br	817b24 <___vfprintf_internal_r+0x1ba8>
  817dfc:	3cc00017 	ldw	r19,0(r7)
  817e00:	39c00104 	addi	r7,r7,4
  817e04:	983d0e0e 	bge	r19,zero,817240 <___vfprintf_internal_r+0x12c4>
  817e08:	b8c00007 	ldb	r3,0(r23)
  817e0c:	04ffffc4 	movi	r19,-1
  817e10:	0038d906 	br	816178 <___vfprintf_internal_r+0x1fc>
  817e14:	9cc00084 	addi	r19,r19,2
  817e18:	dcc14515 	stw	r19,1300(sp)
  817e1c:	980f883a 	mov	r7,r19
  817e20:	983f400e 	bge	r19,zero,817b24 <___vfprintf_internal_r+0x1ba8>
  817e24:	003f7306 	br	817bf4 <___vfprintf_internal_r+0x1c78>

00817e28 <__vfprintf_internal>:
  817e28:	008020f4 	movhi	r2,131
  817e2c:	10805b04 	addi	r2,r2,364
  817e30:	2013883a 	mov	r9,r4
  817e34:	11000017 	ldw	r4,0(r2)
  817e38:	2805883a 	mov	r2,r5
  817e3c:	300f883a 	mov	r7,r6
  817e40:	480b883a 	mov	r5,r9
  817e44:	100d883a 	mov	r6,r2
  817e48:	0815f7c1 	jmpi	815f7c <___vfprintf_internal_r>

00817e4c <__swsetup_r>:
  817e4c:	008020f4 	movhi	r2,131
  817e50:	10805b04 	addi	r2,r2,364
  817e54:	10c00017 	ldw	r3,0(r2)
  817e58:	defffd04 	addi	sp,sp,-12
  817e5c:	dc400115 	stw	r17,4(sp)
  817e60:	dc000015 	stw	r16,0(sp)
  817e64:	dfc00215 	stw	ra,8(sp)
  817e68:	2023883a 	mov	r17,r4
  817e6c:	2821883a 	mov	r16,r5
  817e70:	18000226 	beq	r3,zero,817e7c <__swsetup_r+0x30>
  817e74:	18800e17 	ldw	r2,56(r3)
  817e78:	10001f26 	beq	r2,zero,817ef8 <__swsetup_r+0xac>
  817e7c:	8100030b 	ldhu	r4,12(r16)
  817e80:	2080020c 	andi	r2,r4,8
  817e84:	10002826 	beq	r2,zero,817f28 <__swsetup_r+0xdc>
  817e88:	81400417 	ldw	r5,16(r16)
  817e8c:	28001d26 	beq	r5,zero,817f04 <__swsetup_r+0xb8>
  817e90:	2080004c 	andi	r2,r4,1
  817e94:	1005003a 	cmpeq	r2,r2,zero
  817e98:	10000b26 	beq	r2,zero,817ec8 <__swsetup_r+0x7c>
  817e9c:	2080008c 	andi	r2,r4,2
  817ea0:	10001226 	beq	r2,zero,817eec <__swsetup_r+0xa0>
  817ea4:	0005883a 	mov	r2,zero
  817ea8:	80800215 	stw	r2,8(r16)
  817eac:	28000b26 	beq	r5,zero,817edc <__swsetup_r+0x90>
  817eb0:	0005883a 	mov	r2,zero
  817eb4:	dfc00217 	ldw	ra,8(sp)
  817eb8:	dc400117 	ldw	r17,4(sp)
  817ebc:	dc000017 	ldw	r16,0(sp)
  817ec0:	dec00304 	addi	sp,sp,12
  817ec4:	f800283a 	ret
  817ec8:	80800517 	ldw	r2,20(r16)
  817ecc:	80000215 	stw	zero,8(r16)
  817ed0:	0085c83a 	sub	r2,zero,r2
  817ed4:	80800615 	stw	r2,24(r16)
  817ed8:	283ff51e 	bne	r5,zero,817eb0 <__swsetup_r+0x64>
  817edc:	2080200c 	andi	r2,r4,128
  817ee0:	103ff326 	beq	r2,zero,817eb0 <__swsetup_r+0x64>
  817ee4:	00bfffc4 	movi	r2,-1
  817ee8:	003ff206 	br	817eb4 <__swsetup_r+0x68>
  817eec:	80800517 	ldw	r2,20(r16)
  817ef0:	80800215 	stw	r2,8(r16)
  817ef4:	003fed06 	br	817eac <__swsetup_r+0x60>
  817ef8:	1809883a 	mov	r4,r3
  817efc:	08199ec0 	call	8199ec <__sinit>
  817f00:	003fde06 	br	817e7c <__swsetup_r+0x30>
  817f04:	20c0a00c 	andi	r3,r4,640
  817f08:	00808004 	movi	r2,512
  817f0c:	18bfe026 	beq	r3,r2,817e90 <__swsetup_r+0x44>
  817f10:	8809883a 	mov	r4,r17
  817f14:	800b883a 	mov	r5,r16
  817f18:	081a7640 	call	81a764 <__smakebuf_r>
  817f1c:	8100030b 	ldhu	r4,12(r16)
  817f20:	81400417 	ldw	r5,16(r16)
  817f24:	003fda06 	br	817e90 <__swsetup_r+0x44>
  817f28:	2080040c 	andi	r2,r4,16
  817f2c:	103fed26 	beq	r2,zero,817ee4 <__swsetup_r+0x98>
  817f30:	2080010c 	andi	r2,r4,4
  817f34:	10001226 	beq	r2,zero,817f80 <__swsetup_r+0x134>
  817f38:	81400c17 	ldw	r5,48(r16)
  817f3c:	28000526 	beq	r5,zero,817f54 <__swsetup_r+0x108>
  817f40:	80801004 	addi	r2,r16,64
  817f44:	28800226 	beq	r5,r2,817f50 <__swsetup_r+0x104>
  817f48:	8809883a 	mov	r4,r17
  817f4c:	0819d700 	call	819d70 <_free_r>
  817f50:	80000c15 	stw	zero,48(r16)
  817f54:	8080030b 	ldhu	r2,12(r16)
  817f58:	81400417 	ldw	r5,16(r16)
  817f5c:	80000115 	stw	zero,4(r16)
  817f60:	10bff6cc 	andi	r2,r2,65499
  817f64:	8080030d 	sth	r2,12(r16)
  817f68:	81400015 	stw	r5,0(r16)
  817f6c:	8080030b 	ldhu	r2,12(r16)
  817f70:	10800214 	ori	r2,r2,8
  817f74:	113fffcc 	andi	r4,r2,65535
  817f78:	8080030d 	sth	r2,12(r16)
  817f7c:	003fc306 	br	817e8c <__swsetup_r+0x40>
  817f80:	81400417 	ldw	r5,16(r16)
  817f84:	003ff906 	br	817f6c <__swsetup_r+0x120>

00817f88 <quorem>:
  817f88:	28c00417 	ldw	r3,16(r5)
  817f8c:	20800417 	ldw	r2,16(r4)
  817f90:	defff604 	addi	sp,sp,-40
  817f94:	ddc00715 	stw	r23,28(sp)
  817f98:	dd400515 	stw	r21,20(sp)
  817f9c:	dfc00915 	stw	ra,36(sp)
  817fa0:	df000815 	stw	fp,32(sp)
  817fa4:	dd800615 	stw	r22,24(sp)
  817fa8:	dd000415 	stw	r20,16(sp)
  817fac:	dcc00315 	stw	r19,12(sp)
  817fb0:	dc800215 	stw	r18,8(sp)
  817fb4:	dc400115 	stw	r17,4(sp)
  817fb8:	dc000015 	stw	r16,0(sp)
  817fbc:	202f883a 	mov	r23,r4
  817fc0:	282b883a 	mov	r21,r5
  817fc4:	10c07416 	blt	r2,r3,818198 <quorem+0x210>
  817fc8:	1c7fffc4 	addi	r17,r3,-1
  817fcc:	8c45883a 	add	r2,r17,r17
  817fd0:	1085883a 	add	r2,r2,r2
  817fd4:	2c000504 	addi	r16,r5,20
  817fd8:	24c00504 	addi	r19,r4,20
  817fdc:	14ed883a 	add	r22,r2,r19
  817fe0:	80a5883a 	add	r18,r16,r2
  817fe4:	b7000017 	ldw	fp,0(r22)
  817fe8:	91400017 	ldw	r5,0(r18)
  817fec:	e009883a 	mov	r4,fp
  817ff0:	29400044 	addi	r5,r5,1
  817ff4:	08146bc0 	call	8146bc <__udivsi3>
  817ff8:	1029883a 	mov	r20,r2
  817ffc:	10003c1e 	bne	r2,zero,8180f0 <quorem+0x168>
  818000:	a80b883a 	mov	r5,r21
  818004:	b809883a 	mov	r4,r23
  818008:	081acb00 	call	81acb0 <__mcmp>
  81800c:	10002b16 	blt	r2,zero,8180bc <quorem+0x134>
  818010:	a5000044 	addi	r20,r20,1
  818014:	980f883a 	mov	r7,r19
  818018:	0011883a 	mov	r8,zero
  81801c:	0009883a 	mov	r4,zero
  818020:	81400017 	ldw	r5,0(r16)
  818024:	38c00017 	ldw	r3,0(r7)
  818028:	84000104 	addi	r16,r16,4
  81802c:	28bfffcc 	andi	r2,r5,65535
  818030:	2085883a 	add	r2,r4,r2
  818034:	11bfffcc 	andi	r6,r2,65535
  818038:	193fffcc 	andi	r4,r3,65535
  81803c:	1004d43a 	srli	r2,r2,16
  818040:	280ad43a 	srli	r5,r5,16
  818044:	2189c83a 	sub	r4,r4,r6
  818048:	2209883a 	add	r4,r4,r8
  81804c:	1806d43a 	srli	r3,r3,16
  818050:	288b883a 	add	r5,r5,r2
  818054:	200dd43a 	srai	r6,r4,16
  818058:	28bfffcc 	andi	r2,r5,65535
  81805c:	1887c83a 	sub	r3,r3,r2
  818060:	1987883a 	add	r3,r3,r6
  818064:	3900000d 	sth	r4,0(r7)
  818068:	38c0008d 	sth	r3,2(r7)
  81806c:	2808d43a 	srli	r4,r5,16
  818070:	39c00104 	addi	r7,r7,4
  818074:	1811d43a 	srai	r8,r3,16
  818078:	943fe92e 	bgeu	r18,r16,818020 <quorem+0x98>
  81807c:	8c45883a 	add	r2,r17,r17
  818080:	1085883a 	add	r2,r2,r2
  818084:	9885883a 	add	r2,r19,r2
  818088:	10c00017 	ldw	r3,0(r2)
  81808c:	18000b1e 	bne	r3,zero,8180bc <quorem+0x134>
  818090:	113fff04 	addi	r4,r2,-4
  818094:	9900082e 	bgeu	r19,r4,8180b8 <quorem+0x130>
  818098:	10bfff17 	ldw	r2,-4(r2)
  81809c:	10000326 	beq	r2,zero,8180ac <quorem+0x124>
  8180a0:	00000506 	br	8180b8 <quorem+0x130>
  8180a4:	20800017 	ldw	r2,0(r4)
  8180a8:	1000031e 	bne	r2,zero,8180b8 <quorem+0x130>
  8180ac:	213fff04 	addi	r4,r4,-4
  8180b0:	8c7fffc4 	addi	r17,r17,-1
  8180b4:	993ffb36 	bltu	r19,r4,8180a4 <quorem+0x11c>
  8180b8:	bc400415 	stw	r17,16(r23)
  8180bc:	a005883a 	mov	r2,r20
  8180c0:	dfc00917 	ldw	ra,36(sp)
  8180c4:	df000817 	ldw	fp,32(sp)
  8180c8:	ddc00717 	ldw	r23,28(sp)
  8180cc:	dd800617 	ldw	r22,24(sp)
  8180d0:	dd400517 	ldw	r21,20(sp)
  8180d4:	dd000417 	ldw	r20,16(sp)
  8180d8:	dcc00317 	ldw	r19,12(sp)
  8180dc:	dc800217 	ldw	r18,8(sp)
  8180e0:	dc400117 	ldw	r17,4(sp)
  8180e4:	dc000017 	ldw	r16,0(sp)
  8180e8:	dec00a04 	addi	sp,sp,40
  8180ec:	f800283a 	ret
  8180f0:	980f883a 	mov	r7,r19
  8180f4:	8011883a 	mov	r8,r16
  8180f8:	0013883a 	mov	r9,zero
  8180fc:	000d883a 	mov	r6,zero
  818100:	40c00017 	ldw	r3,0(r8)
  818104:	39000017 	ldw	r4,0(r7)
  818108:	42000104 	addi	r8,r8,4
  81810c:	18bfffcc 	andi	r2,r3,65535
  818110:	a085383a 	mul	r2,r20,r2
  818114:	1806d43a 	srli	r3,r3,16
  818118:	217fffcc 	andi	r5,r4,65535
  81811c:	3085883a 	add	r2,r6,r2
  818120:	11bfffcc 	andi	r6,r2,65535
  818124:	a0c7383a 	mul	r3,r20,r3
  818128:	1004d43a 	srli	r2,r2,16
  81812c:	298bc83a 	sub	r5,r5,r6
  818130:	2a4b883a 	add	r5,r5,r9
  818134:	2008d43a 	srli	r4,r4,16
  818138:	1887883a 	add	r3,r3,r2
  81813c:	280dd43a 	srai	r6,r5,16
  818140:	18bfffcc 	andi	r2,r3,65535
  818144:	2089c83a 	sub	r4,r4,r2
  818148:	2189883a 	add	r4,r4,r6
  81814c:	3900008d 	sth	r4,2(r7)
  818150:	3940000d 	sth	r5,0(r7)
  818154:	180cd43a 	srli	r6,r3,16
  818158:	39c00104 	addi	r7,r7,4
  81815c:	2013d43a 	srai	r9,r4,16
  818160:	923fe72e 	bgeu	r18,r8,818100 <quorem+0x178>
  818164:	e03fa61e 	bne	fp,zero,818000 <quorem+0x78>
  818168:	b0ffff04 	addi	r3,r22,-4
  81816c:	98c0082e 	bgeu	r19,r3,818190 <quorem+0x208>
  818170:	b0bfff17 	ldw	r2,-4(r22)
  818174:	10000326 	beq	r2,zero,818184 <quorem+0x1fc>
  818178:	00000506 	br	818190 <quorem+0x208>
  81817c:	18800017 	ldw	r2,0(r3)
  818180:	1000031e 	bne	r2,zero,818190 <quorem+0x208>
  818184:	18ffff04 	addi	r3,r3,-4
  818188:	8c7fffc4 	addi	r17,r17,-1
  81818c:	98fffb36 	bltu	r19,r3,81817c <quorem+0x1f4>
  818190:	bc400415 	stw	r17,16(r23)
  818194:	003f9a06 	br	818000 <quorem+0x78>
  818198:	0005883a 	mov	r2,zero
  81819c:	003fc806 	br	8180c0 <quorem+0x138>

008181a0 <_dtoa_r>:
  8181a0:	22001017 	ldw	r8,64(r4)
  8181a4:	deffda04 	addi	sp,sp,-152
  8181a8:	dd402115 	stw	r21,132(sp)
  8181ac:	dd002015 	stw	r20,128(sp)
  8181b0:	dc801e15 	stw	r18,120(sp)
  8181b4:	dc401d15 	stw	r17,116(sp)
  8181b8:	dfc02515 	stw	ra,148(sp)
  8181bc:	df002415 	stw	fp,144(sp)
  8181c0:	ddc02315 	stw	r23,140(sp)
  8181c4:	dd802215 	stw	r22,136(sp)
  8181c8:	dcc01f15 	stw	r19,124(sp)
  8181cc:	dc001c15 	stw	r16,112(sp)
  8181d0:	d9001615 	stw	r4,88(sp)
  8181d4:	3023883a 	mov	r17,r6
  8181d8:	2829883a 	mov	r20,r5
  8181dc:	d9c01715 	stw	r7,92(sp)
  8181e0:	dc802817 	ldw	r18,160(sp)
  8181e4:	302b883a 	mov	r21,r6
  8181e8:	40000a26 	beq	r8,zero,818214 <_dtoa_r+0x74>
  8181ec:	20801117 	ldw	r2,68(r4)
  8181f0:	400b883a 	mov	r5,r8
  8181f4:	40800115 	stw	r2,4(r8)
  8181f8:	20c01117 	ldw	r3,68(r4)
  8181fc:	00800044 	movi	r2,1
  818200:	10c4983a 	sll	r2,r2,r3
  818204:	40800215 	stw	r2,8(r8)
  818208:	081ab540 	call	81ab54 <_Bfree>
  81820c:	d8c01617 	ldw	r3,88(sp)
  818210:	18001015 	stw	zero,64(r3)
  818214:	8800a316 	blt	r17,zero,8184a4 <_dtoa_r+0x304>
  818218:	90000015 	stw	zero,0(r18)
  81821c:	a8dffc2c 	andhi	r3,r21,32752
  818220:	009ffc34 	movhi	r2,32752
  818224:	18809126 	beq	r3,r2,81846c <_dtoa_r+0x2cc>
  818228:	000d883a 	mov	r6,zero
  81822c:	000f883a 	mov	r7,zero
  818230:	a009883a 	mov	r4,r20
  818234:	a80b883a 	mov	r5,r21
  818238:	dd001215 	stw	r20,72(sp)
  81823c:	dd401315 	stw	r21,76(sp)
  818240:	081d45c0 	call	81d45c <__nedf2>
  818244:	1000171e 	bne	r2,zero,8182a4 <_dtoa_r+0x104>
  818248:	d9802717 	ldw	r6,156(sp)
  81824c:	00800044 	movi	r2,1
  818250:	30800015 	stw	r2,0(r6)
  818254:	d8802917 	ldw	r2,164(sp)
  818258:	10029b26 	beq	r2,zero,818cc8 <_dtoa_r+0xb28>
  81825c:	d9002917 	ldw	r4,164(sp)
  818260:	008020f4 	movhi	r2,131
  818264:	10a31744 	addi	r2,r2,-29603
  818268:	10ffffc4 	addi	r3,r2,-1
  81826c:	20800015 	stw	r2,0(r4)
  818270:	1805883a 	mov	r2,r3
  818274:	dfc02517 	ldw	ra,148(sp)
  818278:	df002417 	ldw	fp,144(sp)
  81827c:	ddc02317 	ldw	r23,140(sp)
  818280:	dd802217 	ldw	r22,136(sp)
  818284:	dd402117 	ldw	r21,132(sp)
  818288:	dd002017 	ldw	r20,128(sp)
  81828c:	dcc01f17 	ldw	r19,124(sp)
  818290:	dc801e17 	ldw	r18,120(sp)
  818294:	dc401d17 	ldw	r17,116(sp)
  818298:	dc001c17 	ldw	r16,112(sp)
  81829c:	dec02604 	addi	sp,sp,152
  8182a0:	f800283a 	ret
  8182a4:	d9001617 	ldw	r4,88(sp)
  8182a8:	d9401217 	ldw	r5,72(sp)
  8182ac:	d8800104 	addi	r2,sp,4
  8182b0:	a80d883a 	mov	r6,r21
  8182b4:	d9c00204 	addi	r7,sp,8
  8182b8:	d8800015 	stw	r2,0(sp)
  8182bc:	081b1900 	call	81b190 <__d2b>
  8182c0:	d8800715 	stw	r2,28(sp)
  8182c4:	a804d53a 	srli	r2,r21,20
  8182c8:	1101ffcc 	andi	r4,r2,2047
  8182cc:	20008626 	beq	r4,zero,8184e8 <_dtoa_r+0x348>
  8182d0:	d8c01217 	ldw	r3,72(sp)
  8182d4:	00800434 	movhi	r2,16
  8182d8:	10bfffc4 	addi	r2,r2,-1
  8182dc:	ddc00117 	ldw	r23,4(sp)
  8182e0:	a884703a 	and	r2,r21,r2
  8182e4:	1811883a 	mov	r8,r3
  8182e8:	124ffc34 	orhi	r9,r2,16368
  8182ec:	25bf0044 	addi	r22,r4,-1023
  8182f0:	d8000815 	stw	zero,32(sp)
  8182f4:	0005883a 	mov	r2,zero
  8182f8:	00cffe34 	movhi	r3,16376
  8182fc:	480b883a 	mov	r5,r9
  818300:	4009883a 	mov	r4,r8
  818304:	180f883a 	mov	r7,r3
  818308:	100d883a 	mov	r6,r2
  81830c:	0813bf40 	call	813bf4 <__subdf3>
  818310:	0218dbf4 	movhi	r8,25455
  818314:	4210d844 	addi	r8,r8,17249
  818318:	024ff4f4 	movhi	r9,16339
  81831c:	4a61e9c4 	addi	r9,r9,-30809
  818320:	480f883a 	mov	r7,r9
  818324:	400d883a 	mov	r6,r8
  818328:	180b883a 	mov	r5,r3
  81832c:	1009883a 	mov	r4,r2
  818330:	0813ce80 	call	813ce8 <__muldf3>
  818334:	0222d874 	movhi	r8,35681
  818338:	42322cc4 	addi	r8,r8,-14157
  81833c:	024ff1f4 	movhi	r9,16327
  818340:	4a628a04 	addi	r9,r9,-30168
  818344:	480f883a 	mov	r7,r9
  818348:	400d883a 	mov	r6,r8
  81834c:	180b883a 	mov	r5,r3
  818350:	1009883a 	mov	r4,r2
  818354:	0813c740 	call	813c74 <__adddf3>
  818358:	b009883a 	mov	r4,r22
  81835c:	1021883a 	mov	r16,r2
  818360:	1823883a 	mov	r17,r3
  818364:	08143040 	call	814304 <__floatsidf>
  818368:	021427f4 	movhi	r8,20639
  81836c:	421e7ec4 	addi	r8,r8,31227
  818370:	024ff4f4 	movhi	r9,16339
  818374:	4a5104c4 	addi	r9,r9,17427
  818378:	480f883a 	mov	r7,r9
  81837c:	400d883a 	mov	r6,r8
  818380:	180b883a 	mov	r5,r3
  818384:	1009883a 	mov	r4,r2
  818388:	0813ce80 	call	813ce8 <__muldf3>
  81838c:	180f883a 	mov	r7,r3
  818390:	880b883a 	mov	r5,r17
  818394:	100d883a 	mov	r6,r2
  818398:	8009883a 	mov	r4,r16
  81839c:	0813c740 	call	813c74 <__adddf3>
  8183a0:	1009883a 	mov	r4,r2
  8183a4:	180b883a 	mov	r5,r3
  8183a8:	1021883a 	mov	r16,r2
  8183ac:	1823883a 	mov	r17,r3
  8183b0:	08143fc0 	call	8143fc <__fixdfsi>
  8183b4:	000d883a 	mov	r6,zero
  8183b8:	000f883a 	mov	r7,zero
  8183bc:	8009883a 	mov	r4,r16
  8183c0:	880b883a 	mov	r5,r17
  8183c4:	d8800d15 	stw	r2,52(sp)
  8183c8:	081d5f40 	call	81d5f4 <__ltdf2>
  8183cc:	10031716 	blt	r2,zero,81902c <_dtoa_r+0xe8c>
  8183d0:	d8c00d17 	ldw	r3,52(sp)
  8183d4:	00800584 	movi	r2,22
  8183d8:	10c1482e 	bgeu	r2,r3,8188fc <_dtoa_r+0x75c>
  8183dc:	01000044 	movi	r4,1
  8183e0:	d9000c15 	stw	r4,48(sp)
  8183e4:	bd85c83a 	sub	r2,r23,r22
  8183e8:	11bfffc4 	addi	r6,r2,-1
  8183ec:	30030b16 	blt	r6,zero,81901c <_dtoa_r+0xe7c>
  8183f0:	d9800a15 	stw	r6,40(sp)
  8183f4:	d8001115 	stw	zero,68(sp)
  8183f8:	d8c00d17 	ldw	r3,52(sp)
  8183fc:	1802ff16 	blt	r3,zero,818ffc <_dtoa_r+0xe5c>
  818400:	d9000a17 	ldw	r4,40(sp)
  818404:	d8c00915 	stw	r3,36(sp)
  818408:	d8001015 	stw	zero,64(sp)
  81840c:	20c9883a 	add	r4,r4,r3
  818410:	d9000a15 	stw	r4,40(sp)
  818414:	d9001717 	ldw	r4,92(sp)
  818418:	00800244 	movi	r2,9
  81841c:	11004636 	bltu	r2,r4,818538 <_dtoa_r+0x398>
  818420:	00800144 	movi	r2,5
  818424:	11020416 	blt	r2,r4,818c38 <_dtoa_r+0xa98>
  818428:	04400044 	movi	r17,1
  81842c:	d8c01717 	ldw	r3,92(sp)
  818430:	00800144 	movi	r2,5
  818434:	10c1ed36 	bltu	r2,r3,818bec <_dtoa_r+0xa4c>
  818438:	18c5883a 	add	r2,r3,r3
  81843c:	1085883a 	add	r2,r2,r2
  818440:	00c020b4 	movhi	r3,130
  818444:	18e11504 	addi	r3,r3,-31660
  818448:	10c5883a 	add	r2,r2,r3
  81844c:	11000017 	ldw	r4,0(r2)
  818450:	2000683a 	jmp	r4
  818454:	00818540 	call	81854 <__alt_mem_sdram-0x77e7ac>
  818458:	00818540 	call	81854 <__alt_mem_sdram-0x77e7ac>
  81845c:	00818f40 	call	818f4 <__alt_mem_sdram-0x77e70c>
  818460:	00818f18 	cmpnei	r2,zero,1596
  818464:	00818f5c 	xori	r2,zero,1597
  818468:	00818f68 	cmpgeui	r2,zero,1597
  81846c:	d9002717 	ldw	r4,156(sp)
  818470:	0089c3c4 	movi	r2,9999
  818474:	20800015 	stw	r2,0(r4)
  818478:	a0001026 	beq	r20,zero,8184bc <_dtoa_r+0x31c>
  81847c:	00c020f4 	movhi	r3,131
  818480:	18e3c304 	addi	r3,r3,-28916
  818484:	d9802917 	ldw	r6,164(sp)
  818488:	303f7926 	beq	r6,zero,818270 <_dtoa_r+0xd0>
  81848c:	188000c7 	ldb	r2,3(r3)
  818490:	190000c4 	addi	r4,r3,3
  818494:	1000101e 	bne	r2,zero,8184d8 <_dtoa_r+0x338>
  818498:	d8802917 	ldw	r2,164(sp)
  81849c:	11000015 	stw	r4,0(r2)
  8184a0:	003f7306 	br	818270 <_dtoa_r+0xd0>
  8184a4:	00a00034 	movhi	r2,32768
  8184a8:	10bfffc4 	addi	r2,r2,-1
  8184ac:	00c00044 	movi	r3,1
  8184b0:	88aa703a 	and	r21,r17,r2
  8184b4:	90c00015 	stw	r3,0(r18)
  8184b8:	003f5806 	br	81821c <_dtoa_r+0x7c>
  8184bc:	00800434 	movhi	r2,16
  8184c0:	10bfffc4 	addi	r2,r2,-1
  8184c4:	a884703a 	and	r2,r21,r2
  8184c8:	103fec1e 	bne	r2,zero,81847c <_dtoa_r+0x2dc>
  8184cc:	00c020f4 	movhi	r3,131
  8184d0:	18e3c004 	addi	r3,r3,-28928
  8184d4:	003feb06 	br	818484 <_dtoa_r+0x2e4>
  8184d8:	d8802917 	ldw	r2,164(sp)
  8184dc:	19000204 	addi	r4,r3,8
  8184e0:	11000015 	stw	r4,0(r2)
  8184e4:	003f6206 	br	818270 <_dtoa_r+0xd0>
  8184e8:	ddc00117 	ldw	r23,4(sp)
  8184ec:	d8800217 	ldw	r2,8(sp)
  8184f0:	01000804 	movi	r4,32
  8184f4:	b8c10c84 	addi	r3,r23,1074
  8184f8:	18a3883a 	add	r17,r3,r2
  8184fc:	2441b80e 	bge	r4,r17,818be0 <_dtoa_r+0xa40>
  818500:	00c01004 	movi	r3,64
  818504:	1c47c83a 	sub	r3,r3,r17
  818508:	88bff804 	addi	r2,r17,-32
  81850c:	a8c6983a 	sll	r3,r21,r3
  818510:	a084d83a 	srl	r2,r20,r2
  818514:	1888b03a 	or	r4,r3,r2
  818518:	081d67c0 	call	81d67c <__floatunsidf>
  81851c:	1011883a 	mov	r8,r2
  818520:	00bf8434 	movhi	r2,65040
  818524:	01000044 	movi	r4,1
  818528:	10d3883a 	add	r9,r2,r3
  81852c:	8dbef344 	addi	r22,r17,-1075
  818530:	d9000815 	stw	r4,32(sp)
  818534:	003f6f06 	br	8182f4 <_dtoa_r+0x154>
  818538:	d8001715 	stw	zero,92(sp)
  81853c:	04400044 	movi	r17,1
  818540:	00bfffc4 	movi	r2,-1
  818544:	00c00044 	movi	r3,1
  818548:	d8800e15 	stw	r2,56(sp)
  81854c:	d8002615 	stw	zero,152(sp)
  818550:	d8800f15 	stw	r2,60(sp)
  818554:	d8c00b15 	stw	r3,44(sp)
  818558:	1021883a 	mov	r16,r2
  81855c:	d8801617 	ldw	r2,88(sp)
  818560:	10001115 	stw	zero,68(r2)
  818564:	d8801617 	ldw	r2,88(sp)
  818568:	11401117 	ldw	r5,68(r2)
  81856c:	1009883a 	mov	r4,r2
  818570:	081b0d40 	call	81b0d4 <_Balloc>
  818574:	d8c01617 	ldw	r3,88(sp)
  818578:	d8800515 	stw	r2,20(sp)
  81857c:	18801015 	stw	r2,64(r3)
  818580:	00800384 	movi	r2,14
  818584:	14006836 	bltu	r2,r16,818728 <_dtoa_r+0x588>
  818588:	8805003a 	cmpeq	r2,r17,zero
  81858c:	1000661e 	bne	r2,zero,818728 <_dtoa_r+0x588>
  818590:	d9000d17 	ldw	r4,52(sp)
  818594:	0102300e 	bge	zero,r4,818e58 <_dtoa_r+0xcb8>
  818598:	208003cc 	andi	r2,r4,15
  81859c:	100490fa 	slli	r2,r2,3
  8185a0:	2025d13a 	srai	r18,r4,4
  8185a4:	00c020f4 	movhi	r3,131
  8185a8:	18e3d504 	addi	r3,r3,-28844
  8185ac:	10c5883a 	add	r2,r2,r3
  8185b0:	90c0040c 	andi	r3,r18,16
  8185b4:	14000017 	ldw	r16,0(r2)
  8185b8:	14400117 	ldw	r17,4(r2)
  8185bc:	18036a1e 	bne	r3,zero,819368 <_dtoa_r+0x11c8>
  8185c0:	05800084 	movi	r22,2
  8185c4:	90001026 	beq	r18,zero,818608 <_dtoa_r+0x468>
  8185c8:	04c020f4 	movhi	r19,131
  8185cc:	9ce40704 	addi	r19,r19,-28644
  8185d0:	9080004c 	andi	r2,r18,1
  8185d4:	1005003a 	cmpeq	r2,r2,zero
  8185d8:	1000081e 	bne	r2,zero,8185fc <_dtoa_r+0x45c>
  8185dc:	99800017 	ldw	r6,0(r19)
  8185e0:	99c00117 	ldw	r7,4(r19)
  8185e4:	880b883a 	mov	r5,r17
  8185e8:	8009883a 	mov	r4,r16
  8185ec:	0813ce80 	call	813ce8 <__muldf3>
  8185f0:	1021883a 	mov	r16,r2
  8185f4:	b5800044 	addi	r22,r22,1
  8185f8:	1823883a 	mov	r17,r3
  8185fc:	9025d07a 	srai	r18,r18,1
  818600:	9cc00204 	addi	r19,r19,8
  818604:	903ff21e 	bne	r18,zero,8185d0 <_dtoa_r+0x430>
  818608:	a80b883a 	mov	r5,r21
  81860c:	a009883a 	mov	r4,r20
  818610:	880f883a 	mov	r7,r17
  818614:	800d883a 	mov	r6,r16
  818618:	08140ac0 	call	8140ac <__divdf3>
  81861c:	1029883a 	mov	r20,r2
  818620:	182b883a 	mov	r21,r3
  818624:	d8c00c17 	ldw	r3,48(sp)
  818628:	1805003a 	cmpeq	r2,r3,zero
  81862c:	1000081e 	bne	r2,zero,818650 <_dtoa_r+0x4b0>
  818630:	0005883a 	mov	r2,zero
  818634:	00cffc34 	movhi	r3,16368
  818638:	180f883a 	mov	r7,r3
  81863c:	a009883a 	mov	r4,r20
  818640:	a80b883a 	mov	r5,r21
  818644:	100d883a 	mov	r6,r2
  818648:	081d5f40 	call	81d5f4 <__ltdf2>
  81864c:	1003fe16 	blt	r2,zero,819648 <_dtoa_r+0x14a8>
  818650:	b009883a 	mov	r4,r22
  818654:	08143040 	call	814304 <__floatsidf>
  818658:	180b883a 	mov	r5,r3
  81865c:	1009883a 	mov	r4,r2
  818660:	a00d883a 	mov	r6,r20
  818664:	a80f883a 	mov	r7,r21
  818668:	0813ce80 	call	813ce8 <__muldf3>
  81866c:	0011883a 	mov	r8,zero
  818670:	02500734 	movhi	r9,16412
  818674:	1009883a 	mov	r4,r2
  818678:	180b883a 	mov	r5,r3
  81867c:	480f883a 	mov	r7,r9
  818680:	400d883a 	mov	r6,r8
  818684:	0813c740 	call	813c74 <__adddf3>
  818688:	d9000f17 	ldw	r4,60(sp)
  81868c:	102d883a 	mov	r22,r2
  818690:	00bf3034 	movhi	r2,64704
  818694:	18b9883a 	add	fp,r3,r2
  818698:	e02f883a 	mov	r23,fp
  81869c:	20028f1e 	bne	r4,zero,8190dc <_dtoa_r+0xf3c>
  8186a0:	0005883a 	mov	r2,zero
  8186a4:	00d00534 	movhi	r3,16404
  8186a8:	a009883a 	mov	r4,r20
  8186ac:	a80b883a 	mov	r5,r21
  8186b0:	180f883a 	mov	r7,r3
  8186b4:	100d883a 	mov	r6,r2
  8186b8:	0813bf40 	call	813bf4 <__subdf3>
  8186bc:	1009883a 	mov	r4,r2
  8186c0:	e00f883a 	mov	r7,fp
  8186c4:	180b883a 	mov	r5,r3
  8186c8:	b00d883a 	mov	r6,r22
  8186cc:	1025883a 	mov	r18,r2
  8186d0:	1827883a 	mov	r19,r3
  8186d4:	081d4e40 	call	81d4e4 <__gtdf2>
  8186d8:	00834f16 	blt	zero,r2,819418 <_dtoa_r+0x1278>
  8186dc:	e0e0003c 	xorhi	r3,fp,32768
  8186e0:	9009883a 	mov	r4,r18
  8186e4:	980b883a 	mov	r5,r19
  8186e8:	180f883a 	mov	r7,r3
  8186ec:	b00d883a 	mov	r6,r22
  8186f0:	081d5f40 	call	81d5f4 <__ltdf2>
  8186f4:	1000080e 	bge	r2,zero,818718 <_dtoa_r+0x578>
  8186f8:	0027883a 	mov	r19,zero
  8186fc:	0025883a 	mov	r18,zero
  818700:	d8802617 	ldw	r2,152(sp)
  818704:	df000517 	ldw	fp,20(sp)
  818708:	d8000615 	stw	zero,24(sp)
  81870c:	0084303a 	nor	r2,zero,r2
  818710:	d8800d15 	stw	r2,52(sp)
  818714:	00019b06 	br	818d84 <_dtoa_r+0xbe4>
  818718:	d9801217 	ldw	r6,72(sp)
  81871c:	d8801317 	ldw	r2,76(sp)
  818720:	3029883a 	mov	r20,r6
  818724:	102b883a 	mov	r21,r2
  818728:	d8c00217 	ldw	r3,8(sp)
  81872c:	18008516 	blt	r3,zero,818944 <_dtoa_r+0x7a4>
  818730:	d9000d17 	ldw	r4,52(sp)
  818734:	00800384 	movi	r2,14
  818738:	11008216 	blt	r2,r4,818944 <_dtoa_r+0x7a4>
  81873c:	200490fa 	slli	r2,r4,3
  818740:	d9802617 	ldw	r6,152(sp)
  818744:	00c020f4 	movhi	r3,131
  818748:	18e3d504 	addi	r3,r3,-28844
  81874c:	10c5883a 	add	r2,r2,r3
  818750:	14800017 	ldw	r18,0(r2)
  818754:	14c00117 	ldw	r19,4(r2)
  818758:	30031e16 	blt	r6,zero,8193d4 <_dtoa_r+0x1234>
  81875c:	d9000517 	ldw	r4,20(sp)
  818760:	d8c00f17 	ldw	r3,60(sp)
  818764:	a823883a 	mov	r17,r21
  818768:	a021883a 	mov	r16,r20
  81876c:	192b883a 	add	r21,r3,r4
  818770:	2039883a 	mov	fp,r4
  818774:	00000f06 	br	8187b4 <_dtoa_r+0x614>
  818778:	0005883a 	mov	r2,zero
  81877c:	00d00934 	movhi	r3,16420
  818780:	5009883a 	mov	r4,r10
  818784:	580b883a 	mov	r5,r11
  818788:	180f883a 	mov	r7,r3
  81878c:	100d883a 	mov	r6,r2
  818790:	0813ce80 	call	813ce8 <__muldf3>
  818794:	180b883a 	mov	r5,r3
  818798:	000d883a 	mov	r6,zero
  81879c:	000f883a 	mov	r7,zero
  8187a0:	1009883a 	mov	r4,r2
  8187a4:	1021883a 	mov	r16,r2
  8187a8:	1823883a 	mov	r17,r3
  8187ac:	081d45c0 	call	81d45c <__nedf2>
  8187b0:	10004526 	beq	r2,zero,8188c8 <_dtoa_r+0x728>
  8187b4:	900d883a 	mov	r6,r18
  8187b8:	980f883a 	mov	r7,r19
  8187bc:	8009883a 	mov	r4,r16
  8187c0:	880b883a 	mov	r5,r17
  8187c4:	08140ac0 	call	8140ac <__divdf3>
  8187c8:	180b883a 	mov	r5,r3
  8187cc:	1009883a 	mov	r4,r2
  8187d0:	08143fc0 	call	8143fc <__fixdfsi>
  8187d4:	1009883a 	mov	r4,r2
  8187d8:	1029883a 	mov	r20,r2
  8187dc:	08143040 	call	814304 <__floatsidf>
  8187e0:	180f883a 	mov	r7,r3
  8187e4:	9009883a 	mov	r4,r18
  8187e8:	980b883a 	mov	r5,r19
  8187ec:	100d883a 	mov	r6,r2
  8187f0:	0813ce80 	call	813ce8 <__muldf3>
  8187f4:	180f883a 	mov	r7,r3
  8187f8:	880b883a 	mov	r5,r17
  8187fc:	8009883a 	mov	r4,r16
  818800:	100d883a 	mov	r6,r2
  818804:	0813bf40 	call	813bf4 <__subdf3>
  818808:	1015883a 	mov	r10,r2
  81880c:	a0800c04 	addi	r2,r20,48
  818810:	e0800005 	stb	r2,0(fp)
  818814:	e7000044 	addi	fp,fp,1
  818818:	1817883a 	mov	r11,r3
  81881c:	e57fd61e 	bne	fp,r21,818778 <_dtoa_r+0x5d8>
  818820:	500d883a 	mov	r6,r10
  818824:	180f883a 	mov	r7,r3
  818828:	5009883a 	mov	r4,r10
  81882c:	180b883a 	mov	r5,r3
  818830:	0813c740 	call	813c74 <__adddf3>
  818834:	100d883a 	mov	r6,r2
  818838:	9009883a 	mov	r4,r18
  81883c:	980b883a 	mov	r5,r19
  818840:	180f883a 	mov	r7,r3
  818844:	1021883a 	mov	r16,r2
  818848:	1823883a 	mov	r17,r3
  81884c:	081d5f40 	call	81d5f4 <__ltdf2>
  818850:	10000816 	blt	r2,zero,818874 <_dtoa_r+0x6d4>
  818854:	980b883a 	mov	r5,r19
  818858:	800d883a 	mov	r6,r16
  81885c:	880f883a 	mov	r7,r17
  818860:	9009883a 	mov	r4,r18
  818864:	081d3d40 	call	81d3d4 <__eqdf2>
  818868:	1000171e 	bne	r2,zero,8188c8 <_dtoa_r+0x728>
  81886c:	a080004c 	andi	r2,r20,1
  818870:	10001526 	beq	r2,zero,8188c8 <_dtoa_r+0x728>
  818874:	d8800d17 	ldw	r2,52(sp)
  818878:	d8800415 	stw	r2,16(sp)
  81887c:	e009883a 	mov	r4,fp
  818880:	213fffc4 	addi	r4,r4,-1
  818884:	20c00007 	ldb	r3,0(r4)
  818888:	00800e44 	movi	r2,57
  81888c:	1880081e 	bne	r3,r2,8188b0 <_dtoa_r+0x710>
  818890:	d8800517 	ldw	r2,20(sp)
  818894:	113ffa1e 	bne	r2,r4,818880 <_dtoa_r+0x6e0>
  818898:	d8c00417 	ldw	r3,16(sp)
  81889c:	d9800517 	ldw	r6,20(sp)
  8188a0:	00800c04 	movi	r2,48
  8188a4:	18c00044 	addi	r3,r3,1
  8188a8:	d8c00415 	stw	r3,16(sp)
  8188ac:	30800005 	stb	r2,0(r6)
  8188b0:	20800003 	ldbu	r2,0(r4)
  8188b4:	d8c00417 	ldw	r3,16(sp)
  8188b8:	27000044 	addi	fp,r4,1
  8188bc:	10800044 	addi	r2,r2,1
  8188c0:	d8c00d15 	stw	r3,52(sp)
  8188c4:	20800005 	stb	r2,0(r4)
  8188c8:	d9001617 	ldw	r4,88(sp)
  8188cc:	d9400717 	ldw	r5,28(sp)
  8188d0:	081ab540 	call	81ab54 <_Bfree>
  8188d4:	e0000005 	stb	zero,0(fp)
  8188d8:	d9800d17 	ldw	r6,52(sp)
  8188dc:	d8c02717 	ldw	r3,156(sp)
  8188e0:	d9002917 	ldw	r4,164(sp)
  8188e4:	30800044 	addi	r2,r6,1
  8188e8:	18800015 	stw	r2,0(r3)
  8188ec:	20029c26 	beq	r4,zero,819360 <_dtoa_r+0x11c0>
  8188f0:	d8c00517 	ldw	r3,20(sp)
  8188f4:	27000015 	stw	fp,0(r4)
  8188f8:	003e5d06 	br	818270 <_dtoa_r+0xd0>
  8188fc:	d9800d17 	ldw	r6,52(sp)
  818900:	00c020f4 	movhi	r3,131
  818904:	18e3d504 	addi	r3,r3,-28844
  818908:	d9001217 	ldw	r4,72(sp)
  81890c:	300490fa 	slli	r2,r6,3
  818910:	d9401317 	ldw	r5,76(sp)
  818914:	10c5883a 	add	r2,r2,r3
  818918:	12000017 	ldw	r8,0(r2)
  81891c:	12400117 	ldw	r9,4(r2)
  818920:	400d883a 	mov	r6,r8
  818924:	480f883a 	mov	r7,r9
  818928:	081d5f40 	call	81d5f4 <__ltdf2>
  81892c:	1000030e 	bge	r2,zero,81893c <_dtoa_r+0x79c>
  818930:	d8800d17 	ldw	r2,52(sp)
  818934:	10bfffc4 	addi	r2,r2,-1
  818938:	d8800d15 	stw	r2,52(sp)
  81893c:	d8000c15 	stw	zero,48(sp)
  818940:	003ea806 	br	8183e4 <_dtoa_r+0x244>
  818944:	d9000b17 	ldw	r4,44(sp)
  818948:	202cc03a 	cmpne	r22,r4,zero
  81894c:	b000c71e 	bne	r22,zero,818c6c <_dtoa_r+0xacc>
  818950:	dc001117 	ldw	r16,68(sp)
  818954:	dc801017 	ldw	r18,64(sp)
  818958:	0027883a 	mov	r19,zero
  81895c:	04000b0e 	bge	zero,r16,81898c <_dtoa_r+0x7ec>
  818960:	d8c00a17 	ldw	r3,40(sp)
  818964:	00c0090e 	bge	zero,r3,81898c <_dtoa_r+0x7ec>
  818968:	8005883a 	mov	r2,r16
  81896c:	1c011316 	blt	r3,r16,818dbc <_dtoa_r+0xc1c>
  818970:	d9000a17 	ldw	r4,40(sp)
  818974:	d9801117 	ldw	r6,68(sp)
  818978:	80a1c83a 	sub	r16,r16,r2
  81897c:	2089c83a 	sub	r4,r4,r2
  818980:	308dc83a 	sub	r6,r6,r2
  818984:	d9000a15 	stw	r4,40(sp)
  818988:	d9801115 	stw	r6,68(sp)
  81898c:	d8801017 	ldw	r2,64(sp)
  818990:	0080150e 	bge	zero,r2,8189e8 <_dtoa_r+0x848>
  818994:	d8c00b17 	ldw	r3,44(sp)
  818998:	1805003a 	cmpeq	r2,r3,zero
  81899c:	1001c91e 	bne	r2,zero,8190c4 <_dtoa_r+0xf24>
  8189a0:	04800e0e 	bge	zero,r18,8189dc <_dtoa_r+0x83c>
  8189a4:	d9001617 	ldw	r4,88(sp)
  8189a8:	980b883a 	mov	r5,r19
  8189ac:	900d883a 	mov	r6,r18
  8189b0:	081b9080 	call	81b908 <__pow5mult>
  8189b4:	d9001617 	ldw	r4,88(sp)
  8189b8:	d9800717 	ldw	r6,28(sp)
  8189bc:	100b883a 	mov	r5,r2
  8189c0:	1027883a 	mov	r19,r2
  8189c4:	081b5e40 	call	81b5e4 <__multiply>
  8189c8:	d9001617 	ldw	r4,88(sp)
  8189cc:	d9400717 	ldw	r5,28(sp)
  8189d0:	1023883a 	mov	r17,r2
  8189d4:	081ab540 	call	81ab54 <_Bfree>
  8189d8:	dc400715 	stw	r17,28(sp)
  8189dc:	d9001017 	ldw	r4,64(sp)
  8189e0:	248dc83a 	sub	r6,r4,r18
  8189e4:	30010e1e 	bne	r6,zero,818e20 <_dtoa_r+0xc80>
  8189e8:	d9001617 	ldw	r4,88(sp)
  8189ec:	04400044 	movi	r17,1
  8189f0:	880b883a 	mov	r5,r17
  8189f4:	081b7cc0 	call	81b7cc <__i2b>
  8189f8:	d9800917 	ldw	r6,36(sp)
  8189fc:	1025883a 	mov	r18,r2
  818a00:	0180040e 	bge	zero,r6,818a14 <_dtoa_r+0x874>
  818a04:	d9001617 	ldw	r4,88(sp)
  818a08:	100b883a 	mov	r5,r2
  818a0c:	081b9080 	call	81b908 <__pow5mult>
  818a10:	1025883a 	mov	r18,r2
  818a14:	d8801717 	ldw	r2,92(sp)
  818a18:	8880f30e 	bge	r17,r2,818de8 <_dtoa_r+0xc48>
  818a1c:	0023883a 	mov	r17,zero
  818a20:	d9800917 	ldw	r6,36(sp)
  818a24:	30019e1e 	bne	r6,zero,8190a0 <_dtoa_r+0xf00>
  818a28:	00c00044 	movi	r3,1
  818a2c:	d9000a17 	ldw	r4,40(sp)
  818a30:	20c5883a 	add	r2,r4,r3
  818a34:	10c007cc 	andi	r3,r2,31
  818a38:	1800841e 	bne	r3,zero,818c4c <_dtoa_r+0xaac>
  818a3c:	00800704 	movi	r2,28
  818a40:	d9000a17 	ldw	r4,40(sp)
  818a44:	d9801117 	ldw	r6,68(sp)
  818a48:	80a1883a 	add	r16,r16,r2
  818a4c:	2089883a 	add	r4,r4,r2
  818a50:	308d883a 	add	r6,r6,r2
  818a54:	d9000a15 	stw	r4,40(sp)
  818a58:	d9801115 	stw	r6,68(sp)
  818a5c:	d8801117 	ldw	r2,68(sp)
  818a60:	0080050e 	bge	zero,r2,818a78 <_dtoa_r+0x8d8>
  818a64:	d9400717 	ldw	r5,28(sp)
  818a68:	d9001617 	ldw	r4,88(sp)
  818a6c:	100d883a 	mov	r6,r2
  818a70:	081b4980 	call	81b498 <__lshift>
  818a74:	d8800715 	stw	r2,28(sp)
  818a78:	d8c00a17 	ldw	r3,40(sp)
  818a7c:	00c0050e 	bge	zero,r3,818a94 <_dtoa_r+0x8f4>
  818a80:	d9001617 	ldw	r4,88(sp)
  818a84:	900b883a 	mov	r5,r18
  818a88:	180d883a 	mov	r6,r3
  818a8c:	081b4980 	call	81b498 <__lshift>
  818a90:	1025883a 	mov	r18,r2
  818a94:	d9000c17 	ldw	r4,48(sp)
  818a98:	2005003a 	cmpeq	r2,r4,zero
  818a9c:	10016f26 	beq	r2,zero,81905c <_dtoa_r+0xebc>
  818aa0:	d9000f17 	ldw	r4,60(sp)
  818aa4:	0102170e 	bge	zero,r4,819304 <_dtoa_r+0x1164>
  818aa8:	d9800b17 	ldw	r6,44(sp)
  818aac:	3005003a 	cmpeq	r2,r6,zero
  818ab0:	1000881e 	bne	r2,zero,818cd4 <_dtoa_r+0xb34>
  818ab4:	0400050e 	bge	zero,r16,818acc <_dtoa_r+0x92c>
  818ab8:	d9001617 	ldw	r4,88(sp)
  818abc:	980b883a 	mov	r5,r19
  818ac0:	800d883a 	mov	r6,r16
  818ac4:	081b4980 	call	81b498 <__lshift>
  818ac8:	1027883a 	mov	r19,r2
  818acc:	8804c03a 	cmpne	r2,r17,zero
  818ad0:	1002541e 	bne	r2,zero,819424 <_dtoa_r+0x1284>
  818ad4:	980b883a 	mov	r5,r19
  818ad8:	dd800517 	ldw	r22,20(sp)
  818adc:	dcc00615 	stw	r19,24(sp)
  818ae0:	a700004c 	andi	fp,r20,1
  818ae4:	2827883a 	mov	r19,r5
  818ae8:	d9000717 	ldw	r4,28(sp)
  818aec:	900b883a 	mov	r5,r18
  818af0:	0817f880 	call	817f88 <quorem>
  818af4:	d9000717 	ldw	r4,28(sp)
  818af8:	d9400617 	ldw	r5,24(sp)
  818afc:	1023883a 	mov	r17,r2
  818b00:	8dc00c04 	addi	r23,r17,48
  818b04:	081acb00 	call	81acb0 <__mcmp>
  818b08:	d9001617 	ldw	r4,88(sp)
  818b0c:	900b883a 	mov	r5,r18
  818b10:	980d883a 	mov	r6,r19
  818b14:	1029883a 	mov	r20,r2
  818b18:	081b30c0 	call	81b30c <__mdiff>
  818b1c:	102b883a 	mov	r21,r2
  818b20:	10800317 	ldw	r2,12(r2)
  818b24:	1001281e 	bne	r2,zero,818fc8 <_dtoa_r+0xe28>
  818b28:	d9000717 	ldw	r4,28(sp)
  818b2c:	a80b883a 	mov	r5,r21
  818b30:	081acb00 	call	81acb0 <__mcmp>
  818b34:	d9001617 	ldw	r4,88(sp)
  818b38:	1021883a 	mov	r16,r2
  818b3c:	a80b883a 	mov	r5,r21
  818b40:	081ab540 	call	81ab54 <_Bfree>
  818b44:	8000041e 	bne	r16,zero,818b58 <_dtoa_r+0x9b8>
  818b48:	d8801717 	ldw	r2,92(sp)
  818b4c:	1000021e 	bne	r2,zero,818b58 <_dtoa_r+0x9b8>
  818b50:	e004c03a 	cmpne	r2,fp,zero
  818b54:	10011726 	beq	r2,zero,818fb4 <_dtoa_r+0xe14>
  818b58:	a0010616 	blt	r20,zero,818f74 <_dtoa_r+0xdd4>
  818b5c:	a000041e 	bne	r20,zero,818b70 <_dtoa_r+0x9d0>
  818b60:	d8c01717 	ldw	r3,92(sp)
  818b64:	1800021e 	bne	r3,zero,818b70 <_dtoa_r+0x9d0>
  818b68:	e004c03a 	cmpne	r2,fp,zero
  818b6c:	10010126 	beq	r2,zero,818f74 <_dtoa_r+0xdd4>
  818b70:	04023d16 	blt	zero,r16,819468 <_dtoa_r+0x12c8>
  818b74:	b5c00005 	stb	r23,0(r22)
  818b78:	d9800517 	ldw	r6,20(sp)
  818b7c:	d9000f17 	ldw	r4,60(sp)
  818b80:	b5800044 	addi	r22,r22,1
  818b84:	3105883a 	add	r2,r6,r4
  818b88:	b0806526 	beq	r22,r2,818d20 <_dtoa_r+0xb80>
  818b8c:	d9400717 	ldw	r5,28(sp)
  818b90:	d9001617 	ldw	r4,88(sp)
  818b94:	01800284 	movi	r6,10
  818b98:	000f883a 	mov	r7,zero
  818b9c:	081b8080 	call	81b808 <__multadd>
  818ba0:	d8800715 	stw	r2,28(sp)
  818ba4:	d8800617 	ldw	r2,24(sp)
  818ba8:	14c10c26 	beq	r2,r19,818fdc <_dtoa_r+0xe3c>
  818bac:	d9400617 	ldw	r5,24(sp)
  818bb0:	d9001617 	ldw	r4,88(sp)
  818bb4:	01800284 	movi	r6,10
  818bb8:	000f883a 	mov	r7,zero
  818bbc:	081b8080 	call	81b808 <__multadd>
  818bc0:	d9001617 	ldw	r4,88(sp)
  818bc4:	980b883a 	mov	r5,r19
  818bc8:	01800284 	movi	r6,10
  818bcc:	000f883a 	mov	r7,zero
  818bd0:	d8800615 	stw	r2,24(sp)
  818bd4:	081b8080 	call	81b808 <__multadd>
  818bd8:	1027883a 	mov	r19,r2
  818bdc:	003fc206 	br	818ae8 <_dtoa_r+0x948>
  818be0:	2445c83a 	sub	r2,r4,r17
  818be4:	a088983a 	sll	r4,r20,r2
  818be8:	003e4b06 	br	818518 <_dtoa_r+0x378>
  818bec:	01bfffc4 	movi	r6,-1
  818bf0:	00800044 	movi	r2,1
  818bf4:	d9800e15 	stw	r6,56(sp)
  818bf8:	d9800f15 	stw	r6,60(sp)
  818bfc:	d8800b15 	stw	r2,44(sp)
  818c00:	d8c01617 	ldw	r3,88(sp)
  818c04:	008005c4 	movi	r2,23
  818c08:	18001115 	stw	zero,68(r3)
  818c0c:	1580082e 	bgeu	r2,r22,818c30 <_dtoa_r+0xa90>
  818c10:	00c00104 	movi	r3,4
  818c14:	0009883a 	mov	r4,zero
  818c18:	18c7883a 	add	r3,r3,r3
  818c1c:	18800504 	addi	r2,r3,20
  818c20:	21000044 	addi	r4,r4,1
  818c24:	b0bffc2e 	bgeu	r22,r2,818c18 <_dtoa_r+0xa78>
  818c28:	d9801617 	ldw	r6,88(sp)
  818c2c:	31001115 	stw	r4,68(r6)
  818c30:	dc000f17 	ldw	r16,60(sp)
  818c34:	003e4b06 	br	818564 <_dtoa_r+0x3c4>
  818c38:	d9801717 	ldw	r6,92(sp)
  818c3c:	0023883a 	mov	r17,zero
  818c40:	31bfff04 	addi	r6,r6,-4
  818c44:	d9801715 	stw	r6,92(sp)
  818c48:	003df806 	br	81842c <_dtoa_r+0x28c>
  818c4c:	00800804 	movi	r2,32
  818c50:	10c9c83a 	sub	r4,r2,r3
  818c54:	00c00104 	movi	r3,4
  818c58:	19005a16 	blt	r3,r4,818dc4 <_dtoa_r+0xc24>
  818c5c:	008000c4 	movi	r2,3
  818c60:	113f7e16 	blt	r2,r4,818a5c <_dtoa_r+0x8bc>
  818c64:	20800704 	addi	r2,r4,28
  818c68:	003f7506 	br	818a40 <_dtoa_r+0x8a0>
  818c6c:	d9801717 	ldw	r6,92(sp)
  818c70:	00800044 	movi	r2,1
  818c74:	1180a10e 	bge	r2,r6,818efc <_dtoa_r+0xd5c>
  818c78:	d9800f17 	ldw	r6,60(sp)
  818c7c:	d8c01017 	ldw	r3,64(sp)
  818c80:	30bfffc4 	addi	r2,r6,-1
  818c84:	1881c616 	blt	r3,r2,8193a0 <_dtoa_r+0x1200>
  818c88:	18a5c83a 	sub	r18,r3,r2
  818c8c:	d8800f17 	ldw	r2,60(sp)
  818c90:	10026216 	blt	r2,zero,81961c <_dtoa_r+0x147c>
  818c94:	dc001117 	ldw	r16,68(sp)
  818c98:	1007883a 	mov	r3,r2
  818c9c:	d9800a17 	ldw	r6,40(sp)
  818ca0:	d8801117 	ldw	r2,68(sp)
  818ca4:	d9001617 	ldw	r4,88(sp)
  818ca8:	30cd883a 	add	r6,r6,r3
  818cac:	10c5883a 	add	r2,r2,r3
  818cb0:	01400044 	movi	r5,1
  818cb4:	d9800a15 	stw	r6,40(sp)
  818cb8:	d8801115 	stw	r2,68(sp)
  818cbc:	081b7cc0 	call	81b7cc <__i2b>
  818cc0:	1027883a 	mov	r19,r2
  818cc4:	003f2506 	br	81895c <_dtoa_r+0x7bc>
  818cc8:	00c020f4 	movhi	r3,131
  818ccc:	18e31704 	addi	r3,r3,-29604
  818cd0:	003d6706 	br	818270 <_dtoa_r+0xd0>
  818cd4:	dd800517 	ldw	r22,20(sp)
  818cd8:	04000044 	movi	r16,1
  818cdc:	00000706 	br	818cfc <_dtoa_r+0xb5c>
  818ce0:	d9400717 	ldw	r5,28(sp)
  818ce4:	d9001617 	ldw	r4,88(sp)
  818ce8:	01800284 	movi	r6,10
  818cec:	000f883a 	mov	r7,zero
  818cf0:	081b8080 	call	81b808 <__multadd>
  818cf4:	d8800715 	stw	r2,28(sp)
  818cf8:	84000044 	addi	r16,r16,1
  818cfc:	d9000717 	ldw	r4,28(sp)
  818d00:	900b883a 	mov	r5,r18
  818d04:	0817f880 	call	817f88 <quorem>
  818d08:	15c00c04 	addi	r23,r2,48
  818d0c:	b5c00005 	stb	r23,0(r22)
  818d10:	d8c00f17 	ldw	r3,60(sp)
  818d14:	b5800044 	addi	r22,r22,1
  818d18:	80fff116 	blt	r16,r3,818ce0 <_dtoa_r+0xb40>
  818d1c:	d8000615 	stw	zero,24(sp)
  818d20:	d9400717 	ldw	r5,28(sp)
  818d24:	d9001617 	ldw	r4,88(sp)
  818d28:	01800044 	movi	r6,1
  818d2c:	081b4980 	call	81b498 <__lshift>
  818d30:	1009883a 	mov	r4,r2
  818d34:	900b883a 	mov	r5,r18
  818d38:	d8800715 	stw	r2,28(sp)
  818d3c:	081acb00 	call	81acb0 <__mcmp>
  818d40:	00803c0e 	bge	zero,r2,818e34 <_dtoa_r+0xc94>
  818d44:	b009883a 	mov	r4,r22
  818d48:	213fffc4 	addi	r4,r4,-1
  818d4c:	21400003 	ldbu	r5,0(r4)
  818d50:	00800e44 	movi	r2,57
  818d54:	28c03fcc 	andi	r3,r5,255
  818d58:	18c0201c 	xori	r3,r3,128
  818d5c:	18ffe004 	addi	r3,r3,-128
  818d60:	1881981e 	bne	r3,r2,8193c4 <_dtoa_r+0x1224>
  818d64:	d9800517 	ldw	r6,20(sp)
  818d68:	21bff71e 	bne	r4,r6,818d48 <_dtoa_r+0xba8>
  818d6c:	d8800d17 	ldw	r2,52(sp)
  818d70:	37000044 	addi	fp,r6,1
  818d74:	10800044 	addi	r2,r2,1
  818d78:	d8800d15 	stw	r2,52(sp)
  818d7c:	00800c44 	movi	r2,49
  818d80:	30800005 	stb	r2,0(r6)
  818d84:	d9001617 	ldw	r4,88(sp)
  818d88:	900b883a 	mov	r5,r18
  818d8c:	081ab540 	call	81ab54 <_Bfree>
  818d90:	983ecd26 	beq	r19,zero,8188c8 <_dtoa_r+0x728>
  818d94:	d8c00617 	ldw	r3,24(sp)
  818d98:	18000426 	beq	r3,zero,818dac <_dtoa_r+0xc0c>
  818d9c:	1cc00326 	beq	r3,r19,818dac <_dtoa_r+0xc0c>
  818da0:	d9001617 	ldw	r4,88(sp)
  818da4:	180b883a 	mov	r5,r3
  818da8:	081ab540 	call	81ab54 <_Bfree>
  818dac:	d9001617 	ldw	r4,88(sp)
  818db0:	980b883a 	mov	r5,r19
  818db4:	081ab540 	call	81ab54 <_Bfree>
  818db8:	003ec306 	br	8188c8 <_dtoa_r+0x728>
  818dbc:	1805883a 	mov	r2,r3
  818dc0:	003eeb06 	br	818970 <_dtoa_r+0x7d0>
  818dc4:	d9800a17 	ldw	r6,40(sp)
  818dc8:	d8c01117 	ldw	r3,68(sp)
  818dcc:	20bfff04 	addi	r2,r4,-4
  818dd0:	308d883a 	add	r6,r6,r2
  818dd4:	1887883a 	add	r3,r3,r2
  818dd8:	80a1883a 	add	r16,r16,r2
  818ddc:	d9800a15 	stw	r6,40(sp)
  818de0:	d8c01115 	stw	r3,68(sp)
  818de4:	003f1d06 	br	818a5c <_dtoa_r+0x8bc>
  818de8:	a03f0c1e 	bne	r20,zero,818a1c <_dtoa_r+0x87c>
  818dec:	00800434 	movhi	r2,16
  818df0:	10bfffc4 	addi	r2,r2,-1
  818df4:	a884703a 	and	r2,r21,r2
  818df8:	103f081e 	bne	r2,zero,818a1c <_dtoa_r+0x87c>
  818dfc:	a89ffc2c 	andhi	r2,r21,32752
  818e00:	103f0626 	beq	r2,zero,818a1c <_dtoa_r+0x87c>
  818e04:	d8c01117 	ldw	r3,68(sp)
  818e08:	d9000a17 	ldw	r4,40(sp)
  818e0c:	18c00044 	addi	r3,r3,1
  818e10:	21000044 	addi	r4,r4,1
  818e14:	d8c01115 	stw	r3,68(sp)
  818e18:	d9000a15 	stw	r4,40(sp)
  818e1c:	003f0006 	br	818a20 <_dtoa_r+0x880>
  818e20:	d9400717 	ldw	r5,28(sp)
  818e24:	d9001617 	ldw	r4,88(sp)
  818e28:	081b9080 	call	81b908 <__pow5mult>
  818e2c:	d8800715 	stw	r2,28(sp)
  818e30:	003eed06 	br	8189e8 <_dtoa_r+0x848>
  818e34:	1000021e 	bne	r2,zero,818e40 <_dtoa_r+0xca0>
  818e38:	b880004c 	andi	r2,r23,1
  818e3c:	103fc11e 	bne	r2,zero,818d44 <_dtoa_r+0xba4>
  818e40:	b5bfffc4 	addi	r22,r22,-1
  818e44:	b0c00007 	ldb	r3,0(r22)
  818e48:	00800c04 	movi	r2,48
  818e4c:	18bffc26 	beq	r3,r2,818e40 <_dtoa_r+0xca0>
  818e50:	b7000044 	addi	fp,r22,1
  818e54:	003fcb06 	br	818d84 <_dtoa_r+0xbe4>
  818e58:	d9800d17 	ldw	r6,52(sp)
  818e5c:	018fc83a 	sub	r7,zero,r6
  818e60:	3801f726 	beq	r7,zero,819640 <_dtoa_r+0x14a0>
  818e64:	398003cc 	andi	r6,r7,15
  818e68:	300c90fa 	slli	r6,r6,3
  818e6c:	014020f4 	movhi	r5,131
  818e70:	2963d504 	addi	r5,r5,-28844
  818e74:	d9001217 	ldw	r4,72(sp)
  818e78:	314d883a 	add	r6,r6,r5
  818e7c:	30c00117 	ldw	r3,4(r6)
  818e80:	30800017 	ldw	r2,0(r6)
  818e84:	d9401317 	ldw	r5,76(sp)
  818e88:	3821d13a 	srai	r16,r7,4
  818e8c:	100d883a 	mov	r6,r2
  818e90:	180f883a 	mov	r7,r3
  818e94:	0813ce80 	call	813ce8 <__muldf3>
  818e98:	1011883a 	mov	r8,r2
  818e9c:	1813883a 	mov	r9,r3
  818ea0:	1029883a 	mov	r20,r2
  818ea4:	182b883a 	mov	r21,r3
  818ea8:	8001e526 	beq	r16,zero,819640 <_dtoa_r+0x14a0>
  818eac:	05800084 	movi	r22,2
  818eb0:	044020f4 	movhi	r17,131
  818eb4:	8c640704 	addi	r17,r17,-28644
  818eb8:	8080004c 	andi	r2,r16,1
  818ebc:	1005003a 	cmpeq	r2,r2,zero
  818ec0:	1000081e 	bne	r2,zero,818ee4 <_dtoa_r+0xd44>
  818ec4:	89800017 	ldw	r6,0(r17)
  818ec8:	89c00117 	ldw	r7,4(r17)
  818ecc:	480b883a 	mov	r5,r9
  818ed0:	4009883a 	mov	r4,r8
  818ed4:	0813ce80 	call	813ce8 <__muldf3>
  818ed8:	1011883a 	mov	r8,r2
  818edc:	b5800044 	addi	r22,r22,1
  818ee0:	1813883a 	mov	r9,r3
  818ee4:	8021d07a 	srai	r16,r16,1
  818ee8:	8c400204 	addi	r17,r17,8
  818eec:	803ff21e 	bne	r16,zero,818eb8 <_dtoa_r+0xd18>
  818ef0:	4029883a 	mov	r20,r8
  818ef4:	482b883a 	mov	r21,r9
  818ef8:	003dca06 	br	818624 <_dtoa_r+0x484>
  818efc:	d9000817 	ldw	r4,32(sp)
  818f00:	2005003a 	cmpeq	r2,r4,zero
  818f04:	1001f61e 	bne	r2,zero,8196e0 <_dtoa_r+0x1540>
  818f08:	dc001117 	ldw	r16,68(sp)
  818f0c:	dc801017 	ldw	r18,64(sp)
  818f10:	18c10cc4 	addi	r3,r3,1075
  818f14:	003f6106 	br	818c9c <_dtoa_r+0xafc>
  818f18:	d8000b15 	stw	zero,44(sp)
  818f1c:	d9802617 	ldw	r6,152(sp)
  818f20:	d8c00d17 	ldw	r3,52(sp)
  818f24:	30800044 	addi	r2,r6,1
  818f28:	18ad883a 	add	r22,r3,r2
  818f2c:	b13fffc4 	addi	r4,r22,-1
  818f30:	d9000e15 	stw	r4,56(sp)
  818f34:	0581f60e 	bge	zero,r22,819710 <_dtoa_r+0x1570>
  818f38:	dd800f15 	stw	r22,60(sp)
  818f3c:	003f3006 	br	818c00 <_dtoa_r+0xa60>
  818f40:	d8000b15 	stw	zero,44(sp)
  818f44:	d9002617 	ldw	r4,152(sp)
  818f48:	0101eb0e 	bge	zero,r4,8196f8 <_dtoa_r+0x1558>
  818f4c:	202d883a 	mov	r22,r4
  818f50:	d9000e15 	stw	r4,56(sp)
  818f54:	d9000f15 	stw	r4,60(sp)
  818f58:	003f2906 	br	818c00 <_dtoa_r+0xa60>
  818f5c:	01800044 	movi	r6,1
  818f60:	d9800b15 	stw	r6,44(sp)
  818f64:	003ff706 	br	818f44 <_dtoa_r+0xda4>
  818f68:	01000044 	movi	r4,1
  818f6c:	d9000b15 	stw	r4,44(sp)
  818f70:	003fea06 	br	818f1c <_dtoa_r+0xd7c>
  818f74:	04000c0e 	bge	zero,r16,818fa8 <_dtoa_r+0xe08>
  818f78:	d9400717 	ldw	r5,28(sp)
  818f7c:	d9001617 	ldw	r4,88(sp)
  818f80:	01800044 	movi	r6,1
  818f84:	081b4980 	call	81b498 <__lshift>
  818f88:	1009883a 	mov	r4,r2
  818f8c:	900b883a 	mov	r5,r18
  818f90:	d8800715 	stw	r2,28(sp)
  818f94:	081acb00 	call	81acb0 <__mcmp>
  818f98:	0081e00e 	bge	zero,r2,81971c <_dtoa_r+0x157c>
  818f9c:	bdc00044 	addi	r23,r23,1
  818fa0:	00800e84 	movi	r2,58
  818fa4:	b881a226 	beq	r23,r2,819630 <_dtoa_r+0x1490>
  818fa8:	b7000044 	addi	fp,r22,1
  818fac:	b5c00005 	stb	r23,0(r22)
  818fb0:	003f7406 	br	818d84 <_dtoa_r+0xbe4>
  818fb4:	00800e44 	movi	r2,57
  818fb8:	b8819d26 	beq	r23,r2,819630 <_dtoa_r+0x1490>
  818fbc:	053ffa0e 	bge	zero,r20,818fa8 <_dtoa_r+0xe08>
  818fc0:	8dc00c44 	addi	r23,r17,49
  818fc4:	003ff806 	br	818fa8 <_dtoa_r+0xe08>
  818fc8:	d9001617 	ldw	r4,88(sp)
  818fcc:	a80b883a 	mov	r5,r21
  818fd0:	04000044 	movi	r16,1
  818fd4:	081ab540 	call	81ab54 <_Bfree>
  818fd8:	003edf06 	br	818b58 <_dtoa_r+0x9b8>
  818fdc:	d9001617 	ldw	r4,88(sp)
  818fe0:	980b883a 	mov	r5,r19
  818fe4:	01800284 	movi	r6,10
  818fe8:	000f883a 	mov	r7,zero
  818fec:	081b8080 	call	81b808 <__multadd>
  818ff0:	1027883a 	mov	r19,r2
  818ff4:	d8800615 	stw	r2,24(sp)
  818ff8:	003ebb06 	br	818ae8 <_dtoa_r+0x948>
  818ffc:	d9801117 	ldw	r6,68(sp)
  819000:	d8800d17 	ldw	r2,52(sp)
  819004:	d8000915 	stw	zero,36(sp)
  819008:	308dc83a 	sub	r6,r6,r2
  81900c:	0087c83a 	sub	r3,zero,r2
  819010:	d9801115 	stw	r6,68(sp)
  819014:	d8c01015 	stw	r3,64(sp)
  819018:	003cfe06 	br	818414 <_dtoa_r+0x274>
  81901c:	018dc83a 	sub	r6,zero,r6
  819020:	d9801115 	stw	r6,68(sp)
  819024:	d8000a15 	stw	zero,40(sp)
  819028:	003cf306 	br	8183f8 <_dtoa_r+0x258>
  81902c:	d9000d17 	ldw	r4,52(sp)
  819030:	08143040 	call	814304 <__floatsidf>
  819034:	880b883a 	mov	r5,r17
  819038:	8009883a 	mov	r4,r16
  81903c:	180f883a 	mov	r7,r3
  819040:	100d883a 	mov	r6,r2
  819044:	081d45c0 	call	81d45c <__nedf2>
  819048:	103ce126 	beq	r2,zero,8183d0 <_dtoa_r+0x230>
  81904c:	d9800d17 	ldw	r6,52(sp)
  819050:	31bfffc4 	addi	r6,r6,-1
  819054:	d9800d15 	stw	r6,52(sp)
  819058:	003cdd06 	br	8183d0 <_dtoa_r+0x230>
  81905c:	d9000717 	ldw	r4,28(sp)
  819060:	900b883a 	mov	r5,r18
  819064:	081acb00 	call	81acb0 <__mcmp>
  819068:	103e8d0e 	bge	r2,zero,818aa0 <_dtoa_r+0x900>
  81906c:	d9400717 	ldw	r5,28(sp)
  819070:	d9001617 	ldw	r4,88(sp)
  819074:	01800284 	movi	r6,10
  819078:	000f883a 	mov	r7,zero
  81907c:	081b8080 	call	81b808 <__multadd>
  819080:	d9800d17 	ldw	r6,52(sp)
  819084:	d8800715 	stw	r2,28(sp)
  819088:	31bfffc4 	addi	r6,r6,-1
  81908c:	d9800d15 	stw	r6,52(sp)
  819090:	b001a71e 	bne	r22,zero,819730 <_dtoa_r+0x1590>
  819094:	d8800e17 	ldw	r2,56(sp)
  819098:	d8800f15 	stw	r2,60(sp)
  81909c:	003e8006 	br	818aa0 <_dtoa_r+0x900>
  8190a0:	90800417 	ldw	r2,16(r18)
  8190a4:	1085883a 	add	r2,r2,r2
  8190a8:	1085883a 	add	r2,r2,r2
  8190ac:	1485883a 	add	r2,r2,r18
  8190b0:	11000417 	ldw	r4,16(r2)
  8190b4:	081ab7c0 	call	81ab7c <__hi0bits>
  8190b8:	00c00804 	movi	r3,32
  8190bc:	1887c83a 	sub	r3,r3,r2
  8190c0:	003e5a06 	br	818a2c <_dtoa_r+0x88c>
  8190c4:	d9400717 	ldw	r5,28(sp)
  8190c8:	d9801017 	ldw	r6,64(sp)
  8190cc:	d9001617 	ldw	r4,88(sp)
  8190d0:	081b9080 	call	81b908 <__pow5mult>
  8190d4:	d8800715 	stw	r2,28(sp)
  8190d8:	003e4306 	br	8189e8 <_dtoa_r+0x848>
  8190dc:	d9800f17 	ldw	r6,60(sp)
  8190e0:	d8800d17 	ldw	r2,52(sp)
  8190e4:	d9800315 	stw	r6,12(sp)
  8190e8:	d8800415 	stw	r2,16(sp)
  8190ec:	d8c00b17 	ldw	r3,44(sp)
  8190f0:	1805003a 	cmpeq	r2,r3,zero
  8190f4:	1000e21e 	bne	r2,zero,819480 <_dtoa_r+0x12e0>
  8190f8:	d9000317 	ldw	r4,12(sp)
  8190fc:	0005883a 	mov	r2,zero
  819100:	00cff834 	movhi	r3,16352
  819104:	200c90fa 	slli	r6,r4,3
  819108:	010020f4 	movhi	r4,131
  81910c:	2123d504 	addi	r4,r4,-28844
  819110:	180b883a 	mov	r5,r3
  819114:	310d883a 	add	r6,r6,r4
  819118:	327fff17 	ldw	r9,-4(r6)
  81911c:	323ffe17 	ldw	r8,-8(r6)
  819120:	1009883a 	mov	r4,r2
  819124:	480f883a 	mov	r7,r9
  819128:	400d883a 	mov	r6,r8
  81912c:	08140ac0 	call	8140ac <__divdf3>
  819130:	180b883a 	mov	r5,r3
  819134:	b00d883a 	mov	r6,r22
  819138:	b80f883a 	mov	r7,r23
  81913c:	1009883a 	mov	r4,r2
  819140:	0813bf40 	call	813bf4 <__subdf3>
  819144:	a80b883a 	mov	r5,r21
  819148:	a009883a 	mov	r4,r20
  81914c:	d8c01915 	stw	r3,100(sp)
  819150:	d8801815 	stw	r2,96(sp)
  819154:	08143fc0 	call	8143fc <__fixdfsi>
  819158:	1009883a 	mov	r4,r2
  81915c:	1027883a 	mov	r19,r2
  819160:	08143040 	call	814304 <__floatsidf>
  819164:	a80b883a 	mov	r5,r21
  819168:	a009883a 	mov	r4,r20
  81916c:	180f883a 	mov	r7,r3
  819170:	100d883a 	mov	r6,r2
  819174:	0813bf40 	call	813bf4 <__subdf3>
  819178:	d9801817 	ldw	r6,96(sp)
  81917c:	1823883a 	mov	r17,r3
  819180:	d8801415 	stw	r2,80(sp)
  819184:	302d883a 	mov	r22,r6
  819188:	d9800517 	ldw	r6,20(sp)
  81918c:	9cc00c04 	addi	r19,r19,48
  819190:	dc401515 	stw	r17,84(sp)
  819194:	d8c01917 	ldw	r3,100(sp)
  819198:	34c00005 	stb	r19,0(r6)
  81919c:	d8800517 	ldw	r2,20(sp)
  8191a0:	d9401917 	ldw	r5,100(sp)
  8191a4:	d9801417 	ldw	r6,80(sp)
  8191a8:	b009883a 	mov	r4,r22
  8191ac:	880f883a 	mov	r7,r17
  8191b0:	182f883a 	mov	r23,r3
  8191b4:	17000044 	addi	fp,r2,1
  8191b8:	081d4e40 	call	81d4e4 <__gtdf2>
  8191bc:	00804e16 	blt	zero,r2,8192f8 <_dtoa_r+0x1158>
  8191c0:	d9801417 	ldw	r6,80(sp)
  8191c4:	0005883a 	mov	r2,zero
  8191c8:	00cffc34 	movhi	r3,16368
  8191cc:	180b883a 	mov	r5,r3
  8191d0:	880f883a 	mov	r7,r17
  8191d4:	1009883a 	mov	r4,r2
  8191d8:	0813bf40 	call	813bf4 <__subdf3>
  8191dc:	d9401917 	ldw	r5,100(sp)
  8191e0:	180f883a 	mov	r7,r3
  8191e4:	b009883a 	mov	r4,r22
  8191e8:	100d883a 	mov	r6,r2
  8191ec:	081d4e40 	call	81d4e4 <__gtdf2>
  8191f0:	00bda216 	blt	zero,r2,81887c <_dtoa_r+0x6dc>
  8191f4:	d8c00317 	ldw	r3,12(sp)
  8191f8:	00800044 	movi	r2,1
  8191fc:	10c01216 	blt	r2,r3,819248 <_dtoa_r+0x10a8>
  819200:	003d4506 	br	818718 <_dtoa_r+0x578>
  819204:	d9801417 	ldw	r6,80(sp)
  819208:	0005883a 	mov	r2,zero
  81920c:	00cffc34 	movhi	r3,16368
  819210:	180b883a 	mov	r5,r3
  819214:	880f883a 	mov	r7,r17
  819218:	1009883a 	mov	r4,r2
  81921c:	0813bf40 	call	813bf4 <__subdf3>
  819220:	d9c01b17 	ldw	r7,108(sp)
  819224:	180b883a 	mov	r5,r3
  819228:	1009883a 	mov	r4,r2
  81922c:	b00d883a 	mov	r6,r22
  819230:	081d5f40 	call	81d5f4 <__ltdf2>
  819234:	103d9116 	blt	r2,zero,81887c <_dtoa_r+0x6dc>
  819238:	d9800517 	ldw	r6,20(sp)
  81923c:	d9000317 	ldw	r4,12(sp)
  819240:	3105883a 	add	r2,r6,r4
  819244:	e0bd3426 	beq	fp,r2,818718 <_dtoa_r+0x578>
  819248:	04500934 	movhi	r17,16420
  81924c:	0021883a 	mov	r16,zero
  819250:	b80b883a 	mov	r5,r23
  819254:	b009883a 	mov	r4,r22
  819258:	800d883a 	mov	r6,r16
  81925c:	880f883a 	mov	r7,r17
  819260:	0813ce80 	call	813ce8 <__muldf3>
  819264:	d9401517 	ldw	r5,84(sp)
  819268:	d9001417 	ldw	r4,80(sp)
  81926c:	880f883a 	mov	r7,r17
  819270:	000d883a 	mov	r6,zero
  819274:	d8801a15 	stw	r2,104(sp)
  819278:	d8c01b15 	stw	r3,108(sp)
  81927c:	0813ce80 	call	813ce8 <__muldf3>
  819280:	180b883a 	mov	r5,r3
  819284:	1009883a 	mov	r4,r2
  819288:	1823883a 	mov	r17,r3
  81928c:	1021883a 	mov	r16,r2
  819290:	08143fc0 	call	8143fc <__fixdfsi>
  819294:	1009883a 	mov	r4,r2
  819298:	102b883a 	mov	r21,r2
  81929c:	08143040 	call	814304 <__floatsidf>
  8192a0:	880b883a 	mov	r5,r17
  8192a4:	8009883a 	mov	r4,r16
  8192a8:	180f883a 	mov	r7,r3
  8192ac:	100d883a 	mov	r6,r2
  8192b0:	0813bf40 	call	813bf4 <__subdf3>
  8192b4:	1021883a 	mov	r16,r2
  8192b8:	d9001b17 	ldw	r4,108(sp)
  8192bc:	1823883a 	mov	r17,r3
  8192c0:	dc001415 	stw	r16,80(sp)
  8192c4:	ad400c04 	addi	r21,r21,48
  8192c8:	dc401515 	stw	r17,84(sp)
  8192cc:	d8801a17 	ldw	r2,104(sp)
  8192d0:	e5400005 	stb	r21,0(fp)
  8192d4:	202f883a 	mov	r23,r4
  8192d8:	d9c01b17 	ldw	r7,108(sp)
  8192dc:	d9001417 	ldw	r4,80(sp)
  8192e0:	880b883a 	mov	r5,r17
  8192e4:	100d883a 	mov	r6,r2
  8192e8:	102d883a 	mov	r22,r2
  8192ec:	e7000044 	addi	fp,fp,1
  8192f0:	081d5f40 	call	81d5f4 <__ltdf2>
  8192f4:	103fc30e 	bge	r2,zero,819204 <_dtoa_r+0x1064>
  8192f8:	d9000417 	ldw	r4,16(sp)
  8192fc:	d9000d15 	stw	r4,52(sp)
  819300:	003d7106 	br	8188c8 <_dtoa_r+0x728>
  819304:	d9801717 	ldw	r6,92(sp)
  819308:	00800084 	movi	r2,2
  81930c:	11bde60e 	bge	r2,r6,818aa8 <_dtoa_r+0x908>
  819310:	203cfb1e 	bne	r4,zero,818700 <_dtoa_r+0x560>
  819314:	d9001617 	ldw	r4,88(sp)
  819318:	900b883a 	mov	r5,r18
  81931c:	01800144 	movi	r6,5
  819320:	000f883a 	mov	r7,zero
  819324:	081b8080 	call	81b808 <__multadd>
  819328:	d9000717 	ldw	r4,28(sp)
  81932c:	100b883a 	mov	r5,r2
  819330:	1025883a 	mov	r18,r2
  819334:	081acb00 	call	81acb0 <__mcmp>
  819338:	00bcf10e 	bge	zero,r2,818700 <_dtoa_r+0x560>
  81933c:	d8c00d17 	ldw	r3,52(sp)
  819340:	d9000517 	ldw	r4,20(sp)
  819344:	d8000615 	stw	zero,24(sp)
  819348:	18c00044 	addi	r3,r3,1
  81934c:	d8c00d15 	stw	r3,52(sp)
  819350:	00800c44 	movi	r2,49
  819354:	27000044 	addi	fp,r4,1
  819358:	20800005 	stb	r2,0(r4)
  81935c:	003e8906 	br	818d84 <_dtoa_r+0xbe4>
  819360:	d8c00517 	ldw	r3,20(sp)
  819364:	003bc206 	br	818270 <_dtoa_r+0xd0>
  819368:	018020f4 	movhi	r6,131
  81936c:	31a40704 	addi	r6,r6,-28644
  819370:	30c00917 	ldw	r3,36(r6)
  819374:	30800817 	ldw	r2,32(r6)
  819378:	d9001217 	ldw	r4,72(sp)
  81937c:	d9401317 	ldw	r5,76(sp)
  819380:	180f883a 	mov	r7,r3
  819384:	100d883a 	mov	r6,r2
  819388:	08140ac0 	call	8140ac <__divdf3>
  81938c:	948003cc 	andi	r18,r18,15
  819390:	058000c4 	movi	r22,3
  819394:	1029883a 	mov	r20,r2
  819398:	182b883a 	mov	r21,r3
  81939c:	003c8906 	br	8185c4 <_dtoa_r+0x424>
  8193a0:	d9001017 	ldw	r4,64(sp)
  8193a4:	d9800917 	ldw	r6,36(sp)
  8193a8:	0025883a 	mov	r18,zero
  8193ac:	1105c83a 	sub	r2,r2,r4
  8193b0:	2089883a 	add	r4,r4,r2
  8193b4:	308d883a 	add	r6,r6,r2
  8193b8:	d9001015 	stw	r4,64(sp)
  8193bc:	d9800915 	stw	r6,36(sp)
  8193c0:	003e3206 	br	818c8c <_dtoa_r+0xaec>
  8193c4:	28800044 	addi	r2,r5,1
  8193c8:	27000044 	addi	fp,r4,1
  8193cc:	20800005 	stb	r2,0(r4)
  8193d0:	003e6c06 	br	818d84 <_dtoa_r+0xbe4>
  8193d4:	d8800f17 	ldw	r2,60(sp)
  8193d8:	00bce016 	blt	zero,r2,81875c <_dtoa_r+0x5bc>
  8193dc:	d9800f17 	ldw	r6,60(sp)
  8193e0:	303cc51e 	bne	r6,zero,8186f8 <_dtoa_r+0x558>
  8193e4:	0005883a 	mov	r2,zero
  8193e8:	00d00534 	movhi	r3,16404
  8193ec:	980b883a 	mov	r5,r19
  8193f0:	180f883a 	mov	r7,r3
  8193f4:	9009883a 	mov	r4,r18
  8193f8:	100d883a 	mov	r6,r2
  8193fc:	0813ce80 	call	813ce8 <__muldf3>
  819400:	180b883a 	mov	r5,r3
  819404:	a80f883a 	mov	r7,r21
  819408:	1009883a 	mov	r4,r2
  81940c:	a00d883a 	mov	r6,r20
  819410:	081d56c0 	call	81d56c <__gedf2>
  819414:	103cb80e 	bge	r2,zero,8186f8 <_dtoa_r+0x558>
  819418:	0027883a 	mov	r19,zero
  81941c:	0025883a 	mov	r18,zero
  819420:	003fc606 	br	81933c <_dtoa_r+0x119c>
  819424:	99400117 	ldw	r5,4(r19)
  819428:	d9001617 	ldw	r4,88(sp)
  81942c:	081b0d40 	call	81b0d4 <_Balloc>
  819430:	99800417 	ldw	r6,16(r19)
  819434:	11000304 	addi	r4,r2,12
  819438:	99400304 	addi	r5,r19,12
  81943c:	318d883a 	add	r6,r6,r6
  819440:	318d883a 	add	r6,r6,r6
  819444:	31800204 	addi	r6,r6,8
  819448:	1023883a 	mov	r17,r2
  81944c:	08156ac0 	call	8156ac <memcpy>
  819450:	d9001617 	ldw	r4,88(sp)
  819454:	880b883a 	mov	r5,r17
  819458:	01800044 	movi	r6,1
  81945c:	081b4980 	call	81b498 <__lshift>
  819460:	100b883a 	mov	r5,r2
  819464:	003d9c06 	br	818ad8 <_dtoa_r+0x938>
  819468:	00800e44 	movi	r2,57
  81946c:	b8807026 	beq	r23,r2,819630 <_dtoa_r+0x1490>
  819470:	b8800044 	addi	r2,r23,1
  819474:	b7000044 	addi	fp,r22,1
  819478:	b0800005 	stb	r2,0(r22)
  81947c:	003e4106 	br	818d84 <_dtoa_r+0xbe4>
  819480:	d8800317 	ldw	r2,12(sp)
  819484:	018020f4 	movhi	r6,131
  819488:	31a3d504 	addi	r6,r6,-28844
  81948c:	b009883a 	mov	r4,r22
  819490:	100e90fa 	slli	r7,r2,3
  819494:	b80b883a 	mov	r5,r23
  819498:	398f883a 	add	r7,r7,r6
  81949c:	38bffe17 	ldw	r2,-8(r7)
  8194a0:	d9800517 	ldw	r6,20(sp)
  8194a4:	38ffff17 	ldw	r3,-4(r7)
  8194a8:	37000044 	addi	fp,r6,1
  8194ac:	180f883a 	mov	r7,r3
  8194b0:	100d883a 	mov	r6,r2
  8194b4:	0813ce80 	call	813ce8 <__muldf3>
  8194b8:	a80b883a 	mov	r5,r21
  8194bc:	a009883a 	mov	r4,r20
  8194c0:	182f883a 	mov	r23,r3
  8194c4:	102d883a 	mov	r22,r2
  8194c8:	08143fc0 	call	8143fc <__fixdfsi>
  8194cc:	1009883a 	mov	r4,r2
  8194d0:	1027883a 	mov	r19,r2
  8194d4:	08143040 	call	814304 <__floatsidf>
  8194d8:	a80b883a 	mov	r5,r21
  8194dc:	a009883a 	mov	r4,r20
  8194e0:	180f883a 	mov	r7,r3
  8194e4:	100d883a 	mov	r6,r2
  8194e8:	0813bf40 	call	813bf4 <__subdf3>
  8194ec:	180b883a 	mov	r5,r3
  8194f0:	d8c00517 	ldw	r3,20(sp)
  8194f4:	9cc00c04 	addi	r19,r19,48
  8194f8:	1009883a 	mov	r4,r2
  8194fc:	1cc00005 	stb	r19,0(r3)
  819500:	2021883a 	mov	r16,r4
  819504:	d9000317 	ldw	r4,12(sp)
  819508:	00800044 	movi	r2,1
  81950c:	2823883a 	mov	r17,r5
  819510:	20802226 	beq	r4,r2,81959c <_dtoa_r+0x13fc>
  819514:	1029883a 	mov	r20,r2
  819518:	0005883a 	mov	r2,zero
  81951c:	00d00934 	movhi	r3,16420
  819520:	180f883a 	mov	r7,r3
  819524:	100d883a 	mov	r6,r2
  819528:	880b883a 	mov	r5,r17
  81952c:	8009883a 	mov	r4,r16
  819530:	0813ce80 	call	813ce8 <__muldf3>
  819534:	180b883a 	mov	r5,r3
  819538:	1009883a 	mov	r4,r2
  81953c:	1823883a 	mov	r17,r3
  819540:	1021883a 	mov	r16,r2
  819544:	08143fc0 	call	8143fc <__fixdfsi>
  819548:	1009883a 	mov	r4,r2
  81954c:	102b883a 	mov	r21,r2
  819550:	08143040 	call	814304 <__floatsidf>
  819554:	880b883a 	mov	r5,r17
  819558:	8009883a 	mov	r4,r16
  81955c:	180f883a 	mov	r7,r3
  819560:	100d883a 	mov	r6,r2
  819564:	0813bf40 	call	813bf4 <__subdf3>
  819568:	180b883a 	mov	r5,r3
  81956c:	d8c00517 	ldw	r3,20(sp)
  819570:	1009883a 	mov	r4,r2
  819574:	ad400c04 	addi	r21,r21,48
  819578:	1d05883a 	add	r2,r3,r20
  81957c:	15400005 	stb	r21,0(r2)
  819580:	2021883a 	mov	r16,r4
  819584:	d9000317 	ldw	r4,12(sp)
  819588:	a5000044 	addi	r20,r20,1
  81958c:	2823883a 	mov	r17,r5
  819590:	a13fe11e 	bne	r20,r4,819518 <_dtoa_r+0x1378>
  819594:	e505883a 	add	r2,fp,r20
  819598:	173fffc4 	addi	fp,r2,-1
  81959c:	0025883a 	mov	r18,zero
  8195a0:	04cff834 	movhi	r19,16352
  8195a4:	b009883a 	mov	r4,r22
  8195a8:	b80b883a 	mov	r5,r23
  8195ac:	900d883a 	mov	r6,r18
  8195b0:	980f883a 	mov	r7,r19
  8195b4:	0813c740 	call	813c74 <__adddf3>
  8195b8:	180b883a 	mov	r5,r3
  8195bc:	1009883a 	mov	r4,r2
  8195c0:	800d883a 	mov	r6,r16
  8195c4:	880f883a 	mov	r7,r17
  8195c8:	081d5f40 	call	81d5f4 <__ltdf2>
  8195cc:	103cab16 	blt	r2,zero,81887c <_dtoa_r+0x6dc>
  8195d0:	0009883a 	mov	r4,zero
  8195d4:	980b883a 	mov	r5,r19
  8195d8:	b80f883a 	mov	r7,r23
  8195dc:	b00d883a 	mov	r6,r22
  8195e0:	0813bf40 	call	813bf4 <__subdf3>
  8195e4:	180b883a 	mov	r5,r3
  8195e8:	880f883a 	mov	r7,r17
  8195ec:	1009883a 	mov	r4,r2
  8195f0:	800d883a 	mov	r6,r16
  8195f4:	081d4e40 	call	81d4e4 <__gtdf2>
  8195f8:	00bc470e 	bge	zero,r2,818718 <_dtoa_r+0x578>
  8195fc:	00c00c04 	movi	r3,48
  819600:	e73fffc4 	addi	fp,fp,-1
  819604:	e0800007 	ldb	r2,0(fp)
  819608:	10fffd26 	beq	r2,r3,819600 <_dtoa_r+0x1460>
  81960c:	d9800417 	ldw	r6,16(sp)
  819610:	e7000044 	addi	fp,fp,1
  819614:	d9800d15 	stw	r6,52(sp)
  819618:	003cab06 	br	8188c8 <_dtoa_r+0x728>
  81961c:	d8c00f17 	ldw	r3,60(sp)
  819620:	d9001117 	ldw	r4,68(sp)
  819624:	20e1c83a 	sub	r16,r4,r3
  819628:	0007883a 	mov	r3,zero
  81962c:	003d9b06 	br	818c9c <_dtoa_r+0xafc>
  819630:	00800e44 	movi	r2,57
  819634:	b0800005 	stb	r2,0(r22)
  819638:	b5800044 	addi	r22,r22,1
  81963c:	003dc106 	br	818d44 <_dtoa_r+0xba4>
  819640:	05800084 	movi	r22,2
  819644:	003bf706 	br	818624 <_dtoa_r+0x484>
  819648:	d9000f17 	ldw	r4,60(sp)
  81964c:	013c000e 	bge	zero,r4,818650 <_dtoa_r+0x4b0>
  819650:	d9800e17 	ldw	r6,56(sp)
  819654:	01bc300e 	bge	zero,r6,818718 <_dtoa_r+0x578>
  819658:	0005883a 	mov	r2,zero
  81965c:	00d00934 	movhi	r3,16420
  819660:	a80b883a 	mov	r5,r21
  819664:	180f883a 	mov	r7,r3
  819668:	a009883a 	mov	r4,r20
  81966c:	100d883a 	mov	r6,r2
  819670:	0813ce80 	call	813ce8 <__muldf3>
  819674:	b1000044 	addi	r4,r22,1
  819678:	1021883a 	mov	r16,r2
  81967c:	1823883a 	mov	r17,r3
  819680:	08143040 	call	814304 <__floatsidf>
  819684:	880b883a 	mov	r5,r17
  819688:	8009883a 	mov	r4,r16
  81968c:	180f883a 	mov	r7,r3
  819690:	100d883a 	mov	r6,r2
  819694:	0813ce80 	call	813ce8 <__muldf3>
  819698:	0011883a 	mov	r8,zero
  81969c:	02500734 	movhi	r9,16412
  8196a0:	180b883a 	mov	r5,r3
  8196a4:	480f883a 	mov	r7,r9
  8196a8:	1009883a 	mov	r4,r2
  8196ac:	400d883a 	mov	r6,r8
  8196b0:	0813c740 	call	813c74 <__adddf3>
  8196b4:	102d883a 	mov	r22,r2
  8196b8:	00bf3034 	movhi	r2,64704
  8196bc:	10ef883a 	add	r23,r2,r3
  8196c0:	d8800d17 	ldw	r2,52(sp)
  8196c4:	d8c00e17 	ldw	r3,56(sp)
  8196c8:	8029883a 	mov	r20,r16
  8196cc:	10bfffc4 	addi	r2,r2,-1
  8196d0:	882b883a 	mov	r21,r17
  8196d4:	d8800415 	stw	r2,16(sp)
  8196d8:	d8c00315 	stw	r3,12(sp)
  8196dc:	003e8306 	br	8190ec <_dtoa_r+0xf4c>
  8196e0:	d8800117 	ldw	r2,4(sp)
  8196e4:	dc001117 	ldw	r16,68(sp)
  8196e8:	dc801017 	ldw	r18,64(sp)
  8196ec:	00c00d84 	movi	r3,54
  8196f0:	1887c83a 	sub	r3,r3,r2
  8196f4:	003d6906 	br	818c9c <_dtoa_r+0xafc>
  8196f8:	01800044 	movi	r6,1
  8196fc:	3021883a 	mov	r16,r6
  819700:	d9800f15 	stw	r6,60(sp)
  819704:	d9802615 	stw	r6,152(sp)
  819708:	d9800e15 	stw	r6,56(sp)
  81970c:	003b9306 	br	81855c <_dtoa_r+0x3bc>
  819710:	b021883a 	mov	r16,r22
  819714:	dd800f15 	stw	r22,60(sp)
  819718:	003b9006 	br	81855c <_dtoa_r+0x3bc>
  81971c:	103e221e 	bne	r2,zero,818fa8 <_dtoa_r+0xe08>
  819720:	b880004c 	andi	r2,r23,1
  819724:	1005003a 	cmpeq	r2,r2,zero
  819728:	103e1f1e 	bne	r2,zero,818fa8 <_dtoa_r+0xe08>
  81972c:	003e1b06 	br	818f9c <_dtoa_r+0xdfc>
  819730:	d9001617 	ldw	r4,88(sp)
  819734:	980b883a 	mov	r5,r19
  819738:	01800284 	movi	r6,10
  81973c:	000f883a 	mov	r7,zero
  819740:	081b8080 	call	81b808 <__multadd>
  819744:	d8c00e17 	ldw	r3,56(sp)
  819748:	1027883a 	mov	r19,r2
  81974c:	d8c00f15 	stw	r3,60(sp)
  819750:	003cd306 	br	818aa0 <_dtoa_r+0x900>

00819754 <_fflush_r>:
  819754:	defffb04 	addi	sp,sp,-20
  819758:	dcc00315 	stw	r19,12(sp)
  81975c:	dc800215 	stw	r18,8(sp)
  819760:	dfc00415 	stw	ra,16(sp)
  819764:	dc400115 	stw	r17,4(sp)
  819768:	dc000015 	stw	r16,0(sp)
  81976c:	2027883a 	mov	r19,r4
  819770:	2825883a 	mov	r18,r5
  819774:	20000226 	beq	r4,zero,819780 <_fflush_r+0x2c>
  819778:	20800e17 	ldw	r2,56(r4)
  81977c:	10005626 	beq	r2,zero,8198d8 <_fflush_r+0x184>
  819780:	9100030b 	ldhu	r4,12(r18)
  819784:	20ffffcc 	andi	r3,r4,65535
  819788:	18e0001c 	xori	r3,r3,32768
  81978c:	18e00004 	addi	r3,r3,-32768
  819790:	1880020c 	andi	r2,r3,8
  819794:	1000261e 	bne	r2,zero,819830 <_fflush_r+0xdc>
  819798:	90c00117 	ldw	r3,4(r18)
  81979c:	20820014 	ori	r2,r4,2048
  8197a0:	9080030d 	sth	r2,12(r18)
  8197a4:	1009883a 	mov	r4,r2
  8197a8:	00c0400e 	bge	zero,r3,8198ac <_fflush_r+0x158>
  8197ac:	92000a17 	ldw	r8,40(r18)
  8197b0:	40004026 	beq	r8,zero,8198b4 <_fflush_r+0x160>
  8197b4:	2084000c 	andi	r2,r4,4096
  8197b8:	10005326 	beq	r2,zero,819908 <_fflush_r+0x1b4>
  8197bc:	94001417 	ldw	r16,80(r18)
  8197c0:	9080030b 	ldhu	r2,12(r18)
  8197c4:	1080010c 	andi	r2,r2,4
  8197c8:	1000481e 	bne	r2,zero,8198ec <_fflush_r+0x198>
  8197cc:	91400717 	ldw	r5,28(r18)
  8197d0:	9809883a 	mov	r4,r19
  8197d4:	800d883a 	mov	r6,r16
  8197d8:	000f883a 	mov	r7,zero
  8197dc:	403ee83a 	callr	r8
  8197e0:	8080261e 	bne	r16,r2,81987c <_fflush_r+0x128>
  8197e4:	9080030b 	ldhu	r2,12(r18)
  8197e8:	91000417 	ldw	r4,16(r18)
  8197ec:	90000115 	stw	zero,4(r18)
  8197f0:	10bdffcc 	andi	r2,r2,63487
  8197f4:	10ffffcc 	andi	r3,r2,65535
  8197f8:	18c4000c 	andi	r3,r3,4096
  8197fc:	9080030d 	sth	r2,12(r18)
  819800:	91000015 	stw	r4,0(r18)
  819804:	18002b26 	beq	r3,zero,8198b4 <_fflush_r+0x160>
  819808:	0007883a 	mov	r3,zero
  81980c:	1805883a 	mov	r2,r3
  819810:	94001415 	stw	r16,80(r18)
  819814:	dfc00417 	ldw	ra,16(sp)
  819818:	dcc00317 	ldw	r19,12(sp)
  81981c:	dc800217 	ldw	r18,8(sp)
  819820:	dc400117 	ldw	r17,4(sp)
  819824:	dc000017 	ldw	r16,0(sp)
  819828:	dec00504 	addi	sp,sp,20
  81982c:	f800283a 	ret
  819830:	94400417 	ldw	r17,16(r18)
  819834:	88001f26 	beq	r17,zero,8198b4 <_fflush_r+0x160>
  819838:	90800017 	ldw	r2,0(r18)
  81983c:	18c000cc 	andi	r3,r3,3
  819840:	94400015 	stw	r17,0(r18)
  819844:	1461c83a 	sub	r16,r2,r17
  819848:	18002526 	beq	r3,zero,8198e0 <_fflush_r+0x18c>
  81984c:	0005883a 	mov	r2,zero
  819850:	90800215 	stw	r2,8(r18)
  819854:	0400170e 	bge	zero,r16,8198b4 <_fflush_r+0x160>
  819858:	90c00917 	ldw	r3,36(r18)
  81985c:	91400717 	ldw	r5,28(r18)
  819860:	880d883a 	mov	r6,r17
  819864:	800f883a 	mov	r7,r16
  819868:	9809883a 	mov	r4,r19
  81986c:	183ee83a 	callr	r3
  819870:	88a3883a 	add	r17,r17,r2
  819874:	80a1c83a 	sub	r16,r16,r2
  819878:	00bff616 	blt	zero,r2,819854 <_fflush_r+0x100>
  81987c:	9080030b 	ldhu	r2,12(r18)
  819880:	00ffffc4 	movi	r3,-1
  819884:	10801014 	ori	r2,r2,64
  819888:	9080030d 	sth	r2,12(r18)
  81988c:	1805883a 	mov	r2,r3
  819890:	dfc00417 	ldw	ra,16(sp)
  819894:	dcc00317 	ldw	r19,12(sp)
  819898:	dc800217 	ldw	r18,8(sp)
  81989c:	dc400117 	ldw	r17,4(sp)
  8198a0:	dc000017 	ldw	r16,0(sp)
  8198a4:	dec00504 	addi	sp,sp,20
  8198a8:	f800283a 	ret
  8198ac:	90800f17 	ldw	r2,60(r18)
  8198b0:	00bfbe16 	blt	zero,r2,8197ac <_fflush_r+0x58>
  8198b4:	0007883a 	mov	r3,zero
  8198b8:	1805883a 	mov	r2,r3
  8198bc:	dfc00417 	ldw	ra,16(sp)
  8198c0:	dcc00317 	ldw	r19,12(sp)
  8198c4:	dc800217 	ldw	r18,8(sp)
  8198c8:	dc400117 	ldw	r17,4(sp)
  8198cc:	dc000017 	ldw	r16,0(sp)
  8198d0:	dec00504 	addi	sp,sp,20
  8198d4:	f800283a 	ret
  8198d8:	08199ec0 	call	8199ec <__sinit>
  8198dc:	003fa806 	br	819780 <_fflush_r+0x2c>
  8198e0:	90800517 	ldw	r2,20(r18)
  8198e4:	90800215 	stw	r2,8(r18)
  8198e8:	003fda06 	br	819854 <_fflush_r+0x100>
  8198ec:	90800117 	ldw	r2,4(r18)
  8198f0:	90c00c17 	ldw	r3,48(r18)
  8198f4:	80a1c83a 	sub	r16,r16,r2
  8198f8:	183fb426 	beq	r3,zero,8197cc <_fflush_r+0x78>
  8198fc:	90800f17 	ldw	r2,60(r18)
  819900:	80a1c83a 	sub	r16,r16,r2
  819904:	003fb106 	br	8197cc <_fflush_r+0x78>
  819908:	91400717 	ldw	r5,28(r18)
  81990c:	9809883a 	mov	r4,r19
  819910:	000d883a 	mov	r6,zero
  819914:	01c00044 	movi	r7,1
  819918:	403ee83a 	callr	r8
  81991c:	1021883a 	mov	r16,r2
  819920:	00bfffc4 	movi	r2,-1
  819924:	80800226 	beq	r16,r2,819930 <_fflush_r+0x1dc>
  819928:	92000a17 	ldw	r8,40(r18)
  81992c:	003fa406 	br	8197c0 <_fflush_r+0x6c>
  819930:	98c00017 	ldw	r3,0(r19)
  819934:	00800744 	movi	r2,29
  819938:	18bfde26 	beq	r3,r2,8198b4 <_fflush_r+0x160>
  81993c:	9080030b 	ldhu	r2,12(r18)
  819940:	8007883a 	mov	r3,r16
  819944:	10801014 	ori	r2,r2,64
  819948:	9080030d 	sth	r2,12(r18)
  81994c:	003fcf06 	br	81988c <_fflush_r+0x138>

00819950 <fflush>:
  819950:	014020b4 	movhi	r5,130
  819954:	2965d504 	addi	r5,r5,-26796
  819958:	2007883a 	mov	r3,r4
  81995c:	20000526 	beq	r4,zero,819974 <fflush+0x24>
  819960:	008020f4 	movhi	r2,131
  819964:	10805b04 	addi	r2,r2,364
  819968:	11000017 	ldw	r4,0(r2)
  81996c:	180b883a 	mov	r5,r3
  819970:	08197541 	jmpi	819754 <_fflush_r>
  819974:	008020f4 	movhi	r2,131
  819978:	10805c04 	addi	r2,r2,368
  81997c:	11000017 	ldw	r4,0(r2)
  819980:	081a5201 	jmpi	81a520 <_fwalk_reent>

00819984 <std>:
  819984:	008020b4 	movhi	r2,130
  819988:	10b06b04 	addi	r2,r2,-15956
  81998c:	20800b15 	stw	r2,44(r4)
  819990:	008020b4 	movhi	r2,130
  819994:	10b0a604 	addi	r2,r2,-15720
  819998:	20800815 	stw	r2,32(r4)
  81999c:	00c020b4 	movhi	r3,130
  8199a0:	18f08704 	addi	r3,r3,-15844
  8199a4:	008020b4 	movhi	r2,130
  8199a8:	10b06d04 	addi	r2,r2,-15948
  8199ac:	2140030d 	sth	r5,12(r4)
  8199b0:	2180038d 	sth	r6,14(r4)
  8199b4:	20c00915 	stw	r3,36(r4)
  8199b8:	20800a15 	stw	r2,40(r4)
  8199bc:	20000015 	stw	zero,0(r4)
  8199c0:	20000115 	stw	zero,4(r4)
  8199c4:	20000215 	stw	zero,8(r4)
  8199c8:	20000415 	stw	zero,16(r4)
  8199cc:	20000515 	stw	zero,20(r4)
  8199d0:	20000615 	stw	zero,24(r4)
  8199d4:	21000715 	stw	r4,28(r4)
  8199d8:	f800283a 	ret

008199dc <__sfp_lock_acquire>:
  8199dc:	f800283a 	ret

008199e0 <__sfp_lock_release>:
  8199e0:	f800283a 	ret

008199e4 <__sinit_lock_acquire>:
  8199e4:	f800283a 	ret

008199e8 <__sinit_lock_release>:
  8199e8:	f800283a 	ret

008199ec <__sinit>:
  8199ec:	20800e17 	ldw	r2,56(r4)
  8199f0:	defffd04 	addi	sp,sp,-12
  8199f4:	dc400115 	stw	r17,4(sp)
  8199f8:	dc000015 	stw	r16,0(sp)
  8199fc:	dfc00215 	stw	ra,8(sp)
  819a00:	04400044 	movi	r17,1
  819a04:	01400104 	movi	r5,4
  819a08:	000d883a 	mov	r6,zero
  819a0c:	2021883a 	mov	r16,r4
  819a10:	2200bb04 	addi	r8,r4,748
  819a14:	200f883a 	mov	r7,r4
  819a18:	10000526 	beq	r2,zero,819a30 <__sinit+0x44>
  819a1c:	dfc00217 	ldw	ra,8(sp)
  819a20:	dc400117 	ldw	r17,4(sp)
  819a24:	dc000017 	ldw	r16,0(sp)
  819a28:	dec00304 	addi	sp,sp,12
  819a2c:	f800283a 	ret
  819a30:	21000117 	ldw	r4,4(r4)
  819a34:	008020b4 	movhi	r2,130
  819a38:	10a6b404 	addi	r2,r2,-25904
  819a3c:	00c000c4 	movi	r3,3
  819a40:	80800f15 	stw	r2,60(r16)
  819a44:	80c0b915 	stw	r3,740(r16)
  819a48:	8200ba15 	stw	r8,744(r16)
  819a4c:	84400e15 	stw	r17,56(r16)
  819a50:	8000b815 	stw	zero,736(r16)
  819a54:	08199840 	call	819984 <std>
  819a58:	81000217 	ldw	r4,8(r16)
  819a5c:	880d883a 	mov	r6,r17
  819a60:	800f883a 	mov	r7,r16
  819a64:	01400284 	movi	r5,10
  819a68:	08199840 	call	819984 <std>
  819a6c:	81000317 	ldw	r4,12(r16)
  819a70:	800f883a 	mov	r7,r16
  819a74:	01400484 	movi	r5,18
  819a78:	01800084 	movi	r6,2
  819a7c:	dfc00217 	ldw	ra,8(sp)
  819a80:	dc400117 	ldw	r17,4(sp)
  819a84:	dc000017 	ldw	r16,0(sp)
  819a88:	dec00304 	addi	sp,sp,12
  819a8c:	08199841 	jmpi	819984 <std>

00819a90 <__fp_lock>:
  819a90:	0005883a 	mov	r2,zero
  819a94:	f800283a 	ret

00819a98 <__fp_unlock>:
  819a98:	0005883a 	mov	r2,zero
  819a9c:	f800283a 	ret

00819aa0 <__fp_unlock_all>:
  819aa0:	008020f4 	movhi	r2,131
  819aa4:	10805b04 	addi	r2,r2,364
  819aa8:	11000017 	ldw	r4,0(r2)
  819aac:	014020b4 	movhi	r5,130
  819ab0:	2966a604 	addi	r5,r5,-25960
  819ab4:	081a5e81 	jmpi	81a5e8 <_fwalk>

00819ab8 <__fp_lock_all>:
  819ab8:	008020f4 	movhi	r2,131
  819abc:	10805b04 	addi	r2,r2,364
  819ac0:	11000017 	ldw	r4,0(r2)
  819ac4:	014020b4 	movhi	r5,130
  819ac8:	2966a404 	addi	r5,r5,-25968
  819acc:	081a5e81 	jmpi	81a5e8 <_fwalk>

00819ad0 <_cleanup_r>:
  819ad0:	014020b4 	movhi	r5,130
  819ad4:	29719804 	addi	r5,r5,-14752
  819ad8:	081a5e81 	jmpi	81a5e8 <_fwalk>

00819adc <_cleanup>:
  819adc:	008020f4 	movhi	r2,131
  819ae0:	10805c04 	addi	r2,r2,368
  819ae4:	11000017 	ldw	r4,0(r2)
  819ae8:	0819ad01 	jmpi	819ad0 <_cleanup_r>

00819aec <__sfmoreglue>:
  819aec:	defffc04 	addi	sp,sp,-16
  819af0:	dc400115 	stw	r17,4(sp)
  819af4:	2c401724 	muli	r17,r5,92
  819af8:	dc800215 	stw	r18,8(sp)
  819afc:	2825883a 	mov	r18,r5
  819b00:	89400304 	addi	r5,r17,12
  819b04:	dc000015 	stw	r16,0(sp)
  819b08:	dfc00315 	stw	ra,12(sp)
  819b0c:	0814f6c0 	call	814f6c <_malloc_r>
  819b10:	0021883a 	mov	r16,zero
  819b14:	880d883a 	mov	r6,r17
  819b18:	000b883a 	mov	r5,zero
  819b1c:	10000626 	beq	r2,zero,819b38 <__sfmoreglue+0x4c>
  819b20:	11000304 	addi	r4,r2,12
  819b24:	14800115 	stw	r18,4(r2)
  819b28:	10000015 	stw	zero,0(r2)
  819b2c:	11000215 	stw	r4,8(r2)
  819b30:	1021883a 	mov	r16,r2
  819b34:	081aabc0 	call	81aabc <memset>
  819b38:	8005883a 	mov	r2,r16
  819b3c:	dfc00317 	ldw	ra,12(sp)
  819b40:	dc800217 	ldw	r18,8(sp)
  819b44:	dc400117 	ldw	r17,4(sp)
  819b48:	dc000017 	ldw	r16,0(sp)
  819b4c:	dec00404 	addi	sp,sp,16
  819b50:	f800283a 	ret

00819b54 <__sfp>:
  819b54:	defffd04 	addi	sp,sp,-12
  819b58:	008020f4 	movhi	r2,131
  819b5c:	10805c04 	addi	r2,r2,368
  819b60:	dc000015 	stw	r16,0(sp)
  819b64:	14000017 	ldw	r16,0(r2)
  819b68:	dc400115 	stw	r17,4(sp)
  819b6c:	dfc00215 	stw	ra,8(sp)
  819b70:	80800e17 	ldw	r2,56(r16)
  819b74:	2023883a 	mov	r17,r4
  819b78:	10002626 	beq	r2,zero,819c14 <__sfp+0xc0>
  819b7c:	8400b804 	addi	r16,r16,736
  819b80:	80800117 	ldw	r2,4(r16)
  819b84:	81000217 	ldw	r4,8(r16)
  819b88:	10ffffc4 	addi	r3,r2,-1
  819b8c:	18000916 	blt	r3,zero,819bb4 <__sfp+0x60>
  819b90:	2080030f 	ldh	r2,12(r4)
  819b94:	10000b26 	beq	r2,zero,819bc4 <__sfp+0x70>
  819b98:	017fffc4 	movi	r5,-1
  819b9c:	00000206 	br	819ba8 <__sfp+0x54>
  819ba0:	2080030f 	ldh	r2,12(r4)
  819ba4:	10000726 	beq	r2,zero,819bc4 <__sfp+0x70>
  819ba8:	18ffffc4 	addi	r3,r3,-1
  819bac:	21001704 	addi	r4,r4,92
  819bb0:	197ffb1e 	bne	r3,r5,819ba0 <__sfp+0x4c>
  819bb4:	80800017 	ldw	r2,0(r16)
  819bb8:	10001926 	beq	r2,zero,819c20 <__sfp+0xcc>
  819bbc:	1021883a 	mov	r16,r2
  819bc0:	003fef06 	br	819b80 <__sfp+0x2c>
  819bc4:	00bfffc4 	movi	r2,-1
  819bc8:	00c00044 	movi	r3,1
  819bcc:	2080038d 	sth	r2,14(r4)
  819bd0:	20c0030d 	sth	r3,12(r4)
  819bd4:	20000015 	stw	zero,0(r4)
  819bd8:	20000215 	stw	zero,8(r4)
  819bdc:	20000115 	stw	zero,4(r4)
  819be0:	20000415 	stw	zero,16(r4)
  819be4:	20000515 	stw	zero,20(r4)
  819be8:	20000615 	stw	zero,24(r4)
  819bec:	20000c15 	stw	zero,48(r4)
  819bf0:	20000d15 	stw	zero,52(r4)
  819bf4:	20001115 	stw	zero,68(r4)
  819bf8:	20001215 	stw	zero,72(r4)
  819bfc:	2005883a 	mov	r2,r4
  819c00:	dfc00217 	ldw	ra,8(sp)
  819c04:	dc400117 	ldw	r17,4(sp)
  819c08:	dc000017 	ldw	r16,0(sp)
  819c0c:	dec00304 	addi	sp,sp,12
  819c10:	f800283a 	ret
  819c14:	8009883a 	mov	r4,r16
  819c18:	08199ec0 	call	8199ec <__sinit>
  819c1c:	003fd706 	br	819b7c <__sfp+0x28>
  819c20:	8809883a 	mov	r4,r17
  819c24:	01400104 	movi	r5,4
  819c28:	0819aec0 	call	819aec <__sfmoreglue>
  819c2c:	80800015 	stw	r2,0(r16)
  819c30:	103fe21e 	bne	r2,zero,819bbc <__sfp+0x68>
  819c34:	00800304 	movi	r2,12
  819c38:	0009883a 	mov	r4,zero
  819c3c:	88800015 	stw	r2,0(r17)
  819c40:	003fee06 	br	819bfc <__sfp+0xa8>

00819c44 <_malloc_trim_r>:
  819c44:	defffb04 	addi	sp,sp,-20
  819c48:	dcc00315 	stw	r19,12(sp)
  819c4c:	04c020f4 	movhi	r19,131
  819c50:	9cf96d04 	addi	r19,r19,-6732
  819c54:	dc800215 	stw	r18,8(sp)
  819c58:	dc400115 	stw	r17,4(sp)
  819c5c:	dc000015 	stw	r16,0(sp)
  819c60:	2823883a 	mov	r17,r5
  819c64:	2025883a 	mov	r18,r4
  819c68:	dfc00415 	stw	ra,16(sp)
  819c6c:	081e2700 	call	81e270 <__malloc_lock>
  819c70:	98800217 	ldw	r2,8(r19)
  819c74:	9009883a 	mov	r4,r18
  819c78:	000b883a 	mov	r5,zero
  819c7c:	10c00117 	ldw	r3,4(r2)
  819c80:	00bfff04 	movi	r2,-4
  819c84:	18a0703a 	and	r16,r3,r2
  819c88:	8463c83a 	sub	r17,r16,r17
  819c8c:	8c43fbc4 	addi	r17,r17,4079
  819c90:	8822d33a 	srli	r17,r17,12
  819c94:	0083ffc4 	movi	r2,4095
  819c98:	8c7fffc4 	addi	r17,r17,-1
  819c9c:	8822933a 	slli	r17,r17,12
  819ca0:	1440060e 	bge	r2,r17,819cbc <_malloc_trim_r+0x78>
  819ca4:	081590c0 	call	81590c <_sbrk_r>
  819ca8:	98c00217 	ldw	r3,8(r19)
  819cac:	9009883a 	mov	r4,r18
  819cb0:	044bc83a 	sub	r5,zero,r17
  819cb4:	80c7883a 	add	r3,r16,r3
  819cb8:	10c00926 	beq	r2,r3,819ce0 <_malloc_trim_r+0x9c>
  819cbc:	081e2900 	call	81e290 <__malloc_unlock>
  819cc0:	0005883a 	mov	r2,zero
  819cc4:	dfc00417 	ldw	ra,16(sp)
  819cc8:	dcc00317 	ldw	r19,12(sp)
  819ccc:	dc800217 	ldw	r18,8(sp)
  819cd0:	dc400117 	ldw	r17,4(sp)
  819cd4:	dc000017 	ldw	r16,0(sp)
  819cd8:	dec00504 	addi	sp,sp,20
  819cdc:	f800283a 	ret
  819ce0:	9009883a 	mov	r4,r18
  819ce4:	081590c0 	call	81590c <_sbrk_r>
  819ce8:	844dc83a 	sub	r6,r16,r17
  819cec:	00ffffc4 	movi	r3,-1
  819cf0:	9009883a 	mov	r4,r18
  819cf4:	000b883a 	mov	r5,zero
  819cf8:	01c020f4 	movhi	r7,131
  819cfc:	39dcaa04 	addi	r7,r7,29352
  819d00:	31800054 	ori	r6,r6,1
  819d04:	10c00926 	beq	r2,r3,819d2c <_malloc_trim_r+0xe8>
  819d08:	38800017 	ldw	r2,0(r7)
  819d0c:	98c00217 	ldw	r3,8(r19)
  819d10:	9009883a 	mov	r4,r18
  819d14:	1445c83a 	sub	r2,r2,r17
  819d18:	38800015 	stw	r2,0(r7)
  819d1c:	19800115 	stw	r6,4(r3)
  819d20:	081e2900 	call	81e290 <__malloc_unlock>
  819d24:	00800044 	movi	r2,1
  819d28:	003fe606 	br	819cc4 <_malloc_trim_r+0x80>
  819d2c:	081590c0 	call	81590c <_sbrk_r>
  819d30:	99800217 	ldw	r6,8(r19)
  819d34:	100f883a 	mov	r7,r2
  819d38:	9009883a 	mov	r4,r18
  819d3c:	1187c83a 	sub	r3,r2,r6
  819d40:	008003c4 	movi	r2,15
  819d44:	19400054 	ori	r5,r3,1
  819d48:	10ffdc0e 	bge	r2,r3,819cbc <_malloc_trim_r+0x78>
  819d4c:	008020f4 	movhi	r2,131
  819d50:	10805904 	addi	r2,r2,356
  819d54:	10c00017 	ldw	r3,0(r2)
  819d58:	008020f4 	movhi	r2,131
  819d5c:	109caa04 	addi	r2,r2,29352
  819d60:	31400115 	stw	r5,4(r6)
  819d64:	38c7c83a 	sub	r3,r7,r3
  819d68:	10c00015 	stw	r3,0(r2)
  819d6c:	003fd306 	br	819cbc <_malloc_trim_r+0x78>

00819d70 <_free_r>:
  819d70:	defffd04 	addi	sp,sp,-12
  819d74:	dc400115 	stw	r17,4(sp)
  819d78:	dc000015 	stw	r16,0(sp)
  819d7c:	dfc00215 	stw	ra,8(sp)
  819d80:	2821883a 	mov	r16,r5
  819d84:	2023883a 	mov	r17,r4
  819d88:	28005a26 	beq	r5,zero,819ef4 <_free_r+0x184>
  819d8c:	081e2700 	call	81e270 <__malloc_lock>
  819d90:	823ffe04 	addi	r8,r16,-8
  819d94:	41400117 	ldw	r5,4(r8)
  819d98:	00bfff84 	movi	r2,-2
  819d9c:	028020f4 	movhi	r10,131
  819da0:	52b96d04 	addi	r10,r10,-6732
  819da4:	288e703a 	and	r7,r5,r2
  819da8:	41cd883a 	add	r6,r8,r7
  819dac:	30c00117 	ldw	r3,4(r6)
  819db0:	51000217 	ldw	r4,8(r10)
  819db4:	00bfff04 	movi	r2,-4
  819db8:	1892703a 	and	r9,r3,r2
  819dbc:	5017883a 	mov	r11,r10
  819dc0:	31006726 	beq	r6,r4,819f60 <_free_r+0x1f0>
  819dc4:	2880004c 	andi	r2,r5,1
  819dc8:	1005003a 	cmpeq	r2,r2,zero
  819dcc:	32400115 	stw	r9,4(r6)
  819dd0:	10001a1e 	bne	r2,zero,819e3c <_free_r+0xcc>
  819dd4:	000b883a 	mov	r5,zero
  819dd8:	3247883a 	add	r3,r6,r9
  819ddc:	18800117 	ldw	r2,4(r3)
  819de0:	1080004c 	andi	r2,r2,1
  819de4:	1000231e 	bne	r2,zero,819e74 <_free_r+0x104>
  819de8:	280ac03a 	cmpne	r5,r5,zero
  819dec:	3a4f883a 	add	r7,r7,r9
  819df0:	2800451e 	bne	r5,zero,819f08 <_free_r+0x198>
  819df4:	31000217 	ldw	r4,8(r6)
  819df8:	008020f4 	movhi	r2,131
  819dfc:	10b96f04 	addi	r2,r2,-6724
  819e00:	20807b26 	beq	r4,r2,819ff0 <_free_r+0x280>
  819e04:	30800317 	ldw	r2,12(r6)
  819e08:	3a07883a 	add	r3,r7,r8
  819e0c:	19c00015 	stw	r7,0(r3)
  819e10:	11000215 	stw	r4,8(r2)
  819e14:	20800315 	stw	r2,12(r4)
  819e18:	38800054 	ori	r2,r7,1
  819e1c:	40800115 	stw	r2,4(r8)
  819e20:	28001a26 	beq	r5,zero,819e8c <_free_r+0x11c>
  819e24:	8809883a 	mov	r4,r17
  819e28:	dfc00217 	ldw	ra,8(sp)
  819e2c:	dc400117 	ldw	r17,4(sp)
  819e30:	dc000017 	ldw	r16,0(sp)
  819e34:	dec00304 	addi	sp,sp,12
  819e38:	081e2901 	jmpi	81e290 <__malloc_unlock>
  819e3c:	80bffe17 	ldw	r2,-8(r16)
  819e40:	50c00204 	addi	r3,r10,8
  819e44:	4091c83a 	sub	r8,r8,r2
  819e48:	41000217 	ldw	r4,8(r8)
  819e4c:	388f883a 	add	r7,r7,r2
  819e50:	20c06126 	beq	r4,r3,819fd8 <_free_r+0x268>
  819e54:	40800317 	ldw	r2,12(r8)
  819e58:	3247883a 	add	r3,r6,r9
  819e5c:	000b883a 	mov	r5,zero
  819e60:	11000215 	stw	r4,8(r2)
  819e64:	20800315 	stw	r2,12(r4)
  819e68:	18800117 	ldw	r2,4(r3)
  819e6c:	1080004c 	andi	r2,r2,1
  819e70:	103fdd26 	beq	r2,zero,819de8 <_free_r+0x78>
  819e74:	38800054 	ori	r2,r7,1
  819e78:	3a07883a 	add	r3,r7,r8
  819e7c:	280ac03a 	cmpne	r5,r5,zero
  819e80:	40800115 	stw	r2,4(r8)
  819e84:	19c00015 	stw	r7,0(r3)
  819e88:	283fe61e 	bne	r5,zero,819e24 <_free_r+0xb4>
  819e8c:	00807fc4 	movi	r2,511
  819e90:	11c01f2e 	bgeu	r2,r7,819f10 <_free_r+0x1a0>
  819e94:	3806d27a 	srli	r3,r7,9
  819e98:	1800481e 	bne	r3,zero,819fbc <_free_r+0x24c>
  819e9c:	3804d0fa 	srli	r2,r7,3
  819ea0:	100690fa 	slli	r3,r2,3
  819ea4:	1acd883a 	add	r6,r3,r11
  819ea8:	31400217 	ldw	r5,8(r6)
  819eac:	31405926 	beq	r6,r5,81a014 <_free_r+0x2a4>
  819eb0:	28800117 	ldw	r2,4(r5)
  819eb4:	00ffff04 	movi	r3,-4
  819eb8:	10c4703a 	and	r2,r2,r3
  819ebc:	3880022e 	bgeu	r7,r2,819ec8 <_free_r+0x158>
  819ec0:	29400217 	ldw	r5,8(r5)
  819ec4:	317ffa1e 	bne	r6,r5,819eb0 <_free_r+0x140>
  819ec8:	29800317 	ldw	r6,12(r5)
  819ecc:	41800315 	stw	r6,12(r8)
  819ed0:	41400215 	stw	r5,8(r8)
  819ed4:	8809883a 	mov	r4,r17
  819ed8:	2a000315 	stw	r8,12(r5)
  819edc:	32000215 	stw	r8,8(r6)
  819ee0:	dfc00217 	ldw	ra,8(sp)
  819ee4:	dc400117 	ldw	r17,4(sp)
  819ee8:	dc000017 	ldw	r16,0(sp)
  819eec:	dec00304 	addi	sp,sp,12
  819ef0:	081e2901 	jmpi	81e290 <__malloc_unlock>
  819ef4:	dfc00217 	ldw	ra,8(sp)
  819ef8:	dc400117 	ldw	r17,4(sp)
  819efc:	dc000017 	ldw	r16,0(sp)
  819f00:	dec00304 	addi	sp,sp,12
  819f04:	f800283a 	ret
  819f08:	31000217 	ldw	r4,8(r6)
  819f0c:	003fbd06 	br	819e04 <_free_r+0x94>
  819f10:	3806d0fa 	srli	r3,r7,3
  819f14:	00800044 	movi	r2,1
  819f18:	51400117 	ldw	r5,4(r10)
  819f1c:	180890fa 	slli	r4,r3,3
  819f20:	1807d0ba 	srai	r3,r3,2
  819f24:	22c9883a 	add	r4,r4,r11
  819f28:	21800217 	ldw	r6,8(r4)
  819f2c:	10c4983a 	sll	r2,r2,r3
  819f30:	41000315 	stw	r4,12(r8)
  819f34:	41800215 	stw	r6,8(r8)
  819f38:	288ab03a 	or	r5,r5,r2
  819f3c:	22000215 	stw	r8,8(r4)
  819f40:	8809883a 	mov	r4,r17
  819f44:	51400115 	stw	r5,4(r10)
  819f48:	32000315 	stw	r8,12(r6)
  819f4c:	dfc00217 	ldw	ra,8(sp)
  819f50:	dc400117 	ldw	r17,4(sp)
  819f54:	dc000017 	ldw	r16,0(sp)
  819f58:	dec00304 	addi	sp,sp,12
  819f5c:	081e2901 	jmpi	81e290 <__malloc_unlock>
  819f60:	2880004c 	andi	r2,r5,1
  819f64:	3a4d883a 	add	r6,r7,r9
  819f68:	1000071e 	bne	r2,zero,819f88 <_free_r+0x218>
  819f6c:	80bffe17 	ldw	r2,-8(r16)
  819f70:	4091c83a 	sub	r8,r8,r2
  819f74:	41000317 	ldw	r4,12(r8)
  819f78:	40c00217 	ldw	r3,8(r8)
  819f7c:	308d883a 	add	r6,r6,r2
  819f80:	20c00215 	stw	r3,8(r4)
  819f84:	19000315 	stw	r4,12(r3)
  819f88:	008020f4 	movhi	r2,131
  819f8c:	10805804 	addi	r2,r2,352
  819f90:	11000017 	ldw	r4,0(r2)
  819f94:	30c00054 	ori	r3,r6,1
  819f98:	52000215 	stw	r8,8(r10)
  819f9c:	40c00115 	stw	r3,4(r8)
  819fa0:	313fa036 	bltu	r6,r4,819e24 <_free_r+0xb4>
  819fa4:	008020f4 	movhi	r2,131
  819fa8:	109c8e04 	addi	r2,r2,29240
  819fac:	11400017 	ldw	r5,0(r2)
  819fb0:	8809883a 	mov	r4,r17
  819fb4:	0819c440 	call	819c44 <_malloc_trim_r>
  819fb8:	003f9a06 	br	819e24 <_free_r+0xb4>
  819fbc:	00800104 	movi	r2,4
  819fc0:	10c0072e 	bgeu	r2,r3,819fe0 <_free_r+0x270>
  819fc4:	00800504 	movi	r2,20
  819fc8:	10c01936 	bltu	r2,r3,81a030 <_free_r+0x2c0>
  819fcc:	188016c4 	addi	r2,r3,91
  819fd0:	100690fa 	slli	r3,r2,3
  819fd4:	003fb306 	br	819ea4 <_free_r+0x134>
  819fd8:	01400044 	movi	r5,1
  819fdc:	003f7e06 	br	819dd8 <_free_r+0x68>
  819fe0:	3804d1ba 	srli	r2,r7,6
  819fe4:	10800e04 	addi	r2,r2,56
  819fe8:	100690fa 	slli	r3,r2,3
  819fec:	003fad06 	br	819ea4 <_free_r+0x134>
  819ff0:	22000315 	stw	r8,12(r4)
  819ff4:	22000215 	stw	r8,8(r4)
  819ff8:	3a05883a 	add	r2,r7,r8
  819ffc:	38c00054 	ori	r3,r7,1
  81a000:	11c00015 	stw	r7,0(r2)
  81a004:	41000215 	stw	r4,8(r8)
  81a008:	40c00115 	stw	r3,4(r8)
  81a00c:	41000315 	stw	r4,12(r8)
  81a010:	003f8406 	br	819e24 <_free_r+0xb4>
  81a014:	1005d0ba 	srai	r2,r2,2
  81a018:	00c00044 	movi	r3,1
  81a01c:	51000117 	ldw	r4,4(r10)
  81a020:	1886983a 	sll	r3,r3,r2
  81a024:	20c8b03a 	or	r4,r4,r3
  81a028:	51000115 	stw	r4,4(r10)
  81a02c:	003fa706 	br	819ecc <_free_r+0x15c>
  81a030:	00801504 	movi	r2,84
  81a034:	10c00436 	bltu	r2,r3,81a048 <_free_r+0x2d8>
  81a038:	3804d33a 	srli	r2,r7,12
  81a03c:	10801b84 	addi	r2,r2,110
  81a040:	100690fa 	slli	r3,r2,3
  81a044:	003f9706 	br	819ea4 <_free_r+0x134>
  81a048:	00805504 	movi	r2,340
  81a04c:	10c00436 	bltu	r2,r3,81a060 <_free_r+0x2f0>
  81a050:	3804d3fa 	srli	r2,r7,15
  81a054:	10801dc4 	addi	r2,r2,119
  81a058:	100690fa 	slli	r3,r2,3
  81a05c:	003f9106 	br	819ea4 <_free_r+0x134>
  81a060:	00815504 	movi	r2,1364
  81a064:	10c0032e 	bgeu	r2,r3,81a074 <_free_r+0x304>
  81a068:	00801f84 	movi	r2,126
  81a06c:	00c0fc04 	movi	r3,1008
  81a070:	003f8c06 	br	819ea4 <_free_r+0x134>
  81a074:	3804d4ba 	srli	r2,r7,18
  81a078:	10801f04 	addi	r2,r2,124
  81a07c:	100690fa 	slli	r3,r2,3
  81a080:	003f8806 	br	819ea4 <_free_r+0x134>

0081a084 <__sfvwrite_r>:
  81a084:	30800217 	ldw	r2,8(r6)
  81a088:	defff504 	addi	sp,sp,-44
  81a08c:	df000915 	stw	fp,36(sp)
  81a090:	dd800715 	stw	r22,28(sp)
  81a094:	dc800315 	stw	r18,12(sp)
  81a098:	dfc00a15 	stw	ra,40(sp)
  81a09c:	ddc00815 	stw	r23,32(sp)
  81a0a0:	dd400615 	stw	r21,24(sp)
  81a0a4:	dd000515 	stw	r20,20(sp)
  81a0a8:	dcc00415 	stw	r19,16(sp)
  81a0ac:	dc400215 	stw	r17,8(sp)
  81a0b0:	dc000115 	stw	r16,4(sp)
  81a0b4:	302d883a 	mov	r22,r6
  81a0b8:	2039883a 	mov	fp,r4
  81a0bc:	2825883a 	mov	r18,r5
  81a0c0:	10001c26 	beq	r2,zero,81a134 <__sfvwrite_r+0xb0>
  81a0c4:	29c0030b 	ldhu	r7,12(r5)
  81a0c8:	3880020c 	andi	r2,r7,8
  81a0cc:	10002726 	beq	r2,zero,81a16c <__sfvwrite_r+0xe8>
  81a0d0:	28800417 	ldw	r2,16(r5)
  81a0d4:	10002526 	beq	r2,zero,81a16c <__sfvwrite_r+0xe8>
  81a0d8:	3880008c 	andi	r2,r7,2
  81a0dc:	b5400017 	ldw	r21,0(r22)
  81a0e0:	10002826 	beq	r2,zero,81a184 <__sfvwrite_r+0x100>
  81a0e4:	0021883a 	mov	r16,zero
  81a0e8:	0023883a 	mov	r17,zero
  81a0ec:	880d883a 	mov	r6,r17
  81a0f0:	e009883a 	mov	r4,fp
  81a0f4:	00810004 	movi	r2,1024
  81a0f8:	80006e26 	beq	r16,zero,81a2b4 <__sfvwrite_r+0x230>
  81a0fc:	800f883a 	mov	r7,r16
  81a100:	91400717 	ldw	r5,28(r18)
  81a104:	1400012e 	bgeu	r2,r16,81a10c <__sfvwrite_r+0x88>
  81a108:	100f883a 	mov	r7,r2
  81a10c:	90c00917 	ldw	r3,36(r18)
  81a110:	183ee83a 	callr	r3
  81a114:	1007883a 	mov	r3,r2
  81a118:	80a1c83a 	sub	r16,r16,r2
  81a11c:	88a3883a 	add	r17,r17,r2
  81a120:	00806d0e 	bge	zero,r2,81a2d8 <__sfvwrite_r+0x254>
  81a124:	b0800217 	ldw	r2,8(r22)
  81a128:	10c5c83a 	sub	r2,r2,r3
  81a12c:	b0800215 	stw	r2,8(r22)
  81a130:	103fee1e 	bne	r2,zero,81a0ec <__sfvwrite_r+0x68>
  81a134:	0009883a 	mov	r4,zero
  81a138:	2005883a 	mov	r2,r4
  81a13c:	dfc00a17 	ldw	ra,40(sp)
  81a140:	df000917 	ldw	fp,36(sp)
  81a144:	ddc00817 	ldw	r23,32(sp)
  81a148:	dd800717 	ldw	r22,28(sp)
  81a14c:	dd400617 	ldw	r21,24(sp)
  81a150:	dd000517 	ldw	r20,20(sp)
  81a154:	dcc00417 	ldw	r19,16(sp)
  81a158:	dc800317 	ldw	r18,12(sp)
  81a15c:	dc400217 	ldw	r17,8(sp)
  81a160:	dc000117 	ldw	r16,4(sp)
  81a164:	dec00b04 	addi	sp,sp,44
  81a168:	f800283a 	ret
  81a16c:	0817e4c0 	call	817e4c <__swsetup_r>
  81a170:	1000e41e 	bne	r2,zero,81a504 <__sfvwrite_r+0x480>
  81a174:	91c0030b 	ldhu	r7,12(r18)
  81a178:	b5400017 	ldw	r21,0(r22)
  81a17c:	3880008c 	andi	r2,r7,2
  81a180:	103fd81e 	bne	r2,zero,81a0e4 <__sfvwrite_r+0x60>
  81a184:	3880004c 	andi	r2,r7,1
  81a188:	1005003a 	cmpeq	r2,r2,zero
  81a18c:	10005726 	beq	r2,zero,81a2ec <__sfvwrite_r+0x268>
  81a190:	0029883a 	mov	r20,zero
  81a194:	002f883a 	mov	r23,zero
  81a198:	a0004226 	beq	r20,zero,81a2a4 <__sfvwrite_r+0x220>
  81a19c:	3880800c 	andi	r2,r7,512
  81a1a0:	94000217 	ldw	r16,8(r18)
  81a1a4:	10008b26 	beq	r2,zero,81a3d4 <__sfvwrite_r+0x350>
  81a1a8:	800d883a 	mov	r6,r16
  81a1ac:	a400a536 	bltu	r20,r16,81a444 <__sfvwrite_r+0x3c0>
  81a1b0:	3881200c 	andi	r2,r7,1152
  81a1b4:	10002726 	beq	r2,zero,81a254 <__sfvwrite_r+0x1d0>
  81a1b8:	90800517 	ldw	r2,20(r18)
  81a1bc:	92000417 	ldw	r8,16(r18)
  81a1c0:	91400017 	ldw	r5,0(r18)
  81a1c4:	1087883a 	add	r3,r2,r2
  81a1c8:	1887883a 	add	r3,r3,r2
  81a1cc:	1808d7fa 	srli	r4,r3,31
  81a1d0:	2a21c83a 	sub	r16,r5,r8
  81a1d4:	80800044 	addi	r2,r16,1
  81a1d8:	20c9883a 	add	r4,r4,r3
  81a1dc:	2027d07a 	srai	r19,r4,1
  81a1e0:	a085883a 	add	r2,r20,r2
  81a1e4:	980d883a 	mov	r6,r19
  81a1e8:	9880022e 	bgeu	r19,r2,81a1f4 <__sfvwrite_r+0x170>
  81a1ec:	1027883a 	mov	r19,r2
  81a1f0:	100d883a 	mov	r6,r2
  81a1f4:	3881000c 	andi	r2,r7,1024
  81a1f8:	1000b826 	beq	r2,zero,81a4dc <__sfvwrite_r+0x458>
  81a1fc:	300b883a 	mov	r5,r6
  81a200:	e009883a 	mov	r4,fp
  81a204:	0814f6c0 	call	814f6c <_malloc_r>
  81a208:	10003126 	beq	r2,zero,81a2d0 <__sfvwrite_r+0x24c>
  81a20c:	91400417 	ldw	r5,16(r18)
  81a210:	1009883a 	mov	r4,r2
  81a214:	800d883a 	mov	r6,r16
  81a218:	1023883a 	mov	r17,r2
  81a21c:	08156ac0 	call	8156ac <memcpy>
  81a220:	90c0030b 	ldhu	r3,12(r18)
  81a224:	00beffc4 	movi	r2,-1025
  81a228:	1886703a 	and	r3,r3,r2
  81a22c:	18c02014 	ori	r3,r3,128
  81a230:	90c0030d 	sth	r3,12(r18)
  81a234:	9c07c83a 	sub	r3,r19,r16
  81a238:	8c05883a 	add	r2,r17,r16
  81a23c:	a00d883a 	mov	r6,r20
  81a240:	a021883a 	mov	r16,r20
  81a244:	90800015 	stw	r2,0(r18)
  81a248:	90c00215 	stw	r3,8(r18)
  81a24c:	94400415 	stw	r17,16(r18)
  81a250:	94c00515 	stw	r19,20(r18)
  81a254:	91000017 	ldw	r4,0(r18)
  81a258:	b80b883a 	mov	r5,r23
  81a25c:	a023883a 	mov	r17,r20
  81a260:	081a9dc0 	call	81a9dc <memmove>
  81a264:	90c00217 	ldw	r3,8(r18)
  81a268:	90800017 	ldw	r2,0(r18)
  81a26c:	a027883a 	mov	r19,r20
  81a270:	1c07c83a 	sub	r3,r3,r16
  81a274:	1405883a 	add	r2,r2,r16
  81a278:	90c00215 	stw	r3,8(r18)
  81a27c:	a021883a 	mov	r16,r20
  81a280:	90800015 	stw	r2,0(r18)
  81a284:	b0800217 	ldw	r2,8(r22)
  81a288:	1405c83a 	sub	r2,r2,r16
  81a28c:	b0800215 	stw	r2,8(r22)
  81a290:	103fa826 	beq	r2,zero,81a134 <__sfvwrite_r+0xb0>
  81a294:	a469c83a 	sub	r20,r20,r17
  81a298:	91c0030b 	ldhu	r7,12(r18)
  81a29c:	bcef883a 	add	r23,r23,r19
  81a2a0:	a03fbe1e 	bne	r20,zero,81a19c <__sfvwrite_r+0x118>
  81a2a4:	adc00017 	ldw	r23,0(r21)
  81a2a8:	ad000117 	ldw	r20,4(r21)
  81a2ac:	ad400204 	addi	r21,r21,8
  81a2b0:	003fb906 	br	81a198 <__sfvwrite_r+0x114>
  81a2b4:	ac400017 	ldw	r17,0(r21)
  81a2b8:	ac000117 	ldw	r16,4(r21)
  81a2bc:	ad400204 	addi	r21,r21,8
  81a2c0:	003f8a06 	br	81a0ec <__sfvwrite_r+0x68>
  81a2c4:	91400417 	ldw	r5,16(r18)
  81a2c8:	e009883a 	mov	r4,fp
  81a2cc:	0819d700 	call	819d70 <_free_r>
  81a2d0:	00800304 	movi	r2,12
  81a2d4:	e0800015 	stw	r2,0(fp)
  81a2d8:	9080030b 	ldhu	r2,12(r18)
  81a2dc:	013fffc4 	movi	r4,-1
  81a2e0:	10801014 	ori	r2,r2,64
  81a2e4:	9080030d 	sth	r2,12(r18)
  81a2e8:	003f9306 	br	81a138 <__sfvwrite_r+0xb4>
  81a2ec:	0027883a 	mov	r19,zero
  81a2f0:	002f883a 	mov	r23,zero
  81a2f4:	d8000015 	stw	zero,0(sp)
  81a2f8:	0029883a 	mov	r20,zero
  81a2fc:	98001e26 	beq	r19,zero,81a378 <__sfvwrite_r+0x2f4>
  81a300:	d8c00017 	ldw	r3,0(sp)
  81a304:	1804c03a 	cmpne	r2,r3,zero
  81a308:	10005e26 	beq	r2,zero,81a484 <__sfvwrite_r+0x400>
  81a30c:	9821883a 	mov	r16,r19
  81a310:	a4c0012e 	bgeu	r20,r19,81a318 <__sfvwrite_r+0x294>
  81a314:	a021883a 	mov	r16,r20
  81a318:	91000017 	ldw	r4,0(r18)
  81a31c:	90800417 	ldw	r2,16(r18)
  81a320:	91800217 	ldw	r6,8(r18)
  81a324:	91c00517 	ldw	r7,20(r18)
  81a328:	1100022e 	bgeu	r2,r4,81a334 <__sfvwrite_r+0x2b0>
  81a32c:	31e3883a 	add	r17,r6,r7
  81a330:	8c001616 	blt	r17,r16,81a38c <__sfvwrite_r+0x308>
  81a334:	81c03816 	blt	r16,r7,81a418 <__sfvwrite_r+0x394>
  81a338:	90c00917 	ldw	r3,36(r18)
  81a33c:	91400717 	ldw	r5,28(r18)
  81a340:	e009883a 	mov	r4,fp
  81a344:	b80d883a 	mov	r6,r23
  81a348:	183ee83a 	callr	r3
  81a34c:	1023883a 	mov	r17,r2
  81a350:	00bfe10e 	bge	zero,r2,81a2d8 <__sfvwrite_r+0x254>
  81a354:	a469c83a 	sub	r20,r20,r17
  81a358:	a0001826 	beq	r20,zero,81a3bc <__sfvwrite_r+0x338>
  81a35c:	b0800217 	ldw	r2,8(r22)
  81a360:	1445c83a 	sub	r2,r2,r17
  81a364:	b0800215 	stw	r2,8(r22)
  81a368:	103f7226 	beq	r2,zero,81a134 <__sfvwrite_r+0xb0>
  81a36c:	9c67c83a 	sub	r19,r19,r17
  81a370:	bc6f883a 	add	r23,r23,r17
  81a374:	983fe21e 	bne	r19,zero,81a300 <__sfvwrite_r+0x27c>
  81a378:	adc00017 	ldw	r23,0(r21)
  81a37c:	acc00117 	ldw	r19,4(r21)
  81a380:	ad400204 	addi	r21,r21,8
  81a384:	d8000015 	stw	zero,0(sp)
  81a388:	003fdc06 	br	81a2fc <__sfvwrite_r+0x278>
  81a38c:	b80b883a 	mov	r5,r23
  81a390:	880d883a 	mov	r6,r17
  81a394:	081a9dc0 	call	81a9dc <memmove>
  81a398:	90c00017 	ldw	r3,0(r18)
  81a39c:	e009883a 	mov	r4,fp
  81a3a0:	900b883a 	mov	r5,r18
  81a3a4:	1c47883a 	add	r3,r3,r17
  81a3a8:	90c00015 	stw	r3,0(r18)
  81a3ac:	08197540 	call	819754 <_fflush_r>
  81a3b0:	103fc91e 	bne	r2,zero,81a2d8 <__sfvwrite_r+0x254>
  81a3b4:	a469c83a 	sub	r20,r20,r17
  81a3b8:	a03fe81e 	bne	r20,zero,81a35c <__sfvwrite_r+0x2d8>
  81a3bc:	e009883a 	mov	r4,fp
  81a3c0:	900b883a 	mov	r5,r18
  81a3c4:	08197540 	call	819754 <_fflush_r>
  81a3c8:	103fc31e 	bne	r2,zero,81a2d8 <__sfvwrite_r+0x254>
  81a3cc:	d8000015 	stw	zero,0(sp)
  81a3d0:	003fe206 	br	81a35c <__sfvwrite_r+0x2d8>
  81a3d4:	91000017 	ldw	r4,0(r18)
  81a3d8:	90800417 	ldw	r2,16(r18)
  81a3dc:	1100022e 	bgeu	r2,r4,81a3e8 <__sfvwrite_r+0x364>
  81a3e0:	8023883a 	mov	r17,r16
  81a3e4:	85003136 	bltu	r16,r20,81a4ac <__sfvwrite_r+0x428>
  81a3e8:	91c00517 	ldw	r7,20(r18)
  81a3ec:	a1c01836 	bltu	r20,r7,81a450 <__sfvwrite_r+0x3cc>
  81a3f0:	90c00917 	ldw	r3,36(r18)
  81a3f4:	91400717 	ldw	r5,28(r18)
  81a3f8:	e009883a 	mov	r4,fp
  81a3fc:	b80d883a 	mov	r6,r23
  81a400:	183ee83a 	callr	r3
  81a404:	1021883a 	mov	r16,r2
  81a408:	00bfb30e 	bge	zero,r2,81a2d8 <__sfvwrite_r+0x254>
  81a40c:	1023883a 	mov	r17,r2
  81a410:	1027883a 	mov	r19,r2
  81a414:	003f9b06 	br	81a284 <__sfvwrite_r+0x200>
  81a418:	b80b883a 	mov	r5,r23
  81a41c:	800d883a 	mov	r6,r16
  81a420:	081a9dc0 	call	81a9dc <memmove>
  81a424:	90c00217 	ldw	r3,8(r18)
  81a428:	90800017 	ldw	r2,0(r18)
  81a42c:	8023883a 	mov	r17,r16
  81a430:	1c07c83a 	sub	r3,r3,r16
  81a434:	1405883a 	add	r2,r2,r16
  81a438:	90c00215 	stw	r3,8(r18)
  81a43c:	90800015 	stw	r2,0(r18)
  81a440:	003fc406 	br	81a354 <__sfvwrite_r+0x2d0>
  81a444:	a00d883a 	mov	r6,r20
  81a448:	a021883a 	mov	r16,r20
  81a44c:	003f8106 	br	81a254 <__sfvwrite_r+0x1d0>
  81a450:	b80b883a 	mov	r5,r23
  81a454:	a00d883a 	mov	r6,r20
  81a458:	081a9dc0 	call	81a9dc <memmove>
  81a45c:	90c00217 	ldw	r3,8(r18)
  81a460:	90800017 	ldw	r2,0(r18)
  81a464:	a021883a 	mov	r16,r20
  81a468:	1d07c83a 	sub	r3,r3,r20
  81a46c:	1505883a 	add	r2,r2,r20
  81a470:	a023883a 	mov	r17,r20
  81a474:	a027883a 	mov	r19,r20
  81a478:	90c00215 	stw	r3,8(r18)
  81a47c:	90800015 	stw	r2,0(r18)
  81a480:	003f8006 	br	81a284 <__sfvwrite_r+0x200>
  81a484:	b809883a 	mov	r4,r23
  81a488:	01400284 	movi	r5,10
  81a48c:	980d883a 	mov	r6,r19
  81a490:	081a8f80 	call	81a8f8 <memchr>
  81a494:	10001726 	beq	r2,zero,81a4f4 <__sfvwrite_r+0x470>
  81a498:	15c5c83a 	sub	r2,r2,r23
  81a49c:	15000044 	addi	r20,r2,1
  81a4a0:	00800044 	movi	r2,1
  81a4a4:	d8800015 	stw	r2,0(sp)
  81a4a8:	003f9806 	br	81a30c <__sfvwrite_r+0x288>
  81a4ac:	b80b883a 	mov	r5,r23
  81a4b0:	800d883a 	mov	r6,r16
  81a4b4:	081a9dc0 	call	81a9dc <memmove>
  81a4b8:	90c00017 	ldw	r3,0(r18)
  81a4bc:	e009883a 	mov	r4,fp
  81a4c0:	900b883a 	mov	r5,r18
  81a4c4:	1c07883a 	add	r3,r3,r16
  81a4c8:	90c00015 	stw	r3,0(r18)
  81a4cc:	8027883a 	mov	r19,r16
  81a4d0:	08197540 	call	819754 <_fflush_r>
  81a4d4:	103f6b26 	beq	r2,zero,81a284 <__sfvwrite_r+0x200>
  81a4d8:	003f7f06 	br	81a2d8 <__sfvwrite_r+0x254>
  81a4dc:	400b883a 	mov	r5,r8
  81a4e0:	e009883a 	mov	r4,fp
  81a4e4:	081bb480 	call	81bb48 <_realloc_r>
  81a4e8:	103f7626 	beq	r2,zero,81a2c4 <__sfvwrite_r+0x240>
  81a4ec:	1023883a 	mov	r17,r2
  81a4f0:	003f5006 	br	81a234 <__sfvwrite_r+0x1b0>
  81a4f4:	00c00044 	movi	r3,1
  81a4f8:	9d000044 	addi	r20,r19,1
  81a4fc:	d8c00015 	stw	r3,0(sp)
  81a500:	003f8206 	br	81a30c <__sfvwrite_r+0x288>
  81a504:	9080030b 	ldhu	r2,12(r18)
  81a508:	00c00244 	movi	r3,9
  81a50c:	013fffc4 	movi	r4,-1
  81a510:	10801014 	ori	r2,r2,64
  81a514:	9080030d 	sth	r2,12(r18)
  81a518:	e0c00015 	stw	r3,0(fp)
  81a51c:	003f0606 	br	81a138 <__sfvwrite_r+0xb4>

0081a520 <_fwalk_reent>:
  81a520:	defff704 	addi	sp,sp,-36
  81a524:	dcc00315 	stw	r19,12(sp)
  81a528:	24c0b804 	addi	r19,r4,736
  81a52c:	dd800615 	stw	r22,24(sp)
  81a530:	dd400515 	stw	r21,20(sp)
  81a534:	dfc00815 	stw	ra,32(sp)
  81a538:	ddc00715 	stw	r23,28(sp)
  81a53c:	dd000415 	stw	r20,16(sp)
  81a540:	dc800215 	stw	r18,8(sp)
  81a544:	dc400115 	stw	r17,4(sp)
  81a548:	dc000015 	stw	r16,0(sp)
  81a54c:	202b883a 	mov	r21,r4
  81a550:	282d883a 	mov	r22,r5
  81a554:	08199dc0 	call	8199dc <__sfp_lock_acquire>
  81a558:	98002126 	beq	r19,zero,81a5e0 <_fwalk_reent+0xc0>
  81a55c:	002f883a 	mov	r23,zero
  81a560:	9c800117 	ldw	r18,4(r19)
  81a564:	9c000217 	ldw	r16,8(r19)
  81a568:	90bfffc4 	addi	r2,r18,-1
  81a56c:	10000d16 	blt	r2,zero,81a5a4 <_fwalk_reent+0x84>
  81a570:	0023883a 	mov	r17,zero
  81a574:	053fffc4 	movi	r20,-1
  81a578:	8080030f 	ldh	r2,12(r16)
  81a57c:	8c400044 	addi	r17,r17,1
  81a580:	10000626 	beq	r2,zero,81a59c <_fwalk_reent+0x7c>
  81a584:	8080038f 	ldh	r2,14(r16)
  81a588:	800b883a 	mov	r5,r16
  81a58c:	a809883a 	mov	r4,r21
  81a590:	15000226 	beq	r2,r20,81a59c <_fwalk_reent+0x7c>
  81a594:	b03ee83a 	callr	r22
  81a598:	b8aeb03a 	or	r23,r23,r2
  81a59c:	84001704 	addi	r16,r16,92
  81a5a0:	947ff51e 	bne	r18,r17,81a578 <_fwalk_reent+0x58>
  81a5a4:	9cc00017 	ldw	r19,0(r19)
  81a5a8:	983fed1e 	bne	r19,zero,81a560 <_fwalk_reent+0x40>
  81a5ac:	08199e00 	call	8199e0 <__sfp_lock_release>
  81a5b0:	b805883a 	mov	r2,r23
  81a5b4:	dfc00817 	ldw	ra,32(sp)
  81a5b8:	ddc00717 	ldw	r23,28(sp)
  81a5bc:	dd800617 	ldw	r22,24(sp)
  81a5c0:	dd400517 	ldw	r21,20(sp)
  81a5c4:	dd000417 	ldw	r20,16(sp)
  81a5c8:	dcc00317 	ldw	r19,12(sp)
  81a5cc:	dc800217 	ldw	r18,8(sp)
  81a5d0:	dc400117 	ldw	r17,4(sp)
  81a5d4:	dc000017 	ldw	r16,0(sp)
  81a5d8:	dec00904 	addi	sp,sp,36
  81a5dc:	f800283a 	ret
  81a5e0:	002f883a 	mov	r23,zero
  81a5e4:	003ff106 	br	81a5ac <_fwalk_reent+0x8c>

0081a5e8 <_fwalk>:
  81a5e8:	defff804 	addi	sp,sp,-32
  81a5ec:	dcc00315 	stw	r19,12(sp)
  81a5f0:	24c0b804 	addi	r19,r4,736
  81a5f4:	dd400515 	stw	r21,20(sp)
  81a5f8:	dfc00715 	stw	ra,28(sp)
  81a5fc:	dd800615 	stw	r22,24(sp)
  81a600:	dd000415 	stw	r20,16(sp)
  81a604:	dc800215 	stw	r18,8(sp)
  81a608:	dc400115 	stw	r17,4(sp)
  81a60c:	dc000015 	stw	r16,0(sp)
  81a610:	282b883a 	mov	r21,r5
  81a614:	08199dc0 	call	8199dc <__sfp_lock_acquire>
  81a618:	98001f26 	beq	r19,zero,81a698 <_fwalk+0xb0>
  81a61c:	002d883a 	mov	r22,zero
  81a620:	9c800117 	ldw	r18,4(r19)
  81a624:	9c000217 	ldw	r16,8(r19)
  81a628:	90bfffc4 	addi	r2,r18,-1
  81a62c:	10000c16 	blt	r2,zero,81a660 <_fwalk+0x78>
  81a630:	0023883a 	mov	r17,zero
  81a634:	053fffc4 	movi	r20,-1
  81a638:	8080030f 	ldh	r2,12(r16)
  81a63c:	8c400044 	addi	r17,r17,1
  81a640:	10000526 	beq	r2,zero,81a658 <_fwalk+0x70>
  81a644:	8080038f 	ldh	r2,14(r16)
  81a648:	8009883a 	mov	r4,r16
  81a64c:	15000226 	beq	r2,r20,81a658 <_fwalk+0x70>
  81a650:	a83ee83a 	callr	r21
  81a654:	b0acb03a 	or	r22,r22,r2
  81a658:	84001704 	addi	r16,r16,92
  81a65c:	947ff61e 	bne	r18,r17,81a638 <_fwalk+0x50>
  81a660:	9cc00017 	ldw	r19,0(r19)
  81a664:	983fee1e 	bne	r19,zero,81a620 <_fwalk+0x38>
  81a668:	08199e00 	call	8199e0 <__sfp_lock_release>
  81a66c:	b005883a 	mov	r2,r22
  81a670:	dfc00717 	ldw	ra,28(sp)
  81a674:	dd800617 	ldw	r22,24(sp)
  81a678:	dd400517 	ldw	r21,20(sp)
  81a67c:	dd000417 	ldw	r20,16(sp)
  81a680:	dcc00317 	ldw	r19,12(sp)
  81a684:	dc800217 	ldw	r18,8(sp)
  81a688:	dc400117 	ldw	r17,4(sp)
  81a68c:	dc000017 	ldw	r16,0(sp)
  81a690:	dec00804 	addi	sp,sp,32
  81a694:	f800283a 	ret
  81a698:	002d883a 	mov	r22,zero
  81a69c:	003ff206 	br	81a668 <_fwalk+0x80>

0081a6a0 <__locale_charset>:
  81a6a0:	d0a00717 	ldw	r2,-32740(gp)
  81a6a4:	f800283a 	ret

0081a6a8 <_localeconv_r>:
  81a6a8:	008020f4 	movhi	r2,131
  81a6ac:	10a3c904 	addi	r2,r2,-28892
  81a6b0:	f800283a 	ret

0081a6b4 <localeconv>:
  81a6b4:	008020f4 	movhi	r2,131
  81a6b8:	10805b04 	addi	r2,r2,364
  81a6bc:	11000017 	ldw	r4,0(r2)
  81a6c0:	081a6a81 	jmpi	81a6a8 <_localeconv_r>

0081a6c4 <_setlocale_r>:
  81a6c4:	defffc04 	addi	sp,sp,-16
  81a6c8:	00c020f4 	movhi	r3,131
  81a6cc:	18e3c404 	addi	r3,r3,-28912
  81a6d0:	dc800215 	stw	r18,8(sp)
  81a6d4:	dc400115 	stw	r17,4(sp)
  81a6d8:	dc000015 	stw	r16,0(sp)
  81a6dc:	2023883a 	mov	r17,r4
  81a6e0:	2825883a 	mov	r18,r5
  81a6e4:	dfc00315 	stw	ra,12(sp)
  81a6e8:	3021883a 	mov	r16,r6
  81a6ec:	3009883a 	mov	r4,r6
  81a6f0:	180b883a 	mov	r5,r3
  81a6f4:	30000926 	beq	r6,zero,81a71c <_setlocale_r+0x58>
  81a6f8:	081c2f80 	call	81c2f8 <strcmp>
  81a6fc:	8009883a 	mov	r4,r16
  81a700:	014020f4 	movhi	r5,131
  81a704:	29630f04 	addi	r5,r5,-29636
  81a708:	10000b1e 	bne	r2,zero,81a738 <_setlocale_r+0x74>
  81a70c:	8c000d15 	stw	r16,52(r17)
  81a710:	8c800c15 	stw	r18,48(r17)
  81a714:	00c020f4 	movhi	r3,131
  81a718:	18e3c404 	addi	r3,r3,-28912
  81a71c:	1805883a 	mov	r2,r3
  81a720:	dfc00317 	ldw	ra,12(sp)
  81a724:	dc800217 	ldw	r18,8(sp)
  81a728:	dc400117 	ldw	r17,4(sp)
  81a72c:	dc000017 	ldw	r16,0(sp)
  81a730:	dec00404 	addi	sp,sp,16
  81a734:	f800283a 	ret
  81a738:	081c2f80 	call	81c2f8 <strcmp>
  81a73c:	0007883a 	mov	r3,zero
  81a740:	103ff226 	beq	r2,zero,81a70c <_setlocale_r+0x48>
  81a744:	003ff506 	br	81a71c <_setlocale_r+0x58>

0081a748 <setlocale>:
  81a748:	018020f4 	movhi	r6,131
  81a74c:	31805b04 	addi	r6,r6,364
  81a750:	2007883a 	mov	r3,r4
  81a754:	31000017 	ldw	r4,0(r6)
  81a758:	280d883a 	mov	r6,r5
  81a75c:	180b883a 	mov	r5,r3
  81a760:	081a6c41 	jmpi	81a6c4 <_setlocale_r>

0081a764 <__smakebuf_r>:
  81a764:	2880030b 	ldhu	r2,12(r5)
  81a768:	deffed04 	addi	sp,sp,-76
  81a76c:	dc401015 	stw	r17,64(sp)
  81a770:	1080008c 	andi	r2,r2,2
  81a774:	dc000f15 	stw	r16,60(sp)
  81a778:	dfc01215 	stw	ra,72(sp)
  81a77c:	dc801115 	stw	r18,68(sp)
  81a780:	2821883a 	mov	r16,r5
  81a784:	2023883a 	mov	r17,r4
  81a788:	10000b26 	beq	r2,zero,81a7b8 <__smakebuf_r+0x54>
  81a78c:	28c010c4 	addi	r3,r5,67
  81a790:	00800044 	movi	r2,1
  81a794:	28800515 	stw	r2,20(r5)
  81a798:	28c00415 	stw	r3,16(r5)
  81a79c:	28c00015 	stw	r3,0(r5)
  81a7a0:	dfc01217 	ldw	ra,72(sp)
  81a7a4:	dc801117 	ldw	r18,68(sp)
  81a7a8:	dc401017 	ldw	r17,64(sp)
  81a7ac:	dc000f17 	ldw	r16,60(sp)
  81a7b0:	dec01304 	addi	sp,sp,76
  81a7b4:	f800283a 	ret
  81a7b8:	2940038f 	ldh	r5,14(r5)
  81a7bc:	28002116 	blt	r5,zero,81a844 <__smakebuf_r+0xe0>
  81a7c0:	d80d883a 	mov	r6,sp
  81a7c4:	081c6740 	call	81c674 <_fstat_r>
  81a7c8:	10001e16 	blt	r2,zero,81a844 <__smakebuf_r+0xe0>
  81a7cc:	d8800117 	ldw	r2,4(sp)
  81a7d0:	00e00014 	movui	r3,32768
  81a7d4:	113c000c 	andi	r4,r2,61440
  81a7d8:	20c03126 	beq	r4,r3,81a8a0 <__smakebuf_r+0x13c>
  81a7dc:	8080030b 	ldhu	r2,12(r16)
  81a7e0:	00c80004 	movi	r3,8192
  81a7e4:	10820014 	ori	r2,r2,2048
  81a7e8:	8080030d 	sth	r2,12(r16)
  81a7ec:	20c01e26 	beq	r4,r3,81a868 <__smakebuf_r+0x104>
  81a7f0:	04810004 	movi	r18,1024
  81a7f4:	8809883a 	mov	r4,r17
  81a7f8:	900b883a 	mov	r5,r18
  81a7fc:	0814f6c0 	call	814f6c <_malloc_r>
  81a800:	1009883a 	mov	r4,r2
  81a804:	10003126 	beq	r2,zero,81a8cc <__smakebuf_r+0x168>
  81a808:	80c0030b 	ldhu	r3,12(r16)
  81a80c:	008020b4 	movhi	r2,130
  81a810:	10a6b404 	addi	r2,r2,-25904
  81a814:	88800f15 	stw	r2,60(r17)
  81a818:	18c02014 	ori	r3,r3,128
  81a81c:	84800515 	stw	r18,20(r16)
  81a820:	80c0030d 	sth	r3,12(r16)
  81a824:	81000415 	stw	r4,16(r16)
  81a828:	81000015 	stw	r4,0(r16)
  81a82c:	dfc01217 	ldw	ra,72(sp)
  81a830:	dc801117 	ldw	r18,68(sp)
  81a834:	dc401017 	ldw	r17,64(sp)
  81a838:	dc000f17 	ldw	r16,60(sp)
  81a83c:	dec01304 	addi	sp,sp,76
  81a840:	f800283a 	ret
  81a844:	80c0030b 	ldhu	r3,12(r16)
  81a848:	1880200c 	andi	r2,r3,128
  81a84c:	10000426 	beq	r2,zero,81a860 <__smakebuf_r+0xfc>
  81a850:	04801004 	movi	r18,64
  81a854:	18820014 	ori	r2,r3,2048
  81a858:	8080030d 	sth	r2,12(r16)
  81a85c:	003fe506 	br	81a7f4 <__smakebuf_r+0x90>
  81a860:	04810004 	movi	r18,1024
  81a864:	003ffb06 	br	81a854 <__smakebuf_r+0xf0>
  81a868:	8140038f 	ldh	r5,14(r16)
  81a86c:	8809883a 	mov	r4,r17
  81a870:	081c6e80 	call	81c6e8 <_isatty_r>
  81a874:	103fde26 	beq	r2,zero,81a7f0 <__smakebuf_r+0x8c>
  81a878:	8080030b 	ldhu	r2,12(r16)
  81a87c:	80c010c4 	addi	r3,r16,67
  81a880:	04810004 	movi	r18,1024
  81a884:	10800054 	ori	r2,r2,1
  81a888:	8080030d 	sth	r2,12(r16)
  81a88c:	00800044 	movi	r2,1
  81a890:	80c00415 	stw	r3,16(r16)
  81a894:	80800515 	stw	r2,20(r16)
  81a898:	80c00015 	stw	r3,0(r16)
  81a89c:	003fd506 	br	81a7f4 <__smakebuf_r+0x90>
  81a8a0:	80c00a17 	ldw	r3,40(r16)
  81a8a4:	008020b4 	movhi	r2,130
  81a8a8:	10b06d04 	addi	r2,r2,-15948
  81a8ac:	18bfcb1e 	bne	r3,r2,81a7dc <__smakebuf_r+0x78>
  81a8b0:	8080030b 	ldhu	r2,12(r16)
  81a8b4:	00c10004 	movi	r3,1024
  81a8b8:	1825883a 	mov	r18,r3
  81a8bc:	10c4b03a 	or	r2,r2,r3
  81a8c0:	8080030d 	sth	r2,12(r16)
  81a8c4:	80c01315 	stw	r3,76(r16)
  81a8c8:	003fca06 	br	81a7f4 <__smakebuf_r+0x90>
  81a8cc:	8100030b 	ldhu	r4,12(r16)
  81a8d0:	2080800c 	andi	r2,r4,512
  81a8d4:	103fb21e 	bne	r2,zero,81a7a0 <__smakebuf_r+0x3c>
  81a8d8:	80c010c4 	addi	r3,r16,67
  81a8dc:	21000094 	ori	r4,r4,2
  81a8e0:	00800044 	movi	r2,1
  81a8e4:	80800515 	stw	r2,20(r16)
  81a8e8:	8100030d 	sth	r4,12(r16)
  81a8ec:	80c00415 	stw	r3,16(r16)
  81a8f0:	80c00015 	stw	r3,0(r16)
  81a8f4:	003faa06 	br	81a7a0 <__smakebuf_r+0x3c>

0081a8f8 <memchr>:
  81a8f8:	008000c4 	movi	r2,3
  81a8fc:	29403fcc 	andi	r5,r5,255
  81a900:	2007883a 	mov	r3,r4
  81a904:	1180022e 	bgeu	r2,r6,81a910 <memchr+0x18>
  81a908:	2084703a 	and	r2,r4,r2
  81a90c:	10000b26 	beq	r2,zero,81a93c <memchr+0x44>
  81a910:	313fffc4 	addi	r4,r6,-1
  81a914:	3000051e 	bne	r6,zero,81a92c <memchr+0x34>
  81a918:	00002c06 	br	81a9cc <memchr+0xd4>
  81a91c:	213fffc4 	addi	r4,r4,-1
  81a920:	00bfffc4 	movi	r2,-1
  81a924:	18c00044 	addi	r3,r3,1
  81a928:	20802826 	beq	r4,r2,81a9cc <memchr+0xd4>
  81a92c:	18800003 	ldbu	r2,0(r3)
  81a930:	28bffa1e 	bne	r5,r2,81a91c <memchr+0x24>
  81a934:	1805883a 	mov	r2,r3
  81a938:	f800283a 	ret
  81a93c:	0011883a 	mov	r8,zero
  81a940:	0007883a 	mov	r3,zero
  81a944:	01c00104 	movi	r7,4
  81a948:	4004923a 	slli	r2,r8,8
  81a94c:	18c00044 	addi	r3,r3,1
  81a950:	1151883a 	add	r8,r2,r5
  81a954:	19fffc1e 	bne	r3,r7,81a948 <memchr+0x50>
  81a958:	02bfbff4 	movhi	r10,65279
  81a95c:	52bfbfc4 	addi	r10,r10,-257
  81a960:	02602074 	movhi	r9,32897
  81a964:	4a602004 	addi	r9,r9,-32640
  81a968:	02c000c4 	movi	r11,3
  81a96c:	20800017 	ldw	r2,0(r4)
  81a970:	31bfff04 	addi	r6,r6,-4
  81a974:	200f883a 	mov	r7,r4
  81a978:	1204f03a 	xor	r2,r2,r8
  81a97c:	1287883a 	add	r3,r2,r10
  81a980:	1a46703a 	and	r3,r3,r9
  81a984:	0084303a 	nor	r2,zero,r2
  81a988:	10c4703a 	and	r2,r2,r3
  81a98c:	10000b26 	beq	r2,zero,81a9bc <memchr+0xc4>
  81a990:	20800003 	ldbu	r2,0(r4)
  81a994:	28800f26 	beq	r5,r2,81a9d4 <memchr+0xdc>
  81a998:	20800043 	ldbu	r2,1(r4)
  81a99c:	21c00044 	addi	r7,r4,1
  81a9a0:	28800c26 	beq	r5,r2,81a9d4 <memchr+0xdc>
  81a9a4:	20800083 	ldbu	r2,2(r4)
  81a9a8:	21c00084 	addi	r7,r4,2
  81a9ac:	28800926 	beq	r5,r2,81a9d4 <memchr+0xdc>
  81a9b0:	208000c3 	ldbu	r2,3(r4)
  81a9b4:	21c000c4 	addi	r7,r4,3
  81a9b8:	28800626 	beq	r5,r2,81a9d4 <memchr+0xdc>
  81a9bc:	21000104 	addi	r4,r4,4
  81a9c0:	59bfea36 	bltu	r11,r6,81a96c <memchr+0x74>
  81a9c4:	2007883a 	mov	r3,r4
  81a9c8:	003fd106 	br	81a910 <memchr+0x18>
  81a9cc:	0005883a 	mov	r2,zero
  81a9d0:	f800283a 	ret
  81a9d4:	3805883a 	mov	r2,r7
  81a9d8:	f800283a 	ret

0081a9dc <memmove>:
  81a9dc:	2807883a 	mov	r3,r5
  81a9e0:	2011883a 	mov	r8,r4
  81a9e4:	29000c2e 	bgeu	r5,r4,81aa18 <memmove+0x3c>
  81a9e8:	298f883a 	add	r7,r5,r6
  81a9ec:	21c00a2e 	bgeu	r4,r7,81aa18 <memmove+0x3c>
  81a9f0:	30000726 	beq	r6,zero,81aa10 <memmove+0x34>
  81a9f4:	2187883a 	add	r3,r4,r6
  81a9f8:	198dc83a 	sub	r6,r3,r6
  81a9fc:	39ffffc4 	addi	r7,r7,-1
  81aa00:	38800003 	ldbu	r2,0(r7)
  81aa04:	18ffffc4 	addi	r3,r3,-1
  81aa08:	18800005 	stb	r2,0(r3)
  81aa0c:	19bffb1e 	bne	r3,r6,81a9fc <memmove+0x20>
  81aa10:	2005883a 	mov	r2,r4
  81aa14:	f800283a 	ret
  81aa18:	01c003c4 	movi	r7,15
  81aa1c:	39800a36 	bltu	r7,r6,81aa48 <memmove+0x6c>
  81aa20:	303ffb26 	beq	r6,zero,81aa10 <memmove+0x34>
  81aa24:	400f883a 	mov	r7,r8
  81aa28:	320d883a 	add	r6,r6,r8
  81aa2c:	28800003 	ldbu	r2,0(r5)
  81aa30:	29400044 	addi	r5,r5,1
  81aa34:	38800005 	stb	r2,0(r7)
  81aa38:	39c00044 	addi	r7,r7,1
  81aa3c:	39bffb1e 	bne	r7,r6,81aa2c <memmove+0x50>
  81aa40:	2005883a 	mov	r2,r4
  81aa44:	f800283a 	ret
  81aa48:	1904b03a 	or	r2,r3,r4
  81aa4c:	108000cc 	andi	r2,r2,3
  81aa50:	103ff31e 	bne	r2,zero,81aa20 <memmove+0x44>
  81aa54:	3811883a 	mov	r8,r7
  81aa58:	180b883a 	mov	r5,r3
  81aa5c:	200f883a 	mov	r7,r4
  81aa60:	28c00017 	ldw	r3,0(r5)
  81aa64:	31bffc04 	addi	r6,r6,-16
  81aa68:	38c00015 	stw	r3,0(r7)
  81aa6c:	28800117 	ldw	r2,4(r5)
  81aa70:	38800115 	stw	r2,4(r7)
  81aa74:	28c00217 	ldw	r3,8(r5)
  81aa78:	38c00215 	stw	r3,8(r7)
  81aa7c:	28800317 	ldw	r2,12(r5)
  81aa80:	29400404 	addi	r5,r5,16
  81aa84:	38800315 	stw	r2,12(r7)
  81aa88:	39c00404 	addi	r7,r7,16
  81aa8c:	41bff436 	bltu	r8,r6,81aa60 <memmove+0x84>
  81aa90:	008000c4 	movi	r2,3
  81aa94:	1180072e 	bgeu	r2,r6,81aab4 <memmove+0xd8>
  81aa98:	1007883a 	mov	r3,r2
  81aa9c:	28800017 	ldw	r2,0(r5)
  81aaa0:	31bfff04 	addi	r6,r6,-4
  81aaa4:	29400104 	addi	r5,r5,4
  81aaa8:	38800015 	stw	r2,0(r7)
  81aaac:	39c00104 	addi	r7,r7,4
  81aab0:	19bffa36 	bltu	r3,r6,81aa9c <memmove+0xc0>
  81aab4:	3811883a 	mov	r8,r7
  81aab8:	003fd906 	br	81aa20 <memmove+0x44>

0081aabc <memset>:
  81aabc:	008000c4 	movi	r2,3
  81aac0:	29403fcc 	andi	r5,r5,255
  81aac4:	2007883a 	mov	r3,r4
  81aac8:	1180022e 	bgeu	r2,r6,81aad4 <memset+0x18>
  81aacc:	2084703a 	and	r2,r4,r2
  81aad0:	10000826 	beq	r2,zero,81aaf4 <memset+0x38>
  81aad4:	30000526 	beq	r6,zero,81aaec <memset+0x30>
  81aad8:	2805883a 	mov	r2,r5
  81aadc:	30cd883a 	add	r6,r6,r3
  81aae0:	18800005 	stb	r2,0(r3)
  81aae4:	18c00044 	addi	r3,r3,1
  81aae8:	19bffd1e 	bne	r3,r6,81aae0 <memset+0x24>
  81aaec:	2005883a 	mov	r2,r4
  81aaf0:	f800283a 	ret
  81aaf4:	2804923a 	slli	r2,r5,8
  81aaf8:	020003c4 	movi	r8,15
  81aafc:	200f883a 	mov	r7,r4
  81ab00:	2884b03a 	or	r2,r5,r2
  81ab04:	1006943a 	slli	r3,r2,16
  81ab08:	10c6b03a 	or	r3,r2,r3
  81ab0c:	41800a2e 	bgeu	r8,r6,81ab38 <memset+0x7c>
  81ab10:	4005883a 	mov	r2,r8
  81ab14:	31bffc04 	addi	r6,r6,-16
  81ab18:	38c00015 	stw	r3,0(r7)
  81ab1c:	38c00115 	stw	r3,4(r7)
  81ab20:	38c00215 	stw	r3,8(r7)
  81ab24:	38c00315 	stw	r3,12(r7)
  81ab28:	39c00404 	addi	r7,r7,16
  81ab2c:	11bff936 	bltu	r2,r6,81ab14 <memset+0x58>
  81ab30:	008000c4 	movi	r2,3
  81ab34:	1180052e 	bgeu	r2,r6,81ab4c <memset+0x90>
  81ab38:	31bfff04 	addi	r6,r6,-4
  81ab3c:	008000c4 	movi	r2,3
  81ab40:	38c00015 	stw	r3,0(r7)
  81ab44:	39c00104 	addi	r7,r7,4
  81ab48:	11bffb36 	bltu	r2,r6,81ab38 <memset+0x7c>
  81ab4c:	3807883a 	mov	r3,r7
  81ab50:	003fe006 	br	81aad4 <memset+0x18>

0081ab54 <_Bfree>:
  81ab54:	28000826 	beq	r5,zero,81ab78 <_Bfree+0x24>
  81ab58:	28800117 	ldw	r2,4(r5)
  81ab5c:	21001317 	ldw	r4,76(r4)
  81ab60:	1085883a 	add	r2,r2,r2
  81ab64:	1085883a 	add	r2,r2,r2
  81ab68:	1105883a 	add	r2,r2,r4
  81ab6c:	10c00017 	ldw	r3,0(r2)
  81ab70:	28c00015 	stw	r3,0(r5)
  81ab74:	11400015 	stw	r5,0(r2)
  81ab78:	f800283a 	ret

0081ab7c <__hi0bits>:
  81ab7c:	20bfffec 	andhi	r2,r4,65535
  81ab80:	10001426 	beq	r2,zero,81abd4 <__hi0bits+0x58>
  81ab84:	0007883a 	mov	r3,zero
  81ab88:	20bfc02c 	andhi	r2,r4,65280
  81ab8c:	1000021e 	bne	r2,zero,81ab98 <__hi0bits+0x1c>
  81ab90:	2008923a 	slli	r4,r4,8
  81ab94:	18c00204 	addi	r3,r3,8
  81ab98:	20bc002c 	andhi	r2,r4,61440
  81ab9c:	1000021e 	bne	r2,zero,81aba8 <__hi0bits+0x2c>
  81aba0:	2008913a 	slli	r4,r4,4
  81aba4:	18c00104 	addi	r3,r3,4
  81aba8:	20b0002c 	andhi	r2,r4,49152
  81abac:	1000031e 	bne	r2,zero,81abbc <__hi0bits+0x40>
  81abb0:	2105883a 	add	r2,r4,r4
  81abb4:	18c00084 	addi	r3,r3,2
  81abb8:	1089883a 	add	r4,r2,r2
  81abbc:	20000316 	blt	r4,zero,81abcc <__hi0bits+0x50>
  81abc0:	2090002c 	andhi	r2,r4,16384
  81abc4:	10000626 	beq	r2,zero,81abe0 <__hi0bits+0x64>
  81abc8:	18c00044 	addi	r3,r3,1
  81abcc:	1805883a 	mov	r2,r3
  81abd0:	f800283a 	ret
  81abd4:	2008943a 	slli	r4,r4,16
  81abd8:	00c00404 	movi	r3,16
  81abdc:	003fea06 	br	81ab88 <__hi0bits+0xc>
  81abe0:	00c00804 	movi	r3,32
  81abe4:	1805883a 	mov	r2,r3
  81abe8:	f800283a 	ret

0081abec <__lo0bits>:
  81abec:	20c00017 	ldw	r3,0(r4)
  81abf0:	188001cc 	andi	r2,r3,7
  81abf4:	10000a26 	beq	r2,zero,81ac20 <__lo0bits+0x34>
  81abf8:	1880004c 	andi	r2,r3,1
  81abfc:	1005003a 	cmpeq	r2,r2,zero
  81ac00:	10002126 	beq	r2,zero,81ac88 <__lo0bits+0x9c>
  81ac04:	1880008c 	andi	r2,r3,2
  81ac08:	1000251e 	bne	r2,zero,81aca0 <__lo0bits+0xb4>
  81ac0c:	1804d0ba 	srli	r2,r3,2
  81ac10:	01400084 	movi	r5,2
  81ac14:	20800015 	stw	r2,0(r4)
  81ac18:	2805883a 	mov	r2,r5
  81ac1c:	f800283a 	ret
  81ac20:	18bfffcc 	andi	r2,r3,65535
  81ac24:	10001526 	beq	r2,zero,81ac7c <__lo0bits+0x90>
  81ac28:	000b883a 	mov	r5,zero
  81ac2c:	18803fcc 	andi	r2,r3,255
  81ac30:	1000021e 	bne	r2,zero,81ac3c <__lo0bits+0x50>
  81ac34:	1806d23a 	srli	r3,r3,8
  81ac38:	29400204 	addi	r5,r5,8
  81ac3c:	188003cc 	andi	r2,r3,15
  81ac40:	1000021e 	bne	r2,zero,81ac4c <__lo0bits+0x60>
  81ac44:	1806d13a 	srli	r3,r3,4
  81ac48:	29400104 	addi	r5,r5,4
  81ac4c:	188000cc 	andi	r2,r3,3
  81ac50:	1000021e 	bne	r2,zero,81ac5c <__lo0bits+0x70>
  81ac54:	1806d0ba 	srli	r3,r3,2
  81ac58:	29400084 	addi	r5,r5,2
  81ac5c:	1880004c 	andi	r2,r3,1
  81ac60:	1000031e 	bne	r2,zero,81ac70 <__lo0bits+0x84>
  81ac64:	1806d07a 	srli	r3,r3,1
  81ac68:	18000a26 	beq	r3,zero,81ac94 <__lo0bits+0xa8>
  81ac6c:	29400044 	addi	r5,r5,1
  81ac70:	2805883a 	mov	r2,r5
  81ac74:	20c00015 	stw	r3,0(r4)
  81ac78:	f800283a 	ret
  81ac7c:	1806d43a 	srli	r3,r3,16
  81ac80:	01400404 	movi	r5,16
  81ac84:	003fe906 	br	81ac2c <__lo0bits+0x40>
  81ac88:	000b883a 	mov	r5,zero
  81ac8c:	2805883a 	mov	r2,r5
  81ac90:	f800283a 	ret
  81ac94:	01400804 	movi	r5,32
  81ac98:	2805883a 	mov	r2,r5
  81ac9c:	f800283a 	ret
  81aca0:	1804d07a 	srli	r2,r3,1
  81aca4:	01400044 	movi	r5,1
  81aca8:	20800015 	stw	r2,0(r4)
  81acac:	003fda06 	br	81ac18 <__lo0bits+0x2c>

0081acb0 <__mcmp>:
  81acb0:	20800417 	ldw	r2,16(r4)
  81acb4:	28c00417 	ldw	r3,16(r5)
  81acb8:	10cfc83a 	sub	r7,r2,r3
  81acbc:	38000c1e 	bne	r7,zero,81acf0 <__mcmp+0x40>
  81acc0:	18c5883a 	add	r2,r3,r3
  81acc4:	1085883a 	add	r2,r2,r2
  81acc8:	10c00504 	addi	r3,r2,20
  81accc:	21000504 	addi	r4,r4,20
  81acd0:	28cb883a 	add	r5,r5,r3
  81acd4:	2085883a 	add	r2,r4,r2
  81acd8:	10bfff04 	addi	r2,r2,-4
  81acdc:	297fff04 	addi	r5,r5,-4
  81ace0:	11800017 	ldw	r6,0(r2)
  81ace4:	28c00017 	ldw	r3,0(r5)
  81ace8:	30c0031e 	bne	r6,r3,81acf8 <__mcmp+0x48>
  81acec:	20bffa36 	bltu	r4,r2,81acd8 <__mcmp+0x28>
  81acf0:	3805883a 	mov	r2,r7
  81acf4:	f800283a 	ret
  81acf8:	30c00336 	bltu	r6,r3,81ad08 <__mcmp+0x58>
  81acfc:	01c00044 	movi	r7,1
  81ad00:	3805883a 	mov	r2,r7
  81ad04:	f800283a 	ret
  81ad08:	01ffffc4 	movi	r7,-1
  81ad0c:	003ff806 	br	81acf0 <__mcmp+0x40>

0081ad10 <__ulp>:
  81ad10:	295ffc2c 	andhi	r5,r5,32752
  81ad14:	013f3034 	movhi	r4,64704
  81ad18:	290b883a 	add	r5,r5,r4
  81ad1c:	0145c83a 	sub	r2,zero,r5
  81ad20:	1007d53a 	srai	r3,r2,20
  81ad24:	000d883a 	mov	r6,zero
  81ad28:	0140040e 	bge	zero,r5,81ad3c <__ulp+0x2c>
  81ad2c:	280f883a 	mov	r7,r5
  81ad30:	3807883a 	mov	r3,r7
  81ad34:	3005883a 	mov	r2,r6
  81ad38:	f800283a 	ret
  81ad3c:	008004c4 	movi	r2,19
  81ad40:	193ffb04 	addi	r4,r3,-20
  81ad44:	10c00c0e 	bge	r2,r3,81ad78 <__ulp+0x68>
  81ad48:	008007c4 	movi	r2,31
  81ad4c:	1107c83a 	sub	r3,r2,r4
  81ad50:	00800784 	movi	r2,30
  81ad54:	01400044 	movi	r5,1
  81ad58:	11000216 	blt	r2,r4,81ad64 <__ulp+0x54>
  81ad5c:	00800044 	movi	r2,1
  81ad60:	10ca983a 	sll	r5,r2,r3
  81ad64:	000f883a 	mov	r7,zero
  81ad68:	280d883a 	mov	r6,r5
  81ad6c:	3807883a 	mov	r3,r7
  81ad70:	3005883a 	mov	r2,r6
  81ad74:	f800283a 	ret
  81ad78:	00800234 	movhi	r2,8
  81ad7c:	10cfd83a 	sra	r7,r2,r3
  81ad80:	000d883a 	mov	r6,zero
  81ad84:	3005883a 	mov	r2,r6
  81ad88:	3807883a 	mov	r3,r7
  81ad8c:	f800283a 	ret

0081ad90 <__b2d>:
  81ad90:	20800417 	ldw	r2,16(r4)
  81ad94:	defff904 	addi	sp,sp,-28
  81ad98:	dd000415 	stw	r20,16(sp)
  81ad9c:	1085883a 	add	r2,r2,r2
  81ada0:	25000504 	addi	r20,r4,20
  81ada4:	1085883a 	add	r2,r2,r2
  81ada8:	dc000015 	stw	r16,0(sp)
  81adac:	a0a1883a 	add	r16,r20,r2
  81adb0:	dd400515 	stw	r21,20(sp)
  81adb4:	857fff17 	ldw	r21,-4(r16)
  81adb8:	dc400115 	stw	r17,4(sp)
  81adbc:	dfc00615 	stw	ra,24(sp)
  81adc0:	a809883a 	mov	r4,r21
  81adc4:	2823883a 	mov	r17,r5
  81adc8:	dcc00315 	stw	r19,12(sp)
  81adcc:	dc800215 	stw	r18,8(sp)
  81add0:	081ab7c0 	call	81ab7c <__hi0bits>
  81add4:	100b883a 	mov	r5,r2
  81add8:	00800804 	movi	r2,32
  81addc:	1145c83a 	sub	r2,r2,r5
  81ade0:	88800015 	stw	r2,0(r17)
  81ade4:	00800284 	movi	r2,10
  81ade8:	80ffff04 	addi	r3,r16,-4
  81adec:	11401416 	blt	r2,r5,81ae40 <__b2d+0xb0>
  81adf0:	008002c4 	movi	r2,11
  81adf4:	1149c83a 	sub	r4,r2,r5
  81adf8:	a0c02736 	bltu	r20,r3,81ae98 <__b2d+0x108>
  81adfc:	000d883a 	mov	r6,zero
  81ae00:	28800544 	addi	r2,r5,21
  81ae04:	a906d83a 	srl	r3,r21,r4
  81ae08:	a884983a 	sll	r2,r21,r2
  81ae0c:	1ccffc34 	orhi	r19,r3,16368
  81ae10:	11a4b03a 	or	r18,r2,r6
  81ae14:	9005883a 	mov	r2,r18
  81ae18:	9807883a 	mov	r3,r19
  81ae1c:	dfc00617 	ldw	ra,24(sp)
  81ae20:	dd400517 	ldw	r21,20(sp)
  81ae24:	dd000417 	ldw	r20,16(sp)
  81ae28:	dcc00317 	ldw	r19,12(sp)
  81ae2c:	dc800217 	ldw	r18,8(sp)
  81ae30:	dc400117 	ldw	r17,4(sp)
  81ae34:	dc000017 	ldw	r16,0(sp)
  81ae38:	dec00704 	addi	sp,sp,28
  81ae3c:	f800283a 	ret
  81ae40:	a0c00e36 	bltu	r20,r3,81ae7c <__b2d+0xec>
  81ae44:	293ffd44 	addi	r4,r5,-11
  81ae48:	000d883a 	mov	r6,zero
  81ae4c:	20000f26 	beq	r4,zero,81ae8c <__b2d+0xfc>
  81ae50:	00800804 	movi	r2,32
  81ae54:	110bc83a 	sub	r5,r2,r4
  81ae58:	a0c01236 	bltu	r20,r3,81aea4 <__b2d+0x114>
  81ae5c:	000f883a 	mov	r7,zero
  81ae60:	a904983a 	sll	r2,r21,r4
  81ae64:	3146d83a 	srl	r3,r6,r5
  81ae68:	3108983a 	sll	r4,r6,r4
  81ae6c:	108ffc34 	orhi	r2,r2,16368
  81ae70:	18a6b03a 	or	r19,r3,r2
  81ae74:	3924b03a 	or	r18,r7,r4
  81ae78:	003fe606 	br	81ae14 <__b2d+0x84>
  81ae7c:	293ffd44 	addi	r4,r5,-11
  81ae80:	81bffe17 	ldw	r6,-8(r16)
  81ae84:	80fffe04 	addi	r3,r16,-8
  81ae88:	203ff11e 	bne	r4,zero,81ae50 <__b2d+0xc0>
  81ae8c:	accffc34 	orhi	r19,r21,16368
  81ae90:	3025883a 	mov	r18,r6
  81ae94:	003fdf06 	br	81ae14 <__b2d+0x84>
  81ae98:	18bfff17 	ldw	r2,-4(r3)
  81ae9c:	110cd83a 	srl	r6,r2,r4
  81aea0:	003fd706 	br	81ae00 <__b2d+0x70>
  81aea4:	18bfff17 	ldw	r2,-4(r3)
  81aea8:	114ed83a 	srl	r7,r2,r5
  81aeac:	003fec06 	br	81ae60 <__b2d+0xd0>

0081aeb0 <__ratio>:
  81aeb0:	defff904 	addi	sp,sp,-28
  81aeb4:	dc400215 	stw	r17,8(sp)
  81aeb8:	2823883a 	mov	r17,r5
  81aebc:	d80b883a 	mov	r5,sp
  81aec0:	dfc00615 	stw	ra,24(sp)
  81aec4:	dd000515 	stw	r20,20(sp)
  81aec8:	dcc00415 	stw	r19,16(sp)
  81aecc:	dc800315 	stw	r18,12(sp)
  81aed0:	2025883a 	mov	r18,r4
  81aed4:	081ad900 	call	81ad90 <__b2d>
  81aed8:	8809883a 	mov	r4,r17
  81aedc:	d9400104 	addi	r5,sp,4
  81aee0:	1027883a 	mov	r19,r2
  81aee4:	1829883a 	mov	r20,r3
  81aee8:	081ad900 	call	81ad90 <__b2d>
  81aeec:	89000417 	ldw	r4,16(r17)
  81aef0:	91c00417 	ldw	r7,16(r18)
  81aef4:	d9800117 	ldw	r6,4(sp)
  81aef8:	180b883a 	mov	r5,r3
  81aefc:	390fc83a 	sub	r7,r7,r4
  81af00:	1009883a 	mov	r4,r2
  81af04:	d8800017 	ldw	r2,0(sp)
  81af08:	380e917a 	slli	r7,r7,5
  81af0c:	2011883a 	mov	r8,r4
  81af10:	1185c83a 	sub	r2,r2,r6
  81af14:	11c5883a 	add	r2,r2,r7
  81af18:	1006953a 	slli	r3,r2,20
  81af1c:	2813883a 	mov	r9,r5
  81af20:	00800d0e 	bge	zero,r2,81af58 <__ratio+0xa8>
  81af24:	1d29883a 	add	r20,r3,r20
  81af28:	a00b883a 	mov	r5,r20
  81af2c:	480f883a 	mov	r7,r9
  81af30:	9809883a 	mov	r4,r19
  81af34:	400d883a 	mov	r6,r8
  81af38:	08140ac0 	call	8140ac <__divdf3>
  81af3c:	dfc00617 	ldw	ra,24(sp)
  81af40:	dd000517 	ldw	r20,20(sp)
  81af44:	dcc00417 	ldw	r19,16(sp)
  81af48:	dc800317 	ldw	r18,12(sp)
  81af4c:	dc400217 	ldw	r17,8(sp)
  81af50:	dec00704 	addi	sp,sp,28
  81af54:	f800283a 	ret
  81af58:	28d3c83a 	sub	r9,r5,r3
  81af5c:	003ff206 	br	81af28 <__ratio+0x78>

0081af60 <_mprec_log10>:
  81af60:	defffe04 	addi	sp,sp,-8
  81af64:	008005c4 	movi	r2,23
  81af68:	dc000015 	stw	r16,0(sp)
  81af6c:	dfc00115 	stw	ra,4(sp)
  81af70:	2021883a 	mov	r16,r4
  81af74:	11000c16 	blt	r2,r4,81afa8 <_mprec_log10+0x48>
  81af78:	200490fa 	slli	r2,r4,3
  81af7c:	00c020f4 	movhi	r3,131
  81af80:	18e3d504 	addi	r3,r3,-28844
  81af84:	10c5883a 	add	r2,r2,r3
  81af88:	12400117 	ldw	r9,4(r2)
  81af8c:	12000017 	ldw	r8,0(r2)
  81af90:	4807883a 	mov	r3,r9
  81af94:	4005883a 	mov	r2,r8
  81af98:	dfc00117 	ldw	ra,4(sp)
  81af9c:	dc000017 	ldw	r16,0(sp)
  81afa0:	dec00204 	addi	sp,sp,8
  81afa4:	f800283a 	ret
  81afa8:	0011883a 	mov	r8,zero
  81afac:	024ffc34 	movhi	r9,16368
  81afb0:	0005883a 	mov	r2,zero
  81afb4:	00d00934 	movhi	r3,16420
  81afb8:	480b883a 	mov	r5,r9
  81afbc:	4009883a 	mov	r4,r8
  81afc0:	180f883a 	mov	r7,r3
  81afc4:	100d883a 	mov	r6,r2
  81afc8:	0813ce80 	call	813ce8 <__muldf3>
  81afcc:	843fffc4 	addi	r16,r16,-1
  81afd0:	1011883a 	mov	r8,r2
  81afd4:	1813883a 	mov	r9,r3
  81afd8:	803ff51e 	bne	r16,zero,81afb0 <_mprec_log10+0x50>
  81afdc:	4005883a 	mov	r2,r8
  81afe0:	4807883a 	mov	r3,r9
  81afe4:	dfc00117 	ldw	ra,4(sp)
  81afe8:	dc000017 	ldw	r16,0(sp)
  81afec:	dec00204 	addi	sp,sp,8
  81aff0:	f800283a 	ret

0081aff4 <__copybits>:
  81aff4:	297fffc4 	addi	r5,r5,-1
  81aff8:	30800417 	ldw	r2,16(r6)
  81affc:	280bd17a 	srai	r5,r5,5
  81b000:	31800504 	addi	r6,r6,20
  81b004:	1085883a 	add	r2,r2,r2
  81b008:	294b883a 	add	r5,r5,r5
  81b00c:	294b883a 	add	r5,r5,r5
  81b010:	1085883a 	add	r2,r2,r2
  81b014:	290b883a 	add	r5,r5,r4
  81b018:	3087883a 	add	r3,r6,r2
  81b01c:	29400104 	addi	r5,r5,4
  81b020:	30c0052e 	bgeu	r6,r3,81b038 <__copybits+0x44>
  81b024:	30800017 	ldw	r2,0(r6)
  81b028:	31800104 	addi	r6,r6,4
  81b02c:	20800015 	stw	r2,0(r4)
  81b030:	21000104 	addi	r4,r4,4
  81b034:	30fffb36 	bltu	r6,r3,81b024 <__copybits+0x30>
  81b038:	2140032e 	bgeu	r4,r5,81b048 <__copybits+0x54>
  81b03c:	20000015 	stw	zero,0(r4)
  81b040:	21000104 	addi	r4,r4,4
  81b044:	217ffd36 	bltu	r4,r5,81b03c <__copybits+0x48>
  81b048:	f800283a 	ret

0081b04c <__any_on>:
  81b04c:	20800417 	ldw	r2,16(r4)
  81b050:	2807d17a 	srai	r3,r5,5
  81b054:	21000504 	addi	r4,r4,20
  81b058:	10c00d0e 	bge	r2,r3,81b090 <__any_on+0x44>
  81b05c:	1085883a 	add	r2,r2,r2
  81b060:	1085883a 	add	r2,r2,r2
  81b064:	208d883a 	add	r6,r4,r2
  81b068:	2180182e 	bgeu	r4,r6,81b0cc <__any_on+0x80>
  81b06c:	30bfff17 	ldw	r2,-4(r6)
  81b070:	30ffff04 	addi	r3,r6,-4
  81b074:	1000041e 	bne	r2,zero,81b088 <__any_on+0x3c>
  81b078:	20c0142e 	bgeu	r4,r3,81b0cc <__any_on+0x80>
  81b07c:	18ffff04 	addi	r3,r3,-4
  81b080:	18800017 	ldw	r2,0(r3)
  81b084:	103ffc26 	beq	r2,zero,81b078 <__any_on+0x2c>
  81b088:	00800044 	movi	r2,1
  81b08c:	f800283a 	ret
  81b090:	18800a0e 	bge	r3,r2,81b0bc <__any_on+0x70>
  81b094:	294007cc 	andi	r5,r5,31
  81b098:	28000826 	beq	r5,zero,81b0bc <__any_on+0x70>
  81b09c:	18c5883a 	add	r2,r3,r3
  81b0a0:	1085883a 	add	r2,r2,r2
  81b0a4:	208d883a 	add	r6,r4,r2
  81b0a8:	30c00017 	ldw	r3,0(r6)
  81b0ac:	1944d83a 	srl	r2,r3,r5
  81b0b0:	1144983a 	sll	r2,r2,r5
  81b0b4:	18bff41e 	bne	r3,r2,81b088 <__any_on+0x3c>
  81b0b8:	003feb06 	br	81b068 <__any_on+0x1c>
  81b0bc:	18c5883a 	add	r2,r3,r3
  81b0c0:	1085883a 	add	r2,r2,r2
  81b0c4:	208d883a 	add	r6,r4,r2
  81b0c8:	003fe706 	br	81b068 <__any_on+0x1c>
  81b0cc:	0005883a 	mov	r2,zero
  81b0d0:	f800283a 	ret

0081b0d4 <_Balloc>:
  81b0d4:	20c01317 	ldw	r3,76(r4)
  81b0d8:	defffb04 	addi	sp,sp,-20
  81b0dc:	dcc00315 	stw	r19,12(sp)
  81b0e0:	dc800215 	stw	r18,8(sp)
  81b0e4:	dfc00415 	stw	ra,16(sp)
  81b0e8:	2825883a 	mov	r18,r5
  81b0ec:	dc400115 	stw	r17,4(sp)
  81b0f0:	dc000015 	stw	r16,0(sp)
  81b0f4:	2027883a 	mov	r19,r4
  81b0f8:	01800404 	movi	r6,16
  81b0fc:	01400104 	movi	r5,4
  81b100:	18001726 	beq	r3,zero,81b160 <_Balloc+0x8c>
  81b104:	01400044 	movi	r5,1
  81b108:	9485883a 	add	r2,r18,r18
  81b10c:	2ca2983a 	sll	r17,r5,r18
  81b110:	1085883a 	add	r2,r2,r2
  81b114:	10c7883a 	add	r3,r2,r3
  81b118:	1c000017 	ldw	r16,0(r3)
  81b11c:	8c4d883a 	add	r6,r17,r17
  81b120:	318d883a 	add	r6,r6,r6
  81b124:	9809883a 	mov	r4,r19
  81b128:	31800504 	addi	r6,r6,20
  81b12c:	80001226 	beq	r16,zero,81b178 <_Balloc+0xa4>
  81b130:	80800017 	ldw	r2,0(r16)
  81b134:	18800015 	stw	r2,0(r3)
  81b138:	80000415 	stw	zero,16(r16)
  81b13c:	80000315 	stw	zero,12(r16)
  81b140:	8005883a 	mov	r2,r16
  81b144:	dfc00417 	ldw	ra,16(sp)
  81b148:	dcc00317 	ldw	r19,12(sp)
  81b14c:	dc800217 	ldw	r18,8(sp)
  81b150:	dc400117 	ldw	r17,4(sp)
  81b154:	dc000017 	ldw	r16,0(sp)
  81b158:	dec00504 	addi	sp,sp,20
  81b15c:	f800283a 	ret
  81b160:	081c42c0 	call	81c42c <_calloc_r>
  81b164:	1007883a 	mov	r3,r2
  81b168:	0021883a 	mov	r16,zero
  81b16c:	98801315 	stw	r2,76(r19)
  81b170:	103fe41e 	bne	r2,zero,81b104 <_Balloc+0x30>
  81b174:	003ff206 	br	81b140 <_Balloc+0x6c>
  81b178:	081c42c0 	call	81c42c <_calloc_r>
  81b17c:	103ff026 	beq	r2,zero,81b140 <_Balloc+0x6c>
  81b180:	1021883a 	mov	r16,r2
  81b184:	14800115 	stw	r18,4(r2)
  81b188:	14400215 	stw	r17,8(r2)
  81b18c:	003fea06 	br	81b138 <_Balloc+0x64>

0081b190 <__d2b>:
  81b190:	defff504 	addi	sp,sp,-44
  81b194:	dcc00515 	stw	r19,20(sp)
  81b198:	04c00044 	movi	r19,1
  81b19c:	dc000215 	stw	r16,8(sp)
  81b1a0:	2821883a 	mov	r16,r5
  81b1a4:	980b883a 	mov	r5,r19
  81b1a8:	ddc00915 	stw	r23,36(sp)
  81b1ac:	dd800815 	stw	r22,32(sp)
  81b1b0:	dd400715 	stw	r21,28(sp)
  81b1b4:	dd000615 	stw	r20,24(sp)
  81b1b8:	dc800415 	stw	r18,16(sp)
  81b1bc:	dc400315 	stw	r17,12(sp)
  81b1c0:	dfc00a15 	stw	ra,40(sp)
  81b1c4:	3023883a 	mov	r17,r6
  81b1c8:	382d883a 	mov	r22,r7
  81b1cc:	ddc00b17 	ldw	r23,44(sp)
  81b1d0:	081b0d40 	call	81b0d4 <_Balloc>
  81b1d4:	1025883a 	mov	r18,r2
  81b1d8:	00a00034 	movhi	r2,32768
  81b1dc:	10bfffc4 	addi	r2,r2,-1
  81b1e0:	8888703a 	and	r4,r17,r2
  81b1e4:	202ad53a 	srli	r21,r4,20
  81b1e8:	00800434 	movhi	r2,16
  81b1ec:	10bfffc4 	addi	r2,r2,-1
  81b1f0:	8886703a 	and	r3,r17,r2
  81b1f4:	a829003a 	cmpeq	r20,r21,zero
  81b1f8:	800b883a 	mov	r5,r16
  81b1fc:	d8c00115 	stw	r3,4(sp)
  81b200:	94000504 	addi	r16,r18,20
  81b204:	a000021e 	bne	r20,zero,81b210 <__d2b+0x80>
  81b208:	18c00434 	orhi	r3,r3,16
  81b20c:	d8c00115 	stw	r3,4(sp)
  81b210:	28002726 	beq	r5,zero,81b2b0 <__d2b+0x120>
  81b214:	d809883a 	mov	r4,sp
  81b218:	d9400015 	stw	r5,0(sp)
  81b21c:	081abec0 	call	81abec <__lo0bits>
  81b220:	100d883a 	mov	r6,r2
  81b224:	10003526 	beq	r2,zero,81b2fc <__d2b+0x16c>
  81b228:	d8c00117 	ldw	r3,4(sp)
  81b22c:	00800804 	movi	r2,32
  81b230:	1185c83a 	sub	r2,r2,r6
  81b234:	d9000017 	ldw	r4,0(sp)
  81b238:	1886983a 	sll	r3,r3,r2
  81b23c:	1906b03a 	or	r3,r3,r4
  81b240:	90c00515 	stw	r3,20(r18)
  81b244:	d8c00117 	ldw	r3,4(sp)
  81b248:	1986d83a 	srl	r3,r3,r6
  81b24c:	d8c00115 	stw	r3,4(sp)
  81b250:	180b003a 	cmpeq	r5,r3,zero
  81b254:	00800084 	movi	r2,2
  81b258:	114bc83a 	sub	r5,r2,r5
  81b25c:	80c00115 	stw	r3,4(r16)
  81b260:	91400415 	stw	r5,16(r18)
  81b264:	a0001a1e 	bne	r20,zero,81b2d0 <__d2b+0x140>
  81b268:	3545883a 	add	r2,r6,r21
  81b26c:	10bef344 	addi	r2,r2,-1075
  81b270:	00c00d44 	movi	r3,53
  81b274:	b0800015 	stw	r2,0(r22)
  81b278:	1987c83a 	sub	r3,r3,r6
  81b27c:	b8c00015 	stw	r3,0(r23)
  81b280:	9005883a 	mov	r2,r18
  81b284:	dfc00a17 	ldw	ra,40(sp)
  81b288:	ddc00917 	ldw	r23,36(sp)
  81b28c:	dd800817 	ldw	r22,32(sp)
  81b290:	dd400717 	ldw	r21,28(sp)
  81b294:	dd000617 	ldw	r20,24(sp)
  81b298:	dcc00517 	ldw	r19,20(sp)
  81b29c:	dc800417 	ldw	r18,16(sp)
  81b2a0:	dc400317 	ldw	r17,12(sp)
  81b2a4:	dc000217 	ldw	r16,8(sp)
  81b2a8:	dec00b04 	addi	sp,sp,44
  81b2ac:	f800283a 	ret
  81b2b0:	d9000104 	addi	r4,sp,4
  81b2b4:	081abec0 	call	81abec <__lo0bits>
  81b2b8:	11800804 	addi	r6,r2,32
  81b2bc:	d8800117 	ldw	r2,4(sp)
  81b2c0:	94c00415 	stw	r19,16(r18)
  81b2c4:	980b883a 	mov	r5,r19
  81b2c8:	90800515 	stw	r2,20(r18)
  81b2cc:	a03fe626 	beq	r20,zero,81b268 <__d2b+0xd8>
  81b2d0:	2945883a 	add	r2,r5,r5
  81b2d4:	1085883a 	add	r2,r2,r2
  81b2d8:	1405883a 	add	r2,r2,r16
  81b2dc:	113fff17 	ldw	r4,-4(r2)
  81b2e0:	30fef384 	addi	r3,r6,-1074
  81b2e4:	2820917a 	slli	r16,r5,5
  81b2e8:	b0c00015 	stw	r3,0(r22)
  81b2ec:	081ab7c0 	call	81ab7c <__hi0bits>
  81b2f0:	80a1c83a 	sub	r16,r16,r2
  81b2f4:	bc000015 	stw	r16,0(r23)
  81b2f8:	003fe106 	br	81b280 <__d2b+0xf0>
  81b2fc:	d8800017 	ldw	r2,0(sp)
  81b300:	90800515 	stw	r2,20(r18)
  81b304:	d8c00117 	ldw	r3,4(sp)
  81b308:	003fd106 	br	81b250 <__d2b+0xc0>

0081b30c <__mdiff>:
  81b30c:	defffb04 	addi	sp,sp,-20
  81b310:	dc000015 	stw	r16,0(sp)
  81b314:	2821883a 	mov	r16,r5
  81b318:	dc800215 	stw	r18,8(sp)
  81b31c:	300b883a 	mov	r5,r6
  81b320:	2025883a 	mov	r18,r4
  81b324:	8009883a 	mov	r4,r16
  81b328:	dc400115 	stw	r17,4(sp)
  81b32c:	dfc00415 	stw	ra,16(sp)
  81b330:	dcc00315 	stw	r19,12(sp)
  81b334:	3023883a 	mov	r17,r6
  81b338:	081acb00 	call	81acb0 <__mcmp>
  81b33c:	10004226 	beq	r2,zero,81b448 <__mdiff+0x13c>
  81b340:	10005016 	blt	r2,zero,81b484 <__mdiff+0x178>
  81b344:	0027883a 	mov	r19,zero
  81b348:	81400117 	ldw	r5,4(r16)
  81b34c:	9009883a 	mov	r4,r18
  81b350:	081b0d40 	call	81b0d4 <_Balloc>
  81b354:	1019883a 	mov	r12,r2
  81b358:	82800417 	ldw	r10,16(r16)
  81b35c:	88800417 	ldw	r2,16(r17)
  81b360:	81800504 	addi	r6,r16,20
  81b364:	5287883a 	add	r3,r10,r10
  81b368:	1085883a 	add	r2,r2,r2
  81b36c:	18c7883a 	add	r3,r3,r3
  81b370:	1085883a 	add	r2,r2,r2
  81b374:	8a000504 	addi	r8,r17,20
  81b378:	64c00315 	stw	r19,12(r12)
  81b37c:	30db883a 	add	r13,r6,r3
  81b380:	4097883a 	add	r11,r8,r2
  81b384:	61c00504 	addi	r7,r12,20
  81b388:	0013883a 	mov	r9,zero
  81b38c:	31000017 	ldw	r4,0(r6)
  81b390:	41400017 	ldw	r5,0(r8)
  81b394:	42000104 	addi	r8,r8,4
  81b398:	20bfffcc 	andi	r2,r4,65535
  81b39c:	28ffffcc 	andi	r3,r5,65535
  81b3a0:	10c5c83a 	sub	r2,r2,r3
  81b3a4:	1245883a 	add	r2,r2,r9
  81b3a8:	2008d43a 	srli	r4,r4,16
  81b3ac:	280ad43a 	srli	r5,r5,16
  81b3b0:	1007d43a 	srai	r3,r2,16
  81b3b4:	3880000d 	sth	r2,0(r7)
  81b3b8:	2149c83a 	sub	r4,r4,r5
  81b3bc:	20c9883a 	add	r4,r4,r3
  81b3c0:	3900008d 	sth	r4,2(r7)
  81b3c4:	31800104 	addi	r6,r6,4
  81b3c8:	39c00104 	addi	r7,r7,4
  81b3cc:	2013d43a 	srai	r9,r4,16
  81b3d0:	42ffee36 	bltu	r8,r11,81b38c <__mdiff+0x80>
  81b3d4:	33400c2e 	bgeu	r6,r13,81b408 <__mdiff+0xfc>
  81b3d8:	30800017 	ldw	r2,0(r6)
  81b3dc:	31800104 	addi	r6,r6,4
  81b3e0:	10ffffcc 	andi	r3,r2,65535
  81b3e4:	1a47883a 	add	r3,r3,r9
  81b3e8:	1004d43a 	srli	r2,r2,16
  81b3ec:	1809d43a 	srai	r4,r3,16
  81b3f0:	38c0000d 	sth	r3,0(r7)
  81b3f4:	1105883a 	add	r2,r2,r4
  81b3f8:	3880008d 	sth	r2,2(r7)
  81b3fc:	1013d43a 	srai	r9,r2,16
  81b400:	39c00104 	addi	r7,r7,4
  81b404:	337ff436 	bltu	r6,r13,81b3d8 <__mdiff+0xcc>
  81b408:	38bfff17 	ldw	r2,-4(r7)
  81b40c:	38ffff04 	addi	r3,r7,-4
  81b410:	1000041e 	bne	r2,zero,81b424 <__mdiff+0x118>
  81b414:	18ffff04 	addi	r3,r3,-4
  81b418:	18800017 	ldw	r2,0(r3)
  81b41c:	52bfffc4 	addi	r10,r10,-1
  81b420:	103ffc26 	beq	r2,zero,81b414 <__mdiff+0x108>
  81b424:	6005883a 	mov	r2,r12
  81b428:	62800415 	stw	r10,16(r12)
  81b42c:	dfc00417 	ldw	ra,16(sp)
  81b430:	dcc00317 	ldw	r19,12(sp)
  81b434:	dc800217 	ldw	r18,8(sp)
  81b438:	dc400117 	ldw	r17,4(sp)
  81b43c:	dc000017 	ldw	r16,0(sp)
  81b440:	dec00504 	addi	sp,sp,20
  81b444:	f800283a 	ret
  81b448:	9009883a 	mov	r4,r18
  81b44c:	000b883a 	mov	r5,zero
  81b450:	081b0d40 	call	81b0d4 <_Balloc>
  81b454:	1019883a 	mov	r12,r2
  81b458:	00800044 	movi	r2,1
  81b45c:	60800415 	stw	r2,16(r12)
  81b460:	6005883a 	mov	r2,r12
  81b464:	60000515 	stw	zero,20(r12)
  81b468:	dfc00417 	ldw	ra,16(sp)
  81b46c:	dcc00317 	ldw	r19,12(sp)
  81b470:	dc800217 	ldw	r18,8(sp)
  81b474:	dc400117 	ldw	r17,4(sp)
  81b478:	dc000017 	ldw	r16,0(sp)
  81b47c:	dec00504 	addi	sp,sp,20
  81b480:	f800283a 	ret
  81b484:	880d883a 	mov	r6,r17
  81b488:	04c00044 	movi	r19,1
  81b48c:	8023883a 	mov	r17,r16
  81b490:	3021883a 	mov	r16,r6
  81b494:	003fac06 	br	81b348 <__mdiff+0x3c>

0081b498 <__lshift>:
  81b498:	defff904 	addi	sp,sp,-28
  81b49c:	28800417 	ldw	r2,16(r5)
  81b4a0:	dc000015 	stw	r16,0(sp)
  81b4a4:	3021d17a 	srai	r16,r6,5
  81b4a8:	28c00217 	ldw	r3,8(r5)
  81b4ac:	10800044 	addi	r2,r2,1
  81b4b0:	dc400115 	stw	r17,4(sp)
  81b4b4:	80a3883a 	add	r17,r16,r2
  81b4b8:	dd400515 	stw	r21,20(sp)
  81b4bc:	dd000415 	stw	r20,16(sp)
  81b4c0:	dc800215 	stw	r18,8(sp)
  81b4c4:	dfc00615 	stw	ra,24(sp)
  81b4c8:	2825883a 	mov	r18,r5
  81b4cc:	dcc00315 	stw	r19,12(sp)
  81b4d0:	3029883a 	mov	r20,r6
  81b4d4:	202b883a 	mov	r21,r4
  81b4d8:	29400117 	ldw	r5,4(r5)
  81b4dc:	1c40030e 	bge	r3,r17,81b4ec <__lshift+0x54>
  81b4e0:	18c7883a 	add	r3,r3,r3
  81b4e4:	29400044 	addi	r5,r5,1
  81b4e8:	1c7ffd16 	blt	r3,r17,81b4e0 <__lshift+0x48>
  81b4ec:	a809883a 	mov	r4,r21
  81b4f0:	081b0d40 	call	81b0d4 <_Balloc>
  81b4f4:	1027883a 	mov	r19,r2
  81b4f8:	11400504 	addi	r5,r2,20
  81b4fc:	0400090e 	bge	zero,r16,81b524 <__lshift+0x8c>
  81b500:	2805883a 	mov	r2,r5
  81b504:	0007883a 	mov	r3,zero
  81b508:	18c00044 	addi	r3,r3,1
  81b50c:	10000015 	stw	zero,0(r2)
  81b510:	10800104 	addi	r2,r2,4
  81b514:	80fffc1e 	bne	r16,r3,81b508 <__lshift+0x70>
  81b518:	8405883a 	add	r2,r16,r16
  81b51c:	1085883a 	add	r2,r2,r2
  81b520:	288b883a 	add	r5,r5,r2
  81b524:	90800417 	ldw	r2,16(r18)
  81b528:	91000504 	addi	r4,r18,20
  81b52c:	a18007cc 	andi	r6,r20,31
  81b530:	1085883a 	add	r2,r2,r2
  81b534:	1085883a 	add	r2,r2,r2
  81b538:	208f883a 	add	r7,r4,r2
  81b53c:	30001e26 	beq	r6,zero,81b5b8 <__lshift+0x120>
  81b540:	00800804 	movi	r2,32
  81b544:	1191c83a 	sub	r8,r2,r6
  81b548:	0007883a 	mov	r3,zero
  81b54c:	20800017 	ldw	r2,0(r4)
  81b550:	1184983a 	sll	r2,r2,r6
  81b554:	1884b03a 	or	r2,r3,r2
  81b558:	28800015 	stw	r2,0(r5)
  81b55c:	20c00017 	ldw	r3,0(r4)
  81b560:	21000104 	addi	r4,r4,4
  81b564:	29400104 	addi	r5,r5,4
  81b568:	1a06d83a 	srl	r3,r3,r8
  81b56c:	21fff736 	bltu	r4,r7,81b54c <__lshift+0xb4>
  81b570:	28c00015 	stw	r3,0(r5)
  81b574:	18000126 	beq	r3,zero,81b57c <__lshift+0xe4>
  81b578:	8c400044 	addi	r17,r17,1
  81b57c:	88bfffc4 	addi	r2,r17,-1
  81b580:	98800415 	stw	r2,16(r19)
  81b584:	a809883a 	mov	r4,r21
  81b588:	900b883a 	mov	r5,r18
  81b58c:	081ab540 	call	81ab54 <_Bfree>
  81b590:	9805883a 	mov	r2,r19
  81b594:	dfc00617 	ldw	ra,24(sp)
  81b598:	dd400517 	ldw	r21,20(sp)
  81b59c:	dd000417 	ldw	r20,16(sp)
  81b5a0:	dcc00317 	ldw	r19,12(sp)
  81b5a4:	dc800217 	ldw	r18,8(sp)
  81b5a8:	dc400117 	ldw	r17,4(sp)
  81b5ac:	dc000017 	ldw	r16,0(sp)
  81b5b0:	dec00704 	addi	sp,sp,28
  81b5b4:	f800283a 	ret
  81b5b8:	20800017 	ldw	r2,0(r4)
  81b5bc:	21000104 	addi	r4,r4,4
  81b5c0:	28800015 	stw	r2,0(r5)
  81b5c4:	29400104 	addi	r5,r5,4
  81b5c8:	21ffec2e 	bgeu	r4,r7,81b57c <__lshift+0xe4>
  81b5cc:	20800017 	ldw	r2,0(r4)
  81b5d0:	21000104 	addi	r4,r4,4
  81b5d4:	28800015 	stw	r2,0(r5)
  81b5d8:	29400104 	addi	r5,r5,4
  81b5dc:	21fff636 	bltu	r4,r7,81b5b8 <__lshift+0x120>
  81b5e0:	003fe606 	br	81b57c <__lshift+0xe4>

0081b5e4 <__multiply>:
  81b5e4:	defff904 	addi	sp,sp,-28
  81b5e8:	dcc00315 	stw	r19,12(sp)
  81b5ec:	dc800215 	stw	r18,8(sp)
  81b5f0:	2cc00417 	ldw	r19,16(r5)
  81b5f4:	34800417 	ldw	r18,16(r6)
  81b5f8:	dd000415 	stw	r20,16(sp)
  81b5fc:	dc400115 	stw	r17,4(sp)
  81b600:	dfc00615 	stw	ra,24(sp)
  81b604:	dd400515 	stw	r21,20(sp)
  81b608:	dc000015 	stw	r16,0(sp)
  81b60c:	2823883a 	mov	r17,r5
  81b610:	3029883a 	mov	r20,r6
  81b614:	9c80040e 	bge	r19,r18,81b628 <__multiply+0x44>
  81b618:	9027883a 	mov	r19,r18
  81b61c:	2c800417 	ldw	r18,16(r5)
  81b620:	2829883a 	mov	r20,r5
  81b624:	3023883a 	mov	r17,r6
  81b628:	88800217 	ldw	r2,8(r17)
  81b62c:	9ca1883a 	add	r16,r19,r18
  81b630:	89400117 	ldw	r5,4(r17)
  81b634:	1400010e 	bge	r2,r16,81b63c <__multiply+0x58>
  81b638:	29400044 	addi	r5,r5,1
  81b63c:	081b0d40 	call	81b0d4 <_Balloc>
  81b640:	102b883a 	mov	r21,r2
  81b644:	8405883a 	add	r2,r16,r16
  81b648:	1085883a 	add	r2,r2,r2
  81b64c:	a9000504 	addi	r4,r21,20
  81b650:	209d883a 	add	r14,r4,r2
  81b654:	2380042e 	bgeu	r4,r14,81b668 <__multiply+0x84>
  81b658:	2005883a 	mov	r2,r4
  81b65c:	10000015 	stw	zero,0(r2)
  81b660:	10800104 	addi	r2,r2,4
  81b664:	13bffd36 	bltu	r2,r14,81b65c <__multiply+0x78>
  81b668:	9485883a 	add	r2,r18,r18
  81b66c:	9cc7883a 	add	r3,r19,r19
  81b670:	a1800504 	addi	r6,r20,20
  81b674:	1085883a 	add	r2,r2,r2
  81b678:	8b400504 	addi	r13,r17,20
  81b67c:	18c7883a 	add	r3,r3,r3
  81b680:	309f883a 	add	r15,r6,r2
  81b684:	68d7883a 	add	r11,r13,r3
  81b688:	33c03b2e 	bgeu	r6,r15,81b778 <__multiply+0x194>
  81b68c:	2019883a 	mov	r12,r4
  81b690:	30800017 	ldw	r2,0(r6)
  81b694:	127fffcc 	andi	r9,r2,65535
  81b698:	48001826 	beq	r9,zero,81b6fc <__multiply+0x118>
  81b69c:	6811883a 	mov	r8,r13
  81b6a0:	600f883a 	mov	r7,r12
  81b6a4:	0015883a 	mov	r10,zero
  81b6a8:	40c00017 	ldw	r3,0(r8)
  81b6ac:	39400017 	ldw	r5,0(r7)
  81b6b0:	42000104 	addi	r8,r8,4
  81b6b4:	193fffcc 	andi	r4,r3,65535
  81b6b8:	4909383a 	mul	r4,r9,r4
  81b6bc:	1806d43a 	srli	r3,r3,16
  81b6c0:	28bfffcc 	andi	r2,r5,65535
  81b6c4:	5085883a 	add	r2,r10,r2
  81b6c8:	2089883a 	add	r4,r4,r2
  81b6cc:	48c7383a 	mul	r3,r9,r3
  81b6d0:	280ad43a 	srli	r5,r5,16
  81b6d4:	2004d43a 	srli	r2,r4,16
  81b6d8:	3900000d 	sth	r4,0(r7)
  81b6dc:	1947883a 	add	r3,r3,r5
  81b6e0:	10c5883a 	add	r2,r2,r3
  81b6e4:	3880008d 	sth	r2,2(r7)
  81b6e8:	1014d43a 	srli	r10,r2,16
  81b6ec:	39c00104 	addi	r7,r7,4
  81b6f0:	42ffed36 	bltu	r8,r11,81b6a8 <__multiply+0xc4>
  81b6f4:	3a800015 	stw	r10,0(r7)
  81b6f8:	30800017 	ldw	r2,0(r6)
  81b6fc:	1012d43a 	srli	r9,r2,16
  81b700:	48001926 	beq	r9,zero,81b768 <__multiply+0x184>
  81b704:	60800017 	ldw	r2,0(r12)
  81b708:	6811883a 	mov	r8,r13
  81b70c:	600f883a 	mov	r7,r12
  81b710:	0015883a 	mov	r10,zero
  81b714:	100b883a 	mov	r5,r2
  81b718:	41000017 	ldw	r4,0(r8)
  81b71c:	2806d43a 	srli	r3,r5,16
  81b720:	3880000d 	sth	r2,0(r7)
  81b724:	20bfffcc 	andi	r2,r4,65535
  81b728:	4885383a 	mul	r2,r9,r2
  81b72c:	50c7883a 	add	r3,r10,r3
  81b730:	2008d43a 	srli	r4,r4,16
  81b734:	10c5883a 	add	r2,r2,r3
  81b738:	3880008d 	sth	r2,2(r7)
  81b73c:	39c00104 	addi	r7,r7,4
  81b740:	39400017 	ldw	r5,0(r7)
  81b744:	4909383a 	mul	r4,r9,r4
  81b748:	1004d43a 	srli	r2,r2,16
  81b74c:	28ffffcc 	andi	r3,r5,65535
  81b750:	20c9883a 	add	r4,r4,r3
  81b754:	1105883a 	add	r2,r2,r4
  81b758:	42000104 	addi	r8,r8,4
  81b75c:	1014d43a 	srli	r10,r2,16
  81b760:	42ffed36 	bltu	r8,r11,81b718 <__multiply+0x134>
  81b764:	38800015 	stw	r2,0(r7)
  81b768:	31800104 	addi	r6,r6,4
  81b76c:	33c0022e 	bgeu	r6,r15,81b778 <__multiply+0x194>
  81b770:	63000104 	addi	r12,r12,4
  81b774:	003fc606 	br	81b690 <__multiply+0xac>
  81b778:	0400090e 	bge	zero,r16,81b7a0 <__multiply+0x1bc>
  81b77c:	70bfff17 	ldw	r2,-4(r14)
  81b780:	70ffff04 	addi	r3,r14,-4
  81b784:	10000326 	beq	r2,zero,81b794 <__multiply+0x1b0>
  81b788:	00000506 	br	81b7a0 <__multiply+0x1bc>
  81b78c:	18800017 	ldw	r2,0(r3)
  81b790:	1000031e 	bne	r2,zero,81b7a0 <__multiply+0x1bc>
  81b794:	843fffc4 	addi	r16,r16,-1
  81b798:	18ffff04 	addi	r3,r3,-4
  81b79c:	803ffb1e 	bne	r16,zero,81b78c <__multiply+0x1a8>
  81b7a0:	a805883a 	mov	r2,r21
  81b7a4:	ac000415 	stw	r16,16(r21)
  81b7a8:	dfc00617 	ldw	ra,24(sp)
  81b7ac:	dd400517 	ldw	r21,20(sp)
  81b7b0:	dd000417 	ldw	r20,16(sp)
  81b7b4:	dcc00317 	ldw	r19,12(sp)
  81b7b8:	dc800217 	ldw	r18,8(sp)
  81b7bc:	dc400117 	ldw	r17,4(sp)
  81b7c0:	dc000017 	ldw	r16,0(sp)
  81b7c4:	dec00704 	addi	sp,sp,28
  81b7c8:	f800283a 	ret

0081b7cc <__i2b>:
  81b7cc:	defffd04 	addi	sp,sp,-12
  81b7d0:	dc000015 	stw	r16,0(sp)
  81b7d4:	04000044 	movi	r16,1
  81b7d8:	dc800115 	stw	r18,4(sp)
  81b7dc:	2825883a 	mov	r18,r5
  81b7e0:	800b883a 	mov	r5,r16
  81b7e4:	dfc00215 	stw	ra,8(sp)
  81b7e8:	081b0d40 	call	81b0d4 <_Balloc>
  81b7ec:	14000415 	stw	r16,16(r2)
  81b7f0:	14800515 	stw	r18,20(r2)
  81b7f4:	dfc00217 	ldw	ra,8(sp)
  81b7f8:	dc800117 	ldw	r18,4(sp)
  81b7fc:	dc000017 	ldw	r16,0(sp)
  81b800:	dec00304 	addi	sp,sp,12
  81b804:	f800283a 	ret

0081b808 <__multadd>:
  81b808:	defffa04 	addi	sp,sp,-24
  81b80c:	dc800215 	stw	r18,8(sp)
  81b810:	2c800417 	ldw	r18,16(r5)
  81b814:	dd000415 	stw	r20,16(sp)
  81b818:	dcc00315 	stw	r19,12(sp)
  81b81c:	dc000015 	stw	r16,0(sp)
  81b820:	dfc00515 	stw	ra,20(sp)
  81b824:	3821883a 	mov	r16,r7
  81b828:	dc400115 	stw	r17,4(sp)
  81b82c:	2827883a 	mov	r19,r5
  81b830:	2029883a 	mov	r20,r4
  81b834:	2a000504 	addi	r8,r5,20
  81b838:	000f883a 	mov	r7,zero
  81b83c:	40800017 	ldw	r2,0(r8)
  81b840:	39c00044 	addi	r7,r7,1
  81b844:	10ffffcc 	andi	r3,r2,65535
  81b848:	1987383a 	mul	r3,r3,r6
  81b84c:	1004d43a 	srli	r2,r2,16
  81b850:	1c07883a 	add	r3,r3,r16
  81b854:	180ad43a 	srli	r5,r3,16
  81b858:	1185383a 	mul	r2,r2,r6
  81b85c:	18ffffcc 	andi	r3,r3,65535
  81b860:	1145883a 	add	r2,r2,r5
  81b864:	1008943a 	slli	r4,r2,16
  81b868:	1020d43a 	srli	r16,r2,16
  81b86c:	20c9883a 	add	r4,r4,r3
  81b870:	41000015 	stw	r4,0(r8)
  81b874:	42000104 	addi	r8,r8,4
  81b878:	3cbff016 	blt	r7,r18,81b83c <__multadd+0x34>
  81b87c:	80000826 	beq	r16,zero,81b8a0 <__multadd+0x98>
  81b880:	98800217 	ldw	r2,8(r19)
  81b884:	90800f0e 	bge	r18,r2,81b8c4 <__multadd+0xbc>
  81b888:	9485883a 	add	r2,r18,r18
  81b88c:	1085883a 	add	r2,r2,r2
  81b890:	14c5883a 	add	r2,r2,r19
  81b894:	90c00044 	addi	r3,r18,1
  81b898:	14000515 	stw	r16,20(r2)
  81b89c:	98c00415 	stw	r3,16(r19)
  81b8a0:	9805883a 	mov	r2,r19
  81b8a4:	dfc00517 	ldw	ra,20(sp)
  81b8a8:	dd000417 	ldw	r20,16(sp)
  81b8ac:	dcc00317 	ldw	r19,12(sp)
  81b8b0:	dc800217 	ldw	r18,8(sp)
  81b8b4:	dc400117 	ldw	r17,4(sp)
  81b8b8:	dc000017 	ldw	r16,0(sp)
  81b8bc:	dec00604 	addi	sp,sp,24
  81b8c0:	f800283a 	ret
  81b8c4:	99400117 	ldw	r5,4(r19)
  81b8c8:	a009883a 	mov	r4,r20
  81b8cc:	29400044 	addi	r5,r5,1
  81b8d0:	081b0d40 	call	81b0d4 <_Balloc>
  81b8d4:	99800417 	ldw	r6,16(r19)
  81b8d8:	99400304 	addi	r5,r19,12
  81b8dc:	11000304 	addi	r4,r2,12
  81b8e0:	318d883a 	add	r6,r6,r6
  81b8e4:	318d883a 	add	r6,r6,r6
  81b8e8:	31800204 	addi	r6,r6,8
  81b8ec:	1023883a 	mov	r17,r2
  81b8f0:	08156ac0 	call	8156ac <memcpy>
  81b8f4:	980b883a 	mov	r5,r19
  81b8f8:	a009883a 	mov	r4,r20
  81b8fc:	081ab540 	call	81ab54 <_Bfree>
  81b900:	8827883a 	mov	r19,r17
  81b904:	003fe006 	br	81b888 <__multadd+0x80>

0081b908 <__pow5mult>:
  81b908:	defffa04 	addi	sp,sp,-24
  81b90c:	308000cc 	andi	r2,r6,3
  81b910:	dd000415 	stw	r20,16(sp)
  81b914:	dcc00315 	stw	r19,12(sp)
  81b918:	dc000015 	stw	r16,0(sp)
  81b91c:	dfc00515 	stw	ra,20(sp)
  81b920:	dc800215 	stw	r18,8(sp)
  81b924:	dc400115 	stw	r17,4(sp)
  81b928:	3021883a 	mov	r16,r6
  81b92c:	2027883a 	mov	r19,r4
  81b930:	2829883a 	mov	r20,r5
  81b934:	10002b1e 	bne	r2,zero,81b9e4 <__pow5mult+0xdc>
  81b938:	8025d0ba 	srai	r18,r16,2
  81b93c:	90001b26 	beq	r18,zero,81b9ac <__pow5mult+0xa4>
  81b940:	9c001217 	ldw	r16,72(r19)
  81b944:	8000081e 	bne	r16,zero,81b968 <__pow5mult+0x60>
  81b948:	00003006 	br	81ba0c <__pow5mult+0x104>
  81b94c:	800b883a 	mov	r5,r16
  81b950:	800d883a 	mov	r6,r16
  81b954:	9809883a 	mov	r4,r19
  81b958:	90001426 	beq	r18,zero,81b9ac <__pow5mult+0xa4>
  81b95c:	80800017 	ldw	r2,0(r16)
  81b960:	10001b26 	beq	r2,zero,81b9d0 <__pow5mult+0xc8>
  81b964:	1021883a 	mov	r16,r2
  81b968:	9080004c 	andi	r2,r18,1
  81b96c:	1005003a 	cmpeq	r2,r2,zero
  81b970:	9025d07a 	srai	r18,r18,1
  81b974:	800d883a 	mov	r6,r16
  81b978:	9809883a 	mov	r4,r19
  81b97c:	a00b883a 	mov	r5,r20
  81b980:	103ff21e 	bne	r2,zero,81b94c <__pow5mult+0x44>
  81b984:	081b5e40 	call	81b5e4 <__multiply>
  81b988:	a00b883a 	mov	r5,r20
  81b98c:	9809883a 	mov	r4,r19
  81b990:	1023883a 	mov	r17,r2
  81b994:	081ab540 	call	81ab54 <_Bfree>
  81b998:	8829883a 	mov	r20,r17
  81b99c:	800b883a 	mov	r5,r16
  81b9a0:	800d883a 	mov	r6,r16
  81b9a4:	9809883a 	mov	r4,r19
  81b9a8:	903fec1e 	bne	r18,zero,81b95c <__pow5mult+0x54>
  81b9ac:	a005883a 	mov	r2,r20
  81b9b0:	dfc00517 	ldw	ra,20(sp)
  81b9b4:	dd000417 	ldw	r20,16(sp)
  81b9b8:	dcc00317 	ldw	r19,12(sp)
  81b9bc:	dc800217 	ldw	r18,8(sp)
  81b9c0:	dc400117 	ldw	r17,4(sp)
  81b9c4:	dc000017 	ldw	r16,0(sp)
  81b9c8:	dec00604 	addi	sp,sp,24
  81b9cc:	f800283a 	ret
  81b9d0:	081b5e40 	call	81b5e4 <__multiply>
  81b9d4:	80800015 	stw	r2,0(r16)
  81b9d8:	1021883a 	mov	r16,r2
  81b9dc:	10000015 	stw	zero,0(r2)
  81b9e0:	003fe106 	br	81b968 <__pow5mult+0x60>
  81b9e4:	1085883a 	add	r2,r2,r2
  81b9e8:	00c020f4 	movhi	r3,131
  81b9ec:	18e41b04 	addi	r3,r3,-28564
  81b9f0:	1085883a 	add	r2,r2,r2
  81b9f4:	10c5883a 	add	r2,r2,r3
  81b9f8:	11bfff17 	ldw	r6,-4(r2)
  81b9fc:	000f883a 	mov	r7,zero
  81ba00:	081b8080 	call	81b808 <__multadd>
  81ba04:	1029883a 	mov	r20,r2
  81ba08:	003fcb06 	br	81b938 <__pow5mult+0x30>
  81ba0c:	9809883a 	mov	r4,r19
  81ba10:	01409c44 	movi	r5,625
  81ba14:	081b7cc0 	call	81b7cc <__i2b>
  81ba18:	98801215 	stw	r2,72(r19)
  81ba1c:	1021883a 	mov	r16,r2
  81ba20:	10000015 	stw	zero,0(r2)
  81ba24:	003fd006 	br	81b968 <__pow5mult+0x60>

0081ba28 <__s2b>:
  81ba28:	defff904 	addi	sp,sp,-28
  81ba2c:	dcc00315 	stw	r19,12(sp)
  81ba30:	dc800215 	stw	r18,8(sp)
  81ba34:	2827883a 	mov	r19,r5
  81ba38:	2025883a 	mov	r18,r4
  81ba3c:	01400244 	movi	r5,9
  81ba40:	39000204 	addi	r4,r7,8
  81ba44:	dd000415 	stw	r20,16(sp)
  81ba48:	dc400115 	stw	r17,4(sp)
  81ba4c:	dfc00615 	stw	ra,24(sp)
  81ba50:	dd400515 	stw	r21,20(sp)
  81ba54:	dc000015 	stw	r16,0(sp)
  81ba58:	3829883a 	mov	r20,r7
  81ba5c:	3023883a 	mov	r17,r6
  81ba60:	08145fc0 	call	8145fc <__divsi3>
  81ba64:	00c00044 	movi	r3,1
  81ba68:	1880350e 	bge	r3,r2,81bb40 <__s2b+0x118>
  81ba6c:	000b883a 	mov	r5,zero
  81ba70:	18c7883a 	add	r3,r3,r3
  81ba74:	29400044 	addi	r5,r5,1
  81ba78:	18bffd16 	blt	r3,r2,81ba70 <__s2b+0x48>
  81ba7c:	9009883a 	mov	r4,r18
  81ba80:	081b0d40 	call	81b0d4 <_Balloc>
  81ba84:	1011883a 	mov	r8,r2
  81ba88:	d8800717 	ldw	r2,28(sp)
  81ba8c:	00c00044 	movi	r3,1
  81ba90:	01800244 	movi	r6,9
  81ba94:	40800515 	stw	r2,20(r8)
  81ba98:	40c00415 	stw	r3,16(r8)
  81ba9c:	3440260e 	bge	r6,r17,81bb38 <__s2b+0x110>
  81baa0:	3021883a 	mov	r16,r6
  81baa4:	99ab883a 	add	r21,r19,r6
  81baa8:	9c05883a 	add	r2,r19,r16
  81baac:	11c00007 	ldb	r7,0(r2)
  81bab0:	400b883a 	mov	r5,r8
  81bab4:	9009883a 	mov	r4,r18
  81bab8:	39fff404 	addi	r7,r7,-48
  81babc:	01800284 	movi	r6,10
  81bac0:	081b8080 	call	81b808 <__multadd>
  81bac4:	84000044 	addi	r16,r16,1
  81bac8:	1011883a 	mov	r8,r2
  81bacc:	8c3ff61e 	bne	r17,r16,81baa8 <__s2b+0x80>
  81bad0:	ac45883a 	add	r2,r21,r17
  81bad4:	117ffe04 	addi	r5,r2,-8
  81bad8:	880d883a 	mov	r6,r17
  81badc:	35000c0e 	bge	r6,r20,81bb10 <__s2b+0xe8>
  81bae0:	a185c83a 	sub	r2,r20,r6
  81bae4:	2821883a 	mov	r16,r5
  81bae8:	28a3883a 	add	r17,r5,r2
  81baec:	81c00007 	ldb	r7,0(r16)
  81baf0:	400b883a 	mov	r5,r8
  81baf4:	9009883a 	mov	r4,r18
  81baf8:	39fff404 	addi	r7,r7,-48
  81bafc:	01800284 	movi	r6,10
  81bb00:	081b8080 	call	81b808 <__multadd>
  81bb04:	84000044 	addi	r16,r16,1
  81bb08:	1011883a 	mov	r8,r2
  81bb0c:	847ff71e 	bne	r16,r17,81baec <__s2b+0xc4>
  81bb10:	4005883a 	mov	r2,r8
  81bb14:	dfc00617 	ldw	ra,24(sp)
  81bb18:	dd400517 	ldw	r21,20(sp)
  81bb1c:	dd000417 	ldw	r20,16(sp)
  81bb20:	dcc00317 	ldw	r19,12(sp)
  81bb24:	dc800217 	ldw	r18,8(sp)
  81bb28:	dc400117 	ldw	r17,4(sp)
  81bb2c:	dc000017 	ldw	r16,0(sp)
  81bb30:	dec00704 	addi	sp,sp,28
  81bb34:	f800283a 	ret
  81bb38:	99400284 	addi	r5,r19,10
  81bb3c:	003fe706 	br	81badc <__s2b+0xb4>
  81bb40:	000b883a 	mov	r5,zero
  81bb44:	003fcd06 	br	81ba7c <__s2b+0x54>

0081bb48 <_realloc_r>:
  81bb48:	defff404 	addi	sp,sp,-48
  81bb4c:	dd800815 	stw	r22,32(sp)
  81bb50:	dc800415 	stw	r18,16(sp)
  81bb54:	dc400315 	stw	r17,12(sp)
  81bb58:	dfc00b15 	stw	ra,44(sp)
  81bb5c:	df000a15 	stw	fp,40(sp)
  81bb60:	ddc00915 	stw	r23,36(sp)
  81bb64:	dd400715 	stw	r21,28(sp)
  81bb68:	dd000615 	stw	r20,24(sp)
  81bb6c:	dcc00515 	stw	r19,20(sp)
  81bb70:	dc000215 	stw	r16,8(sp)
  81bb74:	2825883a 	mov	r18,r5
  81bb78:	3023883a 	mov	r17,r6
  81bb7c:	202d883a 	mov	r22,r4
  81bb80:	2800c926 	beq	r5,zero,81bea8 <_realloc_r+0x360>
  81bb84:	081e2700 	call	81e270 <__malloc_lock>
  81bb88:	943ffe04 	addi	r16,r18,-8
  81bb8c:	88c002c4 	addi	r3,r17,11
  81bb90:	00800584 	movi	r2,22
  81bb94:	82000117 	ldw	r8,4(r16)
  81bb98:	10c01b2e 	bgeu	r2,r3,81bc08 <_realloc_r+0xc0>
  81bb9c:	00bffe04 	movi	r2,-8
  81bba0:	188e703a 	and	r7,r3,r2
  81bba4:	3839883a 	mov	fp,r7
  81bba8:	38001a16 	blt	r7,zero,81bc14 <_realloc_r+0xcc>
  81bbac:	e4401936 	bltu	fp,r17,81bc14 <_realloc_r+0xcc>
  81bbb0:	013fff04 	movi	r4,-4
  81bbb4:	4126703a 	and	r19,r8,r4
  81bbb8:	99c02616 	blt	r19,r7,81bc54 <_realloc_r+0x10c>
  81bbbc:	802b883a 	mov	r21,r16
  81bbc0:	9829883a 	mov	r20,r19
  81bbc4:	84000204 	addi	r16,r16,8
  81bbc8:	a80f883a 	mov	r7,r21
  81bbcc:	a70dc83a 	sub	r6,r20,fp
  81bbd0:	008003c4 	movi	r2,15
  81bbd4:	1180c136 	bltu	r2,r6,81bedc <_realloc_r+0x394>
  81bbd8:	38800117 	ldw	r2,4(r7)
  81bbdc:	a549883a 	add	r4,r20,r21
  81bbe0:	1080004c 	andi	r2,r2,1
  81bbe4:	a084b03a 	or	r2,r20,r2
  81bbe8:	38800115 	stw	r2,4(r7)
  81bbec:	20c00117 	ldw	r3,4(r4)
  81bbf0:	18c00054 	ori	r3,r3,1
  81bbf4:	20c00115 	stw	r3,4(r4)
  81bbf8:	b009883a 	mov	r4,r22
  81bbfc:	081e2900 	call	81e290 <__malloc_unlock>
  81bc00:	8023883a 	mov	r17,r16
  81bc04:	00000606 	br	81bc20 <_realloc_r+0xd8>
  81bc08:	01c00404 	movi	r7,16
  81bc0c:	3839883a 	mov	fp,r7
  81bc10:	e47fe72e 	bgeu	fp,r17,81bbb0 <_realloc_r+0x68>
  81bc14:	00800304 	movi	r2,12
  81bc18:	0023883a 	mov	r17,zero
  81bc1c:	b0800015 	stw	r2,0(r22)
  81bc20:	8805883a 	mov	r2,r17
  81bc24:	dfc00b17 	ldw	ra,44(sp)
  81bc28:	df000a17 	ldw	fp,40(sp)
  81bc2c:	ddc00917 	ldw	r23,36(sp)
  81bc30:	dd800817 	ldw	r22,32(sp)
  81bc34:	dd400717 	ldw	r21,28(sp)
  81bc38:	dd000617 	ldw	r20,24(sp)
  81bc3c:	dcc00517 	ldw	r19,20(sp)
  81bc40:	dc800417 	ldw	r18,16(sp)
  81bc44:	dc400317 	ldw	r17,12(sp)
  81bc48:	dc000217 	ldw	r16,8(sp)
  81bc4c:	dec00c04 	addi	sp,sp,48
  81bc50:	f800283a 	ret
  81bc54:	008020f4 	movhi	r2,131
  81bc58:	10b96d04 	addi	r2,r2,-6732
  81bc5c:	12400217 	ldw	r9,8(r2)
  81bc60:	84cd883a 	add	r6,r16,r19
  81bc64:	802b883a 	mov	r21,r16
  81bc68:	3240b926 	beq	r6,r9,81bf50 <_realloc_r+0x408>
  81bc6c:	31400117 	ldw	r5,4(r6)
  81bc70:	00bfff84 	movi	r2,-2
  81bc74:	2884703a 	and	r2,r5,r2
  81bc78:	1185883a 	add	r2,r2,r6
  81bc7c:	10c00117 	ldw	r3,4(r2)
  81bc80:	18c0004c 	andi	r3,r3,1
  81bc84:	1807003a 	cmpeq	r3,r3,zero
  81bc88:	1800a326 	beq	r3,zero,81bf18 <_realloc_r+0x3d0>
  81bc8c:	2908703a 	and	r4,r5,r4
  81bc90:	9929883a 	add	r20,r19,r4
  81bc94:	a1c0a30e 	bge	r20,r7,81bf24 <_realloc_r+0x3dc>
  81bc98:	4080004c 	andi	r2,r8,1
  81bc9c:	1000551e 	bne	r2,zero,81bdf4 <_realloc_r+0x2ac>
  81bca0:	80800017 	ldw	r2,0(r16)
  81bca4:	80afc83a 	sub	r23,r16,r2
  81bca8:	b8c00117 	ldw	r3,4(r23)
  81bcac:	00bfff04 	movi	r2,-4
  81bcb0:	1884703a 	and	r2,r3,r2
  81bcb4:	30002e26 	beq	r6,zero,81bd70 <_realloc_r+0x228>
  81bcb8:	3240b926 	beq	r6,r9,81bfa0 <_realloc_r+0x458>
  81bcbc:	98a9883a 	add	r20,r19,r2
  81bcc0:	2509883a 	add	r4,r4,r20
  81bcc4:	d9000015 	stw	r4,0(sp)
  81bcc8:	21c02a16 	blt	r4,r7,81bd74 <_realloc_r+0x22c>
  81bccc:	30800317 	ldw	r2,12(r6)
  81bcd0:	30c00217 	ldw	r3,8(r6)
  81bcd4:	01400904 	movi	r5,36
  81bcd8:	99bfff04 	addi	r6,r19,-4
  81bcdc:	18800315 	stw	r2,12(r3)
  81bce0:	10c00215 	stw	r3,8(r2)
  81bce4:	b9000317 	ldw	r4,12(r23)
  81bce8:	b8800217 	ldw	r2,8(r23)
  81bcec:	b82b883a 	mov	r21,r23
  81bcf0:	bc000204 	addi	r16,r23,8
  81bcf4:	20800215 	stw	r2,8(r4)
  81bcf8:	11000315 	stw	r4,12(r2)
  81bcfc:	2980e436 	bltu	r5,r6,81c090 <_realloc_r+0x548>
  81bd00:	008004c4 	movi	r2,19
  81bd04:	9009883a 	mov	r4,r18
  81bd08:	8011883a 	mov	r8,r16
  81bd0c:	11800f2e 	bgeu	r2,r6,81bd4c <_realloc_r+0x204>
  81bd10:	90800017 	ldw	r2,0(r18)
  81bd14:	ba000404 	addi	r8,r23,16
  81bd18:	91000204 	addi	r4,r18,8
  81bd1c:	b8800215 	stw	r2,8(r23)
  81bd20:	90c00117 	ldw	r3,4(r18)
  81bd24:	008006c4 	movi	r2,27
  81bd28:	b8c00315 	stw	r3,12(r23)
  81bd2c:	1180072e 	bgeu	r2,r6,81bd4c <_realloc_r+0x204>
  81bd30:	90c00217 	ldw	r3,8(r18)
  81bd34:	ba000604 	addi	r8,r23,24
  81bd38:	91000404 	addi	r4,r18,16
  81bd3c:	b8c00415 	stw	r3,16(r23)
  81bd40:	90800317 	ldw	r2,12(r18)
  81bd44:	b8800515 	stw	r2,20(r23)
  81bd48:	3140e726 	beq	r6,r5,81c0e8 <_realloc_r+0x5a0>
  81bd4c:	20800017 	ldw	r2,0(r4)
  81bd50:	dd000017 	ldw	r20,0(sp)
  81bd54:	b80f883a 	mov	r7,r23
  81bd58:	40800015 	stw	r2,0(r8)
  81bd5c:	20c00117 	ldw	r3,4(r4)
  81bd60:	40c00115 	stw	r3,4(r8)
  81bd64:	20800217 	ldw	r2,8(r4)
  81bd68:	40800215 	stw	r2,8(r8)
  81bd6c:	003f9706 	br	81bbcc <_realloc_r+0x84>
  81bd70:	98a9883a 	add	r20,r19,r2
  81bd74:	a1c01f16 	blt	r20,r7,81bdf4 <_realloc_r+0x2ac>
  81bd78:	b8c00317 	ldw	r3,12(r23)
  81bd7c:	b8800217 	ldw	r2,8(r23)
  81bd80:	99bfff04 	addi	r6,r19,-4
  81bd84:	01400904 	movi	r5,36
  81bd88:	b82b883a 	mov	r21,r23
  81bd8c:	18800215 	stw	r2,8(r3)
  81bd90:	10c00315 	stw	r3,12(r2)
  81bd94:	bc000204 	addi	r16,r23,8
  81bd98:	2980c336 	bltu	r5,r6,81c0a8 <_realloc_r+0x560>
  81bd9c:	008004c4 	movi	r2,19
  81bda0:	9009883a 	mov	r4,r18
  81bda4:	8011883a 	mov	r8,r16
  81bda8:	11800f2e 	bgeu	r2,r6,81bde8 <_realloc_r+0x2a0>
  81bdac:	90800017 	ldw	r2,0(r18)
  81bdb0:	ba000404 	addi	r8,r23,16
  81bdb4:	91000204 	addi	r4,r18,8
  81bdb8:	b8800215 	stw	r2,8(r23)
  81bdbc:	90c00117 	ldw	r3,4(r18)
  81bdc0:	008006c4 	movi	r2,27
  81bdc4:	b8c00315 	stw	r3,12(r23)
  81bdc8:	1180072e 	bgeu	r2,r6,81bde8 <_realloc_r+0x2a0>
  81bdcc:	90c00217 	ldw	r3,8(r18)
  81bdd0:	ba000604 	addi	r8,r23,24
  81bdd4:	91000404 	addi	r4,r18,16
  81bdd8:	b8c00415 	stw	r3,16(r23)
  81bddc:	90800317 	ldw	r2,12(r18)
  81bde0:	b8800515 	stw	r2,20(r23)
  81bde4:	3140c726 	beq	r6,r5,81c104 <_realloc_r+0x5bc>
  81bde8:	20800017 	ldw	r2,0(r4)
  81bdec:	b80f883a 	mov	r7,r23
  81bdf0:	003fd906 	br	81bd58 <_realloc_r+0x210>
  81bdf4:	880b883a 	mov	r5,r17
  81bdf8:	b009883a 	mov	r4,r22
  81bdfc:	0814f6c0 	call	814f6c <_malloc_r>
  81be00:	1023883a 	mov	r17,r2
  81be04:	10002526 	beq	r2,zero,81be9c <_realloc_r+0x354>
  81be08:	80800117 	ldw	r2,4(r16)
  81be0c:	00ffff84 	movi	r3,-2
  81be10:	893ffe04 	addi	r4,r17,-8
  81be14:	10c4703a 	and	r2,r2,r3
  81be18:	8085883a 	add	r2,r16,r2
  81be1c:	20809526 	beq	r4,r2,81c074 <_realloc_r+0x52c>
  81be20:	99bfff04 	addi	r6,r19,-4
  81be24:	01c00904 	movi	r7,36
  81be28:	39804536 	bltu	r7,r6,81bf40 <_realloc_r+0x3f8>
  81be2c:	008004c4 	movi	r2,19
  81be30:	9009883a 	mov	r4,r18
  81be34:	880b883a 	mov	r5,r17
  81be38:	11800f2e 	bgeu	r2,r6,81be78 <_realloc_r+0x330>
  81be3c:	90800017 	ldw	r2,0(r18)
  81be40:	89400204 	addi	r5,r17,8
  81be44:	91000204 	addi	r4,r18,8
  81be48:	88800015 	stw	r2,0(r17)
  81be4c:	90c00117 	ldw	r3,4(r18)
  81be50:	008006c4 	movi	r2,27
  81be54:	88c00115 	stw	r3,4(r17)
  81be58:	1180072e 	bgeu	r2,r6,81be78 <_realloc_r+0x330>
  81be5c:	90c00217 	ldw	r3,8(r18)
  81be60:	89400404 	addi	r5,r17,16
  81be64:	91000404 	addi	r4,r18,16
  81be68:	88c00215 	stw	r3,8(r17)
  81be6c:	90800317 	ldw	r2,12(r18)
  81be70:	88800315 	stw	r2,12(r17)
  81be74:	31c09126 	beq	r6,r7,81c0bc <_realloc_r+0x574>
  81be78:	20800017 	ldw	r2,0(r4)
  81be7c:	28800015 	stw	r2,0(r5)
  81be80:	20c00117 	ldw	r3,4(r4)
  81be84:	28c00115 	stw	r3,4(r5)
  81be88:	20800217 	ldw	r2,8(r4)
  81be8c:	28800215 	stw	r2,8(r5)
  81be90:	900b883a 	mov	r5,r18
  81be94:	b009883a 	mov	r4,r22
  81be98:	0819d700 	call	819d70 <_free_r>
  81be9c:	b009883a 	mov	r4,r22
  81bea0:	081e2900 	call	81e290 <__malloc_unlock>
  81bea4:	003f5e06 	br	81bc20 <_realloc_r+0xd8>
  81bea8:	300b883a 	mov	r5,r6
  81beac:	dfc00b17 	ldw	ra,44(sp)
  81beb0:	df000a17 	ldw	fp,40(sp)
  81beb4:	ddc00917 	ldw	r23,36(sp)
  81beb8:	dd800817 	ldw	r22,32(sp)
  81bebc:	dd400717 	ldw	r21,28(sp)
  81bec0:	dd000617 	ldw	r20,24(sp)
  81bec4:	dcc00517 	ldw	r19,20(sp)
  81bec8:	dc800417 	ldw	r18,16(sp)
  81becc:	dc400317 	ldw	r17,12(sp)
  81bed0:	dc000217 	ldw	r16,8(sp)
  81bed4:	dec00c04 	addi	sp,sp,48
  81bed8:	0814f6c1 	jmpi	814f6c <_malloc_r>
  81bedc:	38800117 	ldw	r2,4(r7)
  81bee0:	e54b883a 	add	r5,fp,r21
  81bee4:	31000054 	ori	r4,r6,1
  81bee8:	1080004c 	andi	r2,r2,1
  81beec:	1704b03a 	or	r2,r2,fp
  81bef0:	38800115 	stw	r2,4(r7)
  81bef4:	29000115 	stw	r4,4(r5)
  81bef8:	2987883a 	add	r3,r5,r6
  81befc:	18800117 	ldw	r2,4(r3)
  81bf00:	29400204 	addi	r5,r5,8
  81bf04:	b009883a 	mov	r4,r22
  81bf08:	10800054 	ori	r2,r2,1
  81bf0c:	18800115 	stw	r2,4(r3)
  81bf10:	0819d700 	call	819d70 <_free_r>
  81bf14:	003f3806 	br	81bbf8 <_realloc_r+0xb0>
  81bf18:	000d883a 	mov	r6,zero
  81bf1c:	0009883a 	mov	r4,zero
  81bf20:	003f5d06 	br	81bc98 <_realloc_r+0x150>
  81bf24:	30c00217 	ldw	r3,8(r6)
  81bf28:	30800317 	ldw	r2,12(r6)
  81bf2c:	800f883a 	mov	r7,r16
  81bf30:	84000204 	addi	r16,r16,8
  81bf34:	10c00215 	stw	r3,8(r2)
  81bf38:	18800315 	stw	r2,12(r3)
  81bf3c:	003f2306 	br	81bbcc <_realloc_r+0x84>
  81bf40:	8809883a 	mov	r4,r17
  81bf44:	900b883a 	mov	r5,r18
  81bf48:	081a9dc0 	call	81a9dc <memmove>
  81bf4c:	003fd006 	br	81be90 <_realloc_r+0x348>
  81bf50:	30800117 	ldw	r2,4(r6)
  81bf54:	e0c00404 	addi	r3,fp,16
  81bf58:	1108703a 	and	r4,r2,r4
  81bf5c:	9905883a 	add	r2,r19,r4
  81bf60:	10ff4d16 	blt	r2,r3,81bc98 <_realloc_r+0x150>
  81bf64:	1705c83a 	sub	r2,r2,fp
  81bf68:	870b883a 	add	r5,r16,fp
  81bf6c:	10800054 	ori	r2,r2,1
  81bf70:	28800115 	stw	r2,4(r5)
  81bf74:	80c00117 	ldw	r3,4(r16)
  81bf78:	008020f4 	movhi	r2,131
  81bf7c:	10b96d04 	addi	r2,r2,-6732
  81bf80:	b009883a 	mov	r4,r22
  81bf84:	18c0004c 	andi	r3,r3,1
  81bf88:	e0c6b03a 	or	r3,fp,r3
  81bf8c:	11400215 	stw	r5,8(r2)
  81bf90:	80c00115 	stw	r3,4(r16)
  81bf94:	081e2900 	call	81e290 <__malloc_unlock>
  81bf98:	84400204 	addi	r17,r16,8
  81bf9c:	003f2006 	br	81bc20 <_realloc_r+0xd8>
  81bfa0:	98a9883a 	add	r20,r19,r2
  81bfa4:	2509883a 	add	r4,r4,r20
  81bfa8:	e0800404 	addi	r2,fp,16
  81bfac:	d9000115 	stw	r4,4(sp)
  81bfb0:	20bf7016 	blt	r4,r2,81bd74 <_realloc_r+0x22c>
  81bfb4:	b8c00317 	ldw	r3,12(r23)
  81bfb8:	b8800217 	ldw	r2,8(r23)
  81bfbc:	99bfff04 	addi	r6,r19,-4
  81bfc0:	01400904 	movi	r5,36
  81bfc4:	18800215 	stw	r2,8(r3)
  81bfc8:	10c00315 	stw	r3,12(r2)
  81bfcc:	bc400204 	addi	r17,r23,8
  81bfd0:	29804136 	bltu	r5,r6,81c0d8 <_realloc_r+0x590>
  81bfd4:	008004c4 	movi	r2,19
  81bfd8:	9009883a 	mov	r4,r18
  81bfdc:	880f883a 	mov	r7,r17
  81bfe0:	11800f2e 	bgeu	r2,r6,81c020 <_realloc_r+0x4d8>
  81bfe4:	90800017 	ldw	r2,0(r18)
  81bfe8:	b9c00404 	addi	r7,r23,16
  81bfec:	91000204 	addi	r4,r18,8
  81bff0:	b8800215 	stw	r2,8(r23)
  81bff4:	90c00117 	ldw	r3,4(r18)
  81bff8:	008006c4 	movi	r2,27
  81bffc:	b8c00315 	stw	r3,12(r23)
  81c000:	1180072e 	bgeu	r2,r6,81c020 <_realloc_r+0x4d8>
  81c004:	90c00217 	ldw	r3,8(r18)
  81c008:	b9c00604 	addi	r7,r23,24
  81c00c:	91000404 	addi	r4,r18,16
  81c010:	b8c00415 	stw	r3,16(r23)
  81c014:	90800317 	ldw	r2,12(r18)
  81c018:	b8800515 	stw	r2,20(r23)
  81c01c:	31404026 	beq	r6,r5,81c120 <_realloc_r+0x5d8>
  81c020:	20800017 	ldw	r2,0(r4)
  81c024:	38800015 	stw	r2,0(r7)
  81c028:	20c00117 	ldw	r3,4(r4)
  81c02c:	38c00115 	stw	r3,4(r7)
  81c030:	20800217 	ldw	r2,8(r4)
  81c034:	38800215 	stw	r2,8(r7)
  81c038:	d8c00117 	ldw	r3,4(sp)
  81c03c:	bf0b883a 	add	r5,r23,fp
  81c040:	b009883a 	mov	r4,r22
  81c044:	1f05c83a 	sub	r2,r3,fp
  81c048:	10800054 	ori	r2,r2,1
  81c04c:	28800115 	stw	r2,4(r5)
  81c050:	b8c00117 	ldw	r3,4(r23)
  81c054:	008020f4 	movhi	r2,131
  81c058:	10b96d04 	addi	r2,r2,-6732
  81c05c:	11400215 	stw	r5,8(r2)
  81c060:	18c0004c 	andi	r3,r3,1
  81c064:	e0c6b03a 	or	r3,fp,r3
  81c068:	b8c00115 	stw	r3,4(r23)
  81c06c:	081e2900 	call	81e290 <__malloc_unlock>
  81c070:	003eeb06 	br	81bc20 <_realloc_r+0xd8>
  81c074:	20800117 	ldw	r2,4(r4)
  81c078:	00ffff04 	movi	r3,-4
  81c07c:	800f883a 	mov	r7,r16
  81c080:	10c4703a 	and	r2,r2,r3
  81c084:	98a9883a 	add	r20,r19,r2
  81c088:	84000204 	addi	r16,r16,8
  81c08c:	003ecf06 	br	81bbcc <_realloc_r+0x84>
  81c090:	900b883a 	mov	r5,r18
  81c094:	8009883a 	mov	r4,r16
  81c098:	081a9dc0 	call	81a9dc <memmove>
  81c09c:	dd000017 	ldw	r20,0(sp)
  81c0a0:	b80f883a 	mov	r7,r23
  81c0a4:	003ec906 	br	81bbcc <_realloc_r+0x84>
  81c0a8:	900b883a 	mov	r5,r18
  81c0ac:	8009883a 	mov	r4,r16
  81c0b0:	081a9dc0 	call	81a9dc <memmove>
  81c0b4:	b80f883a 	mov	r7,r23
  81c0b8:	003ec406 	br	81bbcc <_realloc_r+0x84>
  81c0bc:	90c00417 	ldw	r3,16(r18)
  81c0c0:	89400604 	addi	r5,r17,24
  81c0c4:	91000604 	addi	r4,r18,24
  81c0c8:	88c00415 	stw	r3,16(r17)
  81c0cc:	90800517 	ldw	r2,20(r18)
  81c0d0:	88800515 	stw	r2,20(r17)
  81c0d4:	003f6806 	br	81be78 <_realloc_r+0x330>
  81c0d8:	900b883a 	mov	r5,r18
  81c0dc:	8809883a 	mov	r4,r17
  81c0e0:	081a9dc0 	call	81a9dc <memmove>
  81c0e4:	003fd406 	br	81c038 <_realloc_r+0x4f0>
  81c0e8:	90c00417 	ldw	r3,16(r18)
  81c0ec:	91000604 	addi	r4,r18,24
  81c0f0:	ba000804 	addi	r8,r23,32
  81c0f4:	b8c00615 	stw	r3,24(r23)
  81c0f8:	90800517 	ldw	r2,20(r18)
  81c0fc:	b8800715 	stw	r2,28(r23)
  81c100:	003f1206 	br	81bd4c <_realloc_r+0x204>
  81c104:	90c00417 	ldw	r3,16(r18)
  81c108:	91000604 	addi	r4,r18,24
  81c10c:	ba000804 	addi	r8,r23,32
  81c110:	b8c00615 	stw	r3,24(r23)
  81c114:	90800517 	ldw	r2,20(r18)
  81c118:	b8800715 	stw	r2,28(r23)
  81c11c:	003f3206 	br	81bde8 <_realloc_r+0x2a0>
  81c120:	90c00417 	ldw	r3,16(r18)
  81c124:	91000604 	addi	r4,r18,24
  81c128:	b9c00804 	addi	r7,r23,32
  81c12c:	b8c00615 	stw	r3,24(r23)
  81c130:	90800517 	ldw	r2,20(r18)
  81c134:	b8800715 	stw	r2,28(r23)
  81c138:	003fb906 	br	81c020 <_realloc_r+0x4d8>

0081c13c <__isinfd>:
  81c13c:	200d883a 	mov	r6,r4
  81c140:	0109c83a 	sub	r4,zero,r4
  81c144:	2188b03a 	or	r4,r4,r6
  81c148:	2008d7fa 	srli	r4,r4,31
  81c14c:	00a00034 	movhi	r2,32768
  81c150:	10bfffc4 	addi	r2,r2,-1
  81c154:	1144703a 	and	r2,r2,r5
  81c158:	2088b03a 	or	r4,r4,r2
  81c15c:	009ffc34 	movhi	r2,32752
  81c160:	1105c83a 	sub	r2,r2,r4
  81c164:	0087c83a 	sub	r3,zero,r2
  81c168:	10c4b03a 	or	r2,r2,r3
  81c16c:	1004d7fa 	srli	r2,r2,31
  81c170:	00c00044 	movi	r3,1
  81c174:	1885c83a 	sub	r2,r3,r2
  81c178:	f800283a 	ret

0081c17c <__isnand>:
  81c17c:	200d883a 	mov	r6,r4
  81c180:	0109c83a 	sub	r4,zero,r4
  81c184:	2188b03a 	or	r4,r4,r6
  81c188:	2008d7fa 	srli	r4,r4,31
  81c18c:	00a00034 	movhi	r2,32768
  81c190:	10bfffc4 	addi	r2,r2,-1
  81c194:	1144703a 	and	r2,r2,r5
  81c198:	2088b03a 	or	r4,r4,r2
  81c19c:	009ffc34 	movhi	r2,32752
  81c1a0:	1105c83a 	sub	r2,r2,r4
  81c1a4:	1004d7fa 	srli	r2,r2,31
  81c1a8:	f800283a 	ret

0081c1ac <__sclose>:
  81c1ac:	2940038f 	ldh	r5,14(r5)
  81c1b0:	081c4e01 	jmpi	81c4e0 <_close_r>

0081c1b4 <__sseek>:
  81c1b4:	defffe04 	addi	sp,sp,-8
  81c1b8:	dc000015 	stw	r16,0(sp)
  81c1bc:	2821883a 	mov	r16,r5
  81c1c0:	2940038f 	ldh	r5,14(r5)
  81c1c4:	dfc00115 	stw	ra,4(sp)
  81c1c8:	081c7580 	call	81c758 <_lseek_r>
  81c1cc:	1007883a 	mov	r3,r2
  81c1d0:	00bfffc4 	movi	r2,-1
  81c1d4:	18800926 	beq	r3,r2,81c1fc <__sseek+0x48>
  81c1d8:	8080030b 	ldhu	r2,12(r16)
  81c1dc:	80c01415 	stw	r3,80(r16)
  81c1e0:	10840014 	ori	r2,r2,4096
  81c1e4:	8080030d 	sth	r2,12(r16)
  81c1e8:	1805883a 	mov	r2,r3
  81c1ec:	dfc00117 	ldw	ra,4(sp)
  81c1f0:	dc000017 	ldw	r16,0(sp)
  81c1f4:	dec00204 	addi	sp,sp,8
  81c1f8:	f800283a 	ret
  81c1fc:	8080030b 	ldhu	r2,12(r16)
  81c200:	10bbffcc 	andi	r2,r2,61439
  81c204:	8080030d 	sth	r2,12(r16)
  81c208:	1805883a 	mov	r2,r3
  81c20c:	dfc00117 	ldw	ra,4(sp)
  81c210:	dc000017 	ldw	r16,0(sp)
  81c214:	dec00204 	addi	sp,sp,8
  81c218:	f800283a 	ret

0081c21c <__swrite>:
  81c21c:	2880030b 	ldhu	r2,12(r5)
  81c220:	defffb04 	addi	sp,sp,-20
  81c224:	dcc00315 	stw	r19,12(sp)
  81c228:	1080400c 	andi	r2,r2,256
  81c22c:	dc800215 	stw	r18,8(sp)
  81c230:	dc400115 	stw	r17,4(sp)
  81c234:	dc000015 	stw	r16,0(sp)
  81c238:	3027883a 	mov	r19,r6
  81c23c:	3825883a 	mov	r18,r7
  81c240:	dfc00415 	stw	ra,16(sp)
  81c244:	2821883a 	mov	r16,r5
  81c248:	000d883a 	mov	r6,zero
  81c24c:	01c00084 	movi	r7,2
  81c250:	2023883a 	mov	r17,r4
  81c254:	10000226 	beq	r2,zero,81c260 <__swrite+0x44>
  81c258:	2940038f 	ldh	r5,14(r5)
  81c25c:	081c7580 	call	81c758 <_lseek_r>
  81c260:	8080030b 	ldhu	r2,12(r16)
  81c264:	8140038f 	ldh	r5,14(r16)
  81c268:	8809883a 	mov	r4,r17
  81c26c:	10bbffcc 	andi	r2,r2,61439
  81c270:	980d883a 	mov	r6,r19
  81c274:	900f883a 	mov	r7,r18
  81c278:	8080030d 	sth	r2,12(r16)
  81c27c:	dfc00417 	ldw	ra,16(sp)
  81c280:	dcc00317 	ldw	r19,12(sp)
  81c284:	dc800217 	ldw	r18,8(sp)
  81c288:	dc400117 	ldw	r17,4(sp)
  81c28c:	dc000017 	ldw	r16,0(sp)
  81c290:	dec00504 	addi	sp,sp,20
  81c294:	081c3b41 	jmpi	81c3b4 <_write_r>

0081c298 <__sread>:
  81c298:	defffe04 	addi	sp,sp,-8
  81c29c:	dc000015 	stw	r16,0(sp)
  81c2a0:	2821883a 	mov	r16,r5
  81c2a4:	2940038f 	ldh	r5,14(r5)
  81c2a8:	dfc00115 	stw	ra,4(sp)
  81c2ac:	081c7d00 	call	81c7d0 <_read_r>
  81c2b0:	1007883a 	mov	r3,r2
  81c2b4:	10000816 	blt	r2,zero,81c2d8 <__sread+0x40>
  81c2b8:	80801417 	ldw	r2,80(r16)
  81c2bc:	10c5883a 	add	r2,r2,r3
  81c2c0:	80801415 	stw	r2,80(r16)
  81c2c4:	1805883a 	mov	r2,r3
  81c2c8:	dfc00117 	ldw	ra,4(sp)
  81c2cc:	dc000017 	ldw	r16,0(sp)
  81c2d0:	dec00204 	addi	sp,sp,8
  81c2d4:	f800283a 	ret
  81c2d8:	8080030b 	ldhu	r2,12(r16)
  81c2dc:	10bbffcc 	andi	r2,r2,61439
  81c2e0:	8080030d 	sth	r2,12(r16)
  81c2e4:	1805883a 	mov	r2,r3
  81c2e8:	dfc00117 	ldw	ra,4(sp)
  81c2ec:	dc000017 	ldw	r16,0(sp)
  81c2f0:	dec00204 	addi	sp,sp,8
  81c2f4:	f800283a 	ret

0081c2f8 <strcmp>:
  81c2f8:	2144b03a 	or	r2,r4,r5
  81c2fc:	108000cc 	andi	r2,r2,3
  81c300:	10001d1e 	bne	r2,zero,81c378 <strcmp+0x80>
  81c304:	200f883a 	mov	r7,r4
  81c308:	28800017 	ldw	r2,0(r5)
  81c30c:	21000017 	ldw	r4,0(r4)
  81c310:	280d883a 	mov	r6,r5
  81c314:	2080161e 	bne	r4,r2,81c370 <strcmp+0x78>
  81c318:	023fbff4 	movhi	r8,65279
  81c31c:	423fbfc4 	addi	r8,r8,-257
  81c320:	2207883a 	add	r3,r4,r8
  81c324:	01602074 	movhi	r5,32897
  81c328:	29602004 	addi	r5,r5,-32640
  81c32c:	1946703a 	and	r3,r3,r5
  81c330:	0104303a 	nor	r2,zero,r4
  81c334:	10c4703a 	and	r2,r2,r3
  81c338:	10001c1e 	bne	r2,zero,81c3ac <strcmp+0xb4>
  81c33c:	4013883a 	mov	r9,r8
  81c340:	2811883a 	mov	r8,r5
  81c344:	00000106 	br	81c34c <strcmp+0x54>
  81c348:	1800181e 	bne	r3,zero,81c3ac <strcmp+0xb4>
  81c34c:	39c00104 	addi	r7,r7,4
  81c350:	39000017 	ldw	r4,0(r7)
  81c354:	31800104 	addi	r6,r6,4
  81c358:	31400017 	ldw	r5,0(r6)
  81c35c:	2245883a 	add	r2,r4,r9
  81c360:	1204703a 	and	r2,r2,r8
  81c364:	0106303a 	nor	r3,zero,r4
  81c368:	1886703a 	and	r3,r3,r2
  81c36c:	217ff626 	beq	r4,r5,81c348 <strcmp+0x50>
  81c370:	3809883a 	mov	r4,r7
  81c374:	300b883a 	mov	r5,r6
  81c378:	20c00007 	ldb	r3,0(r4)
  81c37c:	1800051e 	bne	r3,zero,81c394 <strcmp+0x9c>
  81c380:	00000606 	br	81c39c <strcmp+0xa4>
  81c384:	21000044 	addi	r4,r4,1
  81c388:	20c00007 	ldb	r3,0(r4)
  81c38c:	29400044 	addi	r5,r5,1
  81c390:	18000226 	beq	r3,zero,81c39c <strcmp+0xa4>
  81c394:	28800007 	ldb	r2,0(r5)
  81c398:	18bffa26 	beq	r3,r2,81c384 <strcmp+0x8c>
  81c39c:	20c00003 	ldbu	r3,0(r4)
  81c3a0:	28800003 	ldbu	r2,0(r5)
  81c3a4:	1885c83a 	sub	r2,r3,r2
  81c3a8:	f800283a 	ret
  81c3ac:	0005883a 	mov	r2,zero
  81c3b0:	f800283a 	ret

0081c3b4 <_write_r>:
  81c3b4:	defffd04 	addi	sp,sp,-12
  81c3b8:	dc000015 	stw	r16,0(sp)
  81c3bc:	040020f4 	movhi	r16,131
  81c3c0:	841c9104 	addi	r16,r16,29252
  81c3c4:	dc400115 	stw	r17,4(sp)
  81c3c8:	80000015 	stw	zero,0(r16)
  81c3cc:	2023883a 	mov	r17,r4
  81c3d0:	2809883a 	mov	r4,r5
  81c3d4:	300b883a 	mov	r5,r6
  81c3d8:	380d883a 	mov	r6,r7
  81c3dc:	dfc00215 	stw	ra,8(sp)
  81c3e0:	081e7200 	call	81e720 <write>
  81c3e4:	1007883a 	mov	r3,r2
  81c3e8:	00bfffc4 	movi	r2,-1
  81c3ec:	18800626 	beq	r3,r2,81c408 <_write_r+0x54>
  81c3f0:	1805883a 	mov	r2,r3
  81c3f4:	dfc00217 	ldw	ra,8(sp)
  81c3f8:	dc400117 	ldw	r17,4(sp)
  81c3fc:	dc000017 	ldw	r16,0(sp)
  81c400:	dec00304 	addi	sp,sp,12
  81c404:	f800283a 	ret
  81c408:	80800017 	ldw	r2,0(r16)
  81c40c:	103ff826 	beq	r2,zero,81c3f0 <_write_r+0x3c>
  81c410:	88800015 	stw	r2,0(r17)
  81c414:	1805883a 	mov	r2,r3
  81c418:	dfc00217 	ldw	ra,8(sp)
  81c41c:	dc400117 	ldw	r17,4(sp)
  81c420:	dc000017 	ldw	r16,0(sp)
  81c424:	dec00304 	addi	sp,sp,12
  81c428:	f800283a 	ret

0081c42c <_calloc_r>:
  81c42c:	298b383a 	mul	r5,r5,r6
  81c430:	defffe04 	addi	sp,sp,-8
  81c434:	dc000015 	stw	r16,0(sp)
  81c438:	dfc00115 	stw	ra,4(sp)
  81c43c:	0814f6c0 	call	814f6c <_malloc_r>
  81c440:	1021883a 	mov	r16,r2
  81c444:	01c00904 	movi	r7,36
  81c448:	10000d26 	beq	r2,zero,81c480 <_calloc_r+0x54>
  81c44c:	10ffff17 	ldw	r3,-4(r2)
  81c450:	1009883a 	mov	r4,r2
  81c454:	00bfff04 	movi	r2,-4
  81c458:	1886703a 	and	r3,r3,r2
  81c45c:	1887883a 	add	r3,r3,r2
  81c460:	180d883a 	mov	r6,r3
  81c464:	000b883a 	mov	r5,zero
  81c468:	38c01736 	bltu	r7,r3,81c4c8 <_calloc_r+0x9c>
  81c46c:	008004c4 	movi	r2,19
  81c470:	10c00836 	bltu	r2,r3,81c494 <_calloc_r+0x68>
  81c474:	20000215 	stw	zero,8(r4)
  81c478:	20000015 	stw	zero,0(r4)
  81c47c:	20000115 	stw	zero,4(r4)
  81c480:	8005883a 	mov	r2,r16
  81c484:	dfc00117 	ldw	ra,4(sp)
  81c488:	dc000017 	ldw	r16,0(sp)
  81c48c:	dec00204 	addi	sp,sp,8
  81c490:	f800283a 	ret
  81c494:	008006c4 	movi	r2,27
  81c498:	80000015 	stw	zero,0(r16)
  81c49c:	80000115 	stw	zero,4(r16)
  81c4a0:	81000204 	addi	r4,r16,8
  81c4a4:	10fff32e 	bgeu	r2,r3,81c474 <_calloc_r+0x48>
  81c4a8:	80000215 	stw	zero,8(r16)
  81c4ac:	80000315 	stw	zero,12(r16)
  81c4b0:	81000404 	addi	r4,r16,16
  81c4b4:	19ffef1e 	bne	r3,r7,81c474 <_calloc_r+0x48>
  81c4b8:	81000604 	addi	r4,r16,24
  81c4bc:	80000415 	stw	zero,16(r16)
  81c4c0:	80000515 	stw	zero,20(r16)
  81c4c4:	003feb06 	br	81c474 <_calloc_r+0x48>
  81c4c8:	081aabc0 	call	81aabc <memset>
  81c4cc:	8005883a 	mov	r2,r16
  81c4d0:	dfc00117 	ldw	ra,4(sp)
  81c4d4:	dc000017 	ldw	r16,0(sp)
  81c4d8:	dec00204 	addi	sp,sp,8
  81c4dc:	f800283a 	ret

0081c4e0 <_close_r>:
  81c4e0:	defffd04 	addi	sp,sp,-12
  81c4e4:	dc000015 	stw	r16,0(sp)
  81c4e8:	040020f4 	movhi	r16,131
  81c4ec:	841c9104 	addi	r16,r16,29252
  81c4f0:	dc400115 	stw	r17,4(sp)
  81c4f4:	80000015 	stw	zero,0(r16)
  81c4f8:	2023883a 	mov	r17,r4
  81c4fc:	2809883a 	mov	r4,r5
  81c500:	dfc00215 	stw	ra,8(sp)
  81c504:	081da2c0 	call	81da2c <close>
  81c508:	1007883a 	mov	r3,r2
  81c50c:	00bfffc4 	movi	r2,-1
  81c510:	18800626 	beq	r3,r2,81c52c <_close_r+0x4c>
  81c514:	1805883a 	mov	r2,r3
  81c518:	dfc00217 	ldw	ra,8(sp)
  81c51c:	dc400117 	ldw	r17,4(sp)
  81c520:	dc000017 	ldw	r16,0(sp)
  81c524:	dec00304 	addi	sp,sp,12
  81c528:	f800283a 	ret
  81c52c:	80800017 	ldw	r2,0(r16)
  81c530:	103ff826 	beq	r2,zero,81c514 <_close_r+0x34>
  81c534:	88800015 	stw	r2,0(r17)
  81c538:	1805883a 	mov	r2,r3
  81c53c:	dfc00217 	ldw	ra,8(sp)
  81c540:	dc400117 	ldw	r17,4(sp)
  81c544:	dc000017 	ldw	r16,0(sp)
  81c548:	dec00304 	addi	sp,sp,12
  81c54c:	f800283a 	ret

0081c550 <_fclose_r>:
  81c550:	defffc04 	addi	sp,sp,-16
  81c554:	dc400115 	stw	r17,4(sp)
  81c558:	dc000015 	stw	r16,0(sp)
  81c55c:	dfc00315 	stw	ra,12(sp)
  81c560:	dc800215 	stw	r18,8(sp)
  81c564:	2821883a 	mov	r16,r5
  81c568:	2023883a 	mov	r17,r4
  81c56c:	28002926 	beq	r5,zero,81c614 <_fclose_r+0xc4>
  81c570:	08199dc0 	call	8199dc <__sfp_lock_acquire>
  81c574:	88000226 	beq	r17,zero,81c580 <_fclose_r+0x30>
  81c578:	88800e17 	ldw	r2,56(r17)
  81c57c:	10002d26 	beq	r2,zero,81c634 <_fclose_r+0xe4>
  81c580:	8080030f 	ldh	r2,12(r16)
  81c584:	10002226 	beq	r2,zero,81c610 <_fclose_r+0xc0>
  81c588:	8809883a 	mov	r4,r17
  81c58c:	800b883a 	mov	r5,r16
  81c590:	08197540 	call	819754 <_fflush_r>
  81c594:	1025883a 	mov	r18,r2
  81c598:	80800b17 	ldw	r2,44(r16)
  81c59c:	10000426 	beq	r2,zero,81c5b0 <_fclose_r+0x60>
  81c5a0:	81400717 	ldw	r5,28(r16)
  81c5a4:	8809883a 	mov	r4,r17
  81c5a8:	103ee83a 	callr	r2
  81c5ac:	10002a16 	blt	r2,zero,81c658 <_fclose_r+0x108>
  81c5b0:	8080030b 	ldhu	r2,12(r16)
  81c5b4:	1080200c 	andi	r2,r2,128
  81c5b8:	1000231e 	bne	r2,zero,81c648 <_fclose_r+0xf8>
  81c5bc:	81400c17 	ldw	r5,48(r16)
  81c5c0:	28000526 	beq	r5,zero,81c5d8 <_fclose_r+0x88>
  81c5c4:	80801004 	addi	r2,r16,64
  81c5c8:	28800226 	beq	r5,r2,81c5d4 <_fclose_r+0x84>
  81c5cc:	8809883a 	mov	r4,r17
  81c5d0:	0819d700 	call	819d70 <_free_r>
  81c5d4:	80000c15 	stw	zero,48(r16)
  81c5d8:	81401117 	ldw	r5,68(r16)
  81c5dc:	28000326 	beq	r5,zero,81c5ec <_fclose_r+0x9c>
  81c5e0:	8809883a 	mov	r4,r17
  81c5e4:	0819d700 	call	819d70 <_free_r>
  81c5e8:	80001115 	stw	zero,68(r16)
  81c5ec:	8000030d 	sth	zero,12(r16)
  81c5f0:	08199e00 	call	8199e0 <__sfp_lock_release>
  81c5f4:	9005883a 	mov	r2,r18
  81c5f8:	dfc00317 	ldw	ra,12(sp)
  81c5fc:	dc800217 	ldw	r18,8(sp)
  81c600:	dc400117 	ldw	r17,4(sp)
  81c604:	dc000017 	ldw	r16,0(sp)
  81c608:	dec00404 	addi	sp,sp,16
  81c60c:	f800283a 	ret
  81c610:	08199e00 	call	8199e0 <__sfp_lock_release>
  81c614:	0025883a 	mov	r18,zero
  81c618:	9005883a 	mov	r2,r18
  81c61c:	dfc00317 	ldw	ra,12(sp)
  81c620:	dc800217 	ldw	r18,8(sp)
  81c624:	dc400117 	ldw	r17,4(sp)
  81c628:	dc000017 	ldw	r16,0(sp)
  81c62c:	dec00404 	addi	sp,sp,16
  81c630:	f800283a 	ret
  81c634:	8809883a 	mov	r4,r17
  81c638:	08199ec0 	call	8199ec <__sinit>
  81c63c:	8080030f 	ldh	r2,12(r16)
  81c640:	103fd11e 	bne	r2,zero,81c588 <_fclose_r+0x38>
  81c644:	003ff206 	br	81c610 <_fclose_r+0xc0>
  81c648:	81400417 	ldw	r5,16(r16)
  81c64c:	8809883a 	mov	r4,r17
  81c650:	0819d700 	call	819d70 <_free_r>
  81c654:	003fd906 	br	81c5bc <_fclose_r+0x6c>
  81c658:	04bfffc4 	movi	r18,-1
  81c65c:	003fd406 	br	81c5b0 <_fclose_r+0x60>

0081c660 <fclose>:
  81c660:	008020f4 	movhi	r2,131
  81c664:	10805b04 	addi	r2,r2,364
  81c668:	200b883a 	mov	r5,r4
  81c66c:	11000017 	ldw	r4,0(r2)
  81c670:	081c5501 	jmpi	81c550 <_fclose_r>

0081c674 <_fstat_r>:
  81c674:	defffd04 	addi	sp,sp,-12
  81c678:	dc000015 	stw	r16,0(sp)
  81c67c:	040020f4 	movhi	r16,131
  81c680:	841c9104 	addi	r16,r16,29252
  81c684:	dc400115 	stw	r17,4(sp)
  81c688:	80000015 	stw	zero,0(r16)
  81c68c:	2023883a 	mov	r17,r4
  81c690:	2809883a 	mov	r4,r5
  81c694:	300b883a 	mov	r5,r6
  81c698:	dfc00215 	stw	ra,8(sp)
  81c69c:	081dbb40 	call	81dbb4 <fstat>
  81c6a0:	1007883a 	mov	r3,r2
  81c6a4:	00bfffc4 	movi	r2,-1
  81c6a8:	18800626 	beq	r3,r2,81c6c4 <_fstat_r+0x50>
  81c6ac:	1805883a 	mov	r2,r3
  81c6b0:	dfc00217 	ldw	ra,8(sp)
  81c6b4:	dc400117 	ldw	r17,4(sp)
  81c6b8:	dc000017 	ldw	r16,0(sp)
  81c6bc:	dec00304 	addi	sp,sp,12
  81c6c0:	f800283a 	ret
  81c6c4:	80800017 	ldw	r2,0(r16)
  81c6c8:	103ff826 	beq	r2,zero,81c6ac <_fstat_r+0x38>
  81c6cc:	88800015 	stw	r2,0(r17)
  81c6d0:	1805883a 	mov	r2,r3
  81c6d4:	dfc00217 	ldw	ra,8(sp)
  81c6d8:	dc400117 	ldw	r17,4(sp)
  81c6dc:	dc000017 	ldw	r16,0(sp)
  81c6e0:	dec00304 	addi	sp,sp,12
  81c6e4:	f800283a 	ret

0081c6e8 <_isatty_r>:
  81c6e8:	defffd04 	addi	sp,sp,-12
  81c6ec:	dc000015 	stw	r16,0(sp)
  81c6f0:	040020f4 	movhi	r16,131
  81c6f4:	841c9104 	addi	r16,r16,29252
  81c6f8:	dc400115 	stw	r17,4(sp)
  81c6fc:	80000015 	stw	zero,0(r16)
  81c700:	2023883a 	mov	r17,r4
  81c704:	2809883a 	mov	r4,r5
  81c708:	dfc00215 	stw	ra,8(sp)
  81c70c:	081dea80 	call	81dea8 <isatty>
  81c710:	1007883a 	mov	r3,r2
  81c714:	00bfffc4 	movi	r2,-1
  81c718:	18800626 	beq	r3,r2,81c734 <_isatty_r+0x4c>
  81c71c:	1805883a 	mov	r2,r3
  81c720:	dfc00217 	ldw	ra,8(sp)
  81c724:	dc400117 	ldw	r17,4(sp)
  81c728:	dc000017 	ldw	r16,0(sp)
  81c72c:	dec00304 	addi	sp,sp,12
  81c730:	f800283a 	ret
  81c734:	80800017 	ldw	r2,0(r16)
  81c738:	103ff826 	beq	r2,zero,81c71c <_isatty_r+0x34>
  81c73c:	88800015 	stw	r2,0(r17)
  81c740:	1805883a 	mov	r2,r3
  81c744:	dfc00217 	ldw	ra,8(sp)
  81c748:	dc400117 	ldw	r17,4(sp)
  81c74c:	dc000017 	ldw	r16,0(sp)
  81c750:	dec00304 	addi	sp,sp,12
  81c754:	f800283a 	ret

0081c758 <_lseek_r>:
  81c758:	defffd04 	addi	sp,sp,-12
  81c75c:	dc000015 	stw	r16,0(sp)
  81c760:	040020f4 	movhi	r16,131
  81c764:	841c9104 	addi	r16,r16,29252
  81c768:	dc400115 	stw	r17,4(sp)
  81c76c:	80000015 	stw	zero,0(r16)
  81c770:	2023883a 	mov	r17,r4
  81c774:	2809883a 	mov	r4,r5
  81c778:	300b883a 	mov	r5,r6
  81c77c:	380d883a 	mov	r6,r7
  81c780:	dfc00215 	stw	ra,8(sp)
  81c784:	081e0b40 	call	81e0b4 <lseek>
  81c788:	1007883a 	mov	r3,r2
  81c78c:	00bfffc4 	movi	r2,-1
  81c790:	18800626 	beq	r3,r2,81c7ac <_lseek_r+0x54>
  81c794:	1805883a 	mov	r2,r3
  81c798:	dfc00217 	ldw	ra,8(sp)
  81c79c:	dc400117 	ldw	r17,4(sp)
  81c7a0:	dc000017 	ldw	r16,0(sp)
  81c7a4:	dec00304 	addi	sp,sp,12
  81c7a8:	f800283a 	ret
  81c7ac:	80800017 	ldw	r2,0(r16)
  81c7b0:	103ff826 	beq	r2,zero,81c794 <_lseek_r+0x3c>
  81c7b4:	88800015 	stw	r2,0(r17)
  81c7b8:	1805883a 	mov	r2,r3
  81c7bc:	dfc00217 	ldw	ra,8(sp)
  81c7c0:	dc400117 	ldw	r17,4(sp)
  81c7c4:	dc000017 	ldw	r16,0(sp)
  81c7c8:	dec00304 	addi	sp,sp,12
  81c7cc:	f800283a 	ret

0081c7d0 <_read_r>:
  81c7d0:	defffd04 	addi	sp,sp,-12
  81c7d4:	dc000015 	stw	r16,0(sp)
  81c7d8:	040020f4 	movhi	r16,131
  81c7dc:	841c9104 	addi	r16,r16,29252
  81c7e0:	dc400115 	stw	r17,4(sp)
  81c7e4:	80000015 	stw	zero,0(r16)
  81c7e8:	2023883a 	mov	r17,r4
  81c7ec:	2809883a 	mov	r4,r5
  81c7f0:	300b883a 	mov	r5,r6
  81c7f4:	380d883a 	mov	r6,r7
  81c7f8:	dfc00215 	stw	ra,8(sp)
  81c7fc:	081e2b00 	call	81e2b0 <read>
  81c800:	1007883a 	mov	r3,r2
  81c804:	00bfffc4 	movi	r2,-1
  81c808:	18800626 	beq	r3,r2,81c824 <_read_r+0x54>
  81c80c:	1805883a 	mov	r2,r3
  81c810:	dfc00217 	ldw	ra,8(sp)
  81c814:	dc400117 	ldw	r17,4(sp)
  81c818:	dc000017 	ldw	r16,0(sp)
  81c81c:	dec00304 	addi	sp,sp,12
  81c820:	f800283a 	ret
  81c824:	80800017 	ldw	r2,0(r16)
  81c828:	103ff826 	beq	r2,zero,81c80c <_read_r+0x3c>
  81c82c:	88800015 	stw	r2,0(r17)
  81c830:	1805883a 	mov	r2,r3
  81c834:	dfc00217 	ldw	ra,8(sp)
  81c838:	dc400117 	ldw	r17,4(sp)
  81c83c:	dc000017 	ldw	r16,0(sp)
  81c840:	dec00304 	addi	sp,sp,12
  81c844:	f800283a 	ret

0081c848 <__udivdi3>:
  81c848:	defff004 	addi	sp,sp,-64
  81c84c:	2005883a 	mov	r2,r4
  81c850:	3011883a 	mov	r8,r6
  81c854:	df000e15 	stw	fp,56(sp)
  81c858:	dd000a15 	stw	r20,40(sp)
  81c85c:	dc000615 	stw	r16,24(sp)
  81c860:	dfc00f15 	stw	ra,60(sp)
  81c864:	ddc00d15 	stw	r23,52(sp)
  81c868:	dd800c15 	stw	r22,48(sp)
  81c86c:	dd400b15 	stw	r21,44(sp)
  81c870:	dcc00915 	stw	r19,36(sp)
  81c874:	dc800815 	stw	r18,32(sp)
  81c878:	dc400715 	stw	r17,28(sp)
  81c87c:	4021883a 	mov	r16,r8
  81c880:	1039883a 	mov	fp,r2
  81c884:	2829883a 	mov	r20,r5
  81c888:	38003b1e 	bne	r7,zero,81c978 <__udivdi3+0x130>
  81c88c:	2a005c36 	bltu	r5,r8,81ca00 <__udivdi3+0x1b8>
  81c890:	4000a626 	beq	r8,zero,81cb2c <__udivdi3+0x2e4>
  81c894:	00bfffd4 	movui	r2,65535
  81c898:	14009e36 	bltu	r2,r16,81cb14 <__udivdi3+0x2cc>
  81c89c:	00803fc4 	movi	r2,255
  81c8a0:	14013d36 	bltu	r2,r16,81cd98 <__udivdi3+0x550>
  81c8a4:	000b883a 	mov	r5,zero
  81c8a8:	0005883a 	mov	r2,zero
  81c8ac:	8084d83a 	srl	r2,r16,r2
  81c8b0:	010020f4 	movhi	r4,131
  81c8b4:	2122bf04 	addi	r4,r4,-29956
  81c8b8:	01800804 	movi	r6,32
  81c8bc:	1105883a 	add	r2,r2,r4
  81c8c0:	10c00003 	ldbu	r3,0(r2)
  81c8c4:	28c7883a 	add	r3,r5,r3
  81c8c8:	30edc83a 	sub	r22,r6,r3
  81c8cc:	b000ee1e 	bne	r22,zero,81cc88 <__udivdi3+0x440>
  81c8d0:	802ad43a 	srli	r21,r16,16
  81c8d4:	00800044 	movi	r2,1
  81c8d8:	a423c83a 	sub	r17,r20,r16
  81c8dc:	85ffffcc 	andi	r23,r16,65535
  81c8e0:	d8800315 	stw	r2,12(sp)
  81c8e4:	8809883a 	mov	r4,r17
  81c8e8:	a80b883a 	mov	r5,r21
  81c8ec:	08146bc0 	call	8146bc <__udivsi3>
  81c8f0:	8809883a 	mov	r4,r17
  81c8f4:	a80b883a 	mov	r5,r21
  81c8f8:	102d883a 	mov	r22,r2
  81c8fc:	08146c40 	call	8146c4 <__umodsi3>
  81c900:	1004943a 	slli	r2,r2,16
  81c904:	e006d43a 	srli	r3,fp,16
  81c908:	bda3383a 	mul	r17,r23,r22
  81c90c:	10c4b03a 	or	r2,r2,r3
  81c910:	1440042e 	bgeu	r2,r17,81c924 <__udivdi3+0xdc>
  81c914:	1405883a 	add	r2,r2,r16
  81c918:	b5bfffc4 	addi	r22,r22,-1
  81c91c:	14000136 	bltu	r2,r16,81c924 <__udivdi3+0xdc>
  81c920:	14413d36 	bltu	r2,r17,81ce18 <__udivdi3+0x5d0>
  81c924:	1463c83a 	sub	r17,r2,r17
  81c928:	8809883a 	mov	r4,r17
  81c92c:	a80b883a 	mov	r5,r21
  81c930:	08146bc0 	call	8146bc <__udivsi3>
  81c934:	8809883a 	mov	r4,r17
  81c938:	a80b883a 	mov	r5,r21
  81c93c:	1029883a 	mov	r20,r2
  81c940:	08146c40 	call	8146c4 <__umodsi3>
  81c944:	1004943a 	slli	r2,r2,16
  81c948:	bd09383a 	mul	r4,r23,r20
  81c94c:	e0ffffcc 	andi	r3,fp,65535
  81c950:	10c4b03a 	or	r2,r2,r3
  81c954:	1100042e 	bgeu	r2,r4,81c968 <__udivdi3+0x120>
  81c958:	8085883a 	add	r2,r16,r2
  81c95c:	a53fffc4 	addi	r20,r20,-1
  81c960:	14000136 	bltu	r2,r16,81c968 <__udivdi3+0x120>
  81c964:	11012036 	bltu	r2,r4,81cde8 <__udivdi3+0x5a0>
  81c968:	b004943a 	slli	r2,r22,16
  81c96c:	d9000317 	ldw	r4,12(sp)
  81c970:	a084b03a 	or	r2,r20,r2
  81c974:	00001506 	br	81c9cc <__udivdi3+0x184>
  81c978:	380d883a 	mov	r6,r7
  81c97c:	29c06236 	bltu	r5,r7,81cb08 <__udivdi3+0x2c0>
  81c980:	00bfffd4 	movui	r2,65535
  81c984:	11c05a36 	bltu	r2,r7,81caf0 <__udivdi3+0x2a8>
  81c988:	00803fc4 	movi	r2,255
  81c98c:	11c0fc36 	bltu	r2,r7,81cd80 <__udivdi3+0x538>
  81c990:	000b883a 	mov	r5,zero
  81c994:	0005883a 	mov	r2,zero
  81c998:	3084d83a 	srl	r2,r6,r2
  81c99c:	010020f4 	movhi	r4,131
  81c9a0:	2122bf04 	addi	r4,r4,-29956
  81c9a4:	01c00804 	movi	r7,32
  81c9a8:	1105883a 	add	r2,r2,r4
  81c9ac:	10c00003 	ldbu	r3,0(r2)
  81c9b0:	28c7883a 	add	r3,r5,r3
  81c9b4:	38efc83a 	sub	r23,r7,r3
  81c9b8:	b800691e 	bne	r23,zero,81cb60 <__udivdi3+0x318>
  81c9bc:	35000136 	bltu	r6,r20,81c9c4 <__udivdi3+0x17c>
  81c9c0:	e4005136 	bltu	fp,r16,81cb08 <__udivdi3+0x2c0>
  81c9c4:	00800044 	movi	r2,1
  81c9c8:	0009883a 	mov	r4,zero
  81c9cc:	2007883a 	mov	r3,r4
  81c9d0:	dfc00f17 	ldw	ra,60(sp)
  81c9d4:	df000e17 	ldw	fp,56(sp)
  81c9d8:	ddc00d17 	ldw	r23,52(sp)
  81c9dc:	dd800c17 	ldw	r22,48(sp)
  81c9e0:	dd400b17 	ldw	r21,44(sp)
  81c9e4:	dd000a17 	ldw	r20,40(sp)
  81c9e8:	dcc00917 	ldw	r19,36(sp)
  81c9ec:	dc800817 	ldw	r18,32(sp)
  81c9f0:	dc400717 	ldw	r17,28(sp)
  81c9f4:	dc000617 	ldw	r16,24(sp)
  81c9f8:	dec01004 	addi	sp,sp,64
  81c9fc:	f800283a 	ret
  81ca00:	00bfffd4 	movui	r2,65535
  81ca04:	12005036 	bltu	r2,r8,81cb48 <__udivdi3+0x300>
  81ca08:	00803fc4 	movi	r2,255
  81ca0c:	1200e836 	bltu	r2,r8,81cdb0 <__udivdi3+0x568>
  81ca10:	000b883a 	mov	r5,zero
  81ca14:	0005883a 	mov	r2,zero
  81ca18:	8084d83a 	srl	r2,r16,r2
  81ca1c:	010020f4 	movhi	r4,131
  81ca20:	2122bf04 	addi	r4,r4,-29956
  81ca24:	01800804 	movi	r6,32
  81ca28:	1105883a 	add	r2,r2,r4
  81ca2c:	10c00003 	ldbu	r3,0(r2)
  81ca30:	28c7883a 	add	r3,r5,r3
  81ca34:	30cbc83a 	sub	r5,r6,r3
  81ca38:	28000626 	beq	r5,zero,81ca54 <__udivdi3+0x20c>
  81ca3c:	3145c83a 	sub	r2,r6,r5
  81ca40:	e084d83a 	srl	r2,fp,r2
  81ca44:	a146983a 	sll	r3,r20,r5
  81ca48:	e178983a 	sll	fp,fp,r5
  81ca4c:	8160983a 	sll	r16,r16,r5
  81ca50:	18a8b03a 	or	r20,r3,r2
  81ca54:	802ad43a 	srli	r21,r16,16
  81ca58:	a009883a 	mov	r4,r20
  81ca5c:	85ffffcc 	andi	r23,r16,65535
  81ca60:	a80b883a 	mov	r5,r21
  81ca64:	08146bc0 	call	8146bc <__udivsi3>
  81ca68:	a009883a 	mov	r4,r20
  81ca6c:	a80b883a 	mov	r5,r21
  81ca70:	102d883a 	mov	r22,r2
  81ca74:	08146c40 	call	8146c4 <__umodsi3>
  81ca78:	1004943a 	slli	r2,r2,16
  81ca7c:	e006d43a 	srli	r3,fp,16
  81ca80:	bda3383a 	mul	r17,r23,r22
  81ca84:	10c4b03a 	or	r2,r2,r3
  81ca88:	1440042e 	bgeu	r2,r17,81ca9c <__udivdi3+0x254>
  81ca8c:	1405883a 	add	r2,r2,r16
  81ca90:	b5bfffc4 	addi	r22,r22,-1
  81ca94:	14000136 	bltu	r2,r16,81ca9c <__udivdi3+0x254>
  81ca98:	1440d536 	bltu	r2,r17,81cdf0 <__udivdi3+0x5a8>
  81ca9c:	1463c83a 	sub	r17,r2,r17
  81caa0:	8809883a 	mov	r4,r17
  81caa4:	a80b883a 	mov	r5,r21
  81caa8:	08146bc0 	call	8146bc <__udivsi3>
  81caac:	8809883a 	mov	r4,r17
  81cab0:	a80b883a 	mov	r5,r21
  81cab4:	1029883a 	mov	r20,r2
  81cab8:	08146c40 	call	8146c4 <__umodsi3>
  81cabc:	1004943a 	slli	r2,r2,16
  81cac0:	bd09383a 	mul	r4,r23,r20
  81cac4:	e0ffffcc 	andi	r3,fp,65535
  81cac8:	10c4b03a 	or	r2,r2,r3
  81cacc:	1100042e 	bgeu	r2,r4,81cae0 <__udivdi3+0x298>
  81cad0:	8085883a 	add	r2,r16,r2
  81cad4:	a53fffc4 	addi	r20,r20,-1
  81cad8:	14000136 	bltu	r2,r16,81cae0 <__udivdi3+0x298>
  81cadc:	1100c736 	bltu	r2,r4,81cdfc <__udivdi3+0x5b4>
  81cae0:	b004943a 	slli	r2,r22,16
  81cae4:	0009883a 	mov	r4,zero
  81cae8:	a084b03a 	or	r2,r20,r2
  81caec:	003fb706 	br	81c9cc <__udivdi3+0x184>
  81caf0:	00804034 	movhi	r2,256
  81caf4:	10bfffc4 	addi	r2,r2,-1
  81caf8:	11c0a436 	bltu	r2,r7,81cd8c <__udivdi3+0x544>
  81cafc:	01400404 	movi	r5,16
  81cb00:	2805883a 	mov	r2,r5
  81cb04:	003fa406 	br	81c998 <__udivdi3+0x150>
  81cb08:	0005883a 	mov	r2,zero
  81cb0c:	0009883a 	mov	r4,zero
  81cb10:	003fae06 	br	81c9cc <__udivdi3+0x184>
  81cb14:	00804034 	movhi	r2,256
  81cb18:	10bfffc4 	addi	r2,r2,-1
  81cb1c:	1400a136 	bltu	r2,r16,81cda4 <__udivdi3+0x55c>
  81cb20:	01400404 	movi	r5,16
  81cb24:	2805883a 	mov	r2,r5
  81cb28:	003f6006 	br	81c8ac <__udivdi3+0x64>
  81cb2c:	01000044 	movi	r4,1
  81cb30:	000b883a 	mov	r5,zero
  81cb34:	08146bc0 	call	8146bc <__udivsi3>
  81cb38:	1021883a 	mov	r16,r2
  81cb3c:	00bfffd4 	movui	r2,65535
  81cb40:	143ff436 	bltu	r2,r16,81cb14 <__udivdi3+0x2cc>
  81cb44:	003f5506 	br	81c89c <__udivdi3+0x54>
  81cb48:	00804034 	movhi	r2,256
  81cb4c:	10bfffc4 	addi	r2,r2,-1
  81cb50:	12009a36 	bltu	r2,r8,81cdbc <__udivdi3+0x574>
  81cb54:	01400404 	movi	r5,16
  81cb58:	2805883a 	mov	r2,r5
  81cb5c:	003fae06 	br	81ca18 <__udivdi3+0x1d0>
  81cb60:	3dc5c83a 	sub	r2,r7,r23
  81cb64:	35c8983a 	sll	r4,r6,r23
  81cb68:	8086d83a 	srl	r3,r16,r2
  81cb6c:	a0a2d83a 	srl	r17,r20,r2
  81cb70:	e084d83a 	srl	r2,fp,r2
  81cb74:	20eab03a 	or	r21,r4,r3
  81cb78:	a82cd43a 	srli	r22,r21,16
  81cb7c:	a5c6983a 	sll	r3,r20,r23
  81cb80:	8809883a 	mov	r4,r17
  81cb84:	b00b883a 	mov	r5,r22
  81cb88:	1886b03a 	or	r3,r3,r2
  81cb8c:	d8c00215 	stw	r3,8(sp)
  81cb90:	08146bc0 	call	8146bc <__udivsi3>
  81cb94:	8809883a 	mov	r4,r17
  81cb98:	b00b883a 	mov	r5,r22
  81cb9c:	1029883a 	mov	r20,r2
  81cba0:	08146c40 	call	8146c4 <__umodsi3>
  81cba4:	a8ffffcc 	andi	r3,r21,65535
  81cba8:	d8c00515 	stw	r3,20(sp)
  81cbac:	d9000217 	ldw	r4,8(sp)
  81cbb0:	d9400517 	ldw	r5,20(sp)
  81cbb4:	1004943a 	slli	r2,r2,16
  81cbb8:	2006d43a 	srli	r3,r4,16
  81cbbc:	85e0983a 	sll	r16,r16,r23
  81cbc0:	2d23383a 	mul	r17,r5,r20
  81cbc4:	10c4b03a 	or	r2,r2,r3
  81cbc8:	dc000015 	stw	r16,0(sp)
  81cbcc:	1440032e 	bgeu	r2,r17,81cbdc <__udivdi3+0x394>
  81cbd0:	1545883a 	add	r2,r2,r21
  81cbd4:	a53fffc4 	addi	r20,r20,-1
  81cbd8:	15407f2e 	bgeu	r2,r21,81cdd8 <__udivdi3+0x590>
  81cbdc:	1463c83a 	sub	r17,r2,r17
  81cbe0:	8809883a 	mov	r4,r17
  81cbe4:	b00b883a 	mov	r5,r22
  81cbe8:	08146bc0 	call	8146bc <__udivsi3>
  81cbec:	8809883a 	mov	r4,r17
  81cbf0:	b00b883a 	mov	r5,r22
  81cbf4:	1021883a 	mov	r16,r2
  81cbf8:	08146c40 	call	8146c4 <__umodsi3>
  81cbfc:	d8c00517 	ldw	r3,20(sp)
  81cc00:	d9000217 	ldw	r4,8(sp)
  81cc04:	1004943a 	slli	r2,r2,16
  81cc08:	1c0f383a 	mul	r7,r3,r16
  81cc0c:	20ffffcc 	andi	r3,r4,65535
  81cc10:	10e2b03a 	or	r17,r2,r3
  81cc14:	89c0032e 	bgeu	r17,r7,81cc24 <__udivdi3+0x3dc>
  81cc18:	8d63883a 	add	r17,r17,r21
  81cc1c:	843fffc4 	addi	r16,r16,-1
  81cc20:	8d40692e 	bgeu	r17,r21,81cdc8 <__udivdi3+0x580>
  81cc24:	a008943a 	slli	r4,r20,16
  81cc28:	d9400017 	ldw	r5,0(sp)
  81cc2c:	89e3c83a 	sub	r17,r17,r7
  81cc30:	8110b03a 	or	r8,r16,r4
  81cc34:	280cd43a 	srli	r6,r5,16
  81cc38:	28ffffcc 	andi	r3,r5,65535
  81cc3c:	40bfffcc 	andi	r2,r8,65535
  81cc40:	400ad43a 	srli	r5,r8,16
  81cc44:	10d3383a 	mul	r9,r2,r3
  81cc48:	1185383a 	mul	r2,r2,r6
  81cc4c:	28c7383a 	mul	r3,r5,r3
  81cc50:	4808d43a 	srli	r4,r9,16
  81cc54:	298b383a 	mul	r5,r5,r6
  81cc58:	10c5883a 	add	r2,r2,r3
  81cc5c:	2089883a 	add	r4,r4,r2
  81cc60:	20c0022e 	bgeu	r4,r3,81cc6c <__udivdi3+0x424>
  81cc64:	00800074 	movhi	r2,1
  81cc68:	288b883a 	add	r5,r5,r2
  81cc6c:	2004d43a 	srli	r2,r4,16
  81cc70:	288b883a 	add	r5,r5,r2
  81cc74:	89403f36 	bltu	r17,r5,81cd74 <__udivdi3+0x52c>
  81cc78:	89403926 	beq	r17,r5,81cd60 <__udivdi3+0x518>
  81cc7c:	4005883a 	mov	r2,r8
  81cc80:	0009883a 	mov	r4,zero
  81cc84:	003f5106 	br	81c9cc <__udivdi3+0x184>
  81cc88:	85a0983a 	sll	r16,r16,r22
  81cc8c:	3585c83a 	sub	r2,r6,r22
  81cc90:	a0a2d83a 	srl	r17,r20,r2
  81cc94:	802ad43a 	srli	r21,r16,16
  81cc98:	e084d83a 	srl	r2,fp,r2
  81cc9c:	a586983a 	sll	r3,r20,r22
  81cca0:	8809883a 	mov	r4,r17
  81cca4:	a80b883a 	mov	r5,r21
  81cca8:	1886b03a 	or	r3,r3,r2
  81ccac:	d8c00115 	stw	r3,4(sp)
  81ccb0:	08146bc0 	call	8146bc <__udivsi3>
  81ccb4:	8809883a 	mov	r4,r17
  81ccb8:	a80b883a 	mov	r5,r21
  81ccbc:	d8800415 	stw	r2,16(sp)
  81ccc0:	08146c40 	call	8146c4 <__umodsi3>
  81ccc4:	d9000117 	ldw	r4,4(sp)
  81ccc8:	d9400417 	ldw	r5,16(sp)
  81cccc:	1004943a 	slli	r2,r2,16
  81ccd0:	85ffffcc 	andi	r23,r16,65535
  81ccd4:	2006d43a 	srli	r3,r4,16
  81ccd8:	b963383a 	mul	r17,r23,r5
  81ccdc:	10c4b03a 	or	r2,r2,r3
  81cce0:	1440042e 	bgeu	r2,r17,81ccf4 <__udivdi3+0x4ac>
  81cce4:	297fffc4 	addi	r5,r5,-1
  81cce8:	1405883a 	add	r2,r2,r16
  81ccec:	d9400415 	stw	r5,16(sp)
  81ccf0:	1400442e 	bgeu	r2,r16,81ce04 <__udivdi3+0x5bc>
  81ccf4:	1463c83a 	sub	r17,r2,r17
  81ccf8:	8809883a 	mov	r4,r17
  81ccfc:	a80b883a 	mov	r5,r21
  81cd00:	08146bc0 	call	8146bc <__udivsi3>
  81cd04:	8809883a 	mov	r4,r17
  81cd08:	a80b883a 	mov	r5,r21
  81cd0c:	1029883a 	mov	r20,r2
  81cd10:	08146c40 	call	8146c4 <__umodsi3>
  81cd14:	d9400117 	ldw	r5,4(sp)
  81cd18:	1004943a 	slli	r2,r2,16
  81cd1c:	bd09383a 	mul	r4,r23,r20
  81cd20:	28ffffcc 	andi	r3,r5,65535
  81cd24:	10c6b03a 	or	r3,r2,r3
  81cd28:	1900062e 	bgeu	r3,r4,81cd44 <__udivdi3+0x4fc>
  81cd2c:	1c07883a 	add	r3,r3,r16
  81cd30:	a53fffc4 	addi	r20,r20,-1
  81cd34:	1c000336 	bltu	r3,r16,81cd44 <__udivdi3+0x4fc>
  81cd38:	1900022e 	bgeu	r3,r4,81cd44 <__udivdi3+0x4fc>
  81cd3c:	a53fffc4 	addi	r20,r20,-1
  81cd40:	1c07883a 	add	r3,r3,r16
  81cd44:	d9400417 	ldw	r5,16(sp)
  81cd48:	e5b8983a 	sll	fp,fp,r22
  81cd4c:	1923c83a 	sub	r17,r3,r4
  81cd50:	2804943a 	slli	r2,r5,16
  81cd54:	a0a8b03a 	or	r20,r20,r2
  81cd58:	dd000315 	stw	r20,12(sp)
  81cd5c:	003ee106 	br	81c8e4 <__udivdi3+0x9c>
  81cd60:	2004943a 	slli	r2,r4,16
  81cd64:	e5c8983a 	sll	r4,fp,r23
  81cd68:	48ffffcc 	andi	r3,r9,65535
  81cd6c:	10c5883a 	add	r2,r2,r3
  81cd70:	20bfc22e 	bgeu	r4,r2,81cc7c <__udivdi3+0x434>
  81cd74:	40bfffc4 	addi	r2,r8,-1
  81cd78:	0009883a 	mov	r4,zero
  81cd7c:	003f1306 	br	81c9cc <__udivdi3+0x184>
  81cd80:	01400204 	movi	r5,8
  81cd84:	2805883a 	mov	r2,r5
  81cd88:	003f0306 	br	81c998 <__udivdi3+0x150>
  81cd8c:	01400604 	movi	r5,24
  81cd90:	2805883a 	mov	r2,r5
  81cd94:	003f0006 	br	81c998 <__udivdi3+0x150>
  81cd98:	01400204 	movi	r5,8
  81cd9c:	2805883a 	mov	r2,r5
  81cda0:	003ec206 	br	81c8ac <__udivdi3+0x64>
  81cda4:	01400604 	movi	r5,24
  81cda8:	2805883a 	mov	r2,r5
  81cdac:	003ebf06 	br	81c8ac <__udivdi3+0x64>
  81cdb0:	01400204 	movi	r5,8
  81cdb4:	2805883a 	mov	r2,r5
  81cdb8:	003f1706 	br	81ca18 <__udivdi3+0x1d0>
  81cdbc:	01400604 	movi	r5,24
  81cdc0:	2805883a 	mov	r2,r5
  81cdc4:	003f1406 	br	81ca18 <__udivdi3+0x1d0>
  81cdc8:	89ff962e 	bgeu	r17,r7,81cc24 <__udivdi3+0x3dc>
  81cdcc:	8d63883a 	add	r17,r17,r21
  81cdd0:	843fffc4 	addi	r16,r16,-1
  81cdd4:	003f9306 	br	81cc24 <__udivdi3+0x3dc>
  81cdd8:	147f802e 	bgeu	r2,r17,81cbdc <__udivdi3+0x394>
  81cddc:	a53fffc4 	addi	r20,r20,-1
  81cde0:	1545883a 	add	r2,r2,r21
  81cde4:	003f7d06 	br	81cbdc <__udivdi3+0x394>
  81cde8:	a53fffc4 	addi	r20,r20,-1
  81cdec:	003ede06 	br	81c968 <__udivdi3+0x120>
  81cdf0:	b5bfffc4 	addi	r22,r22,-1
  81cdf4:	1405883a 	add	r2,r2,r16
  81cdf8:	003f2806 	br	81ca9c <__udivdi3+0x254>
  81cdfc:	a53fffc4 	addi	r20,r20,-1
  81ce00:	003f3706 	br	81cae0 <__udivdi3+0x298>
  81ce04:	147fbb2e 	bgeu	r2,r17,81ccf4 <__udivdi3+0x4ac>
  81ce08:	297fffc4 	addi	r5,r5,-1
  81ce0c:	1405883a 	add	r2,r2,r16
  81ce10:	d9400415 	stw	r5,16(sp)
  81ce14:	003fb706 	br	81ccf4 <__udivdi3+0x4ac>
  81ce18:	b5bfffc4 	addi	r22,r22,-1
  81ce1c:	1405883a 	add	r2,r2,r16
  81ce20:	003ec006 	br	81c924 <__udivdi3+0xdc>

0081ce24 <__umoddi3>:
  81ce24:	defff104 	addi	sp,sp,-60
  81ce28:	dd800b15 	stw	r22,44(sp)
  81ce2c:	dd000915 	stw	r20,36(sp)
  81ce30:	dc000515 	stw	r16,20(sp)
  81ce34:	dfc00e15 	stw	ra,56(sp)
  81ce38:	df000d15 	stw	fp,52(sp)
  81ce3c:	ddc00c15 	stw	r23,48(sp)
  81ce40:	dd400a15 	stw	r21,40(sp)
  81ce44:	dcc00815 	stw	r19,32(sp)
  81ce48:	dc800715 	stw	r18,28(sp)
  81ce4c:	dc400615 	stw	r17,24(sp)
  81ce50:	3021883a 	mov	r16,r6
  81ce54:	202d883a 	mov	r22,r4
  81ce58:	2829883a 	mov	r20,r5
  81ce5c:	38002b1e 	bne	r7,zero,81cf0c <__umoddi3+0xe8>
  81ce60:	29805036 	bltu	r5,r6,81cfa4 <__umoddi3+0x180>
  81ce64:	30008a26 	beq	r6,zero,81d090 <__umoddi3+0x26c>
  81ce68:	00bfffd4 	movui	r2,65535
  81ce6c:	14008236 	bltu	r2,r16,81d078 <__umoddi3+0x254>
  81ce70:	00803fc4 	movi	r2,255
  81ce74:	14013636 	bltu	r2,r16,81d350 <__umoddi3+0x52c>
  81ce78:	000b883a 	mov	r5,zero
  81ce7c:	0005883a 	mov	r2,zero
  81ce80:	8084d83a 	srl	r2,r16,r2
  81ce84:	010020f4 	movhi	r4,131
  81ce88:	2122bf04 	addi	r4,r4,-29956
  81ce8c:	01800804 	movi	r6,32
  81ce90:	1105883a 	add	r2,r2,r4
  81ce94:	10c00003 	ldbu	r3,0(r2)
  81ce98:	28c7883a 	add	r3,r5,r3
  81ce9c:	30efc83a 	sub	r23,r6,r3
  81cea0:	b800941e 	bne	r23,zero,81d0f4 <__umoddi3+0x2d0>
  81cea4:	802ad43a 	srli	r21,r16,16
  81cea8:	a423c83a 	sub	r17,r20,r16
  81ceac:	0039883a 	mov	fp,zero
  81ceb0:	853fffcc 	andi	r20,r16,65535
  81ceb4:	8809883a 	mov	r4,r17
  81ceb8:	a80b883a 	mov	r5,r21
  81cebc:	08146bc0 	call	8146bc <__udivsi3>
  81cec0:	8809883a 	mov	r4,r17
  81cec4:	a80b883a 	mov	r5,r21
  81cec8:	a0a3383a 	mul	r17,r20,r2
  81cecc:	08146c40 	call	8146c4 <__umodsi3>
  81ced0:	1004943a 	slli	r2,r2,16
  81ced4:	b006d43a 	srli	r3,r22,16
  81ced8:	10c4b03a 	or	r2,r2,r3
  81cedc:	1440032e 	bgeu	r2,r17,81ceec <__umoddi3+0xc8>
  81cee0:	1405883a 	add	r2,r2,r16
  81cee4:	14000136 	bltu	r2,r16,81ceec <__umoddi3+0xc8>
  81cee8:	14413536 	bltu	r2,r17,81d3c0 <__umoddi3+0x59c>
  81ceec:	1463c83a 	sub	r17,r2,r17
  81cef0:	8809883a 	mov	r4,r17
  81cef4:	a80b883a 	mov	r5,r21
  81cef8:	08146bc0 	call	8146bc <__udivsi3>
  81cefc:	8809883a 	mov	r4,r17
  81cf00:	a0a3383a 	mul	r17,r20,r2
  81cf04:	a80b883a 	mov	r5,r21
  81cf08:	00004d06 	br	81d040 <__umoddi3+0x21c>
  81cf0c:	380d883a 	mov	r6,r7
  81cf10:	29c0102e 	bgeu	r5,r7,81cf54 <__umoddi3+0x130>
  81cf14:	2011883a 	mov	r8,r4
  81cf18:	2813883a 	mov	r9,r5
  81cf1c:	4005883a 	mov	r2,r8
  81cf20:	4807883a 	mov	r3,r9
  81cf24:	dfc00e17 	ldw	ra,56(sp)
  81cf28:	df000d17 	ldw	fp,52(sp)
  81cf2c:	ddc00c17 	ldw	r23,48(sp)
  81cf30:	dd800b17 	ldw	r22,44(sp)
  81cf34:	dd400a17 	ldw	r21,40(sp)
  81cf38:	dd000917 	ldw	r20,36(sp)
  81cf3c:	dcc00817 	ldw	r19,32(sp)
  81cf40:	dc800717 	ldw	r18,28(sp)
  81cf44:	dc400617 	ldw	r17,24(sp)
  81cf48:	dc000517 	ldw	r16,20(sp)
  81cf4c:	dec00f04 	addi	sp,sp,60
  81cf50:	f800283a 	ret
  81cf54:	00bfffd4 	movui	r2,65535
  81cf58:	11c05a36 	bltu	r2,r7,81d0c4 <__umoddi3+0x2a0>
  81cf5c:	00803fc4 	movi	r2,255
  81cf60:	11c0fe36 	bltu	r2,r7,81d35c <__umoddi3+0x538>
  81cf64:	000b883a 	mov	r5,zero
  81cf68:	0005883a 	mov	r2,zero
  81cf6c:	3084d83a 	srl	r2,r6,r2
  81cf70:	010020f4 	movhi	r4,131
  81cf74:	2122bf04 	addi	r4,r4,-29956
  81cf78:	01c00804 	movi	r7,32
  81cf7c:	1105883a 	add	r2,r2,r4
  81cf80:	10c00003 	ldbu	r3,0(r2)
  81cf84:	28c7883a 	add	r3,r5,r3
  81cf88:	38ebc83a 	sub	r21,r7,r3
  81cf8c:	a800851e 	bne	r21,zero,81d1a4 <__umoddi3+0x380>
  81cf90:	35005236 	bltu	r6,r20,81d0dc <__umoddi3+0x2b8>
  81cf94:	b400512e 	bgeu	r22,r16,81d0dc <__umoddi3+0x2b8>
  81cf98:	b011883a 	mov	r8,r22
  81cf9c:	a013883a 	mov	r9,r20
  81cfa0:	003fde06 	br	81cf1c <__umoddi3+0xf8>
  81cfa4:	00bfffd4 	movui	r2,65535
  81cfa8:	11804036 	bltu	r2,r6,81d0ac <__umoddi3+0x288>
  81cfac:	00803fc4 	movi	r2,255
  81cfb0:	1180ed36 	bltu	r2,r6,81d368 <__umoddi3+0x544>
  81cfb4:	000b883a 	mov	r5,zero
  81cfb8:	0005883a 	mov	r2,zero
  81cfbc:	8084d83a 	srl	r2,r16,r2
  81cfc0:	010020f4 	movhi	r4,131
  81cfc4:	2122bf04 	addi	r4,r4,-29956
  81cfc8:	01800804 	movi	r6,32
  81cfcc:	1105883a 	add	r2,r2,r4
  81cfd0:	10c00003 	ldbu	r3,0(r2)
  81cfd4:	28c7883a 	add	r3,r5,r3
  81cfd8:	30c7c83a 	sub	r3,r6,r3
  81cfdc:	1800bf1e 	bne	r3,zero,81d2dc <__umoddi3+0x4b8>
  81cfe0:	0039883a 	mov	fp,zero
  81cfe4:	802ad43a 	srli	r21,r16,16
  81cfe8:	a009883a 	mov	r4,r20
  81cfec:	85ffffcc 	andi	r23,r16,65535
  81cff0:	a80b883a 	mov	r5,r21
  81cff4:	08146bc0 	call	8146bc <__udivsi3>
  81cff8:	a009883a 	mov	r4,r20
  81cffc:	a80b883a 	mov	r5,r21
  81d000:	b8a3383a 	mul	r17,r23,r2
  81d004:	08146c40 	call	8146c4 <__umodsi3>
  81d008:	1004943a 	slli	r2,r2,16
  81d00c:	b006d43a 	srli	r3,r22,16
  81d010:	10c4b03a 	or	r2,r2,r3
  81d014:	1440032e 	bgeu	r2,r17,81d024 <__umoddi3+0x200>
  81d018:	1405883a 	add	r2,r2,r16
  81d01c:	14000136 	bltu	r2,r16,81d024 <__umoddi3+0x200>
  81d020:	1440e536 	bltu	r2,r17,81d3b8 <__umoddi3+0x594>
  81d024:	1463c83a 	sub	r17,r2,r17
  81d028:	8809883a 	mov	r4,r17
  81d02c:	a80b883a 	mov	r5,r21
  81d030:	08146bc0 	call	8146bc <__udivsi3>
  81d034:	8809883a 	mov	r4,r17
  81d038:	b8a3383a 	mul	r17,r23,r2
  81d03c:	a80b883a 	mov	r5,r21
  81d040:	08146c40 	call	8146c4 <__umodsi3>
  81d044:	1004943a 	slli	r2,r2,16
  81d048:	b0ffffcc 	andi	r3,r22,65535
  81d04c:	10c4b03a 	or	r2,r2,r3
  81d050:	1440042e 	bgeu	r2,r17,81d064 <__umoddi3+0x240>
  81d054:	1405883a 	add	r2,r2,r16
  81d058:	14000236 	bltu	r2,r16,81d064 <__umoddi3+0x240>
  81d05c:	1440012e 	bgeu	r2,r17,81d064 <__umoddi3+0x240>
  81d060:	1405883a 	add	r2,r2,r16
  81d064:	1445c83a 	sub	r2,r2,r17
  81d068:	1724d83a 	srl	r18,r2,fp
  81d06c:	0013883a 	mov	r9,zero
  81d070:	9011883a 	mov	r8,r18
  81d074:	003fa906 	br	81cf1c <__umoddi3+0xf8>
  81d078:	00804034 	movhi	r2,256
  81d07c:	10bfffc4 	addi	r2,r2,-1
  81d080:	1400b036 	bltu	r2,r16,81d344 <__umoddi3+0x520>
  81d084:	01400404 	movi	r5,16
  81d088:	2805883a 	mov	r2,r5
  81d08c:	003f7c06 	br	81ce80 <__umoddi3+0x5c>
  81d090:	01000044 	movi	r4,1
  81d094:	000b883a 	mov	r5,zero
  81d098:	08146bc0 	call	8146bc <__udivsi3>
  81d09c:	1021883a 	mov	r16,r2
  81d0a0:	00bfffd4 	movui	r2,65535
  81d0a4:	143ff436 	bltu	r2,r16,81d078 <__umoddi3+0x254>
  81d0a8:	003f7106 	br	81ce70 <__umoddi3+0x4c>
  81d0ac:	00804034 	movhi	r2,256
  81d0b0:	10bfffc4 	addi	r2,r2,-1
  81d0b4:	1180af36 	bltu	r2,r6,81d374 <__umoddi3+0x550>
  81d0b8:	01400404 	movi	r5,16
  81d0bc:	2805883a 	mov	r2,r5
  81d0c0:	003fbe06 	br	81cfbc <__umoddi3+0x198>
  81d0c4:	00804034 	movhi	r2,256
  81d0c8:	10bfffc4 	addi	r2,r2,-1
  81d0cc:	11c0ac36 	bltu	r2,r7,81d380 <__umoddi3+0x55c>
  81d0d0:	01400404 	movi	r5,16
  81d0d4:	2805883a 	mov	r2,r5
  81d0d8:	003fa406 	br	81cf6c <__umoddi3+0x148>
  81d0dc:	b409c83a 	sub	r4,r22,r16
  81d0e0:	b105803a 	cmpltu	r2,r22,r4
  81d0e4:	a187c83a 	sub	r3,r20,r6
  81d0e8:	18a9c83a 	sub	r20,r3,r2
  81d0ec:	202d883a 	mov	r22,r4
  81d0f0:	003fa906 	br	81cf98 <__umoddi3+0x174>
  81d0f4:	85e0983a 	sll	r16,r16,r23
  81d0f8:	35c5c83a 	sub	r2,r6,r23
  81d0fc:	a0a2d83a 	srl	r17,r20,r2
  81d100:	802ad43a 	srli	r21,r16,16
  81d104:	b084d83a 	srl	r2,r22,r2
  81d108:	a5c6983a 	sll	r3,r20,r23
  81d10c:	8809883a 	mov	r4,r17
  81d110:	a80b883a 	mov	r5,r21
  81d114:	1886b03a 	or	r3,r3,r2
  81d118:	d8c00115 	stw	r3,4(sp)
  81d11c:	853fffcc 	andi	r20,r16,65535
  81d120:	08146bc0 	call	8146bc <__udivsi3>
  81d124:	8809883a 	mov	r4,r17
  81d128:	a80b883a 	mov	r5,r21
  81d12c:	a0a3383a 	mul	r17,r20,r2
  81d130:	08146c40 	call	8146c4 <__umodsi3>
  81d134:	d9000117 	ldw	r4,4(sp)
  81d138:	1004943a 	slli	r2,r2,16
  81d13c:	b839883a 	mov	fp,r23
  81d140:	2006d43a 	srli	r3,r4,16
  81d144:	10c4b03a 	or	r2,r2,r3
  81d148:	1440022e 	bgeu	r2,r17,81d154 <__umoddi3+0x330>
  81d14c:	1405883a 	add	r2,r2,r16
  81d150:	1400962e 	bgeu	r2,r16,81d3ac <__umoddi3+0x588>
  81d154:	1463c83a 	sub	r17,r2,r17
  81d158:	8809883a 	mov	r4,r17
  81d15c:	a80b883a 	mov	r5,r21
  81d160:	08146bc0 	call	8146bc <__udivsi3>
  81d164:	8809883a 	mov	r4,r17
  81d168:	a80b883a 	mov	r5,r21
  81d16c:	a0a3383a 	mul	r17,r20,r2
  81d170:	08146c40 	call	8146c4 <__umodsi3>
  81d174:	d9400117 	ldw	r5,4(sp)
  81d178:	1004943a 	slli	r2,r2,16
  81d17c:	28ffffcc 	andi	r3,r5,65535
  81d180:	10c4b03a 	or	r2,r2,r3
  81d184:	1440042e 	bgeu	r2,r17,81d198 <__umoddi3+0x374>
  81d188:	1405883a 	add	r2,r2,r16
  81d18c:	14000236 	bltu	r2,r16,81d198 <__umoddi3+0x374>
  81d190:	1440012e 	bgeu	r2,r17,81d198 <__umoddi3+0x374>
  81d194:	1405883a 	add	r2,r2,r16
  81d198:	b5ec983a 	sll	r22,r22,r23
  81d19c:	1463c83a 	sub	r17,r2,r17
  81d1a0:	003f4406 	br	81ceb4 <__umoddi3+0x90>
  81d1a4:	3d4fc83a 	sub	r7,r7,r21
  81d1a8:	3546983a 	sll	r3,r6,r21
  81d1ac:	81c4d83a 	srl	r2,r16,r7
  81d1b0:	a1e2d83a 	srl	r17,r20,r7
  81d1b4:	a54c983a 	sll	r6,r20,r21
  81d1b8:	18aeb03a 	or	r23,r3,r2
  81d1bc:	b828d43a 	srli	r20,r23,16
  81d1c0:	b1c4d83a 	srl	r2,r22,r7
  81d1c4:	8809883a 	mov	r4,r17
  81d1c8:	a00b883a 	mov	r5,r20
  81d1cc:	308cb03a 	or	r6,r6,r2
  81d1d0:	d9c00315 	stw	r7,12(sp)
  81d1d4:	d9800215 	stw	r6,8(sp)
  81d1d8:	08146bc0 	call	8146bc <__udivsi3>
  81d1dc:	8809883a 	mov	r4,r17
  81d1e0:	a00b883a 	mov	r5,r20
  81d1e4:	1039883a 	mov	fp,r2
  81d1e8:	08146c40 	call	8146c4 <__umodsi3>
  81d1ec:	b8ffffcc 	andi	r3,r23,65535
  81d1f0:	d8c00415 	stw	r3,16(sp)
  81d1f4:	d9000217 	ldw	r4,8(sp)
  81d1f8:	d9400417 	ldw	r5,16(sp)
  81d1fc:	1004943a 	slli	r2,r2,16
  81d200:	2006d43a 	srli	r3,r4,16
  81d204:	8560983a 	sll	r16,r16,r21
  81d208:	2f23383a 	mul	r17,r5,fp
  81d20c:	10c4b03a 	or	r2,r2,r3
  81d210:	dc000015 	stw	r16,0(sp)
  81d214:	b56c983a 	sll	r22,r22,r21
  81d218:	1440032e 	bgeu	r2,r17,81d228 <__umoddi3+0x404>
  81d21c:	15c5883a 	add	r2,r2,r23
  81d220:	e73fffc4 	addi	fp,fp,-1
  81d224:	15c05d2e 	bgeu	r2,r23,81d39c <__umoddi3+0x578>
  81d228:	1463c83a 	sub	r17,r2,r17
  81d22c:	8809883a 	mov	r4,r17
  81d230:	a00b883a 	mov	r5,r20
  81d234:	08146bc0 	call	8146bc <__udivsi3>
  81d238:	8809883a 	mov	r4,r17
  81d23c:	a00b883a 	mov	r5,r20
  81d240:	1021883a 	mov	r16,r2
  81d244:	08146c40 	call	8146c4 <__umodsi3>
  81d248:	d8c00417 	ldw	r3,16(sp)
  81d24c:	d9000217 	ldw	r4,8(sp)
  81d250:	1004943a 	slli	r2,r2,16
  81d254:	1c23383a 	mul	r17,r3,r16
  81d258:	20ffffcc 	andi	r3,r4,65535
  81d25c:	10ceb03a 	or	r7,r2,r3
  81d260:	3c40032e 	bgeu	r7,r17,81d270 <__umoddi3+0x44c>
  81d264:	3dcf883a 	add	r7,r7,r23
  81d268:	843fffc4 	addi	r16,r16,-1
  81d26c:	3dc0472e 	bgeu	r7,r23,81d38c <__umoddi3+0x568>
  81d270:	e004943a 	slli	r2,fp,16
  81d274:	d9400017 	ldw	r5,0(sp)
  81d278:	3c4fc83a 	sub	r7,r7,r17
  81d27c:	8084b03a 	or	r2,r16,r2
  81d280:	28ffffcc 	andi	r3,r5,65535
  81d284:	280cd43a 	srli	r6,r5,16
  81d288:	100ad43a 	srli	r5,r2,16
  81d28c:	10bfffcc 	andi	r2,r2,65535
  81d290:	10d1383a 	mul	r8,r2,r3
  81d294:	28c7383a 	mul	r3,r5,r3
  81d298:	1185383a 	mul	r2,r2,r6
  81d29c:	4008d43a 	srli	r4,r8,16
  81d2a0:	298b383a 	mul	r5,r5,r6
  81d2a4:	10c5883a 	add	r2,r2,r3
  81d2a8:	2089883a 	add	r4,r4,r2
  81d2ac:	20c0022e 	bgeu	r4,r3,81d2b8 <__umoddi3+0x494>
  81d2b0:	00800074 	movhi	r2,1
  81d2b4:	288b883a 	add	r5,r5,r2
  81d2b8:	2004d43a 	srli	r2,r4,16
  81d2bc:	2008943a 	slli	r4,r4,16
  81d2c0:	40ffffcc 	andi	r3,r8,65535
  81d2c4:	288b883a 	add	r5,r5,r2
  81d2c8:	20c9883a 	add	r4,r4,r3
  81d2cc:	39400b36 	bltu	r7,r5,81d2fc <__umoddi3+0x4d8>
  81d2d0:	39403d26 	beq	r7,r5,81d3c8 <__umoddi3+0x5a4>
  81d2d4:	394bc83a 	sub	r5,r7,r5
  81d2d8:	00000f06 	br	81d318 <__umoddi3+0x4f4>
  81d2dc:	30c5c83a 	sub	r2,r6,r3
  81d2e0:	1839883a 	mov	fp,r3
  81d2e4:	b084d83a 	srl	r2,r22,r2
  81d2e8:	a0c6983a 	sll	r3,r20,r3
  81d2ec:	8720983a 	sll	r16,r16,fp
  81d2f0:	b72c983a 	sll	r22,r22,fp
  81d2f4:	18a8b03a 	or	r20,r3,r2
  81d2f8:	003f3a06 	br	81cfe4 <__umoddi3+0x1c0>
  81d2fc:	d8c00017 	ldw	r3,0(sp)
  81d300:	20c5c83a 	sub	r2,r4,r3
  81d304:	2089803a 	cmpltu	r4,r4,r2
  81d308:	2dc7c83a 	sub	r3,r5,r23
  81d30c:	1907c83a 	sub	r3,r3,r4
  81d310:	38cbc83a 	sub	r5,r7,r3
  81d314:	1009883a 	mov	r4,r2
  81d318:	b105c83a 	sub	r2,r22,r4
  81d31c:	b087803a 	cmpltu	r3,r22,r2
  81d320:	28c7c83a 	sub	r3,r5,r3
  81d324:	d9400317 	ldw	r5,12(sp)
  81d328:	1544d83a 	srl	r2,r2,r21
  81d32c:	1948983a 	sll	r4,r3,r5
  81d330:	1d46d83a 	srl	r3,r3,r21
  81d334:	20a4b03a 	or	r18,r4,r2
  81d338:	9011883a 	mov	r8,r18
  81d33c:	1813883a 	mov	r9,r3
  81d340:	003ef606 	br	81cf1c <__umoddi3+0xf8>
  81d344:	01400604 	movi	r5,24
  81d348:	2805883a 	mov	r2,r5
  81d34c:	003ecc06 	br	81ce80 <__umoddi3+0x5c>
  81d350:	01400204 	movi	r5,8
  81d354:	2805883a 	mov	r2,r5
  81d358:	003ec906 	br	81ce80 <__umoddi3+0x5c>
  81d35c:	01400204 	movi	r5,8
  81d360:	2805883a 	mov	r2,r5
  81d364:	003f0106 	br	81cf6c <__umoddi3+0x148>
  81d368:	01400204 	movi	r5,8
  81d36c:	2805883a 	mov	r2,r5
  81d370:	003f1206 	br	81cfbc <__umoddi3+0x198>
  81d374:	01400604 	movi	r5,24
  81d378:	2805883a 	mov	r2,r5
  81d37c:	003f0f06 	br	81cfbc <__umoddi3+0x198>
  81d380:	01400604 	movi	r5,24
  81d384:	2805883a 	mov	r2,r5
  81d388:	003ef806 	br	81cf6c <__umoddi3+0x148>
  81d38c:	3c7fb82e 	bgeu	r7,r17,81d270 <__umoddi3+0x44c>
  81d390:	843fffc4 	addi	r16,r16,-1
  81d394:	3dcf883a 	add	r7,r7,r23
  81d398:	003fb506 	br	81d270 <__umoddi3+0x44c>
  81d39c:	147fa22e 	bgeu	r2,r17,81d228 <__umoddi3+0x404>
  81d3a0:	e73fffc4 	addi	fp,fp,-1
  81d3a4:	15c5883a 	add	r2,r2,r23
  81d3a8:	003f9f06 	br	81d228 <__umoddi3+0x404>
  81d3ac:	147f692e 	bgeu	r2,r17,81d154 <__umoddi3+0x330>
  81d3b0:	1405883a 	add	r2,r2,r16
  81d3b4:	003f6706 	br	81d154 <__umoddi3+0x330>
  81d3b8:	1405883a 	add	r2,r2,r16
  81d3bc:	003f1906 	br	81d024 <__umoddi3+0x200>
  81d3c0:	1405883a 	add	r2,r2,r16
  81d3c4:	003ec906 	br	81ceec <__umoddi3+0xc8>
  81d3c8:	b13fcc36 	bltu	r22,r4,81d2fc <__umoddi3+0x4d8>
  81d3cc:	000b883a 	mov	r5,zero
  81d3d0:	003fd106 	br	81d318 <__umoddi3+0x4f4>

0081d3d4 <__eqdf2>:
  81d3d4:	deffef04 	addi	sp,sp,-68
  81d3d8:	dc400f15 	stw	r17,60(sp)
  81d3dc:	dc400404 	addi	r17,sp,16
  81d3e0:	2005883a 	mov	r2,r4
  81d3e4:	2807883a 	mov	r3,r5
  81d3e8:	dc000e15 	stw	r16,56(sp)
  81d3ec:	d809883a 	mov	r4,sp
  81d3f0:	880b883a 	mov	r5,r17
  81d3f4:	dc000904 	addi	r16,sp,36
  81d3f8:	d8c00115 	stw	r3,4(sp)
  81d3fc:	d8800015 	stw	r2,0(sp)
  81d400:	d9800215 	stw	r6,8(sp)
  81d404:	dfc01015 	stw	ra,64(sp)
  81d408:	d9c00315 	stw	r7,12(sp)
  81d40c:	0814df40 	call	814df4 <__unpack_d>
  81d410:	d9000204 	addi	r4,sp,8
  81d414:	800b883a 	mov	r5,r16
  81d418:	0814df40 	call	814df4 <__unpack_d>
  81d41c:	d8800417 	ldw	r2,16(sp)
  81d420:	00c00044 	movi	r3,1
  81d424:	180d883a 	mov	r6,r3
  81d428:	1880062e 	bgeu	r3,r2,81d444 <__eqdf2+0x70>
  81d42c:	d8800917 	ldw	r2,36(sp)
  81d430:	8809883a 	mov	r4,r17
  81d434:	800b883a 	mov	r5,r16
  81d438:	1880022e 	bgeu	r3,r2,81d444 <__eqdf2+0x70>
  81d43c:	081d8100 	call	81d810 <__fpcmp_parts_d>
  81d440:	100d883a 	mov	r6,r2
  81d444:	3005883a 	mov	r2,r6
  81d448:	dfc01017 	ldw	ra,64(sp)
  81d44c:	dc400f17 	ldw	r17,60(sp)
  81d450:	dc000e17 	ldw	r16,56(sp)
  81d454:	dec01104 	addi	sp,sp,68
  81d458:	f800283a 	ret

0081d45c <__nedf2>:
  81d45c:	deffef04 	addi	sp,sp,-68
  81d460:	dc400f15 	stw	r17,60(sp)
  81d464:	dc400404 	addi	r17,sp,16
  81d468:	2005883a 	mov	r2,r4
  81d46c:	2807883a 	mov	r3,r5
  81d470:	dc000e15 	stw	r16,56(sp)
  81d474:	d809883a 	mov	r4,sp
  81d478:	880b883a 	mov	r5,r17
  81d47c:	dc000904 	addi	r16,sp,36
  81d480:	d8c00115 	stw	r3,4(sp)
  81d484:	d8800015 	stw	r2,0(sp)
  81d488:	d9800215 	stw	r6,8(sp)
  81d48c:	dfc01015 	stw	ra,64(sp)
  81d490:	d9c00315 	stw	r7,12(sp)
  81d494:	0814df40 	call	814df4 <__unpack_d>
  81d498:	d9000204 	addi	r4,sp,8
  81d49c:	800b883a 	mov	r5,r16
  81d4a0:	0814df40 	call	814df4 <__unpack_d>
  81d4a4:	d8800417 	ldw	r2,16(sp)
  81d4a8:	00c00044 	movi	r3,1
  81d4ac:	180d883a 	mov	r6,r3
  81d4b0:	1880062e 	bgeu	r3,r2,81d4cc <__nedf2+0x70>
  81d4b4:	d8800917 	ldw	r2,36(sp)
  81d4b8:	8809883a 	mov	r4,r17
  81d4bc:	800b883a 	mov	r5,r16
  81d4c0:	1880022e 	bgeu	r3,r2,81d4cc <__nedf2+0x70>
  81d4c4:	081d8100 	call	81d810 <__fpcmp_parts_d>
  81d4c8:	100d883a 	mov	r6,r2
  81d4cc:	3005883a 	mov	r2,r6
  81d4d0:	dfc01017 	ldw	ra,64(sp)
  81d4d4:	dc400f17 	ldw	r17,60(sp)
  81d4d8:	dc000e17 	ldw	r16,56(sp)
  81d4dc:	dec01104 	addi	sp,sp,68
  81d4e0:	f800283a 	ret

0081d4e4 <__gtdf2>:
  81d4e4:	deffef04 	addi	sp,sp,-68
  81d4e8:	dc400f15 	stw	r17,60(sp)
  81d4ec:	dc400404 	addi	r17,sp,16
  81d4f0:	2005883a 	mov	r2,r4
  81d4f4:	2807883a 	mov	r3,r5
  81d4f8:	dc000e15 	stw	r16,56(sp)
  81d4fc:	d809883a 	mov	r4,sp
  81d500:	880b883a 	mov	r5,r17
  81d504:	dc000904 	addi	r16,sp,36
  81d508:	d8c00115 	stw	r3,4(sp)
  81d50c:	d8800015 	stw	r2,0(sp)
  81d510:	d9800215 	stw	r6,8(sp)
  81d514:	dfc01015 	stw	ra,64(sp)
  81d518:	d9c00315 	stw	r7,12(sp)
  81d51c:	0814df40 	call	814df4 <__unpack_d>
  81d520:	d9000204 	addi	r4,sp,8
  81d524:	800b883a 	mov	r5,r16
  81d528:	0814df40 	call	814df4 <__unpack_d>
  81d52c:	d8800417 	ldw	r2,16(sp)
  81d530:	00c00044 	movi	r3,1
  81d534:	01bfffc4 	movi	r6,-1
  81d538:	1880062e 	bgeu	r3,r2,81d554 <__gtdf2+0x70>
  81d53c:	d8800917 	ldw	r2,36(sp)
  81d540:	8809883a 	mov	r4,r17
  81d544:	800b883a 	mov	r5,r16
  81d548:	1880022e 	bgeu	r3,r2,81d554 <__gtdf2+0x70>
  81d54c:	081d8100 	call	81d810 <__fpcmp_parts_d>
  81d550:	100d883a 	mov	r6,r2
  81d554:	3005883a 	mov	r2,r6
  81d558:	dfc01017 	ldw	ra,64(sp)
  81d55c:	dc400f17 	ldw	r17,60(sp)
  81d560:	dc000e17 	ldw	r16,56(sp)
  81d564:	dec01104 	addi	sp,sp,68
  81d568:	f800283a 	ret

0081d56c <__gedf2>:
  81d56c:	deffef04 	addi	sp,sp,-68
  81d570:	dc400f15 	stw	r17,60(sp)
  81d574:	dc400404 	addi	r17,sp,16
  81d578:	2005883a 	mov	r2,r4
  81d57c:	2807883a 	mov	r3,r5
  81d580:	dc000e15 	stw	r16,56(sp)
  81d584:	d809883a 	mov	r4,sp
  81d588:	880b883a 	mov	r5,r17
  81d58c:	dc000904 	addi	r16,sp,36
  81d590:	d8c00115 	stw	r3,4(sp)
  81d594:	d8800015 	stw	r2,0(sp)
  81d598:	d9800215 	stw	r6,8(sp)
  81d59c:	dfc01015 	stw	ra,64(sp)
  81d5a0:	d9c00315 	stw	r7,12(sp)
  81d5a4:	0814df40 	call	814df4 <__unpack_d>
  81d5a8:	d9000204 	addi	r4,sp,8
  81d5ac:	800b883a 	mov	r5,r16
  81d5b0:	0814df40 	call	814df4 <__unpack_d>
  81d5b4:	d8800417 	ldw	r2,16(sp)
  81d5b8:	00c00044 	movi	r3,1
  81d5bc:	01bfffc4 	movi	r6,-1
  81d5c0:	1880062e 	bgeu	r3,r2,81d5dc <__gedf2+0x70>
  81d5c4:	d8800917 	ldw	r2,36(sp)
  81d5c8:	8809883a 	mov	r4,r17
  81d5cc:	800b883a 	mov	r5,r16
  81d5d0:	1880022e 	bgeu	r3,r2,81d5dc <__gedf2+0x70>
  81d5d4:	081d8100 	call	81d810 <__fpcmp_parts_d>
  81d5d8:	100d883a 	mov	r6,r2
  81d5dc:	3005883a 	mov	r2,r6
  81d5e0:	dfc01017 	ldw	ra,64(sp)
  81d5e4:	dc400f17 	ldw	r17,60(sp)
  81d5e8:	dc000e17 	ldw	r16,56(sp)
  81d5ec:	dec01104 	addi	sp,sp,68
  81d5f0:	f800283a 	ret

0081d5f4 <__ltdf2>:
  81d5f4:	deffef04 	addi	sp,sp,-68
  81d5f8:	dc400f15 	stw	r17,60(sp)
  81d5fc:	dc400404 	addi	r17,sp,16
  81d600:	2005883a 	mov	r2,r4
  81d604:	2807883a 	mov	r3,r5
  81d608:	dc000e15 	stw	r16,56(sp)
  81d60c:	d809883a 	mov	r4,sp
  81d610:	880b883a 	mov	r5,r17
  81d614:	dc000904 	addi	r16,sp,36
  81d618:	d8c00115 	stw	r3,4(sp)
  81d61c:	d8800015 	stw	r2,0(sp)
  81d620:	d9800215 	stw	r6,8(sp)
  81d624:	dfc01015 	stw	ra,64(sp)
  81d628:	d9c00315 	stw	r7,12(sp)
  81d62c:	0814df40 	call	814df4 <__unpack_d>
  81d630:	d9000204 	addi	r4,sp,8
  81d634:	800b883a 	mov	r5,r16
  81d638:	0814df40 	call	814df4 <__unpack_d>
  81d63c:	d8800417 	ldw	r2,16(sp)
  81d640:	00c00044 	movi	r3,1
  81d644:	180d883a 	mov	r6,r3
  81d648:	1880062e 	bgeu	r3,r2,81d664 <__ltdf2+0x70>
  81d64c:	d8800917 	ldw	r2,36(sp)
  81d650:	8809883a 	mov	r4,r17
  81d654:	800b883a 	mov	r5,r16
  81d658:	1880022e 	bgeu	r3,r2,81d664 <__ltdf2+0x70>
  81d65c:	081d8100 	call	81d810 <__fpcmp_parts_d>
  81d660:	100d883a 	mov	r6,r2
  81d664:	3005883a 	mov	r2,r6
  81d668:	dfc01017 	ldw	ra,64(sp)
  81d66c:	dc400f17 	ldw	r17,60(sp)
  81d670:	dc000e17 	ldw	r16,56(sp)
  81d674:	dec01104 	addi	sp,sp,68
  81d678:	f800283a 	ret

0081d67c <__floatunsidf>:
  81d67c:	defff204 	addi	sp,sp,-56
  81d680:	dfc00d15 	stw	ra,52(sp)
  81d684:	ddc00c15 	stw	r23,48(sp)
  81d688:	dd800b15 	stw	r22,44(sp)
  81d68c:	dd400a15 	stw	r21,40(sp)
  81d690:	dd000915 	stw	r20,36(sp)
  81d694:	dcc00815 	stw	r19,32(sp)
  81d698:	dc800715 	stw	r18,28(sp)
  81d69c:	dc400615 	stw	r17,24(sp)
  81d6a0:	dc000515 	stw	r16,20(sp)
  81d6a4:	d8000115 	stw	zero,4(sp)
  81d6a8:	20000f1e 	bne	r4,zero,81d6e8 <__floatunsidf+0x6c>
  81d6ac:	00800084 	movi	r2,2
  81d6b0:	d8800015 	stw	r2,0(sp)
  81d6b4:	d809883a 	mov	r4,sp
  81d6b8:	0814ae00 	call	814ae0 <__pack_d>
  81d6bc:	dfc00d17 	ldw	ra,52(sp)
  81d6c0:	ddc00c17 	ldw	r23,48(sp)
  81d6c4:	dd800b17 	ldw	r22,44(sp)
  81d6c8:	dd400a17 	ldw	r21,40(sp)
  81d6cc:	dd000917 	ldw	r20,36(sp)
  81d6d0:	dcc00817 	ldw	r19,32(sp)
  81d6d4:	dc800717 	ldw	r18,28(sp)
  81d6d8:	dc400617 	ldw	r17,24(sp)
  81d6dc:	dc000517 	ldw	r16,20(sp)
  81d6e0:	dec00e04 	addi	sp,sp,56
  81d6e4:	f800283a 	ret
  81d6e8:	008000c4 	movi	r2,3
  81d6ec:	00c00f04 	movi	r3,60
  81d6f0:	002f883a 	mov	r23,zero
  81d6f4:	202d883a 	mov	r22,r4
  81d6f8:	d8800015 	stw	r2,0(sp)
  81d6fc:	d8c00215 	stw	r3,8(sp)
  81d700:	d9000315 	stw	r4,12(sp)
  81d704:	ddc00415 	stw	r23,16(sp)
  81d708:	08147640 	call	814764 <__clzsi2>
  81d70c:	12400744 	addi	r9,r2,29
  81d710:	48000b16 	blt	r9,zero,81d740 <__floatunsidf+0xc4>
  81d714:	483fe726 	beq	r9,zero,81d6b4 <__floatunsidf+0x38>
  81d718:	10bfff44 	addi	r2,r2,-3
  81d71c:	10002e16 	blt	r2,zero,81d7d8 <__floatunsidf+0x15c>
  81d720:	b0a2983a 	sll	r17,r22,r2
  81d724:	0021883a 	mov	r16,zero
  81d728:	d8800217 	ldw	r2,8(sp)
  81d72c:	dc400415 	stw	r17,16(sp)
  81d730:	dc000315 	stw	r16,12(sp)
  81d734:	1245c83a 	sub	r2,r2,r9
  81d738:	d8800215 	stw	r2,8(sp)
  81d73c:	003fdd06 	br	81d6b4 <__floatunsidf+0x38>
  81d740:	0255c83a 	sub	r10,zero,r9
  81d744:	51bff804 	addi	r6,r10,-32
  81d748:	30001b16 	blt	r6,zero,81d7b8 <__floatunsidf+0x13c>
  81d74c:	b9a8d83a 	srl	r20,r23,r6
  81d750:	002b883a 	mov	r21,zero
  81d754:	000f883a 	mov	r7,zero
  81d758:	01000044 	movi	r4,1
  81d75c:	0011883a 	mov	r8,zero
  81d760:	30002516 	blt	r6,zero,81d7f8 <__floatunsidf+0x17c>
  81d764:	21a6983a 	sll	r19,r4,r6
  81d768:	0025883a 	mov	r18,zero
  81d76c:	00bfffc4 	movi	r2,-1
  81d770:	9089883a 	add	r4,r18,r2
  81d774:	988b883a 	add	r5,r19,r2
  81d778:	248d803a 	cmpltu	r6,r4,r18
  81d77c:	314b883a 	add	r5,r6,r5
  81d780:	b104703a 	and	r2,r22,r4
  81d784:	b946703a 	and	r3,r23,r5
  81d788:	10c4b03a 	or	r2,r2,r3
  81d78c:	10000226 	beq	r2,zero,81d798 <__floatunsidf+0x11c>
  81d790:	01c00044 	movi	r7,1
  81d794:	0011883a 	mov	r8,zero
  81d798:	d9000217 	ldw	r4,8(sp)
  81d79c:	a1c4b03a 	or	r2,r20,r7
  81d7a0:	aa06b03a 	or	r3,r21,r8
  81d7a4:	2249c83a 	sub	r4,r4,r9
  81d7a8:	d8c00415 	stw	r3,16(sp)
  81d7ac:	d9000215 	stw	r4,8(sp)
  81d7b0:	d8800315 	stw	r2,12(sp)
  81d7b4:	003fbf06 	br	81d6b4 <__floatunsidf+0x38>
  81d7b8:	bdc7883a 	add	r3,r23,r23
  81d7bc:	008007c4 	movi	r2,31
  81d7c0:	1285c83a 	sub	r2,r2,r10
  81d7c4:	1886983a 	sll	r3,r3,r2
  81d7c8:	b2a8d83a 	srl	r20,r22,r10
  81d7cc:	baaad83a 	srl	r21,r23,r10
  81d7d0:	1d28b03a 	or	r20,r3,r20
  81d7d4:	003fdf06 	br	81d754 <__floatunsidf+0xd8>
  81d7d8:	b006d07a 	srli	r3,r22,1
  81d7dc:	008007c4 	movi	r2,31
  81d7e0:	1245c83a 	sub	r2,r2,r9
  81d7e4:	1886d83a 	srl	r3,r3,r2
  81d7e8:	ba62983a 	sll	r17,r23,r9
  81d7ec:	b260983a 	sll	r16,r22,r9
  81d7f0:	1c62b03a 	or	r17,r3,r17
  81d7f4:	003fcc06 	br	81d728 <__floatunsidf+0xac>
  81d7f8:	2006d07a 	srli	r3,r4,1
  81d7fc:	008007c4 	movi	r2,31
  81d800:	1285c83a 	sub	r2,r2,r10
  81d804:	18a6d83a 	srl	r19,r3,r2
  81d808:	22a4983a 	sll	r18,r4,r10
  81d80c:	003fd706 	br	81d76c <__floatunsidf+0xf0>

0081d810 <__fpcmp_parts_d>:
  81d810:	21800017 	ldw	r6,0(r4)
  81d814:	00c00044 	movi	r3,1
  81d818:	19800a2e 	bgeu	r3,r6,81d844 <__fpcmp_parts_d+0x34>
  81d81c:	28800017 	ldw	r2,0(r5)
  81d820:	1880082e 	bgeu	r3,r2,81d844 <__fpcmp_parts_d+0x34>
  81d824:	00c00104 	movi	r3,4
  81d828:	30c02626 	beq	r6,r3,81d8c4 <__fpcmp_parts_d+0xb4>
  81d82c:	10c02226 	beq	r2,r3,81d8b8 <__fpcmp_parts_d+0xa8>
  81d830:	00c00084 	movi	r3,2
  81d834:	30c00526 	beq	r6,r3,81d84c <__fpcmp_parts_d+0x3c>
  81d838:	10c0071e 	bne	r2,r3,81d858 <__fpcmp_parts_d+0x48>
  81d83c:	20800117 	ldw	r2,4(r4)
  81d840:	1000091e 	bne	r2,zero,81d868 <__fpcmp_parts_d+0x58>
  81d844:	00800044 	movi	r2,1
  81d848:	f800283a 	ret
  81d84c:	10c01a1e 	bne	r2,r3,81d8b8 <__fpcmp_parts_d+0xa8>
  81d850:	0005883a 	mov	r2,zero
  81d854:	f800283a 	ret
  81d858:	22000117 	ldw	r8,4(r4)
  81d85c:	28800117 	ldw	r2,4(r5)
  81d860:	40800326 	beq	r8,r2,81d870 <__fpcmp_parts_d+0x60>
  81d864:	403ff726 	beq	r8,zero,81d844 <__fpcmp_parts_d+0x34>
  81d868:	00bfffc4 	movi	r2,-1
  81d86c:	f800283a 	ret
  81d870:	20c00217 	ldw	r3,8(r4)
  81d874:	28800217 	ldw	r2,8(r5)
  81d878:	10fffa16 	blt	r2,r3,81d864 <__fpcmp_parts_d+0x54>
  81d87c:	18800916 	blt	r3,r2,81d8a4 <__fpcmp_parts_d+0x94>
  81d880:	21c00417 	ldw	r7,16(r4)
  81d884:	28c00417 	ldw	r3,16(r5)
  81d888:	21800317 	ldw	r6,12(r4)
  81d88c:	28800317 	ldw	r2,12(r5)
  81d890:	19fff436 	bltu	r3,r7,81d864 <__fpcmp_parts_d+0x54>
  81d894:	38c00526 	beq	r7,r3,81d8ac <__fpcmp_parts_d+0x9c>
  81d898:	38c00236 	bltu	r7,r3,81d8a4 <__fpcmp_parts_d+0x94>
  81d89c:	19ffec1e 	bne	r3,r7,81d850 <__fpcmp_parts_d+0x40>
  81d8a0:	30bfeb2e 	bgeu	r6,r2,81d850 <__fpcmp_parts_d+0x40>
  81d8a4:	403fe71e 	bne	r8,zero,81d844 <__fpcmp_parts_d+0x34>
  81d8a8:	003fef06 	br	81d868 <__fpcmp_parts_d+0x58>
  81d8ac:	11bffa2e 	bgeu	r2,r6,81d898 <__fpcmp_parts_d+0x88>
  81d8b0:	403fe426 	beq	r8,zero,81d844 <__fpcmp_parts_d+0x34>
  81d8b4:	003fec06 	br	81d868 <__fpcmp_parts_d+0x58>
  81d8b8:	28800117 	ldw	r2,4(r5)
  81d8bc:	103fe11e 	bne	r2,zero,81d844 <__fpcmp_parts_d+0x34>
  81d8c0:	003fe906 	br	81d868 <__fpcmp_parts_d+0x58>
  81d8c4:	11bfdd1e 	bne	r2,r6,81d83c <__fpcmp_parts_d+0x2c>
  81d8c8:	28c00117 	ldw	r3,4(r5)
  81d8cc:	20800117 	ldw	r2,4(r4)
  81d8d0:	1885c83a 	sub	r2,r3,r2
  81d8d4:	f800283a 	ret

0081d8d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81d8d8:	defff404 	addi	sp,sp,-48
  81d8dc:	df000b15 	stw	fp,44(sp)
  81d8e0:	df000b04 	addi	fp,sp,44
  81d8e4:	e13ffb15 	stw	r4,-20(fp)
  81d8e8:	e17ffc15 	stw	r5,-16(fp)
  81d8ec:	e1bffd15 	stw	r6,-12(fp)
  81d8f0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  81d8f4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81d8f8:	008020f4 	movhi	r2,131
  81d8fc:	109c9904 	addi	r2,r2,29284
  81d900:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  81d904:	1005003a 	cmpeq	r2,r2,zero
  81d908:	1000411e 	bne	r2,zero,81da10 <alt_alarm_start+0x138>
  {
    if (alarm)
  81d90c:	e0bffb17 	ldw	r2,-20(fp)
  81d910:	1005003a 	cmpeq	r2,r2,zero
  81d914:	10003b1e 	bne	r2,zero,81da04 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81d918:	e0fffb17 	ldw	r3,-20(fp)
  81d91c:	e0bffd17 	ldw	r2,-12(fp)
  81d920:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  81d924:	e0fffb17 	ldw	r3,-20(fp)
  81d928:	e0bffe17 	ldw	r2,-8(fp)
  81d92c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81d930:	0005303a 	rdctl	r2,status
  81d934:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81d938:	e0fff817 	ldw	r3,-32(fp)
  81d93c:	00bfff84 	movi	r2,-2
  81d940:	1884703a 	and	r2,r3,r2
  81d944:	1001703a 	wrctl	status,r2
  
  return context;
  81d948:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  81d94c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81d950:	008020f4 	movhi	r2,131
  81d954:	109c9a04 	addi	r2,r2,29288
  81d958:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  81d95c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81d960:	e0fffc17 	ldw	r3,-16(fp)
  81d964:	e0bff917 	ldw	r2,-28(fp)
  81d968:	1885883a 	add	r2,r3,r2
  81d96c:	10c00044 	addi	r3,r2,1
  81d970:	e0bffb17 	ldw	r2,-20(fp)
  81d974:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  81d978:	e0bffb17 	ldw	r2,-20(fp)
  81d97c:	10c00217 	ldw	r3,8(r2)
  81d980:	e0bff917 	ldw	r2,-28(fp)
  81d984:	1880042e 	bgeu	r3,r2,81d998 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  81d988:	e0fffb17 	ldw	r3,-20(fp)
  81d98c:	00800044 	movi	r2,1
  81d990:	18800405 	stb	r2,16(r3)
  81d994:	00000206 	br	81d9a0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  81d998:	e0bffb17 	ldw	r2,-20(fp)
  81d99c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81d9a0:	e0fffb17 	ldw	r3,-20(fp)
  81d9a4:	008020f4 	movhi	r2,131
  81d9a8:	10806704 	addi	r2,r2,412
  81d9ac:	e0bff615 	stw	r2,-40(fp)
  81d9b0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81d9b4:	e0fff717 	ldw	r3,-36(fp)
  81d9b8:	e0bff617 	ldw	r2,-40(fp)
  81d9bc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81d9c0:	e0bff617 	ldw	r2,-40(fp)
  81d9c4:	10c00017 	ldw	r3,0(r2)
  81d9c8:	e0bff717 	ldw	r2,-36(fp)
  81d9cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81d9d0:	e0bff617 	ldw	r2,-40(fp)
  81d9d4:	10c00017 	ldw	r3,0(r2)
  81d9d8:	e0bff717 	ldw	r2,-36(fp)
  81d9dc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81d9e0:	e0fff617 	ldw	r3,-40(fp)
  81d9e4:	e0bff717 	ldw	r2,-36(fp)
  81d9e8:	18800015 	stw	r2,0(r3)
  81d9ec:	e0bffa17 	ldw	r2,-24(fp)
  81d9f0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81d9f4:	e0bff517 	ldw	r2,-44(fp)
  81d9f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81d9fc:	e03fff15 	stw	zero,-4(fp)
  81da00:	00000506 	br	81da18 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  81da04:	00bffa84 	movi	r2,-22
  81da08:	e0bfff15 	stw	r2,-4(fp)
  81da0c:	00000206 	br	81da18 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81da10:	00bfde84 	movi	r2,-134
  81da14:	e0bfff15 	stw	r2,-4(fp)
  81da18:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81da1c:	e037883a 	mov	sp,fp
  81da20:	df000017 	ldw	fp,0(sp)
  81da24:	dec00104 	addi	sp,sp,4
  81da28:	f800283a 	ret

0081da2c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  81da2c:	defff804 	addi	sp,sp,-32
  81da30:	dfc00715 	stw	ra,28(sp)
  81da34:	df000615 	stw	fp,24(sp)
  81da38:	df000604 	addi	fp,sp,24
  81da3c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  81da40:	e0bffc17 	ldw	r2,-16(fp)
  81da44:	1004803a 	cmplt	r2,r2,zero
  81da48:	1000081e 	bne	r2,zero,81da6c <close+0x40>
  81da4c:	e0bffc17 	ldw	r2,-16(fp)
  81da50:	10800324 	muli	r2,r2,12
  81da54:	1007883a 	mov	r3,r2
  81da58:	008020f4 	movhi	r2,131
  81da5c:	10bb7c04 	addi	r2,r2,-4624
  81da60:	1887883a 	add	r3,r3,r2
  81da64:	e0ffff15 	stw	r3,-4(fp)
  81da68:	00000106 	br	81da70 <close+0x44>
  81da6c:	e03fff15 	stw	zero,-4(fp)
  81da70:	e0bfff17 	ldw	r2,-4(fp)
  81da74:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  81da78:	e0bffb17 	ldw	r2,-20(fp)
  81da7c:	1005003a 	cmpeq	r2,r2,zero
  81da80:	10001d1e 	bne	r2,zero,81daf8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  81da84:	e0bffb17 	ldw	r2,-20(fp)
  81da88:	10800017 	ldw	r2,0(r2)
  81da8c:	10800417 	ldw	r2,16(r2)
  81da90:	1005003a 	cmpeq	r2,r2,zero
  81da94:	1000071e 	bne	r2,zero,81dab4 <close+0x88>
  81da98:	e0bffb17 	ldw	r2,-20(fp)
  81da9c:	10800017 	ldw	r2,0(r2)
  81daa0:	10800417 	ldw	r2,16(r2)
  81daa4:	e13ffb17 	ldw	r4,-20(fp)
  81daa8:	103ee83a 	callr	r2
  81daac:	e0bffe15 	stw	r2,-8(fp)
  81dab0:	00000106 	br	81dab8 <close+0x8c>
  81dab4:	e03ffe15 	stw	zero,-8(fp)
  81dab8:	e0bffe17 	ldw	r2,-8(fp)
  81dabc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  81dac0:	e13ffc17 	ldw	r4,-16(fp)
  81dac4:	081e4300 	call	81e430 <alt_release_fd>
    if (rval < 0)
  81dac8:	e0bffa17 	ldw	r2,-24(fp)
  81dacc:	1004403a 	cmpge	r2,r2,zero
  81dad0:	1000071e 	bne	r2,zero,81daf0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  81dad4:	081db280 	call	81db28 <alt_get_errno>
  81dad8:	e0fffa17 	ldw	r3,-24(fp)
  81dadc:	00c7c83a 	sub	r3,zero,r3
  81dae0:	10c00015 	stw	r3,0(r2)
      return -1;
  81dae4:	00bfffc4 	movi	r2,-1
  81dae8:	e0bffd15 	stw	r2,-12(fp)
  81daec:	00000806 	br	81db10 <close+0xe4>
    }
    return 0;
  81daf0:	e03ffd15 	stw	zero,-12(fp)
  81daf4:	00000606 	br	81db10 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81daf8:	081db280 	call	81db28 <alt_get_errno>
  81dafc:	1007883a 	mov	r3,r2
  81db00:	00801444 	movi	r2,81
  81db04:	18800015 	stw	r2,0(r3)
    return -1;
  81db08:	00bfffc4 	movi	r2,-1
  81db0c:	e0bffd15 	stw	r2,-12(fp)
  81db10:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  81db14:	e037883a 	mov	sp,fp
  81db18:	dfc00117 	ldw	ra,4(sp)
  81db1c:	df000017 	ldw	fp,0(sp)
  81db20:	dec00204 	addi	sp,sp,8
  81db24:	f800283a 	ret

0081db28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81db28:	defffd04 	addi	sp,sp,-12
  81db2c:	dfc00215 	stw	ra,8(sp)
  81db30:	df000115 	stw	fp,4(sp)
  81db34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81db38:	008020f4 	movhi	r2,131
  81db3c:	10806404 	addi	r2,r2,400
  81db40:	10800017 	ldw	r2,0(r2)
  81db44:	1005003a 	cmpeq	r2,r2,zero
  81db48:	1000061e 	bne	r2,zero,81db64 <alt_get_errno+0x3c>
  81db4c:	008020f4 	movhi	r2,131
  81db50:	10806404 	addi	r2,r2,400
  81db54:	10800017 	ldw	r2,0(r2)
  81db58:	103ee83a 	callr	r2
  81db5c:	e0bfff15 	stw	r2,-4(fp)
  81db60:	00000306 	br	81db70 <alt_get_errno+0x48>
  81db64:	008020f4 	movhi	r2,131
  81db68:	109c9104 	addi	r2,r2,29252
  81db6c:	e0bfff15 	stw	r2,-4(fp)
  81db70:	e0bfff17 	ldw	r2,-4(fp)
}
  81db74:	e037883a 	mov	sp,fp
  81db78:	dfc00117 	ldw	ra,4(sp)
  81db7c:	df000017 	ldw	fp,0(sp)
  81db80:	dec00204 	addi	sp,sp,8
  81db84:	f800283a 	ret

0081db88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  81db88:	defffc04 	addi	sp,sp,-16
  81db8c:	df000315 	stw	fp,12(sp)
  81db90:	df000304 	addi	fp,sp,12
  81db94:	e13ffd15 	stw	r4,-12(fp)
  81db98:	e17ffe15 	stw	r5,-8(fp)
  81db9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  81dba0:	e0bfff17 	ldw	r2,-4(fp)
}
  81dba4:	e037883a 	mov	sp,fp
  81dba8:	df000017 	ldw	fp,0(sp)
  81dbac:	dec00104 	addi	sp,sp,4
  81dbb0:	f800283a 	ret

0081dbb4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  81dbb4:	defff904 	addi	sp,sp,-28
  81dbb8:	dfc00615 	stw	ra,24(sp)
  81dbbc:	df000515 	stw	fp,20(sp)
  81dbc0:	df000504 	addi	fp,sp,20
  81dbc4:	e13ffc15 	stw	r4,-16(fp)
  81dbc8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81dbcc:	e0bffc17 	ldw	r2,-16(fp)
  81dbd0:	1004803a 	cmplt	r2,r2,zero
  81dbd4:	1000081e 	bne	r2,zero,81dbf8 <fstat+0x44>
  81dbd8:	e0bffc17 	ldw	r2,-16(fp)
  81dbdc:	10800324 	muli	r2,r2,12
  81dbe0:	1007883a 	mov	r3,r2
  81dbe4:	008020f4 	movhi	r2,131
  81dbe8:	10bb7c04 	addi	r2,r2,-4624
  81dbec:	1887883a 	add	r3,r3,r2
  81dbf0:	e0ffff15 	stw	r3,-4(fp)
  81dbf4:	00000106 	br	81dbfc <fstat+0x48>
  81dbf8:	e03fff15 	stw	zero,-4(fp)
  81dbfc:	e0bfff17 	ldw	r2,-4(fp)
  81dc00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  81dc04:	e0bffb17 	ldw	r2,-20(fp)
  81dc08:	1005003a 	cmpeq	r2,r2,zero
  81dc0c:	1000121e 	bne	r2,zero,81dc58 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  81dc10:	e0bffb17 	ldw	r2,-20(fp)
  81dc14:	10800017 	ldw	r2,0(r2)
  81dc18:	10800817 	ldw	r2,32(r2)
  81dc1c:	1005003a 	cmpeq	r2,r2,zero
  81dc20:	1000081e 	bne	r2,zero,81dc44 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  81dc24:	e0bffb17 	ldw	r2,-20(fp)
  81dc28:	10800017 	ldw	r2,0(r2)
  81dc2c:	10800817 	ldw	r2,32(r2)
  81dc30:	e13ffb17 	ldw	r4,-20(fp)
  81dc34:	e17ffd17 	ldw	r5,-12(fp)
  81dc38:	103ee83a 	callr	r2
  81dc3c:	e0bffe15 	stw	r2,-8(fp)
  81dc40:	00000b06 	br	81dc70 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  81dc44:	e0fffd17 	ldw	r3,-12(fp)
  81dc48:	00880004 	movi	r2,8192
  81dc4c:	18800115 	stw	r2,4(r3)
      return 0;
  81dc50:	e03ffe15 	stw	zero,-8(fp)
  81dc54:	00000606 	br	81dc70 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81dc58:	081dc880 	call	81dc88 <alt_get_errno>
  81dc5c:	1007883a 	mov	r3,r2
  81dc60:	00801444 	movi	r2,81
  81dc64:	18800015 	stw	r2,0(r3)
    return -1;
  81dc68:	00bfffc4 	movi	r2,-1
  81dc6c:	e0bffe15 	stw	r2,-8(fp)
  81dc70:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  81dc74:	e037883a 	mov	sp,fp
  81dc78:	dfc00117 	ldw	ra,4(sp)
  81dc7c:	df000017 	ldw	fp,0(sp)
  81dc80:	dec00204 	addi	sp,sp,8
  81dc84:	f800283a 	ret

0081dc88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81dc88:	defffd04 	addi	sp,sp,-12
  81dc8c:	dfc00215 	stw	ra,8(sp)
  81dc90:	df000115 	stw	fp,4(sp)
  81dc94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81dc98:	008020f4 	movhi	r2,131
  81dc9c:	10806404 	addi	r2,r2,400
  81dca0:	10800017 	ldw	r2,0(r2)
  81dca4:	1005003a 	cmpeq	r2,r2,zero
  81dca8:	1000061e 	bne	r2,zero,81dcc4 <alt_get_errno+0x3c>
  81dcac:	008020f4 	movhi	r2,131
  81dcb0:	10806404 	addi	r2,r2,400
  81dcb4:	10800017 	ldw	r2,0(r2)
  81dcb8:	103ee83a 	callr	r2
  81dcbc:	e0bfff15 	stw	r2,-4(fp)
  81dcc0:	00000306 	br	81dcd0 <alt_get_errno+0x48>
  81dcc4:	008020f4 	movhi	r2,131
  81dcc8:	109c9104 	addi	r2,r2,29252
  81dccc:	e0bfff15 	stw	r2,-4(fp)
  81dcd0:	e0bfff17 	ldw	r2,-4(fp)
}
  81dcd4:	e037883a 	mov	sp,fp
  81dcd8:	dfc00117 	ldw	ra,4(sp)
  81dcdc:	df000017 	ldw	fp,0(sp)
  81dce0:	dec00204 	addi	sp,sp,8
  81dce4:	f800283a 	ret

0081dce8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  81dce8:	deffef04 	addi	sp,sp,-68
  81dcec:	df001015 	stw	fp,64(sp)
  81dcf0:	df001004 	addi	fp,sp,64
  81dcf4:	e13ffc15 	stw	r4,-16(fp)
  81dcf8:	e17ffd15 	stw	r5,-12(fp)
  81dcfc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  81dd00:	00bffa84 	movi	r2,-22
  81dd04:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81dd08:	e0bffc17 	ldw	r2,-16(fp)
  81dd0c:	10800828 	cmpgeui	r2,r2,32
  81dd10:	1000601e 	bne	r2,zero,81de94 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81dd14:	0005303a 	rdctl	r2,status
  81dd18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81dd1c:	e0fff917 	ldw	r3,-28(fp)
  81dd20:	00bfff84 	movi	r2,-2
  81dd24:	1884703a 	and	r2,r3,r2
  81dd28:	1001703a 	wrctl	status,r2
  
  return context;
  81dd2c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  81dd30:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  81dd34:	e0bffc17 	ldw	r2,-16(fp)
  81dd38:	00c020f4 	movhi	r3,131
  81dd3c:	18de2e04 	addi	r3,r3,30904
  81dd40:	100490fa 	slli	r2,r2,3
  81dd44:	10c7883a 	add	r3,r2,r3
  81dd48:	e0bffe17 	ldw	r2,-8(fp)
  81dd4c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  81dd50:	e0bffc17 	ldw	r2,-16(fp)
  81dd54:	00c020f4 	movhi	r3,131
  81dd58:	18de2e04 	addi	r3,r3,30904
  81dd5c:	100490fa 	slli	r2,r2,3
  81dd60:	10c5883a 	add	r2,r2,r3
  81dd64:	10c00104 	addi	r3,r2,4
  81dd68:	e0bffd17 	ldw	r2,-12(fp)
  81dd6c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  81dd70:	e0bffe17 	ldw	r2,-8(fp)
  81dd74:	1005003a 	cmpeq	r2,r2,zero
  81dd78:	1000201e 	bne	r2,zero,81ddfc <alt_irq_register+0x114>
  81dd7c:	e0bffc17 	ldw	r2,-16(fp)
  81dd80:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81dd84:	0005303a 	rdctl	r2,status
  81dd88:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81dd8c:	e0fff617 	ldw	r3,-40(fp)
  81dd90:	00bfff84 	movi	r2,-2
  81dd94:	1884703a 	and	r2,r3,r2
  81dd98:	1001703a 	wrctl	status,r2
  
  return context;
  81dd9c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81dda0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  81dda4:	e0fff717 	ldw	r3,-36(fp)
  81dda8:	00800044 	movi	r2,1
  81ddac:	10c4983a 	sll	r2,r2,r3
  81ddb0:	1007883a 	mov	r3,r2
  81ddb4:	008020f4 	movhi	r2,131
  81ddb8:	109c9504 	addi	r2,r2,29268
  81ddbc:	10800017 	ldw	r2,0(r2)
  81ddc0:	1886b03a 	or	r3,r3,r2
  81ddc4:	008020f4 	movhi	r2,131
  81ddc8:	109c9504 	addi	r2,r2,29268
  81ddcc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81ddd0:	008020f4 	movhi	r2,131
  81ddd4:	109c9504 	addi	r2,r2,29268
  81ddd8:	10800017 	ldw	r2,0(r2)
  81dddc:	100170fa 	wrctl	ienable,r2
  81dde0:	e0bff817 	ldw	r2,-32(fp)
  81dde4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81dde8:	e0bff517 	ldw	r2,-44(fp)
  81ddec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81ddf0:	0005883a 	mov	r2,zero
  81ddf4:	e0bfff15 	stw	r2,-4(fp)
  81ddf8:	00002006 	br	81de7c <alt_irq_register+0x194>
  81ddfc:	e0bffc17 	ldw	r2,-16(fp)
  81de00:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81de04:	0005303a 	rdctl	r2,status
  81de08:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81de0c:	e0fff217 	ldw	r3,-56(fp)
  81de10:	00bfff84 	movi	r2,-2
  81de14:	1884703a 	and	r2,r3,r2
  81de18:	1001703a 	wrctl	status,r2
  
  return context;
  81de1c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81de20:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  81de24:	e0fff317 	ldw	r3,-52(fp)
  81de28:	00800044 	movi	r2,1
  81de2c:	10c4983a 	sll	r2,r2,r3
  81de30:	0084303a 	nor	r2,zero,r2
  81de34:	1007883a 	mov	r3,r2
  81de38:	008020f4 	movhi	r2,131
  81de3c:	109c9504 	addi	r2,r2,29268
  81de40:	10800017 	ldw	r2,0(r2)
  81de44:	1886703a 	and	r3,r3,r2
  81de48:	008020f4 	movhi	r2,131
  81de4c:	109c9504 	addi	r2,r2,29268
  81de50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81de54:	008020f4 	movhi	r2,131
  81de58:	109c9504 	addi	r2,r2,29268
  81de5c:	10800017 	ldw	r2,0(r2)
  81de60:	100170fa 	wrctl	ienable,r2
  81de64:	e0bff417 	ldw	r2,-48(fp)
  81de68:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81de6c:	e0bff117 	ldw	r2,-60(fp)
  81de70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81de74:	0005883a 	mov	r2,zero
  81de78:	e0bfff15 	stw	r2,-4(fp)
  81de7c:	e0bfff17 	ldw	r2,-4(fp)
  81de80:	e0bffb15 	stw	r2,-20(fp)
  81de84:	e0bffa17 	ldw	r2,-24(fp)
  81de88:	e0bff015 	stw	r2,-64(fp)
  81de8c:	e0bff017 	ldw	r2,-64(fp)
  81de90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  81de94:	e0bffb17 	ldw	r2,-20(fp)
}
  81de98:	e037883a 	mov	sp,fp
  81de9c:	df000017 	ldw	fp,0(sp)
  81dea0:	dec00104 	addi	sp,sp,4
  81dea4:	f800283a 	ret

0081dea8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  81dea8:	deffeb04 	addi	sp,sp,-84
  81deac:	dfc01415 	stw	ra,80(sp)
  81deb0:	df001315 	stw	fp,76(sp)
  81deb4:	df001304 	addi	fp,sp,76
  81deb8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81debc:	e0bffd17 	ldw	r2,-12(fp)
  81dec0:	1004803a 	cmplt	r2,r2,zero
  81dec4:	1000081e 	bne	r2,zero,81dee8 <isatty+0x40>
  81dec8:	e0bffd17 	ldw	r2,-12(fp)
  81decc:	10800324 	muli	r2,r2,12
  81ded0:	1007883a 	mov	r3,r2
  81ded4:	008020f4 	movhi	r2,131
  81ded8:	10bb7c04 	addi	r2,r2,-4624
  81dedc:	1887883a 	add	r3,r3,r2
  81dee0:	e0ffff15 	stw	r3,-4(fp)
  81dee4:	00000106 	br	81deec <isatty+0x44>
  81dee8:	e03fff15 	stw	zero,-4(fp)
  81deec:	e0bfff17 	ldw	r2,-4(fp)
  81def0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  81def4:	e0bfed17 	ldw	r2,-76(fp)
  81def8:	1005003a 	cmpeq	r2,r2,zero
  81defc:	10000f1e 	bne	r2,zero,81df3c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  81df00:	e0bfed17 	ldw	r2,-76(fp)
  81df04:	10800017 	ldw	r2,0(r2)
  81df08:	10800817 	ldw	r2,32(r2)
  81df0c:	1004c03a 	cmpne	r2,r2,zero
  81df10:	1000031e 	bne	r2,zero,81df20 <isatty+0x78>
    {
      return 1;
  81df14:	00800044 	movi	r2,1
  81df18:	e0bffe15 	stw	r2,-8(fp)
  81df1c:	00000c06 	br	81df50 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  81df20:	e17fee04 	addi	r5,fp,-72
  81df24:	e13ffd17 	ldw	r4,-12(fp)
  81df28:	081dbb40 	call	81dbb4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  81df2c:	e0bfef17 	ldw	r2,-68(fp)
  81df30:	10880020 	cmpeqi	r2,r2,8192
  81df34:	e0bffe15 	stw	r2,-8(fp)
  81df38:	00000506 	br	81df50 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81df3c:	081df680 	call	81df68 <alt_get_errno>
  81df40:	1007883a 	mov	r3,r2
  81df44:	00801444 	movi	r2,81
  81df48:	18800015 	stw	r2,0(r3)
    return 0;
  81df4c:	e03ffe15 	stw	zero,-8(fp)
  81df50:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  81df54:	e037883a 	mov	sp,fp
  81df58:	dfc00117 	ldw	ra,4(sp)
  81df5c:	df000017 	ldw	fp,0(sp)
  81df60:	dec00204 	addi	sp,sp,8
  81df64:	f800283a 	ret

0081df68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81df68:	defffd04 	addi	sp,sp,-12
  81df6c:	dfc00215 	stw	ra,8(sp)
  81df70:	df000115 	stw	fp,4(sp)
  81df74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81df78:	008020f4 	movhi	r2,131
  81df7c:	10806404 	addi	r2,r2,400
  81df80:	10800017 	ldw	r2,0(r2)
  81df84:	1005003a 	cmpeq	r2,r2,zero
  81df88:	1000061e 	bne	r2,zero,81dfa4 <alt_get_errno+0x3c>
  81df8c:	008020f4 	movhi	r2,131
  81df90:	10806404 	addi	r2,r2,400
  81df94:	10800017 	ldw	r2,0(r2)
  81df98:	103ee83a 	callr	r2
  81df9c:	e0bfff15 	stw	r2,-4(fp)
  81dfa0:	00000306 	br	81dfb0 <alt_get_errno+0x48>
  81dfa4:	008020f4 	movhi	r2,131
  81dfa8:	109c9104 	addi	r2,r2,29252
  81dfac:	e0bfff15 	stw	r2,-4(fp)
  81dfb0:	e0bfff17 	ldw	r2,-4(fp)
}
  81dfb4:	e037883a 	mov	sp,fp
  81dfb8:	dfc00117 	ldw	ra,4(sp)
  81dfbc:	df000017 	ldw	fp,0(sp)
  81dfc0:	dec00204 	addi	sp,sp,8
  81dfc4:	f800283a 	ret

0081dfc8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  81dfc8:	defffe04 	addi	sp,sp,-8
  81dfcc:	dfc00115 	stw	ra,4(sp)
  81dfd0:	df000015 	stw	fp,0(sp)
  81dfd4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  81dfd8:	010020f4 	movhi	r4,131
  81dfdc:	21006904 	addi	r4,r4,420
  81dfe0:	014020f4 	movhi	r5,131
  81dfe4:	29645904 	addi	r5,r5,-28316
  81dfe8:	018020f4 	movhi	r6,131
  81dfec:	31806904 	addi	r6,r6,420
  81dff0:	081e0480 	call	81e048 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  81dff4:	01002034 	movhi	r4,128
  81dff8:	21000804 	addi	r4,r4,32
  81dffc:	01402034 	movhi	r5,128
  81e000:	29400804 	addi	r5,r5,32
  81e004:	01802034 	movhi	r6,128
  81e008:	31806e04 	addi	r6,r6,440
  81e00c:	081e0480 	call	81e048 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  81e010:	010020f4 	movhi	r4,131
  81e014:	2120b204 	addi	r4,r4,-32056
  81e018:	014020f4 	movhi	r5,131
  81e01c:	2960b204 	addi	r5,r5,-32056
  81e020:	018020f4 	movhi	r6,131
  81e024:	31a45904 	addi	r6,r6,-28316
  81e028:	081e0480 	call	81e048 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  81e02c:	08274e40 	call	8274e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  81e030:	08277980 	call	827798 <alt_icache_flush_all>
}
  81e034:	e037883a 	mov	sp,fp
  81e038:	dfc00117 	ldw	ra,4(sp)
  81e03c:	df000017 	ldw	fp,0(sp)
  81e040:	dec00204 	addi	sp,sp,8
  81e044:	f800283a 	ret

0081e048 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  81e048:	defffc04 	addi	sp,sp,-16
  81e04c:	df000315 	stw	fp,12(sp)
  81e050:	df000304 	addi	fp,sp,12
  81e054:	e13ffd15 	stw	r4,-12(fp)
  81e058:	e17ffe15 	stw	r5,-8(fp)
  81e05c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  81e060:	e0fffe17 	ldw	r3,-8(fp)
  81e064:	e0bffd17 	ldw	r2,-12(fp)
  81e068:	18800e26 	beq	r3,r2,81e0a4 <alt_load_section+0x5c>
  {
    while( to != end )
  81e06c:	00000a06 	br	81e098 <alt_load_section+0x50>
    {
      *to++ = *from++;
  81e070:	e0bffd17 	ldw	r2,-12(fp)
  81e074:	10c00017 	ldw	r3,0(r2)
  81e078:	e0bffe17 	ldw	r2,-8(fp)
  81e07c:	10c00015 	stw	r3,0(r2)
  81e080:	e0bffe17 	ldw	r2,-8(fp)
  81e084:	10800104 	addi	r2,r2,4
  81e088:	e0bffe15 	stw	r2,-8(fp)
  81e08c:	e0bffd17 	ldw	r2,-12(fp)
  81e090:	10800104 	addi	r2,r2,4
  81e094:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  81e098:	e0fffe17 	ldw	r3,-8(fp)
  81e09c:	e0bfff17 	ldw	r2,-4(fp)
  81e0a0:	18bff31e 	bne	r3,r2,81e070 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  81e0a4:	e037883a 	mov	sp,fp
  81e0a8:	df000017 	ldw	fp,0(sp)
  81e0ac:	dec00104 	addi	sp,sp,4
  81e0b0:	f800283a 	ret

0081e0b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  81e0b4:	defff804 	addi	sp,sp,-32
  81e0b8:	dfc00715 	stw	ra,28(sp)
  81e0bc:	df000615 	stw	fp,24(sp)
  81e0c0:	df000604 	addi	fp,sp,24
  81e0c4:	e13ffc15 	stw	r4,-16(fp)
  81e0c8:	e17ffd15 	stw	r5,-12(fp)
  81e0cc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  81e0d0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81e0d4:	e0bffc17 	ldw	r2,-16(fp)
  81e0d8:	1004803a 	cmplt	r2,r2,zero
  81e0dc:	1000081e 	bne	r2,zero,81e100 <lseek+0x4c>
  81e0e0:	e0bffc17 	ldw	r2,-16(fp)
  81e0e4:	10800324 	muli	r2,r2,12
  81e0e8:	1007883a 	mov	r3,r2
  81e0ec:	008020f4 	movhi	r2,131
  81e0f0:	10bb7c04 	addi	r2,r2,-4624
  81e0f4:	1887883a 	add	r3,r3,r2
  81e0f8:	e0ffff15 	stw	r3,-4(fp)
  81e0fc:	00000106 	br	81e104 <lseek+0x50>
  81e100:	e03fff15 	stw	zero,-4(fp)
  81e104:	e0bfff17 	ldw	r2,-4(fp)
  81e108:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  81e10c:	e0bffb17 	ldw	r2,-20(fp)
  81e110:	1005003a 	cmpeq	r2,r2,zero
  81e114:	1000111e 	bne	r2,zero,81e15c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  81e118:	e0bffb17 	ldw	r2,-20(fp)
  81e11c:	10800017 	ldw	r2,0(r2)
  81e120:	10800717 	ldw	r2,28(r2)
  81e124:	1005003a 	cmpeq	r2,r2,zero
  81e128:	1000091e 	bne	r2,zero,81e150 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  81e12c:	e0bffb17 	ldw	r2,-20(fp)
  81e130:	10800017 	ldw	r2,0(r2)
  81e134:	10800717 	ldw	r2,28(r2)
  81e138:	e13ffb17 	ldw	r4,-20(fp)
  81e13c:	e17ffd17 	ldw	r5,-12(fp)
  81e140:	e1bffe17 	ldw	r6,-8(fp)
  81e144:	103ee83a 	callr	r2
  81e148:	e0bffa15 	stw	r2,-24(fp)
  81e14c:	00000506 	br	81e164 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  81e150:	00bfde84 	movi	r2,-134
  81e154:	e0bffa15 	stw	r2,-24(fp)
  81e158:	00000206 	br	81e164 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  81e15c:	00bfebc4 	movi	r2,-81
  81e160:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  81e164:	e0bffa17 	ldw	r2,-24(fp)
  81e168:	1004403a 	cmpge	r2,r2,zero
  81e16c:	1000071e 	bne	r2,zero,81e18c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  81e170:	081e1a40 	call	81e1a4 <alt_get_errno>
  81e174:	1007883a 	mov	r3,r2
  81e178:	e0bffa17 	ldw	r2,-24(fp)
  81e17c:	0085c83a 	sub	r2,zero,r2
  81e180:	18800015 	stw	r2,0(r3)
    rc = -1;
  81e184:	00bfffc4 	movi	r2,-1
  81e188:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  81e18c:	e0bffa17 	ldw	r2,-24(fp)
}
  81e190:	e037883a 	mov	sp,fp
  81e194:	dfc00117 	ldw	ra,4(sp)
  81e198:	df000017 	ldw	fp,0(sp)
  81e19c:	dec00204 	addi	sp,sp,8
  81e1a0:	f800283a 	ret

0081e1a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81e1a4:	defffd04 	addi	sp,sp,-12
  81e1a8:	dfc00215 	stw	ra,8(sp)
  81e1ac:	df000115 	stw	fp,4(sp)
  81e1b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81e1b4:	008020f4 	movhi	r2,131
  81e1b8:	10806404 	addi	r2,r2,400
  81e1bc:	10800017 	ldw	r2,0(r2)
  81e1c0:	1005003a 	cmpeq	r2,r2,zero
  81e1c4:	1000061e 	bne	r2,zero,81e1e0 <alt_get_errno+0x3c>
  81e1c8:	008020f4 	movhi	r2,131
  81e1cc:	10806404 	addi	r2,r2,400
  81e1d0:	10800017 	ldw	r2,0(r2)
  81e1d4:	103ee83a 	callr	r2
  81e1d8:	e0bfff15 	stw	r2,-4(fp)
  81e1dc:	00000306 	br	81e1ec <alt_get_errno+0x48>
  81e1e0:	008020f4 	movhi	r2,131
  81e1e4:	109c9104 	addi	r2,r2,29252
  81e1e8:	e0bfff15 	stw	r2,-4(fp)
  81e1ec:	e0bfff17 	ldw	r2,-4(fp)
}
  81e1f0:	e037883a 	mov	sp,fp
  81e1f4:	dfc00117 	ldw	ra,4(sp)
  81e1f8:	df000017 	ldw	fp,0(sp)
  81e1fc:	dec00204 	addi	sp,sp,8
  81e200:	f800283a 	ret

0081e204 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  81e204:	defffd04 	addi	sp,sp,-12
  81e208:	dfc00215 	stw	ra,8(sp)
  81e20c:	df000115 	stw	fp,4(sp)
  81e210:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  81e214:	0009883a 	mov	r4,zero
  81e218:	081e8a00 	call	81e8a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  81e21c:	081e8d40 	call	81e8d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  81e220:	010020f4 	movhi	r4,131
  81e224:	21242104 	addi	r4,r4,-28540
  81e228:	014020f4 	movhi	r5,131
  81e22c:	29642104 	addi	r5,r5,-28540
  81e230:	018020f4 	movhi	r6,131
  81e234:	31a42104 	addi	r6,r6,-28540
  81e238:	082788c0 	call	82788c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  81e23c:	082763c0 	call	82763c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  81e240:	010020b4 	movhi	r4,130
  81e244:	211da804 	addi	r4,r4,30368
  81e248:	0827e500 	call	827e50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  81e24c:	d13c3f17 	ldw	r4,-3844(gp)
  81e250:	d17c4017 	ldw	r5,-3840(gp)
  81e254:	d1bc4117 	ldw	r6,-3836(gp)
  81e258:	080be400 	call	80be40 <main>
  81e25c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  81e260:	01000044 	movi	r4,1
  81e264:	081da2c0 	call	81da2c <close>
  exit (result);
  81e268:	e13fff17 	ldw	r4,-4(fp)
  81e26c:	0827e640 	call	827e64 <exit>

0081e270 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  81e270:	defffe04 	addi	sp,sp,-8
  81e274:	df000115 	stw	fp,4(sp)
  81e278:	df000104 	addi	fp,sp,4
  81e27c:	e13fff15 	stw	r4,-4(fp)
}
  81e280:	e037883a 	mov	sp,fp
  81e284:	df000017 	ldw	fp,0(sp)
  81e288:	dec00104 	addi	sp,sp,4
  81e28c:	f800283a 	ret

0081e290 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  81e290:	defffe04 	addi	sp,sp,-8
  81e294:	df000115 	stw	fp,4(sp)
  81e298:	df000104 	addi	fp,sp,4
  81e29c:	e13fff15 	stw	r4,-4(fp)
}
  81e2a0:	e037883a 	mov	sp,fp
  81e2a4:	df000017 	ldw	fp,0(sp)
  81e2a8:	dec00104 	addi	sp,sp,4
  81e2ac:	f800283a 	ret

0081e2b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  81e2b0:	defff704 	addi	sp,sp,-36
  81e2b4:	dfc00815 	stw	ra,32(sp)
  81e2b8:	df000715 	stw	fp,28(sp)
  81e2bc:	df000704 	addi	fp,sp,28
  81e2c0:	e13ffb15 	stw	r4,-20(fp)
  81e2c4:	e17ffc15 	stw	r5,-16(fp)
  81e2c8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81e2cc:	e0bffb17 	ldw	r2,-20(fp)
  81e2d0:	1004803a 	cmplt	r2,r2,zero
  81e2d4:	1000081e 	bne	r2,zero,81e2f8 <read+0x48>
  81e2d8:	e0bffb17 	ldw	r2,-20(fp)
  81e2dc:	10800324 	muli	r2,r2,12
  81e2e0:	1007883a 	mov	r3,r2
  81e2e4:	008020f4 	movhi	r2,131
  81e2e8:	10bb7c04 	addi	r2,r2,-4624
  81e2ec:	1887883a 	add	r3,r3,r2
  81e2f0:	e0ffff15 	stw	r3,-4(fp)
  81e2f4:	00000106 	br	81e2fc <read+0x4c>
  81e2f8:	e03fff15 	stw	zero,-4(fp)
  81e2fc:	e0bfff17 	ldw	r2,-4(fp)
  81e300:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  81e304:	e0bffa17 	ldw	r2,-24(fp)
  81e308:	1005003a 	cmpeq	r2,r2,zero
  81e30c:	1000241e 	bne	r2,zero,81e3a0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  81e310:	e0bffa17 	ldw	r2,-24(fp)
  81e314:	10800217 	ldw	r2,8(r2)
  81e318:	108000cc 	andi	r2,r2,3
  81e31c:	10800060 	cmpeqi	r2,r2,1
  81e320:	10001a1e 	bne	r2,zero,81e38c <read+0xdc>
  81e324:	e0bffa17 	ldw	r2,-24(fp)
  81e328:	10800017 	ldw	r2,0(r2)
  81e32c:	10800517 	ldw	r2,20(r2)
  81e330:	1005003a 	cmpeq	r2,r2,zero
  81e334:	1000151e 	bne	r2,zero,81e38c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  81e338:	e0bffa17 	ldw	r2,-24(fp)
  81e33c:	10800017 	ldw	r2,0(r2)
  81e340:	10800517 	ldw	r2,20(r2)
  81e344:	e17ffc17 	ldw	r5,-16(fp)
  81e348:	e1bffd17 	ldw	r6,-12(fp)
  81e34c:	e13ffa17 	ldw	r4,-24(fp)
  81e350:	103ee83a 	callr	r2
  81e354:	e0bff915 	stw	r2,-28(fp)
  81e358:	e0bff917 	ldw	r2,-28(fp)
  81e35c:	1004403a 	cmpge	r2,r2,zero
  81e360:	1000071e 	bne	r2,zero,81e380 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  81e364:	081e3d00 	call	81e3d0 <alt_get_errno>
  81e368:	e0fff917 	ldw	r3,-28(fp)
  81e36c:	00c7c83a 	sub	r3,zero,r3
  81e370:	10c00015 	stw	r3,0(r2)
          return -1;
  81e374:	00bfffc4 	movi	r2,-1
  81e378:	e0bffe15 	stw	r2,-8(fp)
  81e37c:	00000e06 	br	81e3b8 <read+0x108>
        }
        return rval;
  81e380:	e0bff917 	ldw	r2,-28(fp)
  81e384:	e0bffe15 	stw	r2,-8(fp)
  81e388:	00000b06 	br	81e3b8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  81e38c:	081e3d00 	call	81e3d0 <alt_get_errno>
  81e390:	1007883a 	mov	r3,r2
  81e394:	00800344 	movi	r2,13
  81e398:	18800015 	stw	r2,0(r3)
  81e39c:	00000406 	br	81e3b0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  81e3a0:	081e3d00 	call	81e3d0 <alt_get_errno>
  81e3a4:	1007883a 	mov	r3,r2
  81e3a8:	00801444 	movi	r2,81
  81e3ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81e3b0:	00bfffc4 	movi	r2,-1
  81e3b4:	e0bffe15 	stw	r2,-8(fp)
  81e3b8:	e0bffe17 	ldw	r2,-8(fp)
}
  81e3bc:	e037883a 	mov	sp,fp
  81e3c0:	dfc00117 	ldw	ra,4(sp)
  81e3c4:	df000017 	ldw	fp,0(sp)
  81e3c8:	dec00204 	addi	sp,sp,8
  81e3cc:	f800283a 	ret

0081e3d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81e3d0:	defffd04 	addi	sp,sp,-12
  81e3d4:	dfc00215 	stw	ra,8(sp)
  81e3d8:	df000115 	stw	fp,4(sp)
  81e3dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81e3e0:	008020f4 	movhi	r2,131
  81e3e4:	10806404 	addi	r2,r2,400
  81e3e8:	10800017 	ldw	r2,0(r2)
  81e3ec:	1005003a 	cmpeq	r2,r2,zero
  81e3f0:	1000061e 	bne	r2,zero,81e40c <alt_get_errno+0x3c>
  81e3f4:	008020f4 	movhi	r2,131
  81e3f8:	10806404 	addi	r2,r2,400
  81e3fc:	10800017 	ldw	r2,0(r2)
  81e400:	103ee83a 	callr	r2
  81e404:	e0bfff15 	stw	r2,-4(fp)
  81e408:	00000306 	br	81e418 <alt_get_errno+0x48>
  81e40c:	008020f4 	movhi	r2,131
  81e410:	109c9104 	addi	r2,r2,29252
  81e414:	e0bfff15 	stw	r2,-4(fp)
  81e418:	e0bfff17 	ldw	r2,-4(fp)
}
  81e41c:	e037883a 	mov	sp,fp
  81e420:	dfc00117 	ldw	ra,4(sp)
  81e424:	df000017 	ldw	fp,0(sp)
  81e428:	dec00204 	addi	sp,sp,8
  81e42c:	f800283a 	ret

0081e430 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  81e430:	defffe04 	addi	sp,sp,-8
  81e434:	df000115 	stw	fp,4(sp)
  81e438:	df000104 	addi	fp,sp,4
  81e43c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  81e440:	e0bfff17 	ldw	r2,-4(fp)
  81e444:	108000d0 	cmplti	r2,r2,3
  81e448:	10000d1e 	bne	r2,zero,81e480 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  81e44c:	e0bfff17 	ldw	r2,-4(fp)
  81e450:	00c020f4 	movhi	r3,131
  81e454:	18fb7c04 	addi	r3,r3,-4624
  81e458:	10800324 	muli	r2,r2,12
  81e45c:	10c5883a 	add	r2,r2,r3
  81e460:	10800204 	addi	r2,r2,8
  81e464:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  81e468:	e0bfff17 	ldw	r2,-4(fp)
  81e46c:	00c020f4 	movhi	r3,131
  81e470:	18fb7c04 	addi	r3,r3,-4624
  81e474:	10800324 	muli	r2,r2,12
  81e478:	10c5883a 	add	r2,r2,r3
  81e47c:	10000015 	stw	zero,0(r2)
  }
}
  81e480:	e037883a 	mov	sp,fp
  81e484:	df000017 	ldw	fp,0(sp)
  81e488:	dec00104 	addi	sp,sp,4
  81e48c:	f800283a 	ret

0081e490 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  81e490:	defff804 	addi	sp,sp,-32
  81e494:	df000715 	stw	fp,28(sp)
  81e498:	df000704 	addi	fp,sp,28
  81e49c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e4a0:	0005303a 	rdctl	r2,status
  81e4a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e4a8:	e0fffb17 	ldw	r3,-20(fp)
  81e4ac:	00bfff84 	movi	r2,-2
  81e4b0:	1884703a 	and	r2,r3,r2
  81e4b4:	1001703a 	wrctl	status,r2
  
  return context;
  81e4b8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  81e4bc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  81e4c0:	d0a00f17 	ldw	r2,-32708(gp)
  81e4c4:	10c000c4 	addi	r3,r2,3
  81e4c8:	00bfff04 	movi	r2,-4
  81e4cc:	1884703a 	and	r2,r3,r2
  81e4d0:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81e4d4:	d0e00f17 	ldw	r3,-32708(gp)
  81e4d8:	e0bffe17 	ldw	r2,-8(fp)
  81e4dc:	1887883a 	add	r3,r3,r2
  81e4e0:	00804034 	movhi	r2,256
  81e4e4:	10800004 	addi	r2,r2,0
  81e4e8:	10c0072e 	bgeu	r2,r3,81e508 <sbrk+0x78>
  81e4ec:	e0bffd17 	ldw	r2,-12(fp)
  81e4f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e4f4:	e0bffa17 	ldw	r2,-24(fp)
  81e4f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  81e4fc:	00bfffc4 	movi	r2,-1
  81e500:	e0bfff15 	stw	r2,-4(fp)
  81e504:	00000c06 	br	81e538 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  81e508:	d0a00f17 	ldw	r2,-32708(gp)
  81e50c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  81e510:	d0e00f17 	ldw	r3,-32708(gp)
  81e514:	e0bffe17 	ldw	r2,-8(fp)
  81e518:	1885883a 	add	r2,r3,r2
  81e51c:	d0a00f15 	stw	r2,-32708(gp)
  81e520:	e0bffd17 	ldw	r2,-12(fp)
  81e524:	e0bff915 	stw	r2,-28(fp)
  81e528:	e0bff917 	ldw	r2,-28(fp)
  81e52c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  81e530:	e0bffc17 	ldw	r2,-16(fp)
  81e534:	e0bfff15 	stw	r2,-4(fp)
  81e538:	e0bfff17 	ldw	r2,-4(fp)
} 
  81e53c:	e037883a 	mov	sp,fp
  81e540:	df000017 	ldw	fp,0(sp)
  81e544:	dec00104 	addi	sp,sp,4
  81e548:	f800283a 	ret

0081e54c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81e54c:	defffa04 	addi	sp,sp,-24
  81e550:	df000515 	stw	fp,20(sp)
  81e554:	df000504 	addi	fp,sp,20
  81e558:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81e55c:	0005303a 	rdctl	r2,status
  81e560:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81e564:	e0fffd17 	ldw	r3,-12(fp)
  81e568:	00bfff84 	movi	r2,-2
  81e56c:	1884703a 	and	r2,r3,r2
  81e570:	1001703a 	wrctl	status,r2
  
  return context;
  81e574:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81e578:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  81e57c:	e0bfff17 	ldw	r2,-4(fp)
  81e580:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  81e584:	e0bffc17 	ldw	r2,-16(fp)
  81e588:	10c00017 	ldw	r3,0(r2)
  81e58c:	e0bffc17 	ldw	r2,-16(fp)
  81e590:	10800117 	ldw	r2,4(r2)
  81e594:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  81e598:	e0bffc17 	ldw	r2,-16(fp)
  81e59c:	10c00117 	ldw	r3,4(r2)
  81e5a0:	e0bffc17 	ldw	r2,-16(fp)
  81e5a4:	10800017 	ldw	r2,0(r2)
  81e5a8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81e5ac:	e0fffc17 	ldw	r3,-16(fp)
  81e5b0:	e0bffc17 	ldw	r2,-16(fp)
  81e5b4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  81e5b8:	e0fffc17 	ldw	r3,-16(fp)
  81e5bc:	e0bffc17 	ldw	r2,-16(fp)
  81e5c0:	18800015 	stw	r2,0(r3)
  81e5c4:	e0bffe17 	ldw	r2,-8(fp)
  81e5c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81e5cc:	e0bffb17 	ldw	r2,-20(fp)
  81e5d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81e5d4:	e037883a 	mov	sp,fp
  81e5d8:	df000017 	ldw	fp,0(sp)
  81e5dc:	dec00104 	addi	sp,sp,4
  81e5e0:	f800283a 	ret

0081e5e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  81e5e4:	defffb04 	addi	sp,sp,-20
  81e5e8:	dfc00415 	stw	ra,16(sp)
  81e5ec:	df000315 	stw	fp,12(sp)
  81e5f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  81e5f4:	d0a01017 	ldw	r2,-32704(gp)
  81e5f8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81e5fc:	d0bc4317 	ldw	r2,-3828(gp)
  81e600:	10800044 	addi	r2,r2,1
  81e604:	d0bc4315 	stw	r2,-3828(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81e608:	00003106 	br	81e6d0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81e60c:	e0bffe17 	ldw	r2,-8(fp)
  81e610:	10800017 	ldw	r2,0(r2)
  81e614:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  81e618:	e0bffe17 	ldw	r2,-8(fp)
  81e61c:	10800403 	ldbu	r2,16(r2)
  81e620:	10803fcc 	andi	r2,r2,255
  81e624:	1005003a 	cmpeq	r2,r2,zero
  81e628:	1000051e 	bne	r2,zero,81e640 <alt_tick+0x5c>
  81e62c:	d0bc4317 	ldw	r2,-3828(gp)
  81e630:	1004c03a 	cmpne	r2,r2,zero
  81e634:	1000021e 	bne	r2,zero,81e640 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81e638:	e0bffe17 	ldw	r2,-8(fp)
  81e63c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  81e640:	e0bffe17 	ldw	r2,-8(fp)
  81e644:	10c00217 	ldw	r3,8(r2)
  81e648:	d0bc4317 	ldw	r2,-3828(gp)
  81e64c:	10c01e36 	bltu	r2,r3,81e6c8 <alt_tick+0xe4>
  81e650:	e0bffe17 	ldw	r2,-8(fp)
  81e654:	10800403 	ldbu	r2,16(r2)
  81e658:	10803fcc 	andi	r2,r2,255
  81e65c:	1004c03a 	cmpne	r2,r2,zero
  81e660:	1000191e 	bne	r2,zero,81e6c8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  81e664:	e0bffe17 	ldw	r2,-8(fp)
  81e668:	10c00317 	ldw	r3,12(r2)
  81e66c:	e0bffe17 	ldw	r2,-8(fp)
  81e670:	11000517 	ldw	r4,20(r2)
  81e674:	183ee83a 	callr	r3
  81e678:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81e67c:	e0bffd17 	ldw	r2,-12(fp)
  81e680:	1004c03a 	cmpne	r2,r2,zero
  81e684:	1000031e 	bne	r2,zero,81e694 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81e688:	e13ffe17 	ldw	r4,-8(fp)
  81e68c:	081e54c0 	call	81e54c <alt_alarm_stop>
  81e690:	00000d06 	br	81e6c8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  81e694:	e0bffe17 	ldw	r2,-8(fp)
  81e698:	10c00217 	ldw	r3,8(r2)
  81e69c:	e0bffd17 	ldw	r2,-12(fp)
  81e6a0:	1887883a 	add	r3,r3,r2
  81e6a4:	e0bffe17 	ldw	r2,-8(fp)
  81e6a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81e6ac:	e0bffe17 	ldw	r2,-8(fp)
  81e6b0:	10c00217 	ldw	r3,8(r2)
  81e6b4:	d0bc4317 	ldw	r2,-3828(gp)
  81e6b8:	1880032e 	bgeu	r3,r2,81e6c8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  81e6bc:	e0fffe17 	ldw	r3,-8(fp)
  81e6c0:	00800044 	movi	r2,1
  81e6c4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  81e6c8:	e0bfff17 	ldw	r2,-4(fp)
  81e6cc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  81e6d0:	d0e01004 	addi	r3,gp,-32704
  81e6d4:	e0bffe17 	ldw	r2,-8(fp)
  81e6d8:	10ffcc1e 	bne	r2,r3,81e60c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  81e6dc:	e037883a 	mov	sp,fp
  81e6e0:	dfc00117 	ldw	ra,4(sp)
  81e6e4:	df000017 	ldw	fp,0(sp)
  81e6e8:	dec00204 	addi	sp,sp,8
  81e6ec:	f800283a 	ret

0081e6f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  81e6f0:	defffd04 	addi	sp,sp,-12
  81e6f4:	dfc00215 	stw	ra,8(sp)
  81e6f8:	df000115 	stw	fp,4(sp)
  81e6fc:	df000104 	addi	fp,sp,4
  81e700:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81e704:	e13fff17 	ldw	r4,-4(fp)
  81e708:	08273980 	call	827398 <alt_busy_sleep>
}
  81e70c:	e037883a 	mov	sp,fp
  81e710:	dfc00117 	ldw	ra,4(sp)
  81e714:	df000017 	ldw	fp,0(sp)
  81e718:	dec00204 	addi	sp,sp,8
  81e71c:	f800283a 	ret

0081e720 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  81e720:	defff704 	addi	sp,sp,-36
  81e724:	dfc00815 	stw	ra,32(sp)
  81e728:	df000715 	stw	fp,28(sp)
  81e72c:	df000704 	addi	fp,sp,28
  81e730:	e13ffb15 	stw	r4,-20(fp)
  81e734:	e17ffc15 	stw	r5,-16(fp)
  81e738:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81e73c:	e0bffb17 	ldw	r2,-20(fp)
  81e740:	1004803a 	cmplt	r2,r2,zero
  81e744:	1000081e 	bne	r2,zero,81e768 <write+0x48>
  81e748:	e0bffb17 	ldw	r2,-20(fp)
  81e74c:	10800324 	muli	r2,r2,12
  81e750:	1007883a 	mov	r3,r2
  81e754:	008020f4 	movhi	r2,131
  81e758:	10bb7c04 	addi	r2,r2,-4624
  81e75c:	1887883a 	add	r3,r3,r2
  81e760:	e0ffff15 	stw	r3,-4(fp)
  81e764:	00000106 	br	81e76c <write+0x4c>
  81e768:	e03fff15 	stw	zero,-4(fp)
  81e76c:	e0bfff17 	ldw	r2,-4(fp)
  81e770:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  81e774:	e0bffa17 	ldw	r2,-24(fp)
  81e778:	1005003a 	cmpeq	r2,r2,zero
  81e77c:	1000241e 	bne	r2,zero,81e810 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  81e780:	e0bffa17 	ldw	r2,-24(fp)
  81e784:	10800217 	ldw	r2,8(r2)
  81e788:	108000cc 	andi	r2,r2,3
  81e78c:	1005003a 	cmpeq	r2,r2,zero
  81e790:	10001a1e 	bne	r2,zero,81e7fc <write+0xdc>
  81e794:	e0bffa17 	ldw	r2,-24(fp)
  81e798:	10800017 	ldw	r2,0(r2)
  81e79c:	10800617 	ldw	r2,24(r2)
  81e7a0:	1005003a 	cmpeq	r2,r2,zero
  81e7a4:	1000151e 	bne	r2,zero,81e7fc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  81e7a8:	e0bffa17 	ldw	r2,-24(fp)
  81e7ac:	10800017 	ldw	r2,0(r2)
  81e7b0:	10800617 	ldw	r2,24(r2)
  81e7b4:	e17ffc17 	ldw	r5,-16(fp)
  81e7b8:	e1bffd17 	ldw	r6,-12(fp)
  81e7bc:	e13ffa17 	ldw	r4,-24(fp)
  81e7c0:	103ee83a 	callr	r2
  81e7c4:	e0bff915 	stw	r2,-28(fp)
  81e7c8:	e0bff917 	ldw	r2,-28(fp)
  81e7cc:	1004403a 	cmpge	r2,r2,zero
  81e7d0:	1000071e 	bne	r2,zero,81e7f0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  81e7d4:	081e8400 	call	81e840 <alt_get_errno>
  81e7d8:	e0fff917 	ldw	r3,-28(fp)
  81e7dc:	00c7c83a 	sub	r3,zero,r3
  81e7e0:	10c00015 	stw	r3,0(r2)
        return -1;
  81e7e4:	00bfffc4 	movi	r2,-1
  81e7e8:	e0bffe15 	stw	r2,-8(fp)
  81e7ec:	00000e06 	br	81e828 <write+0x108>
      }
      return rval;
  81e7f0:	e0bff917 	ldw	r2,-28(fp)
  81e7f4:	e0bffe15 	stw	r2,-8(fp)
  81e7f8:	00000b06 	br	81e828 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  81e7fc:	081e8400 	call	81e840 <alt_get_errno>
  81e800:	1007883a 	mov	r3,r2
  81e804:	00800344 	movi	r2,13
  81e808:	18800015 	stw	r2,0(r3)
  81e80c:	00000406 	br	81e820 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  81e810:	081e8400 	call	81e840 <alt_get_errno>
  81e814:	1007883a 	mov	r3,r2
  81e818:	00801444 	movi	r2,81
  81e81c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81e820:	00bfffc4 	movi	r2,-1
  81e824:	e0bffe15 	stw	r2,-8(fp)
  81e828:	e0bffe17 	ldw	r2,-8(fp)
}
  81e82c:	e037883a 	mov	sp,fp
  81e830:	dfc00117 	ldw	ra,4(sp)
  81e834:	df000017 	ldw	fp,0(sp)
  81e838:	dec00204 	addi	sp,sp,8
  81e83c:	f800283a 	ret

0081e840 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81e840:	defffd04 	addi	sp,sp,-12
  81e844:	dfc00215 	stw	ra,8(sp)
  81e848:	df000115 	stw	fp,4(sp)
  81e84c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81e850:	008020f4 	movhi	r2,131
  81e854:	10806404 	addi	r2,r2,400
  81e858:	10800017 	ldw	r2,0(r2)
  81e85c:	1005003a 	cmpeq	r2,r2,zero
  81e860:	1000061e 	bne	r2,zero,81e87c <alt_get_errno+0x3c>
  81e864:	008020f4 	movhi	r2,131
  81e868:	10806404 	addi	r2,r2,400
  81e86c:	10800017 	ldw	r2,0(r2)
  81e870:	103ee83a 	callr	r2
  81e874:	e0bfff15 	stw	r2,-4(fp)
  81e878:	00000306 	br	81e888 <alt_get_errno+0x48>
  81e87c:	008020f4 	movhi	r2,131
  81e880:	109c9104 	addi	r2,r2,29252
  81e884:	e0bfff15 	stw	r2,-4(fp)
  81e888:	e0bfff17 	ldw	r2,-4(fp)
}
  81e88c:	e037883a 	mov	sp,fp
  81e890:	dfc00117 	ldw	ra,4(sp)
  81e894:	df000017 	ldw	fp,0(sp)
  81e898:	dec00204 	addi	sp,sp,8
  81e89c:	f800283a 	ret

0081e8a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  81e8a0:	defffd04 	addi	sp,sp,-12
  81e8a4:	dfc00215 	stw	ra,8(sp)
  81e8a8:	df000115 	stw	fp,4(sp)
  81e8ac:	df000104 	addi	fp,sp,4
  81e8b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
  81e8b4:	0827bc80 	call	827bc8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  81e8b8:	00800044 	movi	r2,1
  81e8bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  81e8c0:	e037883a 	mov	sp,fp
  81e8c4:	dfc00117 	ldw	ra,4(sp)
  81e8c8:	df000017 	ldw	fp,0(sp)
  81e8cc:	dec00204 	addi	sp,sp,8
  81e8d0:	f800283a 	ret

0081e8d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  81e8d4:	defffd04 	addi	sp,sp,-12
  81e8d8:	dfc00215 	stw	ra,8(sp)
  81e8dc:	df000115 	stw	fp,4(sp)
  81e8e0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  81e8e4:	01004234 	movhi	r4,264
  81e8e8:	210d0004 	addi	r4,r4,13312
  81e8ec:	000b883a 	mov	r5,zero
  81e8f0:	000d883a 	mov	r6,zero
  81e8f4:	01c0fa04 	movi	r7,1000
  81e8f8:	081f7b40 	call	81f7b4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP, timestamp);
  81e8fc:	00c020f4 	movhi	r3,131
  81e900:	18dc9b04 	addi	r3,r3,29292
  81e904:	00804234 	movhi	r2,264
  81e908:	108d0804 	addi	r2,r2,13344
  81e90c:	18800015 	stw	r2,0(r3)
  81e910:	00c020f4 	movhi	r3,131
  81e914:	18dc9c04 	addi	r3,r3,29296
  81e918:	0080bef4 	movhi	r2,763
  81e91c:	10bc2004 	addi	r2,r2,-3968
  81e920:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  81e924:	010020f4 	movhi	r4,131
  81e928:	213be604 	addi	r4,r4,-4200
  81e92c:	000b883a 	mov	r5,zero
  81e930:	01800104 	movi	r6,4
  81e934:	081ede00 	call	81ede0 <altera_avalon_jtag_uart_init>
  81e938:	010020f4 	movhi	r4,131
  81e93c:	213bdc04 	addi	r4,r4,-4240
  81e940:	081ec600 	call	81ec60 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  81e944:	010020f4 	movhi	r4,131
  81e948:	213ff404 	addi	r4,r4,-48
  81e94c:	081ec600 	call	81ec60 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
  81e950:	010020f4 	movhi	r4,131
  81e954:	21000004 	addi	r4,r4,0
  81e958:	081ec600 	call	81ec60 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  81e95c:	010020f4 	movhi	r4,131
  81e960:	21000c04 	addi	r4,r4,48
  81e964:	08209e80 	call	8209e8 <alt_up_character_lcd_init>
  81e968:	010020f4 	movhi	r4,131
  81e96c:	21000c04 	addi	r4,r4,48
  81e970:	081ec600 	call	81ec60 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
  81e974:	010020f4 	movhi	r4,131
  81e978:	21001704 	addi	r4,r4,92
  81e97c:	0820f940 	call	820f94 <alt_up_ps2_init>
  81e980:	010020f4 	movhi	r4,131
  81e984:	21001704 	addi	r4,r4,92
  81e988:	081ec600 	call	81ec60 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
  81e98c:	008020f4 	movhi	r2,131
  81e990:	10802504 	addi	r2,r2,148
  81e994:	10800a17 	ldw	r2,40(r2)
  81e998:	10800104 	addi	r2,r2,4
  81e99c:	10800017 	ldw	r2,0(r2)
  81e9a0:	10ffffcc 	andi	r3,r2,65535
  81e9a4:	008020f4 	movhi	r2,131
  81e9a8:	10802504 	addi	r2,r2,148
  81e9ac:	10c00c15 	stw	r3,48(r2)
  81e9b0:	008020f4 	movhi	r2,131
  81e9b4:	10802504 	addi	r2,r2,148
  81e9b8:	10800a17 	ldw	r2,40(r2)
  81e9bc:	10800104 	addi	r2,r2,4
  81e9c0:	10800017 	ldw	r2,0(r2)
  81e9c4:	1005d43a 	srai	r2,r2,16
  81e9c8:	10ffffcc 	andi	r3,r2,65535
  81e9cc:	008020f4 	movhi	r2,131
  81e9d0:	10802504 	addi	r2,r2,148
  81e9d4:	10c00d15 	stw	r3,52(r2)
  81e9d8:	008020f4 	movhi	r2,131
  81e9dc:	10802504 	addi	r2,r2,148
  81e9e0:	10800c17 	ldw	r2,48(r2)
  81e9e4:	10801068 	cmpgeui	r2,r2,65
  81e9e8:	1000081e 	bne	r2,zero,81ea0c <alt_sys_init+0x138>
  81e9ec:	00c020f4 	movhi	r3,131
  81e9f0:	18c02504 	addi	r3,r3,148
  81e9f4:	00800fc4 	movi	r2,63
  81e9f8:	18800f15 	stw	r2,60(r3)
  81e9fc:	00c020f4 	movhi	r3,131
  81ea00:	18c02504 	addi	r3,r3,148
  81ea04:	00800184 	movi	r2,6
  81ea08:	18801015 	stw	r2,64(r3)
  81ea0c:	008020f4 	movhi	r2,131
  81ea10:	10802504 	addi	r2,r2,148
  81ea14:	10800d17 	ldw	r2,52(r2)
  81ea18:	10800868 	cmpgeui	r2,r2,33
  81ea1c:	1000041e 	bne	r2,zero,81ea30 <alt_sys_init+0x15c>
  81ea20:	00c020f4 	movhi	r3,131
  81ea24:	18c02504 	addi	r3,r3,148
  81ea28:	008007c4 	movi	r2,31
  81ea2c:	18801115 	stw	r2,68(r3)
  81ea30:	010020f4 	movhi	r4,131
  81ea34:	21002504 	addi	r4,r4,148
  81ea38:	08215680 	call	821568 <alt_up_char_buffer_init>
  81ea3c:	010020f4 	movhi	r4,131
  81ea40:	21002504 	addi	r4,r4,148
  81ea44:	081ec600 	call	81ec60 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA_0, pixel_buffer_dma_0);
  81ea48:	008020f4 	movhi	r2,131
  81ea4c:	10803704 	addi	r2,r2,220
  81ea50:	10800a17 	ldw	r2,40(r2)
  81ea54:	10800017 	ldw	r2,0(r2)
  81ea58:	1007883a 	mov	r3,r2
  81ea5c:	008020f4 	movhi	r2,131
  81ea60:	10803704 	addi	r2,r2,220
  81ea64:	10c00b15 	stw	r3,44(r2)
  81ea68:	008020f4 	movhi	r2,131
  81ea6c:	10803704 	addi	r2,r2,220
  81ea70:	10800a17 	ldw	r2,40(r2)
  81ea74:	10800104 	addi	r2,r2,4
  81ea78:	10800017 	ldw	r2,0(r2)
  81ea7c:	1007883a 	mov	r3,r2
  81ea80:	008020f4 	movhi	r2,131
  81ea84:	10803704 	addi	r2,r2,220
  81ea88:	10c00c15 	stw	r3,48(r2)
  81ea8c:	008020f4 	movhi	r2,131
  81ea90:	10803704 	addi	r2,r2,220
  81ea94:	10800a17 	ldw	r2,40(r2)
  81ea98:	10800204 	addi	r2,r2,8
  81ea9c:	10800017 	ldw	r2,0(r2)
  81eaa0:	10ffffcc 	andi	r3,r2,65535
  81eaa4:	008020f4 	movhi	r2,131
  81eaa8:	10803704 	addi	r2,r2,220
  81eaac:	10c00f15 	stw	r3,60(r2)
  81eab0:	008020f4 	movhi	r2,131
  81eab4:	10803704 	addi	r2,r2,220
  81eab8:	10800a17 	ldw	r2,40(r2)
  81eabc:	10800204 	addi	r2,r2,8
  81eac0:	10800017 	ldw	r2,0(r2)
  81eac4:	1005d43a 	srai	r2,r2,16
  81eac8:	10ffffcc 	andi	r3,r2,65535
  81eacc:	008020f4 	movhi	r2,131
  81ead0:	10803704 	addi	r2,r2,220
  81ead4:	10c01015 	stw	r3,64(r2)
  81ead8:	008020f4 	movhi	r2,131
  81eadc:	10803704 	addi	r2,r2,220
  81eae0:	10800a17 	ldw	r2,40(r2)
  81eae4:	10800304 	addi	r2,r2,12
  81eae8:	10800017 	ldw	r2,0(r2)
  81eaec:	1005d07a 	srai	r2,r2,1
  81eaf0:	10c0004c 	andi	r3,r2,1
  81eaf4:	008020f4 	movhi	r2,131
  81eaf8:	10803704 	addi	r2,r2,220
  81eafc:	10c00d15 	stw	r3,52(r2)
  81eb00:	008020f4 	movhi	r2,131
  81eb04:	10803704 	addi	r2,r2,220
  81eb08:	10800a17 	ldw	r2,40(r2)
  81eb0c:	10800304 	addi	r2,r2,12
  81eb10:	10800017 	ldw	r2,0(r2)
  81eb14:	1005d13a 	srai	r2,r2,4
  81eb18:	10c003cc 	andi	r3,r2,15
  81eb1c:	008020f4 	movhi	r2,131
  81eb20:	10803704 	addi	r2,r2,220
  81eb24:	10c00e15 	stw	r3,56(r2)
  81eb28:	008020f4 	movhi	r2,131
  81eb2c:	10803704 	addi	r2,r2,220
  81eb30:	10800a17 	ldw	r2,40(r2)
  81eb34:	10800304 	addi	r2,r2,12
  81eb38:	10800017 	ldw	r2,0(r2)
  81eb3c:	1005d43a 	srai	r2,r2,16
  81eb40:	1007883a 	mov	r3,r2
  81eb44:	00bfffc4 	movi	r2,-1
  81eb48:	1884703a 	and	r2,r3,r2
  81eb4c:	e0bfff45 	stb	r2,-3(fp)
  81eb50:	008020f4 	movhi	r2,131
  81eb54:	10803704 	addi	r2,r2,220
  81eb58:	10800a17 	ldw	r2,40(r2)
  81eb5c:	10800304 	addi	r2,r2,12
  81eb60:	10800017 	ldw	r2,0(r2)
  81eb64:	1005d63a 	srai	r2,r2,24
  81eb68:	1007883a 	mov	r3,r2
  81eb6c:	00bfffc4 	movi	r2,-1
  81eb70:	1884703a 	and	r2,r3,r2
  81eb74:	e0bfff05 	stb	r2,-4(fp)
  81eb78:	008020f4 	movhi	r2,131
  81eb7c:	10803704 	addi	r2,r2,220
  81eb80:	10800e17 	ldw	r2,56(r2)
  81eb84:	10800058 	cmpnei	r2,r2,1
  81eb88:	1000041e 	bne	r2,zero,81eb9c <alt_sys_init+0x2c8>
  81eb8c:	008020f4 	movhi	r2,131
  81eb90:	10803704 	addi	r2,r2,220
  81eb94:	10001115 	stw	zero,68(r2)
  81eb98:	00000e06 	br	81ebd4 <alt_sys_init+0x300>
  81eb9c:	008020f4 	movhi	r2,131
  81eba0:	10803704 	addi	r2,r2,220
  81eba4:	10800e17 	ldw	r2,56(r2)
  81eba8:	10800098 	cmpnei	r2,r2,2
  81ebac:	1000051e 	bne	r2,zero,81ebc4 <alt_sys_init+0x2f0>
  81ebb0:	00c020f4 	movhi	r3,131
  81ebb4:	18c03704 	addi	r3,r3,220
  81ebb8:	00800044 	movi	r2,1
  81ebbc:	18801115 	stw	r2,68(r3)
  81ebc0:	00000406 	br	81ebd4 <alt_sys_init+0x300>
  81ebc4:	00c020f4 	movhi	r3,131
  81ebc8:	18c03704 	addi	r3,r3,220
  81ebcc:	00800084 	movi	r2,2
  81ebd0:	18801115 	stw	r2,68(r3)
  81ebd4:	e0ffff43 	ldbu	r3,-3(fp)
  81ebd8:	00800804 	movi	r2,32
  81ebdc:	10c7c83a 	sub	r3,r2,r3
  81ebe0:	00bfffc4 	movi	r2,-1
  81ebe4:	10c6d83a 	srl	r3,r2,r3
  81ebe8:	008020f4 	movhi	r2,131
  81ebec:	10803704 	addi	r2,r2,220
  81ebf0:	10c01215 	stw	r3,72(r2)
  81ebf4:	e0ffff43 	ldbu	r3,-3(fp)
  81ebf8:	008020f4 	movhi	r2,131
  81ebfc:	10803704 	addi	r2,r2,220
  81ec00:	10801117 	ldw	r2,68(r2)
  81ec04:	1887883a 	add	r3,r3,r2
  81ec08:	008020f4 	movhi	r2,131
  81ec0c:	10803704 	addi	r2,r2,220
  81ec10:	10c01315 	stw	r3,76(r2)
  81ec14:	e0ffff03 	ldbu	r3,-4(fp)
  81ec18:	00800804 	movi	r2,32
  81ec1c:	10c7c83a 	sub	r3,r2,r3
  81ec20:	00bfffc4 	movi	r2,-1
  81ec24:	10c6d83a 	srl	r3,r2,r3
  81ec28:	008020f4 	movhi	r2,131
  81ec2c:	10803704 	addi	r2,r2,220
  81ec30:	10c01415 	stw	r3,80(r2)
  81ec34:	010020f4 	movhi	r4,131
  81ec38:	21003704 	addi	r4,r4,220
  81ec3c:	081ec600 	call	81ec60 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
  81ec40:	010020f4 	movhi	r4,131
  81ec44:	21004c04 	addi	r4,r4,304
  81ec48:	081ec600 	call	81ec60 <alt_dev_reg>
}
  81ec4c:	e037883a 	mov	sp,fp
  81ec50:	dfc00117 	ldw	ra,4(sp)
  81ec54:	df000017 	ldw	fp,0(sp)
  81ec58:	dec00204 	addi	sp,sp,8
  81ec5c:	f800283a 	ret

0081ec60 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  81ec60:	defffd04 	addi	sp,sp,-12
  81ec64:	dfc00215 	stw	ra,8(sp)
  81ec68:	df000115 	stw	fp,4(sp)
  81ec6c:	df000104 	addi	fp,sp,4
  81ec70:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  81ec74:	e13fff17 	ldw	r4,-4(fp)
  81ec78:	014020f4 	movhi	r5,131
  81ec7c:	29406104 	addi	r5,r5,388
  81ec80:	08275280 	call	827528 <alt_dev_llist_insert>
}
  81ec84:	e037883a 	mov	sp,fp
  81ec88:	dfc00117 	ldw	ra,4(sp)
  81ec8c:	df000017 	ldw	fp,0(sp)
  81ec90:	dec00204 	addi	sp,sp,8
  81ec94:	f800283a 	ret

0081ec98 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  81ec98:	defffa04 	addi	sp,sp,-24
  81ec9c:	dfc00515 	stw	ra,20(sp)
  81eca0:	df000415 	stw	fp,16(sp)
  81eca4:	df000404 	addi	fp,sp,16
  81eca8:	e13ffd15 	stw	r4,-12(fp)
  81ecac:	e17ffe15 	stw	r5,-8(fp)
  81ecb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81ecb4:	e0bffd17 	ldw	r2,-12(fp)
  81ecb8:	10800017 	ldw	r2,0(r2)
  81ecbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  81ecc0:	e0bffc17 	ldw	r2,-16(fp)
  81ecc4:	11000a04 	addi	r4,r2,40
  81ecc8:	e0bffd17 	ldw	r2,-12(fp)
  81eccc:	11c00217 	ldw	r7,8(r2)
  81ecd0:	e17ffe17 	ldw	r5,-8(fp)
  81ecd4:	e1bfff17 	ldw	r6,-4(fp)
  81ecd8:	081f2dc0 	call	81f2dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  81ecdc:	e037883a 	mov	sp,fp
  81ece0:	dfc00117 	ldw	ra,4(sp)
  81ece4:	df000017 	ldw	fp,0(sp)
  81ece8:	dec00204 	addi	sp,sp,8
  81ecec:	f800283a 	ret

0081ecf0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81ecf0:	defffa04 	addi	sp,sp,-24
  81ecf4:	dfc00515 	stw	ra,20(sp)
  81ecf8:	df000415 	stw	fp,16(sp)
  81ecfc:	df000404 	addi	fp,sp,16
  81ed00:	e13ffd15 	stw	r4,-12(fp)
  81ed04:	e17ffe15 	stw	r5,-8(fp)
  81ed08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81ed0c:	e0bffd17 	ldw	r2,-12(fp)
  81ed10:	10800017 	ldw	r2,0(r2)
  81ed14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  81ed18:	e0bffc17 	ldw	r2,-16(fp)
  81ed1c:	11000a04 	addi	r4,r2,40
  81ed20:	e0bffd17 	ldw	r2,-12(fp)
  81ed24:	11c00217 	ldw	r7,8(r2)
  81ed28:	e17ffe17 	ldw	r5,-8(fp)
  81ed2c:	e1bfff17 	ldw	r6,-4(fp)
  81ed30:	081f5000 	call	81f500 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  81ed34:	e037883a 	mov	sp,fp
  81ed38:	dfc00117 	ldw	ra,4(sp)
  81ed3c:	df000017 	ldw	fp,0(sp)
  81ed40:	dec00204 	addi	sp,sp,8
  81ed44:	f800283a 	ret

0081ed48 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  81ed48:	defffc04 	addi	sp,sp,-16
  81ed4c:	dfc00315 	stw	ra,12(sp)
  81ed50:	df000215 	stw	fp,8(sp)
  81ed54:	df000204 	addi	fp,sp,8
  81ed58:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81ed5c:	e0bfff17 	ldw	r2,-4(fp)
  81ed60:	10800017 	ldw	r2,0(r2)
  81ed64:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  81ed68:	e0bffe17 	ldw	r2,-8(fp)
  81ed6c:	11000a04 	addi	r4,r2,40
  81ed70:	e0bfff17 	ldw	r2,-4(fp)
  81ed74:	11400217 	ldw	r5,8(r2)
  81ed78:	081f1740 	call	81f174 <altera_avalon_jtag_uart_close>
}
  81ed7c:	e037883a 	mov	sp,fp
  81ed80:	dfc00117 	ldw	ra,4(sp)
  81ed84:	df000017 	ldw	fp,0(sp)
  81ed88:	dec00204 	addi	sp,sp,8
  81ed8c:	f800283a 	ret

0081ed90 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  81ed90:	defffa04 	addi	sp,sp,-24
  81ed94:	dfc00515 	stw	ra,20(sp)
  81ed98:	df000415 	stw	fp,16(sp)
  81ed9c:	df000404 	addi	fp,sp,16
  81eda0:	e13ffd15 	stw	r4,-12(fp)
  81eda4:	e17ffe15 	stw	r5,-8(fp)
  81eda8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  81edac:	e0bffd17 	ldw	r2,-12(fp)
  81edb0:	10800017 	ldw	r2,0(r2)
  81edb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  81edb8:	e0bffc17 	ldw	r2,-16(fp)
  81edbc:	11000a04 	addi	r4,r2,40
  81edc0:	e17ffe17 	ldw	r5,-8(fp)
  81edc4:	e1bfff17 	ldw	r6,-4(fp)
  81edc8:	081f1e80 	call	81f1e8 <altera_avalon_jtag_uart_ioctl>
}
  81edcc:	e037883a 	mov	sp,fp
  81edd0:	dfc00117 	ldw	ra,4(sp)
  81edd4:	df000017 	ldw	fp,0(sp)
  81edd8:	dec00204 	addi	sp,sp,8
  81eddc:	f800283a 	ret

0081ede0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  81ede0:	defffb04 	addi	sp,sp,-20
  81ede4:	dfc00415 	stw	ra,16(sp)
  81ede8:	df000315 	stw	fp,12(sp)
  81edec:	df000304 	addi	fp,sp,12
  81edf0:	e13ffd15 	stw	r4,-12(fp)
  81edf4:	e17ffe15 	stw	r5,-8(fp)
  81edf8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81edfc:	e0fffd17 	ldw	r3,-12(fp)
  81ee00:	00800044 	movi	r2,1
  81ee04:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  81ee08:	e0bffd17 	ldw	r2,-12(fp)
  81ee0c:	10800017 	ldw	r2,0(r2)
  81ee10:	11000104 	addi	r4,r2,4
  81ee14:	e0bffd17 	ldw	r2,-12(fp)
  81ee18:	10800817 	ldw	r2,32(r2)
  81ee1c:	1007883a 	mov	r3,r2
  81ee20:	2005883a 	mov	r2,r4
  81ee24:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  81ee28:	e13fff17 	ldw	r4,-4(fp)
  81ee2c:	e17ffd17 	ldw	r5,-12(fp)
  81ee30:	018020b4 	movhi	r6,130
  81ee34:	31bba604 	addi	r6,r6,-4456
  81ee38:	081dce80 	call	81dce8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  81ee3c:	e0bffd17 	ldw	r2,-12(fp)
  81ee40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  81ee44:	e0bffd17 	ldw	r2,-12(fp)
  81ee48:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81ee4c:	008020f4 	movhi	r2,131
  81ee50:	109c9904 	addi	r2,r2,29284
  81ee54:	10800017 	ldw	r2,0(r2)
  81ee58:	100b883a 	mov	r5,r2
  81ee5c:	018020b4 	movhi	r6,130
  81ee60:	31bc3104 	addi	r6,r6,-3900
  81ee64:	e1fffd17 	ldw	r7,-12(fp)
  81ee68:	081d8d80 	call	81d8d8 <alt_alarm_start>
  81ee6c:	1004403a 	cmpge	r2,r2,zero
  81ee70:	1000041e 	bne	r2,zero,81ee84 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  81ee74:	e0fffd17 	ldw	r3,-12(fp)
  81ee78:	00a00034 	movhi	r2,32768
  81ee7c:	10bfffc4 	addi	r2,r2,-1
  81ee80:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  81ee84:	e037883a 	mov	sp,fp
  81ee88:	dfc00117 	ldw	ra,4(sp)
  81ee8c:	df000017 	ldw	fp,0(sp)
  81ee90:	dec00204 	addi	sp,sp,8
  81ee94:	f800283a 	ret

0081ee98 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  81ee98:	defff704 	addi	sp,sp,-36
  81ee9c:	df000815 	stw	fp,32(sp)
  81eea0:	df000804 	addi	fp,sp,32
  81eea4:	e13ffe15 	stw	r4,-8(fp)
  81eea8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  81eeac:	e0bffe17 	ldw	r2,-8(fp)
  81eeb0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  81eeb4:	e0bffd17 	ldw	r2,-12(fp)
  81eeb8:	10800017 	ldw	r2,0(r2)
  81eebc:	e0bffc15 	stw	r2,-16(fp)
  81eec0:	00000006 	br	81eec4 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81eec4:	e0bffc17 	ldw	r2,-16(fp)
  81eec8:	10800104 	addi	r2,r2,4
  81eecc:	10800037 	ldwio	r2,0(r2)
  81eed0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  81eed4:	e0bffb17 	ldw	r2,-20(fp)
  81eed8:	1080c00c 	andi	r2,r2,768
  81eedc:	1005003a 	cmpeq	r2,r2,zero
  81eee0:	1000741e 	bne	r2,zero,81f0b4 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  81eee4:	e0bffb17 	ldw	r2,-20(fp)
  81eee8:	1080400c 	andi	r2,r2,256
  81eeec:	1005003a 	cmpeq	r2,r2,zero
  81eef0:	1000351e 	bne	r2,zero,81efc8 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  81eef4:	00800074 	movhi	r2,1
  81eef8:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81eefc:	e0bffd17 	ldw	r2,-12(fp)
  81ef00:	10800a17 	ldw	r2,40(r2)
  81ef04:	10800044 	addi	r2,r2,1
  81ef08:	1081ffcc 	andi	r2,r2,2047
  81ef0c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  81ef10:	e0bffd17 	ldw	r2,-12(fp)
  81ef14:	10c00b17 	ldw	r3,44(r2)
  81ef18:	e0bff917 	ldw	r2,-28(fp)
  81ef1c:	18801626 	beq	r3,r2,81ef78 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  81ef20:	e0bffc17 	ldw	r2,-16(fp)
  81ef24:	10800037 	ldwio	r2,0(r2)
  81ef28:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  81ef2c:	e0bffa17 	ldw	r2,-24(fp)
  81ef30:	10a0000c 	andi	r2,r2,32768
  81ef34:	1005003a 	cmpeq	r2,r2,zero
  81ef38:	10000f1e 	bne	r2,zero,81ef78 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  81ef3c:	e0bffd17 	ldw	r2,-12(fp)
  81ef40:	10c00a17 	ldw	r3,40(r2)
  81ef44:	e0bffa17 	ldw	r2,-24(fp)
  81ef48:	1009883a 	mov	r4,r2
  81ef4c:	e0bffd17 	ldw	r2,-12(fp)
  81ef50:	1885883a 	add	r2,r3,r2
  81ef54:	10800e04 	addi	r2,r2,56
  81ef58:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81ef5c:	e0bffd17 	ldw	r2,-12(fp)
  81ef60:	10800a17 	ldw	r2,40(r2)
  81ef64:	10800044 	addi	r2,r2,1
  81ef68:	10c1ffcc 	andi	r3,r2,2047
  81ef6c:	e0bffd17 	ldw	r2,-12(fp)
  81ef70:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  81ef74:	003fe106 	br	81eefc <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  81ef78:	e0bffa17 	ldw	r2,-24(fp)
  81ef7c:	10bfffec 	andhi	r2,r2,65535
  81ef80:	1005003a 	cmpeq	r2,r2,zero
  81ef84:	1000101e 	bne	r2,zero,81efc8 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81ef88:	e0bffd17 	ldw	r2,-12(fp)
  81ef8c:	10c00817 	ldw	r3,32(r2)
  81ef90:	00bfff84 	movi	r2,-2
  81ef94:	1886703a 	and	r3,r3,r2
  81ef98:	e0bffd17 	ldw	r2,-12(fp)
  81ef9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  81efa0:	e0bffc17 	ldw	r2,-16(fp)
  81efa4:	11000104 	addi	r4,r2,4
  81efa8:	e0bffd17 	ldw	r2,-12(fp)
  81efac:	10800817 	ldw	r2,32(r2)
  81efb0:	1007883a 	mov	r3,r2
  81efb4:	2005883a 	mov	r2,r4
  81efb8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81efbc:	e0bffc17 	ldw	r2,-16(fp)
  81efc0:	10800104 	addi	r2,r2,4
  81efc4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  81efc8:	e0bffb17 	ldw	r2,-20(fp)
  81efcc:	1080800c 	andi	r2,r2,512
  81efd0:	1005003a 	cmpeq	r2,r2,zero
  81efd4:	103fbb1e 	bne	r2,zero,81eec4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  81efd8:	e0bffb17 	ldw	r2,-20(fp)
  81efdc:	10bfffec 	andhi	r2,r2,65535
  81efe0:	1004d43a 	srli	r2,r2,16
  81efe4:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  81efe8:	00001506 	br	81f040 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  81efec:	e13ffc17 	ldw	r4,-16(fp)
  81eff0:	e0bffd17 	ldw	r2,-12(fp)
  81eff4:	10c00d17 	ldw	r3,52(r2)
  81eff8:	e0bffd17 	ldw	r2,-12(fp)
  81effc:	1885883a 	add	r2,r3,r2
  81f000:	10820e04 	addi	r2,r2,2104
  81f004:	10800003 	ldbu	r2,0(r2)
  81f008:	10c03fcc 	andi	r3,r2,255
  81f00c:	18c0201c 	xori	r3,r3,128
  81f010:	18ffe004 	addi	r3,r3,-128
  81f014:	2005883a 	mov	r2,r4
  81f018:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81f01c:	e0bffd17 	ldw	r2,-12(fp)
  81f020:	10800d17 	ldw	r2,52(r2)
  81f024:	10800044 	addi	r2,r2,1
  81f028:	10c1ffcc 	andi	r3,r2,2047
  81f02c:	e0bffd17 	ldw	r2,-12(fp)
  81f030:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  81f034:	e0bff817 	ldw	r2,-32(fp)
  81f038:	10bfffc4 	addi	r2,r2,-1
  81f03c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  81f040:	e0bff817 	ldw	r2,-32(fp)
  81f044:	1005003a 	cmpeq	r2,r2,zero
  81f048:	1000051e 	bne	r2,zero,81f060 <altera_avalon_jtag_uart_irq+0x1c8>
  81f04c:	e0bffd17 	ldw	r2,-12(fp)
  81f050:	10c00d17 	ldw	r3,52(r2)
  81f054:	e0bffd17 	ldw	r2,-12(fp)
  81f058:	10800c17 	ldw	r2,48(r2)
  81f05c:	18bfe31e 	bne	r3,r2,81efec <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  81f060:	e0bff817 	ldw	r2,-32(fp)
  81f064:	1005003a 	cmpeq	r2,r2,zero
  81f068:	103f961e 	bne	r2,zero,81eec4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81f06c:	e0bffd17 	ldw	r2,-12(fp)
  81f070:	10c00817 	ldw	r3,32(r2)
  81f074:	00bfff44 	movi	r2,-3
  81f078:	1886703a 	and	r3,r3,r2
  81f07c:	e0bffd17 	ldw	r2,-12(fp)
  81f080:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81f084:	e0bffd17 	ldw	r2,-12(fp)
  81f088:	10800017 	ldw	r2,0(r2)
  81f08c:	11000104 	addi	r4,r2,4
  81f090:	e0bffd17 	ldw	r2,-12(fp)
  81f094:	10800817 	ldw	r2,32(r2)
  81f098:	1007883a 	mov	r3,r2
  81f09c:	2005883a 	mov	r2,r4
  81f0a0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  81f0a4:	e0bffc17 	ldw	r2,-16(fp)
  81f0a8:	10800104 	addi	r2,r2,4
  81f0ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  81f0b0:	003f8406 	br	81eec4 <altera_avalon_jtag_uart_irq+0x2c>
}
  81f0b4:	e037883a 	mov	sp,fp
  81f0b8:	df000017 	ldw	fp,0(sp)
  81f0bc:	dec00104 	addi	sp,sp,4
  81f0c0:	f800283a 	ret

0081f0c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  81f0c4:	defffc04 	addi	sp,sp,-16
  81f0c8:	df000315 	stw	fp,12(sp)
  81f0cc:	df000304 	addi	fp,sp,12
  81f0d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  81f0d4:	e0bfff17 	ldw	r2,-4(fp)
  81f0d8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  81f0dc:	e0bffe17 	ldw	r2,-8(fp)
  81f0e0:	10800017 	ldw	r2,0(r2)
  81f0e4:	10800104 	addi	r2,r2,4
  81f0e8:	10800037 	ldwio	r2,0(r2)
  81f0ec:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  81f0f0:	e0bffd17 	ldw	r2,-12(fp)
  81f0f4:	1081000c 	andi	r2,r2,1024
  81f0f8:	1005003a 	cmpeq	r2,r2,zero
  81f0fc:	10000c1e 	bne	r2,zero,81f130 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  81f100:	e0bffe17 	ldw	r2,-8(fp)
  81f104:	10800017 	ldw	r2,0(r2)
  81f108:	11000104 	addi	r4,r2,4
  81f10c:	e0bffe17 	ldw	r2,-8(fp)
  81f110:	10800817 	ldw	r2,32(r2)
  81f114:	10810014 	ori	r2,r2,1024
  81f118:	1007883a 	mov	r3,r2
  81f11c:	2005883a 	mov	r2,r4
  81f120:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  81f124:	e0bffe17 	ldw	r2,-8(fp)
  81f128:	10000915 	stw	zero,36(r2)
  81f12c:	00000a06 	br	81f158 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  81f130:	e0bffe17 	ldw	r2,-8(fp)
  81f134:	10c00917 	ldw	r3,36(r2)
  81f138:	00a00034 	movhi	r2,32768
  81f13c:	10bfff04 	addi	r2,r2,-4
  81f140:	10c00536 	bltu	r2,r3,81f158 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  81f144:	e0bffe17 	ldw	r2,-8(fp)
  81f148:	10800917 	ldw	r2,36(r2)
  81f14c:	10c00044 	addi	r3,r2,1
  81f150:	e0bffe17 	ldw	r2,-8(fp)
  81f154:	10c00915 	stw	r3,36(r2)
  81f158:	008020f4 	movhi	r2,131
  81f15c:	109c9904 	addi	r2,r2,29284
  81f160:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  81f164:	e037883a 	mov	sp,fp
  81f168:	df000017 	ldw	fp,0(sp)
  81f16c:	dec00104 	addi	sp,sp,4
  81f170:	f800283a 	ret

0081f174 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  81f174:	defffc04 	addi	sp,sp,-16
  81f178:	df000315 	stw	fp,12(sp)
  81f17c:	df000304 	addi	fp,sp,12
  81f180:	e13ffd15 	stw	r4,-12(fp)
  81f184:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81f188:	00000706 	br	81f1a8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  81f18c:	e0bffe17 	ldw	r2,-8(fp)
  81f190:	1090000c 	andi	r2,r2,16384
  81f194:	1005003a 	cmpeq	r2,r2,zero
  81f198:	1000031e 	bne	r2,zero,81f1a8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  81f19c:	00bffd44 	movi	r2,-11
  81f1a0:	e0bfff15 	stw	r2,-4(fp)
  81f1a4:	00000b06 	br	81f1d4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  81f1a8:	e0bffd17 	ldw	r2,-12(fp)
  81f1ac:	10c00d17 	ldw	r3,52(r2)
  81f1b0:	e0bffd17 	ldw	r2,-12(fp)
  81f1b4:	10800c17 	ldw	r2,48(r2)
  81f1b8:	18800526 	beq	r3,r2,81f1d0 <altera_avalon_jtag_uart_close+0x5c>
  81f1bc:	e0bffd17 	ldw	r2,-12(fp)
  81f1c0:	10c00917 	ldw	r3,36(r2)
  81f1c4:	e0bffd17 	ldw	r2,-12(fp)
  81f1c8:	10800117 	ldw	r2,4(r2)
  81f1cc:	18bfef36 	bltu	r3,r2,81f18c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81f1d0:	e03fff15 	stw	zero,-4(fp)
  81f1d4:	e0bfff17 	ldw	r2,-4(fp)
}
  81f1d8:	e037883a 	mov	sp,fp
  81f1dc:	df000017 	ldw	fp,0(sp)
  81f1e0:	dec00104 	addi	sp,sp,4
  81f1e4:	f800283a 	ret

0081f1e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  81f1e8:	defff804 	addi	sp,sp,-32
  81f1ec:	df000715 	stw	fp,28(sp)
  81f1f0:	df000704 	addi	fp,sp,28
  81f1f4:	e13ffb15 	stw	r4,-20(fp)
  81f1f8:	e17ffc15 	stw	r5,-16(fp)
  81f1fc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  81f200:	00bff9c4 	movi	r2,-25
  81f204:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  81f208:	e0bffc17 	ldw	r2,-16(fp)
  81f20c:	e0bfff15 	stw	r2,-4(fp)
  81f210:	e0ffff17 	ldw	r3,-4(fp)
  81f214:	189a8060 	cmpeqi	r2,r3,27137
  81f218:	1000041e 	bne	r2,zero,81f22c <altera_avalon_jtag_uart_ioctl+0x44>
  81f21c:	e0ffff17 	ldw	r3,-4(fp)
  81f220:	189a80a0 	cmpeqi	r2,r3,27138
  81f224:	10001b1e 	bne	r2,zero,81f294 <altera_avalon_jtag_uart_ioctl+0xac>
  81f228:	00002706 	br	81f2c8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  81f22c:	e0bffb17 	ldw	r2,-20(fp)
  81f230:	10c00117 	ldw	r3,4(r2)
  81f234:	00a00034 	movhi	r2,32768
  81f238:	10bfffc4 	addi	r2,r2,-1
  81f23c:	18802226 	beq	r3,r2,81f2c8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  81f240:	e0bffd17 	ldw	r2,-12(fp)
  81f244:	10800017 	ldw	r2,0(r2)
  81f248:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  81f24c:	e0bff917 	ldw	r2,-28(fp)
  81f250:	10800090 	cmplti	r2,r2,2
  81f254:	1000071e 	bne	r2,zero,81f274 <altera_avalon_jtag_uart_ioctl+0x8c>
  81f258:	e0fff917 	ldw	r3,-28(fp)
  81f25c:	00a00034 	movhi	r2,32768
  81f260:	10bfffc4 	addi	r2,r2,-1
  81f264:	18800326 	beq	r3,r2,81f274 <altera_avalon_jtag_uart_ioctl+0x8c>
  81f268:	e0bff917 	ldw	r2,-28(fp)
  81f26c:	e0bffe15 	stw	r2,-8(fp)
  81f270:	00000306 	br	81f280 <altera_avalon_jtag_uart_ioctl+0x98>
  81f274:	00e00034 	movhi	r3,32768
  81f278:	18ffff84 	addi	r3,r3,-2
  81f27c:	e0fffe15 	stw	r3,-8(fp)
  81f280:	e0bffb17 	ldw	r2,-20(fp)
  81f284:	e0fffe17 	ldw	r3,-8(fp)
  81f288:	10c00115 	stw	r3,4(r2)
      rc = 0;
  81f28c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  81f290:	00000d06 	br	81f2c8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  81f294:	e0bffb17 	ldw	r2,-20(fp)
  81f298:	10c00117 	ldw	r3,4(r2)
  81f29c:	00a00034 	movhi	r2,32768
  81f2a0:	10bfffc4 	addi	r2,r2,-1
  81f2a4:	18800826 	beq	r3,r2,81f2c8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81f2a8:	e13ffd17 	ldw	r4,-12(fp)
  81f2ac:	e0bffb17 	ldw	r2,-20(fp)
  81f2b0:	10c00917 	ldw	r3,36(r2)
  81f2b4:	e0bffb17 	ldw	r2,-20(fp)
  81f2b8:	10800117 	ldw	r2,4(r2)
  81f2bc:	1885803a 	cmpltu	r2,r3,r2
  81f2c0:	20800015 	stw	r2,0(r4)
      rc = 0;
  81f2c4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  81f2c8:	e0bffa17 	ldw	r2,-24(fp)
}
  81f2cc:	e037883a 	mov	sp,fp
  81f2d0:	df000017 	ldw	fp,0(sp)
  81f2d4:	dec00104 	addi	sp,sp,4
  81f2d8:	f800283a 	ret

0081f2dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  81f2dc:	defff204 	addi	sp,sp,-56
  81f2e0:	dfc00d15 	stw	ra,52(sp)
  81f2e4:	df000c15 	stw	fp,48(sp)
  81f2e8:	df000c04 	addi	fp,sp,48
  81f2ec:	e13ffb15 	stw	r4,-20(fp)
  81f2f0:	e17ffc15 	stw	r5,-16(fp)
  81f2f4:	e1bffd15 	stw	r6,-12(fp)
  81f2f8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  81f2fc:	e0bffc17 	ldw	r2,-16(fp)
  81f300:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81f304:	00004806 	br	81f428 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  81f308:	e0bffb17 	ldw	r2,-20(fp)
  81f30c:	10800a17 	ldw	r2,40(r2)
  81f310:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  81f314:	e0bffb17 	ldw	r2,-20(fp)
  81f318:	10800b17 	ldw	r2,44(r2)
  81f31c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  81f320:	e0fff717 	ldw	r3,-36(fp)
  81f324:	e0bff617 	ldw	r2,-40(fp)
  81f328:	18800536 	bltu	r3,r2,81f340 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  81f32c:	e0bff717 	ldw	r2,-36(fp)
  81f330:	e0fff617 	ldw	r3,-40(fp)
  81f334:	10c5c83a 	sub	r2,r2,r3
  81f338:	e0bff815 	stw	r2,-32(fp)
  81f33c:	00000406 	br	81f350 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  81f340:	00820004 	movi	r2,2048
  81f344:	e0fff617 	ldw	r3,-40(fp)
  81f348:	10c5c83a 	sub	r2,r2,r3
  81f34c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  81f350:	e0bff817 	ldw	r2,-32(fp)
  81f354:	1005003a 	cmpeq	r2,r2,zero
  81f358:	10001f1e 	bne	r2,zero,81f3d8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  81f35c:	e0fffd17 	ldw	r3,-12(fp)
  81f360:	e0bff817 	ldw	r2,-32(fp)
  81f364:	1880022e 	bgeu	r3,r2,81f370 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  81f368:	e0bffd17 	ldw	r2,-12(fp)
  81f36c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  81f370:	e0bffb17 	ldw	r2,-20(fp)
  81f374:	10c00e04 	addi	r3,r2,56
  81f378:	e0bff617 	ldw	r2,-40(fp)
  81f37c:	1887883a 	add	r3,r3,r2
  81f380:	e0bffa17 	ldw	r2,-24(fp)
  81f384:	1009883a 	mov	r4,r2
  81f388:	180b883a 	mov	r5,r3
  81f38c:	e1bff817 	ldw	r6,-32(fp)
  81f390:	08156ac0 	call	8156ac <memcpy>
      ptr   += n;
  81f394:	e0fff817 	ldw	r3,-32(fp)
  81f398:	e0bffa17 	ldw	r2,-24(fp)
  81f39c:	10c5883a 	add	r2,r2,r3
  81f3a0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  81f3a4:	e0fffd17 	ldw	r3,-12(fp)
  81f3a8:	e0bff817 	ldw	r2,-32(fp)
  81f3ac:	1885c83a 	sub	r2,r3,r2
  81f3b0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81f3b4:	e0fff617 	ldw	r3,-40(fp)
  81f3b8:	e0bff817 	ldw	r2,-32(fp)
  81f3bc:	1885883a 	add	r2,r3,r2
  81f3c0:	10c1ffcc 	andi	r3,r2,2047
  81f3c4:	e0bffb17 	ldw	r2,-20(fp)
  81f3c8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  81f3cc:	e0bffd17 	ldw	r2,-12(fp)
  81f3d0:	10800048 	cmpgei	r2,r2,1
  81f3d4:	103fcc1e 	bne	r2,zero,81f308 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  81f3d8:	e0fffa17 	ldw	r3,-24(fp)
  81f3dc:	e0bffc17 	ldw	r2,-16(fp)
  81f3e0:	1880141e 	bne	r3,r2,81f434 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  81f3e4:	e0bffe17 	ldw	r2,-8(fp)
  81f3e8:	1090000c 	andi	r2,r2,16384
  81f3ec:	1004c03a 	cmpne	r2,r2,zero
  81f3f0:	1000101e 	bne	r2,zero,81f434 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  81f3f4:	e0bffb17 	ldw	r2,-20(fp)
  81f3f8:	10c00a17 	ldw	r3,40(r2)
  81f3fc:	e0bff717 	ldw	r2,-36(fp)
  81f400:	1880051e 	bne	r3,r2,81f418 <altera_avalon_jtag_uart_read+0x13c>
  81f404:	e0bffb17 	ldw	r2,-20(fp)
  81f408:	10c00917 	ldw	r3,36(r2)
  81f40c:	e0bffb17 	ldw	r2,-20(fp)
  81f410:	10800117 	ldw	r2,4(r2)
  81f414:	18bff736 	bltu	r3,r2,81f3f4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  81f418:	e0bffb17 	ldw	r2,-20(fp)
  81f41c:	10c00a17 	ldw	r3,40(r2)
  81f420:	e0bff717 	ldw	r2,-36(fp)
  81f424:	18800326 	beq	r3,r2,81f434 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81f428:	e0bffd17 	ldw	r2,-12(fp)
  81f42c:	10800048 	cmpgei	r2,r2,1
  81f430:	103fb51e 	bne	r2,zero,81f308 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  81f434:	e0fffa17 	ldw	r3,-24(fp)
  81f438:	e0bffc17 	ldw	r2,-16(fp)
  81f43c:	18801926 	beq	r3,r2,81f4a4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f440:	0005303a 	rdctl	r2,status
  81f444:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f448:	e0fff517 	ldw	r3,-44(fp)
  81f44c:	00bfff84 	movi	r2,-2
  81f450:	1884703a 	and	r2,r3,r2
  81f454:	1001703a 	wrctl	status,r2
  
  return context;
  81f458:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  81f45c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81f460:	e0bffb17 	ldw	r2,-20(fp)
  81f464:	10800817 	ldw	r2,32(r2)
  81f468:	10c00054 	ori	r3,r2,1
  81f46c:	e0bffb17 	ldw	r2,-20(fp)
  81f470:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81f474:	e0bffb17 	ldw	r2,-20(fp)
  81f478:	10800017 	ldw	r2,0(r2)
  81f47c:	11000104 	addi	r4,r2,4
  81f480:	e0bffb17 	ldw	r2,-20(fp)
  81f484:	10800817 	ldw	r2,32(r2)
  81f488:	1007883a 	mov	r3,r2
  81f48c:	2005883a 	mov	r2,r4
  81f490:	10c00035 	stwio	r3,0(r2)
  81f494:	e0bff917 	ldw	r2,-28(fp)
  81f498:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f49c:	e0bff417 	ldw	r2,-48(fp)
  81f4a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81f4a4:	e0fffa17 	ldw	r3,-24(fp)
  81f4a8:	e0bffc17 	ldw	r2,-16(fp)
  81f4ac:	18800526 	beq	r3,r2,81f4c4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  81f4b0:	e0fffa17 	ldw	r3,-24(fp)
  81f4b4:	e0bffc17 	ldw	r2,-16(fp)
  81f4b8:	1887c83a 	sub	r3,r3,r2
  81f4bc:	e0ffff15 	stw	r3,-4(fp)
  81f4c0:	00000906 	br	81f4e8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  81f4c4:	e0bffe17 	ldw	r2,-8(fp)
  81f4c8:	1090000c 	andi	r2,r2,16384
  81f4cc:	1005003a 	cmpeq	r2,r2,zero
  81f4d0:	1000031e 	bne	r2,zero,81f4e0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  81f4d4:	00bffd44 	movi	r2,-11
  81f4d8:	e0bfff15 	stw	r2,-4(fp)
  81f4dc:	00000206 	br	81f4e8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  81f4e0:	00bffec4 	movi	r2,-5
  81f4e4:	e0bfff15 	stw	r2,-4(fp)
  81f4e8:	e0bfff17 	ldw	r2,-4(fp)
}
  81f4ec:	e037883a 	mov	sp,fp
  81f4f0:	dfc00117 	ldw	ra,4(sp)
  81f4f4:	df000017 	ldw	fp,0(sp)
  81f4f8:	dec00204 	addi	sp,sp,8
  81f4fc:	f800283a 	ret

0081f500 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  81f500:	defff204 	addi	sp,sp,-56
  81f504:	dfc00d15 	stw	ra,52(sp)
  81f508:	df000c15 	stw	fp,48(sp)
  81f50c:	df000c04 	addi	fp,sp,48
  81f510:	e13ffb15 	stw	r4,-20(fp)
  81f514:	e17ffc15 	stw	r5,-16(fp)
  81f518:	e1bffd15 	stw	r6,-12(fp)
  81f51c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81f520:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  81f524:	e0bffc17 	ldw	r2,-16(fp)
  81f528:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81f52c:	00003a06 	br	81f618 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81f530:	e0bffb17 	ldw	r2,-20(fp)
  81f534:	10800c17 	ldw	r2,48(r2)
  81f538:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  81f53c:	e0bffb17 	ldw	r2,-20(fp)
  81f540:	10800d17 	ldw	r2,52(r2)
  81f544:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  81f548:	e0fffa17 	ldw	r3,-24(fp)
  81f54c:	e0bff917 	ldw	r2,-28(fp)
  81f550:	1880062e 	bgeu	r3,r2,81f56c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  81f554:	e0fff917 	ldw	r3,-28(fp)
  81f558:	e0bffa17 	ldw	r2,-24(fp)
  81f55c:	1885c83a 	sub	r2,r3,r2
  81f560:	10bfffc4 	addi	r2,r2,-1
  81f564:	e0bff815 	stw	r2,-32(fp)
  81f568:	00000c06 	br	81f59c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  81f56c:	e0bff917 	ldw	r2,-28(fp)
  81f570:	1005003a 	cmpeq	r2,r2,zero
  81f574:	1000051e 	bne	r2,zero,81f58c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  81f578:	00820004 	movi	r2,2048
  81f57c:	e0fffa17 	ldw	r3,-24(fp)
  81f580:	10c5c83a 	sub	r2,r2,r3
  81f584:	e0bff815 	stw	r2,-32(fp)
  81f588:	00000406 	br	81f59c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  81f58c:	0081ffc4 	movi	r2,2047
  81f590:	e0fffa17 	ldw	r3,-24(fp)
  81f594:	10c5c83a 	sub	r2,r2,r3
  81f598:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  81f59c:	e0bff817 	ldw	r2,-32(fp)
  81f5a0:	1005003a 	cmpeq	r2,r2,zero
  81f5a4:	10001f1e 	bne	r2,zero,81f624 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  81f5a8:	e0fffd17 	ldw	r3,-12(fp)
  81f5ac:	e0bff817 	ldw	r2,-32(fp)
  81f5b0:	1880022e 	bgeu	r3,r2,81f5bc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  81f5b4:	e0bffd17 	ldw	r2,-12(fp)
  81f5b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81f5bc:	e0bffb17 	ldw	r2,-20(fp)
  81f5c0:	10c20e04 	addi	r3,r2,2104
  81f5c4:	e0bffa17 	ldw	r2,-24(fp)
  81f5c8:	1885883a 	add	r2,r3,r2
  81f5cc:	e0fffc17 	ldw	r3,-16(fp)
  81f5d0:	1009883a 	mov	r4,r2
  81f5d4:	180b883a 	mov	r5,r3
  81f5d8:	e1bff817 	ldw	r6,-32(fp)
  81f5dc:	08156ac0 	call	8156ac <memcpy>
      ptr   += n;
  81f5e0:	e0fff817 	ldw	r3,-32(fp)
  81f5e4:	e0bffc17 	ldw	r2,-16(fp)
  81f5e8:	10c5883a 	add	r2,r2,r3
  81f5ec:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  81f5f0:	e0fffd17 	ldw	r3,-12(fp)
  81f5f4:	e0bff817 	ldw	r2,-32(fp)
  81f5f8:	1885c83a 	sub	r2,r3,r2
  81f5fc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81f600:	e0fffa17 	ldw	r3,-24(fp)
  81f604:	e0bff817 	ldw	r2,-32(fp)
  81f608:	1885883a 	add	r2,r3,r2
  81f60c:	10c1ffcc 	andi	r3,r2,2047
  81f610:	e0bffb17 	ldw	r2,-20(fp)
  81f614:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81f618:	e0bffd17 	ldw	r2,-12(fp)
  81f61c:	10800048 	cmpgei	r2,r2,1
  81f620:	103fc31e 	bne	r2,zero,81f530 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f624:	0005303a 	rdctl	r2,status
  81f628:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f62c:	e0fff517 	ldw	r3,-44(fp)
  81f630:	00bfff84 	movi	r2,-2
  81f634:	1884703a 	and	r2,r3,r2
  81f638:	1001703a 	wrctl	status,r2
  
  return context;
  81f63c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81f640:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81f644:	e0bffb17 	ldw	r2,-20(fp)
  81f648:	10800817 	ldw	r2,32(r2)
  81f64c:	10c00094 	ori	r3,r2,2
  81f650:	e0bffb17 	ldw	r2,-20(fp)
  81f654:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81f658:	e0bffb17 	ldw	r2,-20(fp)
  81f65c:	10800017 	ldw	r2,0(r2)
  81f660:	11000104 	addi	r4,r2,4
  81f664:	e0bffb17 	ldw	r2,-20(fp)
  81f668:	10800817 	ldw	r2,32(r2)
  81f66c:	1007883a 	mov	r3,r2
  81f670:	2005883a 	mov	r2,r4
  81f674:	10c00035 	stwio	r3,0(r2)
  81f678:	e0bff717 	ldw	r2,-36(fp)
  81f67c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f680:	e0bff417 	ldw	r2,-48(fp)
  81f684:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81f688:	e0bffd17 	ldw	r2,-12(fp)
  81f68c:	10800050 	cmplti	r2,r2,1
  81f690:	1000111e 	bne	r2,zero,81f6d8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  81f694:	e0bffe17 	ldw	r2,-8(fp)
  81f698:	1090000c 	andi	r2,r2,16384
  81f69c:	1004c03a 	cmpne	r2,r2,zero
  81f6a0:	1000101e 	bne	r2,zero,81f6e4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  81f6a4:	e0bffb17 	ldw	r2,-20(fp)
  81f6a8:	10c00d17 	ldw	r3,52(r2)
  81f6ac:	e0bff917 	ldw	r2,-28(fp)
  81f6b0:	1880051e 	bne	r3,r2,81f6c8 <altera_avalon_jtag_uart_write+0x1c8>
  81f6b4:	e0bffb17 	ldw	r2,-20(fp)
  81f6b8:	10c00917 	ldw	r3,36(r2)
  81f6bc:	e0bffb17 	ldw	r2,-20(fp)
  81f6c0:	10800117 	ldw	r2,4(r2)
  81f6c4:	18bff736 	bltu	r3,r2,81f6a4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  81f6c8:	e0bffb17 	ldw	r2,-20(fp)
  81f6cc:	10c00d17 	ldw	r3,52(r2)
  81f6d0:	e0bff917 	ldw	r2,-28(fp)
  81f6d4:	18800326 	beq	r3,r2,81f6e4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  81f6d8:	e0bffd17 	ldw	r2,-12(fp)
  81f6dc:	10800048 	cmpgei	r2,r2,1
  81f6e0:	103fcd1e 	bne	r2,zero,81f618 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  81f6e4:	e0fffc17 	ldw	r3,-16(fp)
  81f6e8:	e0bff617 	ldw	r2,-40(fp)
  81f6ec:	18800526 	beq	r3,r2,81f704 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  81f6f0:	e0fffc17 	ldw	r3,-16(fp)
  81f6f4:	e0bff617 	ldw	r2,-40(fp)
  81f6f8:	1887c83a 	sub	r3,r3,r2
  81f6fc:	e0ffff15 	stw	r3,-4(fp)
  81f700:	00000906 	br	81f728 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  81f704:	e0bffe17 	ldw	r2,-8(fp)
  81f708:	1090000c 	andi	r2,r2,16384
  81f70c:	1005003a 	cmpeq	r2,r2,zero
  81f710:	1000031e 	bne	r2,zero,81f720 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  81f714:	00bffd44 	movi	r2,-11
  81f718:	e0bfff15 	stw	r2,-4(fp)
  81f71c:	00000206 	br	81f728 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  81f720:	00bffec4 	movi	r2,-5
  81f724:	e0bfff15 	stw	r2,-4(fp)
  81f728:	e0bfff17 	ldw	r2,-4(fp)
}
  81f72c:	e037883a 	mov	sp,fp
  81f730:	dfc00117 	ldw	ra,4(sp)
  81f734:	df000017 	ldw	fp,0(sp)
  81f738:	dec00204 	addi	sp,sp,8
  81f73c:	f800283a 	ret

0081f740 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81f740:	defff904 	addi	sp,sp,-28
  81f744:	dfc00615 	stw	ra,24(sp)
  81f748:	df000515 	stw	fp,20(sp)
  81f74c:	df000504 	addi	fp,sp,20
  81f750:	e13ffe15 	stw	r4,-8(fp)
  81f754:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81f758:	e0bffe17 	ldw	r2,-8(fp)
  81f75c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81f760:	e0bffe17 	ldw	r2,-8(fp)
  81f764:	10800104 	addi	r2,r2,4
  81f768:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81f76c:	0005303a 	rdctl	r2,status
  81f770:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81f774:	e0fffc17 	ldw	r3,-16(fp)
  81f778:	00bfff84 	movi	r2,-2
  81f77c:	1884703a 	and	r2,r3,r2
  81f780:	1001703a 	wrctl	status,r2
  
  return context;
  81f784:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81f788:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
  81f78c:	081e5e40 	call	81e5e4 <alt_tick>
  81f790:	e0bffd17 	ldw	r2,-12(fp)
  81f794:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81f798:	e0bffb17 	ldw	r2,-20(fp)
  81f79c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  81f7a0:	e037883a 	mov	sp,fp
  81f7a4:	dfc00117 	ldw	ra,4(sp)
  81f7a8:	df000017 	ldw	fp,0(sp)
  81f7ac:	dec00204 	addi	sp,sp,8
  81f7b0:	f800283a 	ret

0081f7b4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  81f7b4:	defff904 	addi	sp,sp,-28
  81f7b8:	dfc00615 	stw	ra,24(sp)
  81f7bc:	df000515 	stw	fp,20(sp)
  81f7c0:	df000504 	addi	fp,sp,20
  81f7c4:	e13ffc15 	stw	r4,-16(fp)
  81f7c8:	e17ffd15 	stw	r5,-12(fp)
  81f7cc:	e1bffe15 	stw	r6,-8(fp)
  81f7d0:	e1ffff15 	stw	r7,-4(fp)
  81f7d4:	e0bfff17 	ldw	r2,-4(fp)
  81f7d8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  81f7dc:	008020f4 	movhi	r2,131
  81f7e0:	109c9904 	addi	r2,r2,29284
  81f7e4:	10800017 	ldw	r2,0(r2)
  81f7e8:	1004c03a 	cmpne	r2,r2,zero
  81f7ec:	1000041e 	bne	r2,zero,81f800 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  81f7f0:	00c020f4 	movhi	r3,131
  81f7f4:	18dc9904 	addi	r3,r3,29284
  81f7f8:	e0bffb17 	ldw	r2,-20(fp)
  81f7fc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  81f800:	e0bffc17 	ldw	r2,-16(fp)
  81f804:	10800104 	addi	r2,r2,4
  81f808:	1007883a 	mov	r3,r2
  81f80c:	008001c4 	movi	r2,7
  81f810:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  81f814:	e13ffe17 	ldw	r4,-8(fp)
  81f818:	e17ffc17 	ldw	r5,-16(fp)
  81f81c:	018020b4 	movhi	r6,130
  81f820:	31bdd004 	addi	r6,r6,-2240
  81f824:	081dce80 	call	81dce8 <alt_irq_register>
#endif  
}
  81f828:	e037883a 	mov	sp,fp
  81f82c:	dfc00117 	ldw	ra,4(sp)
  81f830:	df000017 	ldw	fp,0(sp)
  81f834:	dec00204 	addi	sp,sp,8
  81f838:	f800283a 	ret

0081f83c <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  81f83c:	defffd04 	addi	sp,sp,-12
  81f840:	df000215 	stw	fp,8(sp)
  81f844:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
  81f848:	008020f4 	movhi	r2,131
  81f84c:	109c9b04 	addi	r2,r2,29292
  81f850:	10800017 	ldw	r2,0(r2)
  81f854:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  81f858:	008020f4 	movhi	r2,131
  81f85c:	109c9c04 	addi	r2,r2,29296
  81f860:	10800017 	ldw	r2,0(r2)
  81f864:	1004c03a 	cmpne	r2,r2,zero
  81f868:	1000031e 	bne	r2,zero,81f878 <alt_timestamp_start+0x3c>
  {
    return -1;
  81f86c:	00bfffc4 	movi	r2,-1
  81f870:	e0bfff15 	stw	r2,-4(fp)
  81f874:	00001506 	br	81f8cc <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  81f878:	e0bffe17 	ldw	r2,-8(fp)
  81f87c:	10800104 	addi	r2,r2,4
  81f880:	1007883a 	mov	r3,r2
  81f884:	00800204 	movi	r2,8
  81f888:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
  81f88c:	e0bffe17 	ldw	r2,-8(fp)
  81f890:	10800204 	addi	r2,r2,8
  81f894:	1007883a 	mov	r3,r2
  81f898:	00bfffd4 	movui	r2,65535
  81f89c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
  81f8a0:	e0bffe17 	ldw	r2,-8(fp)
  81f8a4:	10800304 	addi	r2,r2,12
  81f8a8:	1007883a 	mov	r3,r2
  81f8ac:	00bfffd4 	movui	r2,65535
  81f8b0:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
  81f8b4:	e0bffe17 	ldw	r2,-8(fp)
  81f8b8:	10800104 	addi	r2,r2,4
  81f8bc:	1007883a 	mov	r3,r2
  81f8c0:	00800104 	movi	r2,4
  81f8c4:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
  81f8c8:	e03fff15 	stw	zero,-4(fp)
  81f8cc:	e0bfff17 	ldw	r2,-4(fp)
}
  81f8d0:	e037883a 	mov	sp,fp
  81f8d4:	df000017 	ldw	fp,0(sp)
  81f8d8:	dec00104 	addi	sp,sp,4
  81f8dc:	f800283a 	ret

0081f8e0 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  81f8e0:	defffb04 	addi	sp,sp,-20
  81f8e4:	df000415 	stw	fp,16(sp)
  81f8e8:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
  81f8ec:	008020f4 	movhi	r2,131
  81f8f0:	109c9b04 	addi	r2,r2,29292
  81f8f4:	10800017 	ldw	r2,0(r2)
  81f8f8:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  81f8fc:	008020f4 	movhi	r2,131
  81f900:	109c9c04 	addi	r2,r2,29296
  81f904:	10800017 	ldw	r2,0(r2)
  81f908:	1004c03a 	cmpne	r2,r2,zero
  81f90c:	1000031e 	bne	r2,zero,81f91c <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
  81f910:	00bfffc4 	movi	r2,-1
  81f914:	e0bfff15 	stw	r2,-4(fp)
  81f918:	00001306 	br	81f968 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
  81f91c:	e0bffe17 	ldw	r2,-8(fp)
  81f920:	10800404 	addi	r2,r2,16
  81f924:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
  81f928:	e0bffe17 	ldw	r2,-8(fp)
  81f92c:	10800404 	addi	r2,r2,16
  81f930:	10800037 	ldwio	r2,0(r2)
  81f934:	10bfffcc 	andi	r2,r2,65535
  81f938:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
  81f93c:	e0bffe17 	ldw	r2,-8(fp)
  81f940:	10800504 	addi	r2,r2,20
  81f944:	10800037 	ldwio	r2,0(r2)
  81f948:	10bfffcc 	andi	r2,r2,65535
  81f94c:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
  81f950:	e0bffc17 	ldw	r2,-16(fp)
  81f954:	1006943a 	slli	r3,r2,16
  81f958:	e0bffd17 	ldw	r2,-12(fp)
  81f95c:	1884b03a 	or	r2,r3,r2
  81f960:	0084303a 	nor	r2,zero,r2
  81f964:	e0bfff15 	stw	r2,-4(fp)
  81f968:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
  81f96c:	e037883a 	mov	sp,fp
  81f970:	df000017 	ldw	fp,0(sp)
  81f974:	dec00104 	addi	sp,sp,4
  81f978:	f800283a 	ret

0081f97c <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  81f97c:	deffff04 	addi	sp,sp,-4
  81f980:	df000015 	stw	fp,0(sp)
  81f984:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  81f988:	008020f4 	movhi	r2,131
  81f98c:	109c9c04 	addi	r2,r2,29296
  81f990:	10800017 	ldw	r2,0(r2)
}
  81f994:	e037883a 	mov	sp,fp
  81f998:	df000017 	ldw	fp,0(sp)
  81f99c:	dec00104 	addi	sp,sp,4
  81f9a0:	f800283a 	ret

0081f9a4 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  81f9a4:	defffc04 	addi	sp,sp,-16
  81f9a8:	dfc00315 	stw	ra,12(sp)
  81f9ac:	df000215 	stw	fp,8(sp)
  81f9b0:	df000204 	addi	fp,sp,8
  81f9b4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  81f9b8:	e13fff17 	ldw	r4,-4(fp)
  81f9bc:	014020f4 	movhi	r5,131
  81f9c0:	29406104 	addi	r5,r5,388
  81f9c4:	08277040 	call	827704 <alt_find_dev>
  81f9c8:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  81f9cc:	e0bffe17 	ldw	r2,-8(fp)
}
  81f9d0:	e037883a 	mov	sp,fp
  81f9d4:	dfc00117 	ldw	ra,4(sp)
  81f9d8:	df000017 	ldw	fp,0(sp)
  81f9dc:	dec00204 	addi	sp,sp,8
  81f9e0:	f800283a 	ret

0081f9e4 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  81f9e4:	defffd04 	addi	sp,sp,-12
  81f9e8:	df000215 	stw	fp,8(sp)
  81f9ec:	df000204 	addi	fp,sp,8
  81f9f0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81f9f4:	e0bfff17 	ldw	r2,-4(fp)
  81f9f8:	10800a17 	ldw	r2,40(r2)
  81f9fc:	10800037 	ldwio	r2,0(r2)
  81fa00:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  81fa04:	e0bffe17 	ldw	r2,-8(fp)
  81fa08:	10800054 	ori	r2,r2,1
  81fa0c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fa10:	e0bfff17 	ldw	r2,-4(fp)
  81fa14:	10800a17 	ldw	r2,40(r2)
  81fa18:	e0fffe17 	ldw	r3,-8(fp)
  81fa1c:	10c00035 	stwio	r3,0(r2)
}
  81fa20:	e037883a 	mov	sp,fp
  81fa24:	df000017 	ldw	fp,0(sp)
  81fa28:	dec00104 	addi	sp,sp,4
  81fa2c:	f800283a 	ret

0081fa30 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  81fa30:	defffd04 	addi	sp,sp,-12
  81fa34:	df000215 	stw	fp,8(sp)
  81fa38:	df000204 	addi	fp,sp,8
  81fa3c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fa40:	e0bfff17 	ldw	r2,-4(fp)
  81fa44:	10800a17 	ldw	r2,40(r2)
  81fa48:	10800037 	ldwio	r2,0(r2)
  81fa4c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  81fa50:	e0fffe17 	ldw	r3,-8(fp)
  81fa54:	00bfff84 	movi	r2,-2
  81fa58:	1884703a 	and	r2,r3,r2
  81fa5c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fa60:	e0bfff17 	ldw	r2,-4(fp)
  81fa64:	10800a17 	ldw	r2,40(r2)
  81fa68:	e0fffe17 	ldw	r3,-8(fp)
  81fa6c:	10c00035 	stwio	r3,0(r2)
}
  81fa70:	e037883a 	mov	sp,fp
  81fa74:	df000017 	ldw	fp,0(sp)
  81fa78:	dec00104 	addi	sp,sp,4
  81fa7c:	f800283a 	ret

0081fa80 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  81fa80:	defffd04 	addi	sp,sp,-12
  81fa84:	df000215 	stw	fp,8(sp)
  81fa88:	df000204 	addi	fp,sp,8
  81fa8c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fa90:	e0bfff17 	ldw	r2,-4(fp)
  81fa94:	10800a17 	ldw	r2,40(r2)
  81fa98:	10800037 	ldwio	r2,0(r2)
  81fa9c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  81faa0:	e0bffe17 	ldw	r2,-8(fp)
  81faa4:	10800094 	ori	r2,r2,2
  81faa8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81faac:	e0bfff17 	ldw	r2,-4(fp)
  81fab0:	10800a17 	ldw	r2,40(r2)
  81fab4:	e0fffe17 	ldw	r3,-8(fp)
  81fab8:	10c00035 	stwio	r3,0(r2)
}
  81fabc:	e037883a 	mov	sp,fp
  81fac0:	df000017 	ldw	fp,0(sp)
  81fac4:	dec00104 	addi	sp,sp,4
  81fac8:	f800283a 	ret

0081facc <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  81facc:	defffd04 	addi	sp,sp,-12
  81fad0:	df000215 	stw	fp,8(sp)
  81fad4:	df000204 	addi	fp,sp,8
  81fad8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fadc:	e0bfff17 	ldw	r2,-4(fp)
  81fae0:	10800a17 	ldw	r2,40(r2)
  81fae4:	10800037 	ldwio	r2,0(r2)
  81fae8:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  81faec:	e0fffe17 	ldw	r3,-8(fp)
  81faf0:	00bfff44 	movi	r2,-3
  81faf4:	1884703a 	and	r2,r3,r2
  81faf8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fafc:	e0bfff17 	ldw	r2,-4(fp)
  81fb00:	10800a17 	ldw	r2,40(r2)
  81fb04:	e0fffe17 	ldw	r3,-8(fp)
  81fb08:	10c00035 	stwio	r3,0(r2)
}
  81fb0c:	e037883a 	mov	sp,fp
  81fb10:	df000017 	ldw	fp,0(sp)
  81fb14:	dec00104 	addi	sp,sp,4
  81fb18:	f800283a 	ret

0081fb1c <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  81fb1c:	defffd04 	addi	sp,sp,-12
  81fb20:	df000215 	stw	fp,8(sp)
  81fb24:	df000204 	addi	fp,sp,8
  81fb28:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fb2c:	e0bfff17 	ldw	r2,-4(fp)
  81fb30:	10800a17 	ldw	r2,40(r2)
  81fb34:	10800037 	ldwio	r2,0(r2)
  81fb38:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  81fb3c:	e0bffe17 	ldw	r2,-8(fp)
  81fb40:	1080400c 	andi	r2,r2,256
  81fb44:	1004c03a 	cmpne	r2,r2,zero
}
  81fb48:	e037883a 	mov	sp,fp
  81fb4c:	df000017 	ldw	fp,0(sp)
  81fb50:	dec00104 	addi	sp,sp,4
  81fb54:	f800283a 	ret

0081fb58 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  81fb58:	defffd04 	addi	sp,sp,-12
  81fb5c:	df000215 	stw	fp,8(sp)
  81fb60:	df000204 	addi	fp,sp,8
  81fb64:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fb68:	e0bfff17 	ldw	r2,-4(fp)
  81fb6c:	10800a17 	ldw	r2,40(r2)
  81fb70:	10800037 	ldwio	r2,0(r2)
  81fb74:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  81fb78:	e0bffe17 	ldw	r2,-8(fp)
  81fb7c:	1080800c 	andi	r2,r2,512
  81fb80:	1004c03a 	cmpne	r2,r2,zero
}
  81fb84:	e037883a 	mov	sp,fp
  81fb88:	df000017 	ldw	fp,0(sp)
  81fb8c:	dec00104 	addi	sp,sp,4
  81fb90:	f800283a 	ret

0081fb94 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  81fb94:	defffd04 	addi	sp,sp,-12
  81fb98:	df000215 	stw	fp,8(sp)
  81fb9c:	df000204 	addi	fp,sp,8
  81fba0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  81fba4:	e0bfff17 	ldw	r2,-4(fp)
  81fba8:	10800a17 	ldw	r2,40(r2)
  81fbac:	10800037 	ldwio	r2,0(r2)
  81fbb0:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  81fbb4:	e0bffe17 	ldw	r2,-8(fp)
  81fbb8:	10800114 	ori	r2,r2,4
  81fbbc:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  81fbc0:	e0bffe17 	ldw	r2,-8(fp)
  81fbc4:	10800214 	ori	r2,r2,8
  81fbc8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fbcc:	e0bfff17 	ldw	r2,-4(fp)
  81fbd0:	10800a17 	ldw	r2,40(r2)
  81fbd4:	e0fffe17 	ldw	r3,-8(fp)
  81fbd8:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  81fbdc:	e0fffe17 	ldw	r3,-8(fp)
  81fbe0:	00bffec4 	movi	r2,-5
  81fbe4:	1884703a 	and	r2,r3,r2
  81fbe8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  81fbec:	e0fffe17 	ldw	r3,-8(fp)
  81fbf0:	00bffdc4 	movi	r2,-9
  81fbf4:	1884703a 	and	r2,r3,r2
  81fbf8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  81fbfc:	e0bfff17 	ldw	r2,-4(fp)
  81fc00:	10800a17 	ldw	r2,40(r2)
  81fc04:	e0fffe17 	ldw	r3,-8(fp)
  81fc08:	10c00035 	stwio	r3,0(r2)
}
  81fc0c:	e037883a 	mov	sp,fp
  81fc10:	df000017 	ldw	fp,0(sp)
  81fc14:	dec00104 	addi	sp,sp,4
  81fc18:	f800283a 	ret

0081fc1c <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  81fc1c:	defffb04 	addi	sp,sp,-20
  81fc20:	df000415 	stw	fp,16(sp)
  81fc24:	df000404 	addi	fp,sp,16
  81fc28:	e13ffd15 	stw	r4,-12(fp)
  81fc2c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81fc30:	e0bffd17 	ldw	r2,-12(fp)
  81fc34:	10800a17 	ldw	r2,40(r2)
  81fc38:	10800104 	addi	r2,r2,4
  81fc3c:	10800037 	ldwio	r2,0(r2)
  81fc40:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81fc44:	e0bffe17 	ldw	r2,-8(fp)
  81fc48:	1004c03a 	cmpne	r2,r2,zero
  81fc4c:	1000051e 	bne	r2,zero,81fc64 <alt_up_audio_read_fifo_avail+0x48>
  81fc50:	e0bffc17 	ldw	r2,-16(fp)
  81fc54:	10bfc00c 	andi	r2,r2,65280
  81fc58:	1004d23a 	srli	r2,r2,8
  81fc5c:	e0bfff15 	stw	r2,-4(fp)
  81fc60:	00000306 	br	81fc70 <alt_up_audio_read_fifo_avail+0x54>
  81fc64:	e0bffc17 	ldw	r2,-16(fp)
  81fc68:	10803fcc 	andi	r2,r2,255
  81fc6c:	e0bfff15 	stw	r2,-4(fp)
  81fc70:	e0bfff17 	ldw	r2,-4(fp)
  81fc74:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  81fc78:	e0bffc17 	ldw	r2,-16(fp)
}
  81fc7c:	e037883a 	mov	sp,fp
  81fc80:	df000017 	ldw	fp,0(sp)
  81fc84:	dec00104 	addi	sp,sp,4
  81fc88:	f800283a 	ret

0081fc8c <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81fc8c:	defff904 	addi	sp,sp,-28
  81fc90:	dfc00615 	stw	ra,24(sp)
  81fc94:	df000515 	stw	fp,20(sp)
  81fc98:	df000504 	addi	fp,sp,20
  81fc9c:	e13ffc15 	stw	r4,-16(fp)
  81fca0:	e17ffd15 	stw	r5,-12(fp)
  81fca4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  81fca8:	e13ffc17 	ldw	r4,-16(fp)
  81fcac:	01400044 	movi	r5,1
  81fcb0:	081fc1c0 	call	81fc1c <alt_up_audio_read_fifo_avail>
  81fcb4:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  81fcb8:	e0bffb17 	ldw	r2,-20(fp)
  81fcbc:	10801868 	cmpgeui	r2,r2,97
  81fcc0:	1000021e 	bne	r2,zero,81fccc <alt_up_audio_record_r+0x40>
		return 0;
  81fcc4:	e03fff15 	stw	zero,-4(fp)
  81fcc8:	00000606 	br	81fce4 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  81fccc:	e13ffc17 	ldw	r4,-16(fp)
  81fcd0:	e17ffd17 	ldw	r5,-12(fp)
  81fcd4:	e1bffe17 	ldw	r6,-8(fp)
  81fcd8:	01c00044 	movi	r7,1
  81fcdc:	081fec00 	call	81fec0 <alt_up_audio_read_fifo>
  81fce0:	e0bfff15 	stw	r2,-4(fp)
  81fce4:	e0bfff17 	ldw	r2,-4(fp)
}
  81fce8:	e037883a 	mov	sp,fp
  81fcec:	dfc00117 	ldw	ra,4(sp)
  81fcf0:	df000017 	ldw	fp,0(sp)
  81fcf4:	dec00204 	addi	sp,sp,8
  81fcf8:	f800283a 	ret

0081fcfc <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81fcfc:	defff904 	addi	sp,sp,-28
  81fd00:	dfc00615 	stw	ra,24(sp)
  81fd04:	df000515 	stw	fp,20(sp)
  81fd08:	df000504 	addi	fp,sp,20
  81fd0c:	e13ffc15 	stw	r4,-16(fp)
  81fd10:	e17ffd15 	stw	r5,-12(fp)
  81fd14:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  81fd18:	e13ffc17 	ldw	r4,-16(fp)
  81fd1c:	000b883a 	mov	r5,zero
  81fd20:	081fc1c0 	call	81fc1c <alt_up_audio_read_fifo_avail>
  81fd24:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
  81fd28:	e0bffb17 	ldw	r2,-20(fp)
  81fd2c:	10801868 	cmpgeui	r2,r2,97
  81fd30:	1000021e 	bne	r2,zero,81fd3c <alt_up_audio_record_l+0x40>
		return 0;
  81fd34:	e03fff15 	stw	zero,-4(fp)
  81fd38:	00000606 	br	81fd54 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  81fd3c:	e13ffc17 	ldw	r4,-16(fp)
  81fd40:	e17ffd17 	ldw	r5,-12(fp)
  81fd44:	e1bffe17 	ldw	r6,-8(fp)
  81fd48:	000f883a 	mov	r7,zero
  81fd4c:	081fec00 	call	81fec0 <alt_up_audio_read_fifo>
  81fd50:	e0bfff15 	stw	r2,-4(fp)
  81fd54:	e0bfff17 	ldw	r2,-4(fp)
}
  81fd58:	e037883a 	mov	sp,fp
  81fd5c:	dfc00117 	ldw	ra,4(sp)
  81fd60:	df000017 	ldw	fp,0(sp)
  81fd64:	dec00204 	addi	sp,sp,8
  81fd68:	f800283a 	ret

0081fd6c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  81fd6c:	defffb04 	addi	sp,sp,-20
  81fd70:	df000415 	stw	fp,16(sp)
  81fd74:	df000404 	addi	fp,sp,16
  81fd78:	e13ffd15 	stw	r4,-12(fp)
  81fd7c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81fd80:	e0bffd17 	ldw	r2,-12(fp)
  81fd84:	10800a17 	ldw	r2,40(r2)
  81fd88:	10800104 	addi	r2,r2,4
  81fd8c:	10800037 	ldwio	r2,0(r2)
  81fd90:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81fd94:	e0bffe17 	ldw	r2,-8(fp)
  81fd98:	1004c03a 	cmpne	r2,r2,zero
  81fd9c:	1000051e 	bne	r2,zero,81fdb4 <alt_up_audio_write_fifo_space+0x48>
  81fda0:	e0bffc17 	ldw	r2,-16(fp)
  81fda4:	10bfc02c 	andhi	r2,r2,65280
  81fda8:	1004d63a 	srli	r2,r2,24
  81fdac:	e0bfff15 	stw	r2,-4(fp)
  81fdb0:	00000406 	br	81fdc4 <alt_up_audio_write_fifo_space+0x58>
  81fdb4:	e0bffc17 	ldw	r2,-16(fp)
  81fdb8:	10803fec 	andhi	r2,r2,255
  81fdbc:	1004d43a 	srli	r2,r2,16
  81fdc0:	e0bfff15 	stw	r2,-4(fp)
  81fdc4:	e0bfff17 	ldw	r2,-4(fp)
  81fdc8:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  81fdcc:	e0bffc17 	ldw	r2,-16(fp)
}
  81fdd0:	e037883a 	mov	sp,fp
  81fdd4:	df000017 	ldw	fp,0(sp)
  81fdd8:	dec00104 	addi	sp,sp,4
  81fddc:	f800283a 	ret

0081fde0 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81fde0:	defff904 	addi	sp,sp,-28
  81fde4:	dfc00615 	stw	ra,24(sp)
  81fde8:	df000515 	stw	fp,20(sp)
  81fdec:	df000504 	addi	fp,sp,20
  81fdf0:	e13ffc15 	stw	r4,-16(fp)
  81fdf4:	e17ffd15 	stw	r5,-12(fp)
  81fdf8:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  81fdfc:	e13ffc17 	ldw	r4,-16(fp)
  81fe00:	01400044 	movi	r5,1
  81fe04:	081fd6c0 	call	81fd6c <alt_up_audio_write_fifo_space>
  81fe08:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  81fe0c:	e0bffb17 	ldw	r2,-20(fp)
  81fe10:	10801868 	cmpgeui	r2,r2,97
  81fe14:	1000021e 	bne	r2,zero,81fe20 <alt_up_audio_play_r+0x40>
		return 0;
  81fe18:	e03fff15 	stw	zero,-4(fp)
  81fe1c:	00000606 	br	81fe38 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  81fe20:	e13ffc17 	ldw	r4,-16(fp)
  81fe24:	e17ffd17 	ldw	r5,-12(fp)
  81fe28:	e1bffe17 	ldw	r6,-8(fp)
  81fe2c:	01c00044 	movi	r7,1
  81fe30:	081ffc40 	call	81ffc4 <alt_up_audio_write_fifo>
  81fe34:	e0bfff15 	stw	r2,-4(fp)
  81fe38:	e0bfff17 	ldw	r2,-4(fp)
}
  81fe3c:	e037883a 	mov	sp,fp
  81fe40:	dfc00117 	ldw	ra,4(sp)
  81fe44:	df000017 	ldw	fp,0(sp)
  81fe48:	dec00204 	addi	sp,sp,8
  81fe4c:	f800283a 	ret

0081fe50 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  81fe50:	defff904 	addi	sp,sp,-28
  81fe54:	dfc00615 	stw	ra,24(sp)
  81fe58:	df000515 	stw	fp,20(sp)
  81fe5c:	df000504 	addi	fp,sp,20
  81fe60:	e13ffc15 	stw	r4,-16(fp)
  81fe64:	e17ffd15 	stw	r5,-12(fp)
  81fe68:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  81fe6c:	e13ffc17 	ldw	r4,-16(fp)
  81fe70:	000b883a 	mov	r5,zero
  81fe74:	081fd6c0 	call	81fd6c <alt_up_audio_write_fifo_space>
  81fe78:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
  81fe7c:	e0bffb17 	ldw	r2,-20(fp)
  81fe80:	10801868 	cmpgeui	r2,r2,97
  81fe84:	1000021e 	bne	r2,zero,81fe90 <alt_up_audio_play_l+0x40>
		return 0;
  81fe88:	e03fff15 	stw	zero,-4(fp)
  81fe8c:	00000606 	br	81fea8 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  81fe90:	e13ffc17 	ldw	r4,-16(fp)
  81fe94:	e17ffd17 	ldw	r5,-12(fp)
  81fe98:	e1bffe17 	ldw	r6,-8(fp)
  81fe9c:	000f883a 	mov	r7,zero
  81fea0:	081ffc40 	call	81ffc4 <alt_up_audio_write_fifo>
  81fea4:	e0bfff15 	stw	r2,-4(fp)
  81fea8:	e0bfff17 	ldw	r2,-4(fp)
}
  81feac:	e037883a 	mov	sp,fp
  81feb0:	dfc00117 	ldw	ra,4(sp)
  81feb4:	df000017 	ldw	fp,0(sp)
  81feb8:	dec00204 	addi	sp,sp,8
  81febc:	f800283a 	ret

0081fec0 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  81fec0:	defff604 	addi	sp,sp,-40
  81fec4:	df000915 	stw	fp,36(sp)
  81fec8:	df000904 	addi	fp,sp,36
  81fecc:	e13ff915 	stw	r4,-28(fp)
  81fed0:	e17ffa15 	stw	r5,-24(fp)
  81fed4:	e1bffb15 	stw	r6,-20(fp)
  81fed8:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  81fedc:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
  81fee0:	00003006 	br	81ffa4 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81fee4:	e0bff917 	ldw	r2,-28(fp)
  81fee8:	10800a17 	ldw	r2,40(r2)
  81feec:	10800104 	addi	r2,r2,4
  81fef0:	10800037 	ldwio	r2,0(r2)
  81fef4:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81fef8:	e0bffc17 	ldw	r2,-16(fp)
  81fefc:	1004c03a 	cmpne	r2,r2,zero
  81ff00:	1000051e 	bne	r2,zero,81ff18 <alt_up_audio_read_fifo+0x58>
  81ff04:	e0bff817 	ldw	r2,-32(fp)
  81ff08:	10bfc00c 	andi	r2,r2,65280
  81ff0c:	1004d23a 	srli	r2,r2,8
  81ff10:	e0bfff15 	stw	r2,-4(fp)
  81ff14:	00000306 	br	81ff24 <alt_up_audio_read_fifo+0x64>
  81ff18:	e0bff817 	ldw	r2,-32(fp)
  81ff1c:	10803fcc 	andi	r2,r2,255
  81ff20:	e0bfff15 	stw	r2,-4(fp)
  81ff24:	e0bfff17 	ldw	r2,-4(fp)
  81ff28:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  81ff2c:	e0bff817 	ldw	r2,-32(fp)
  81ff30:	1005003a 	cmpeq	r2,r2,zero
  81ff34:	10001e1e 	bne	r2,zero,81ffb0 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  81ff38:	e0bff717 	ldw	r2,-36(fp)
  81ff3c:	1085883a 	add	r2,r2,r2
  81ff40:	1085883a 	add	r2,r2,r2
  81ff44:	1007883a 	mov	r3,r2
  81ff48:	e0bffa17 	ldw	r2,-24(fp)
  81ff4c:	1887883a 	add	r3,r3,r2
  81ff50:	e0fffe15 	stw	r3,-8(fp)
  81ff54:	e0bffc17 	ldw	r2,-16(fp)
  81ff58:	1004c03a 	cmpne	r2,r2,zero
  81ff5c:	1000061e 	bne	r2,zero,81ff78 <alt_up_audio_read_fifo+0xb8>
  81ff60:	e0bff917 	ldw	r2,-28(fp)
  81ff64:	10800a17 	ldw	r2,40(r2)
  81ff68:	10800204 	addi	r2,r2,8
  81ff6c:	10800037 	ldwio	r2,0(r2)
  81ff70:	e0bffd15 	stw	r2,-12(fp)
  81ff74:	00000506 	br	81ff8c <alt_up_audio_read_fifo+0xcc>
  81ff78:	e0bff917 	ldw	r2,-28(fp)
  81ff7c:	10800a17 	ldw	r2,40(r2)
  81ff80:	10800304 	addi	r2,r2,12
  81ff84:	10800037 	ldwio	r2,0(r2)
  81ff88:	e0bffd15 	stw	r2,-12(fp)
  81ff8c:	e0fffd17 	ldw	r3,-12(fp)
  81ff90:	e0bffe17 	ldw	r2,-8(fp)
  81ff94:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  81ff98:	e0bff717 	ldw	r2,-36(fp)
  81ff9c:	10800044 	addi	r2,r2,1
  81ffa0:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  81ffa4:	e0fff717 	ldw	r3,-36(fp)
  81ffa8:	e0bffb17 	ldw	r2,-20(fp)
  81ffac:	18bfcd16 	blt	r3,r2,81fee4 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
  81ffb0:	e0bff717 	ldw	r2,-36(fp)
}
  81ffb4:	e037883a 	mov	sp,fp
  81ffb8:	df000017 	ldw	fp,0(sp)
  81ffbc:	dec00104 	addi	sp,sp,4
  81ffc0:	f800283a 	ret

0081ffc4 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  81ffc4:	defff804 	addi	sp,sp,-32
  81ffc8:	df000715 	stw	fp,28(sp)
  81ffcc:	df000704 	addi	fp,sp,28
  81ffd0:	e13ffb15 	stw	r4,-20(fp)
  81ffd4:	e17ffc15 	stw	r5,-16(fp)
  81ffd8:	e1bffd15 	stw	r6,-12(fp)
  81ffdc:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
  81ffe0:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
  81ffe4:	00003a06 	br	8200d0 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  81ffe8:	e0bffb17 	ldw	r2,-20(fp)
  81ffec:	10800a17 	ldw	r2,40(r2)
  81fff0:	10800104 	addi	r2,r2,4
  81fff4:	10800037 	ldwio	r2,0(r2)
  81fff8:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  81fffc:	e0bffe17 	ldw	r2,-8(fp)
  820000:	1004c03a 	cmpne	r2,r2,zero
  820004:	1000051e 	bne	r2,zero,82001c <alt_up_audio_write_fifo+0x58>
  820008:	e0bffa17 	ldw	r2,-24(fp)
  82000c:	10bfc02c 	andhi	r2,r2,65280
  820010:	1004d63a 	srli	r2,r2,24
  820014:	e0bfff15 	stw	r2,-4(fp)
  820018:	00000406 	br	82002c <alt_up_audio_write_fifo+0x68>
  82001c:	e0bffa17 	ldw	r2,-24(fp)
  820020:	10803fec 	andhi	r2,r2,255
  820024:	1004d43a 	srli	r2,r2,16
  820028:	e0bfff15 	stw	r2,-4(fp)
  82002c:	e0bfff17 	ldw	r2,-4(fp)
  820030:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  820034:	e0bffa17 	ldw	r2,-24(fp)
  820038:	1005003a 	cmpeq	r2,r2,zero
  82003c:	1000271e 	bne	r2,zero,8200dc <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  820040:	e0bffe17 	ldw	r2,-8(fp)
  820044:	1004c03a 	cmpne	r2,r2,zero
  820048:	1000111e 	bne	r2,zero,820090 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  82004c:	e0bffb17 	ldw	r2,-20(fp)
  820050:	10800a17 	ldw	r2,40(r2)
  820054:	11000204 	addi	r4,r2,8
  820058:	e0bff917 	ldw	r2,-28(fp)
  82005c:	1085883a 	add	r2,r2,r2
  820060:	1085883a 	add	r2,r2,r2
  820064:	1007883a 	mov	r3,r2
  820068:	e0bffc17 	ldw	r2,-16(fp)
  82006c:	1885883a 	add	r2,r3,r2
  820070:	10800017 	ldw	r2,0(r2)
  820074:	1007883a 	mov	r3,r2
  820078:	e0bff917 	ldw	r2,-28(fp)
  82007c:	10800044 	addi	r2,r2,1
  820080:	e0bff915 	stw	r2,-28(fp)
  820084:	2005883a 	mov	r2,r4
  820088:	10c00035 	stwio	r3,0(r2)
  82008c:	00001006 	br	8200d0 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  820090:	e0bffb17 	ldw	r2,-20(fp)
  820094:	10800a17 	ldw	r2,40(r2)
  820098:	11000304 	addi	r4,r2,12
  82009c:	e0bff917 	ldw	r2,-28(fp)
  8200a0:	1085883a 	add	r2,r2,r2
  8200a4:	1085883a 	add	r2,r2,r2
  8200a8:	1007883a 	mov	r3,r2
  8200ac:	e0bffc17 	ldw	r2,-16(fp)
  8200b0:	1885883a 	add	r2,r3,r2
  8200b4:	10800017 	ldw	r2,0(r2)
  8200b8:	1007883a 	mov	r3,r2
  8200bc:	e0bff917 	ldw	r2,-28(fp)
  8200c0:	10800044 	addi	r2,r2,1
  8200c4:	e0bff915 	stw	r2,-28(fp)
  8200c8:	2005883a 	mov	r2,r4
  8200cc:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  8200d0:	e0fff917 	ldw	r3,-28(fp)
  8200d4:	e0bffd17 	ldw	r2,-12(fp)
  8200d8:	18bfc316 	blt	r3,r2,81ffe8 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
  8200dc:	e0bff917 	ldw	r2,-28(fp)
}
  8200e0:	e037883a 	mov	sp,fp
  8200e4:	df000017 	ldw	fp,0(sp)
  8200e8:	dec00104 	addi	sp,sp,4
  8200ec:	f800283a 	ret

008200f0 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  8200f0:	defffc04 	addi	sp,sp,-16
  8200f4:	df000315 	stw	fp,12(sp)
  8200f8:	df000304 	addi	fp,sp,12
  8200fc:	e13ffd15 	stw	r4,-12(fp)
  820100:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  820104:	e0bffe17 	ldw	r2,-8(fp)
  820108:	1004c03a 	cmpne	r2,r2,zero
  82010c:	1000061e 	bne	r2,zero,820128 <alt_up_audio_read_fifo_head+0x38>
  820110:	e0bffd17 	ldw	r2,-12(fp)
  820114:	10800a17 	ldw	r2,40(r2)
  820118:	10800204 	addi	r2,r2,8
  82011c:	10800037 	ldwio	r2,0(r2)
  820120:	e0bfff15 	stw	r2,-4(fp)
  820124:	00000506 	br	82013c <alt_up_audio_read_fifo_head+0x4c>
  820128:	e0bffd17 	ldw	r2,-12(fp)
  82012c:	10800a17 	ldw	r2,40(r2)
  820130:	10800304 	addi	r2,r2,12
  820134:	10800037 	ldwio	r2,0(r2)
  820138:	e0bfff15 	stw	r2,-4(fp)
  82013c:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  820140:	e037883a 	mov	sp,fp
  820144:	df000017 	ldw	fp,0(sp)
  820148:	dec00104 	addi	sp,sp,4
  82014c:	f800283a 	ret

00820150 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  820150:	defffc04 	addi	sp,sp,-16
  820154:	df000315 	stw	fp,12(sp)
  820158:	df000304 	addi	fp,sp,12
  82015c:	e13ffd15 	stw	r4,-12(fp)
  820160:	e17ffe15 	stw	r5,-8(fp)
  820164:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  820168:	e0bfff17 	ldw	r2,-4(fp)
  82016c:	1004c03a 	cmpne	r2,r2,zero
  820170:	1000061e 	bne	r2,zero,82018c <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  820174:	e0bffd17 	ldw	r2,-12(fp)
  820178:	10800a17 	ldw	r2,40(r2)
  82017c:	10800204 	addi	r2,r2,8
  820180:	e0fffe17 	ldw	r3,-8(fp)
  820184:	10c00035 	stwio	r3,0(r2)
  820188:	00000506 	br	8201a0 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  82018c:	e0bffd17 	ldw	r2,-12(fp)
  820190:	10800a17 	ldw	r2,40(r2)
  820194:	10800304 	addi	r2,r2,12
  820198:	e0fffe17 	ldw	r3,-8(fp)
  82019c:	10c00035 	stwio	r3,0(r2)
}
  8201a0:	e037883a 	mov	sp,fp
  8201a4:	df000017 	ldw	fp,0(sp)
  8201a8:	dec00104 	addi	sp,sp,4
  8201ac:	f800283a 	ret

008201b0 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
  8201b0:	defffc04 	addi	sp,sp,-16
  8201b4:	dfc00315 	stw	ra,12(sp)
  8201b8:	df000215 	stw	fp,8(sp)
  8201bc:	df000204 	addi	fp,sp,8
  8201c0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
  8201c4:	e13fff17 	ldw	r4,-4(fp)
  8201c8:	014020f4 	movhi	r5,131
  8201cc:	29406104 	addi	r5,r5,388
  8201d0:	08277040 	call	827704 <alt_find_dev>
  8201d4:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
  8201d8:	e0bffe17 	ldw	r2,-8(fp)
  8201dc:	10800a17 	ldw	r2,40(r2)
  8201e0:	10800104 	addi	r2,r2,4
  8201e4:	10800037 	ldwio	r2,0(r2)
  8201e8:	10803fec 	andhi	r2,r2,255
  8201ec:	1005d43a 	srai	r2,r2,16
  8201f0:	1007883a 	mov	r3,r2
  8201f4:	e0bffe17 	ldw	r2,-8(fp)
  8201f8:	10c00b15 	stw	r3,44(r2)

  return dev;
  8201fc:	e0bffe17 	ldw	r2,-8(fp)
}
  820200:	e037883a 	mov	sp,fp
  820204:	dfc00117 	ldw	ra,4(sp)
  820208:	df000017 	ldw	fp,0(sp)
  82020c:	dec00204 	addi	sp,sp,8
  820210:	f800283a 	ret

00820214 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  820214:	defffc04 	addi	sp,sp,-16
  820218:	df000315 	stw	fp,12(sp)
  82021c:	df000304 	addi	fp,sp,12
  820220:	e13ffd15 	stw	r4,-12(fp)
  820224:	e17ffe15 	stw	r5,-8(fp)
  820228:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  82022c:	e0bffd17 	ldw	r2,-12(fp)
  820230:	10800a17 	ldw	r2,40(r2)
  820234:	11000204 	addi	r4,r2,8
  820238:	e0bffe17 	ldw	r2,-8(fp)
  82023c:	10c03fcc 	andi	r3,r2,255
  820240:	2005883a 	mov	r2,r4
  820244:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
  820248:	e0bffd17 	ldw	r2,-12(fp)
  82024c:	10800a17 	ldw	r2,40(r2)
  820250:	11000304 	addi	r4,r2,12
  820254:	e0bfff17 	ldw	r2,-4(fp)
  820258:	10ffffcc 	andi	r3,r2,65535
  82025c:	2005883a 	mov	r2,r4
  820260:	10c00035 	stwio	r3,0(r2)

	return 0;
  820264:	0005883a 	mov	r2,zero
}
  820268:	e037883a 	mov	sp,fp
  82026c:	df000017 	ldw	fp,0(sp)
  820270:	dec00104 	addi	sp,sp,4
  820274:	f800283a 	ret

00820278 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
  820278:	defffa04 	addi	sp,sp,-24
  82027c:	dfc00515 	stw	ra,20(sp)
  820280:	df000415 	stw	fp,16(sp)
  820284:	df000404 	addi	fp,sp,16
  820288:	e13ffc15 	stw	r4,-16(fp)
  82028c:	e17ffd15 	stw	r5,-12(fp)
  820290:	e1bffe15 	stw	r6,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
  820294:	e0bffc17 	ldw	r2,-16(fp)
  820298:	10800a17 	ldw	r2,40(r2)
  82029c:	11000204 	addi	r4,r2,8
  8202a0:	e0bffd17 	ldw	r2,-12(fp)
  8202a4:	10c03fcc 	andi	r3,r2,255
  8202a8:	2005883a 	mov	r2,r4
  8202ac:	10c00035 	stwio	r3,0(r2)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
  8202b0:	e0bffc17 	ldw	r2,-16(fp)
  8202b4:	10800a17 	ldw	r2,40(r2)
  8202b8:	10800304 	addi	r2,r2,12
  8202bc:	10800037 	ldwio	r2,0(r2)
  8202c0:	1007883a 	mov	r3,r2
  8202c4:	e0bffe17 	ldw	r2,-8(fp)
  8202c8:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
  8202cc:	e13ffc17 	ldw	r4,-16(fp)
  8202d0:	08203a40 	call	8203a4 <alt_up_av_config_read_acknowledge>
  8202d4:	1005003a 	cmpeq	r2,r2,zero
  8202d8:	1000031e 	bne	r2,zero,8202e8 <alt_up_av_config_read_data+0x70>
		return -1;
  8202dc:	00bfffc4 	movi	r2,-1
  8202e0:	e0bfff15 	stw	r2,-4(fp)
  8202e4:	00000106 	br	8202ec <alt_up_av_config_read_data+0x74>

	return 0;
  8202e8:	e03fff15 	stw	zero,-4(fp)
  8202ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8202f0:	e037883a 	mov	sp,fp
  8202f4:	dfc00117 	ldw	ra,4(sp)
  8202f8:	df000017 	ldw	fp,0(sp)
  8202fc:	dec00204 	addi	sp,sp,8
  820300:	f800283a 	ret

00820304 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
  820304:	defffe04 	addi	sp,sp,-8
  820308:	df000115 	stw	fp,4(sp)
  82030c:	df000104 	addi	fp,sp,4
  820310:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
  820314:	e0bfff17 	ldw	r2,-4(fp)
  820318:	10800a17 	ldw	r2,40(r2)
  82031c:	1007883a 	mov	r3,r2
  820320:	00800044 	movi	r2,1
  820324:	18800025 	stbio	r2,0(r3)
	return 0;
  820328:	0005883a 	mov	r2,zero
}
  82032c:	e037883a 	mov	sp,fp
  820330:	df000017 	ldw	fp,0(sp)
  820334:	dec00104 	addi	sp,sp,4
  820338:	f800283a 	ret

0082033c <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
  82033c:	defffe04 	addi	sp,sp,-8
  820340:	df000115 	stw	fp,4(sp)
  820344:	df000104 	addi	fp,sp,4
  820348:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
  82034c:	e0bfff17 	ldw	r2,-4(fp)
  820350:	10800a17 	ldw	r2,40(r2)
  820354:	1007883a 	mov	r3,r2
  820358:	00800084 	movi	r2,2
  82035c:	18800025 	stbio	r2,0(r3)
	return 0;
  820360:	0005883a 	mov	r2,zero
}
  820364:	e037883a 	mov	sp,fp
  820368:	df000017 	ldw	fp,0(sp)
  82036c:	dec00104 	addi	sp,sp,4
  820370:	f800283a 	ret

00820374 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
  820374:	defffe04 	addi	sp,sp,-8
  820378:	df000115 	stw	fp,4(sp)
  82037c:	df000104 	addi	fp,sp,4
  820380:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
  820384:	e0bfff17 	ldw	r2,-4(fp)
  820388:	10800a17 	ldw	r2,40(r2)
  82038c:	10000025 	stbio	zero,0(r2)
	return 0;
  820390:	0005883a 	mov	r2,zero
}
  820394:	e037883a 	mov	sp,fp
  820398:	df000017 	ldw	fp,0(sp)
  82039c:	dec00104 	addi	sp,sp,4
  8203a0:	f800283a 	ret

008203a4 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
  8203a4:	defffd04 	addi	sp,sp,-12
  8203a8:	df000215 	stw	fp,8(sp)
  8203ac:	df000204 	addi	fp,sp,8
  8203b0:	e13ffe15 	stw	r4,-8(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
  8203b4:	e0bffe17 	ldw	r2,-8(fp)
  8203b8:	10800a17 	ldw	r2,40(r2)
  8203bc:	10800104 	addi	r2,r2,4
  8203c0:	10800037 	ldwio	r2,0(r2)
  8203c4:	1080008c 	andi	r2,r2,2
  8203c8:	1005d07a 	srai	r2,r2,1
  8203cc:	1005003a 	cmpeq	r2,r2,zero
  8203d0:	1000071e 	bne	r2,zero,8203f0 <alt_up_av_config_read_acknowledge+0x4c>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
  8203d4:	e0bffe17 	ldw	r2,-8(fp)
  8203d8:	10800a17 	ldw	r2,40(r2)
  8203dc:	10800104 	addi	r2,r2,4
  8203e0:	10800037 	ldwio	r2,0(r2)
  8203e4:	1080004c 	andi	r2,r2,1
  8203e8:	e0bfff15 	stw	r2,-4(fp)
  8203ec:	00000206 	br	8203f8 <alt_up_av_config_read_acknowledge+0x54>
	return -1;
  8203f0:	00bfffc4 	movi	r2,-1
  8203f4:	e0bfff15 	stw	r2,-4(fp)
  8203f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8203fc:	e037883a 	mov	sp,fp
  820400:	df000017 	ldw	fp,0(sp)
  820404:	dec00104 	addi	sp,sp,4
  820408:	f800283a 	ret

0082040c <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
  82040c:	defffe04 	addi	sp,sp,-8
  820410:	df000115 	stw	fp,4(sp)
  820414:	df000104 	addi	fp,sp,4
  820418:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
  82041c:	e0bfff17 	ldw	r2,-4(fp)
  820420:	10800a17 	ldw	r2,40(r2)
  820424:	10800104 	addi	r2,r2,4
  820428:	10800037 	ldwio	r2,0(r2)
  82042c:	1080008c 	andi	r2,r2,2
  820430:	1005d07a 	srai	r2,r2,1
}
  820434:	e037883a 	mov	sp,fp
  820438:	df000017 	ldw	fp,0(sp)
  82043c:	dec00104 	addi	sp,sp,4
  820440:	f800283a 	ret

00820444 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  820444:	defff904 	addi	sp,sp,-28
  820448:	dfc00615 	stw	ra,24(sp)
  82044c:	df000515 	stw	fp,20(sp)
  820450:	df000504 	addi	fp,sp,20
  820454:	e13ffc15 	stw	r4,-16(fp)
  820458:	e17ffd15 	stw	r5,-12(fp)
  82045c:	e1bffe15 	stw	r6,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  820460:	e0bffc17 	ldw	r2,-16(fp)
  820464:	10800b17 	ldw	r2,44(r2)
  820468:	10800060 	cmpeqi	r2,r2,1
  82046c:	10000f1e 	bne	r2,zero,8204ac <alt_up_av_config_write_audio_cfg_register+0x68>
  820470:	e0bffc17 	ldw	r2,-16(fp)
  820474:	10800b17 	ldw	r2,44(r2)
  820478:	108000a0 	cmpeqi	r2,r2,2
  82047c:	10000b1e 	bne	r2,zero,8204ac <alt_up_av_config_write_audio_cfg_register+0x68>
  820480:	e0bffc17 	ldw	r2,-16(fp)
  820484:	10800b17 	ldw	r2,44(r2)
  820488:	108000e0 	cmpeqi	r2,r2,3
  82048c:	1000071e 	bne	r2,zero,8204ac <alt_up_av_config_write_audio_cfg_register+0x68>
  820490:	e0bffc17 	ldw	r2,-16(fp)
  820494:	10800b17 	ldw	r2,44(r2)
  820498:	10800120 	cmpeqi	r2,r2,4
  82049c:	1000031e 	bne	r2,zero,8204ac <alt_up_av_config_write_audio_cfg_register+0x68>
		return -EINVAL;
  8204a0:	00bffa84 	movi	r2,-22
  8204a4:	e0bfff15 	stw	r2,-4(fp)
  8204a8:	00000b06 	br	8204d8 <alt_up_av_config_write_audio_cfg_register+0x94>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
  8204ac:	e03ffb15 	stw	zero,-20(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
  8204b0:	e0bffc17 	ldw	r2,-16(fp)
  8204b4:	10800a17 	ldw	r2,40(r2)
  8204b8:	10800084 	addi	r2,r2,2
  8204bc:	e0fffb17 	ldw	r3,-20(fp)
  8204c0:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  8204c4:	e13ffc17 	ldw	r4,-16(fp)
  8204c8:	e17ffd17 	ldw	r5,-12(fp)
  8204cc:	e1bffe17 	ldw	r6,-8(fp)
  8204d0:	08202140 	call	820214 <alt_up_av_config_write_data>
  8204d4:	e0bfff15 	stw	r2,-4(fp)
  8204d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8204dc:	e037883a 	mov	sp,fp
  8204e0:	dfc00117 	ldw	ra,4(sp)
  8204e4:	df000017 	ldw	fp,0(sp)
  8204e8:	dec00204 	addi	sp,sp,8
  8204ec:	f800283a 	ret

008204f0 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
  8204f0:	defff904 	addi	sp,sp,-28
  8204f4:	dfc00615 	stw	ra,24(sp)
  8204f8:	df000515 	stw	fp,20(sp)
  8204fc:	df000504 	addi	fp,sp,20
  820500:	e13ffb15 	stw	r4,-20(fp)
  820504:	e17ffc15 	stw	r5,-16(fp)
  820508:	e1bffd15 	stw	r6,-12(fp)
  82050c:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  820510:	e0bffb17 	ldw	r2,-20(fp)
  820514:	10800b17 	ldw	r2,44(r2)
  820518:	108000a0 	cmpeqi	r2,r2,2
  82051c:	10000b1e 	bne	r2,zero,82054c <alt_up_av_config_read_video_cfg_register+0x5c>
  820520:	e0bffb17 	ldw	r2,-20(fp)
  820524:	10800b17 	ldw	r2,44(r2)
  820528:	108000e0 	cmpeqi	r2,r2,3
  82052c:	1000071e 	bne	r2,zero,82054c <alt_up_av_config_read_video_cfg_register+0x5c>
  820530:	e0bffb17 	ldw	r2,-20(fp)
  820534:	10800b17 	ldw	r2,44(r2)
  820538:	10800120 	cmpeqi	r2,r2,4
  82053c:	1000031e 	bne	r2,zero,82054c <alt_up_av_config_read_video_cfg_register+0x5c>
		return -EINVAL;
  820540:	00bffa84 	movi	r2,-22
  820544:	e0bfff15 	stw	r2,-4(fp)
  820548:	00002106 	br	8205d0 <alt_up_av_config_read_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  82054c:	e0bffb17 	ldw	r2,-20(fp)
  820550:	10800b17 	ldw	r2,44(r2)
  820554:	108000a0 	cmpeqi	r2,r2,2
  820558:	1000041e 	bne	r2,zero,82056c <alt_up_av_config_read_video_cfg_register+0x7c>
  82055c:	e0bffb17 	ldw	r2,-20(fp)
  820560:	10800b17 	ldw	r2,44(r2)
  820564:	10800118 	cmpnei	r2,r2,4
  820568:	1000061e 	bne	r2,zero,820584 <alt_up_av_config_read_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  82056c:	e0bffe17 	ldw	r2,-8(fp)
  820570:	10800060 	cmpeqi	r2,r2,1
  820574:	10000c1e 	bne	r2,zero,8205a8 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  820578:	00bffa84 	movi	r2,-22
  82057c:	e0bfff15 	stw	r2,-4(fp)
  820580:	00001306 	br	8205d0 <alt_up_av_config_read_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  820584:	e0bffe17 	ldw	r2,-8(fp)
  820588:	10800060 	cmpeqi	r2,r2,1
  82058c:	1000061e 	bne	r2,zero,8205a8 <alt_up_av_config_read_video_cfg_register+0xb8>
  820590:	e0bffe17 	ldw	r2,-8(fp)
  820594:	108000a0 	cmpeqi	r2,r2,2
  820598:	1000031e 	bne	r2,zero,8205a8 <alt_up_av_config_read_video_cfg_register+0xb8>
			return -EINVAL;
  82059c:	00bffa84 	movi	r2,-22
  8205a0:	e0bfff15 	stw	r2,-4(fp)
  8205a4:	00000a06 	br	8205d0 <alt_up_av_config_read_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  8205a8:	e0bffb17 	ldw	r2,-20(fp)
  8205ac:	10800a17 	ldw	r2,40(r2)
  8205b0:	10800084 	addi	r2,r2,2
  8205b4:	e0fffe17 	ldw	r3,-8(fp)
  8205b8:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_read_data(av_config, addr, data);
  8205bc:	e13ffb17 	ldw	r4,-20(fp)
  8205c0:	e17ffc17 	ldw	r5,-16(fp)
  8205c4:	e1bffd17 	ldw	r6,-12(fp)
  8205c8:	08202780 	call	820278 <alt_up_av_config_read_data>
  8205cc:	e0bfff15 	stw	r2,-4(fp)
  8205d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8205d4:	e037883a 	mov	sp,fp
  8205d8:	dfc00117 	ldw	ra,4(sp)
  8205dc:	df000017 	ldw	fp,0(sp)
  8205e0:	dec00204 	addi	sp,sp,8
  8205e4:	f800283a 	ret

008205e8 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
  8205e8:	defff904 	addi	sp,sp,-28
  8205ec:	dfc00615 	stw	ra,24(sp)
  8205f0:	df000515 	stw	fp,20(sp)
  8205f4:	df000504 	addi	fp,sp,20
  8205f8:	e13ffb15 	stw	r4,-20(fp)
  8205fc:	e17ffc15 	stw	r5,-16(fp)
  820600:	e1bffd15 	stw	r6,-12(fp)
  820604:	e1fffe15 	stw	r7,-8(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
  820608:	e0bffb17 	ldw	r2,-20(fp)
  82060c:	10800b17 	ldw	r2,44(r2)
  820610:	108000a0 	cmpeqi	r2,r2,2
  820614:	10000b1e 	bne	r2,zero,820644 <alt_up_av_config_write_video_cfg_register+0x5c>
  820618:	e0bffb17 	ldw	r2,-20(fp)
  82061c:	10800b17 	ldw	r2,44(r2)
  820620:	108000e0 	cmpeqi	r2,r2,3
  820624:	1000071e 	bne	r2,zero,820644 <alt_up_av_config_write_video_cfg_register+0x5c>
  820628:	e0bffb17 	ldw	r2,-20(fp)
  82062c:	10800b17 	ldw	r2,44(r2)
  820630:	10800120 	cmpeqi	r2,r2,4
  820634:	1000031e 	bne	r2,zero,820644 <alt_up_av_config_write_video_cfg_register+0x5c>
		return -EINVAL;
  820638:	00bffa84 	movi	r2,-22
  82063c:	e0bfff15 	stw	r2,-4(fp)
  820640:	00002106 	br	8206c8 <alt_up_av_config_write_video_cfg_register+0xe0>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
  820644:	e0bffb17 	ldw	r2,-20(fp)
  820648:	10800b17 	ldw	r2,44(r2)
  82064c:	108000a0 	cmpeqi	r2,r2,2
  820650:	1000041e 	bne	r2,zero,820664 <alt_up_av_config_write_video_cfg_register+0x7c>
  820654:	e0bffb17 	ldw	r2,-20(fp)
  820658:	10800b17 	ldw	r2,44(r2)
  82065c:	10800118 	cmpnei	r2,r2,4
  820660:	1000061e 	bne	r2,zero,82067c <alt_up_av_config_write_video_cfg_register+0x94>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
  820664:	e0bffe17 	ldw	r2,-8(fp)
  820668:	10800060 	cmpeqi	r2,r2,1
  82066c:	10000c1e 	bne	r2,zero,8206a0 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  820670:	00bffa84 	movi	r2,-22
  820674:	e0bfff15 	stw	r2,-4(fp)
  820678:	00001306 	br	8206c8 <alt_up_av_config_write_video_cfg_register+0xe0>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
  82067c:	e0bffe17 	ldw	r2,-8(fp)
  820680:	10800060 	cmpeqi	r2,r2,1
  820684:	1000061e 	bne	r2,zero,8206a0 <alt_up_av_config_write_video_cfg_register+0xb8>
  820688:	e0bffe17 	ldw	r2,-8(fp)
  82068c:	108000a0 	cmpeqi	r2,r2,2
  820690:	1000031e 	bne	r2,zero,8206a0 <alt_up_av_config_write_video_cfg_register+0xb8>
			return -EINVAL;
  820694:	00bffa84 	movi	r2,-22
  820698:	e0bfff15 	stw	r2,-4(fp)
  82069c:	00000a06 	br	8206c8 <alt_up_av_config_write_video_cfg_register+0xe0>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
  8206a0:	e0bffb17 	ldw	r2,-20(fp)
  8206a4:	10800a17 	ldw	r2,40(r2)
  8206a8:	10800084 	addi	r2,r2,2
  8206ac:	e0fffe17 	ldw	r3,-8(fp)
  8206b0:	10c00025 	stbio	r3,0(r2)

	return alt_up_av_config_write_data(av_config, addr, data);
  8206b4:	e13ffb17 	ldw	r4,-20(fp)
  8206b8:	e17ffc17 	ldw	r5,-16(fp)
  8206bc:	e1bffd17 	ldw	r6,-12(fp)
  8206c0:	08202140 	call	820214 <alt_up_av_config_write_data>
  8206c4:	e0bfff15 	stw	r2,-4(fp)
  8206c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8206cc:	e037883a 	mov	sp,fp
  8206d0:	dfc00117 	ldw	ra,4(sp)
  8206d4:	df000017 	ldw	fp,0(sp)
  8206d8:	dec00204 	addi	sp,sp,8
  8206dc:	f800283a 	ret

008206e0 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8206e0:	defffa04 	addi	sp,sp,-24
  8206e4:	dfc00515 	stw	ra,20(sp)
  8206e8:	df000415 	stw	fp,16(sp)
  8206ec:	df000404 	addi	fp,sp,16
  8206f0:	e13ffc15 	stw	r4,-16(fp)
  8206f4:	e17ffd15 	stw	r5,-12(fp)
  8206f8:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  8206fc:	e0bffc17 	ldw	r2,-16(fp)
  820700:	10800b17 	ldw	r2,44(r2)
  820704:	10800220 	cmpeqi	r2,r2,8
  820708:	1000031e 	bne	r2,zero,820718 <alt_up_av_config_read_DC2_cfg_register+0x38>
		return -EINVAL;
  82070c:	00bffa84 	movi	r2,-22
  820710:	e0bfff15 	stw	r2,-4(fp)
  820714:	00000506 	br	82072c <alt_up_av_config_read_DC2_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  820718:	e13ffc17 	ldw	r4,-16(fp)
  82071c:	e17ffd17 	ldw	r5,-12(fp)
  820720:	e1bffe17 	ldw	r6,-8(fp)
  820724:	08202780 	call	820278 <alt_up_av_config_read_data>
  820728:	e0bfff15 	stw	r2,-4(fp)
  82072c:	e0bfff17 	ldw	r2,-4(fp)
}
  820730:	e037883a 	mov	sp,fp
  820734:	dfc00117 	ldw	ra,4(sp)
  820738:	df000017 	ldw	fp,0(sp)
  82073c:	dec00204 	addi	sp,sp,8
  820740:	f800283a 	ret

00820744 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  820744:	defffa04 	addi	sp,sp,-24
  820748:	dfc00515 	stw	ra,20(sp)
  82074c:	df000415 	stw	fp,16(sp)
  820750:	df000404 	addi	fp,sp,16
  820754:	e13ffc15 	stw	r4,-16(fp)
  820758:	e17ffd15 	stw	r5,-12(fp)
  82075c:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
  820760:	e0bffc17 	ldw	r2,-16(fp)
  820764:	10800b17 	ldw	r2,44(r2)
  820768:	10800220 	cmpeqi	r2,r2,8
  82076c:	1000031e 	bne	r2,zero,82077c <alt_up_av_config_write_DC2_cfg_register+0x38>
		return -EINVAL;
  820770:	00bffa84 	movi	r2,-22
  820774:	e0bfff15 	stw	r2,-4(fp)
  820778:	00000506 	br	820790 <alt_up_av_config_write_DC2_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  82077c:	e13ffc17 	ldw	r4,-16(fp)
  820780:	e17ffd17 	ldw	r5,-12(fp)
  820784:	e1bffe17 	ldw	r6,-8(fp)
  820788:	08202140 	call	820214 <alt_up_av_config_write_data>
  82078c:	e0bfff15 	stw	r2,-4(fp)
  820790:	e0bfff17 	ldw	r2,-4(fp)
}
  820794:	e037883a 	mov	sp,fp
  820798:	dfc00117 	ldw	ra,4(sp)
  82079c:	df000017 	ldw	fp,0(sp)
  8207a0:	dec00204 	addi	sp,sp,8
  8207a4:	f800283a 	ret

008207a8 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  8207a8:	defffa04 	addi	sp,sp,-24
  8207ac:	dfc00515 	stw	ra,20(sp)
  8207b0:	df000415 	stw	fp,16(sp)
  8207b4:	df000404 	addi	fp,sp,16
  8207b8:	e13ffc15 	stw	r4,-16(fp)
  8207bc:	e17ffd15 	stw	r5,-12(fp)
  8207c0:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  8207c4:	e0bffc17 	ldw	r2,-16(fp)
  8207c8:	10800b17 	ldw	r2,44(r2)
  8207cc:	10800260 	cmpeqi	r2,r2,9
  8207d0:	1000031e 	bne	r2,zero,8207e0 <alt_up_av_config_read_D5M_cfg_register+0x38>
		return -EINVAL;
  8207d4:	00bffa84 	movi	r2,-22
  8207d8:	e0bfff15 	stw	r2,-4(fp)
  8207dc:	00000506 	br	8207f4 <alt_up_av_config_read_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_read_data(av_config, addr, data);
  8207e0:	e13ffc17 	ldw	r4,-16(fp)
  8207e4:	e17ffd17 	ldw	r5,-12(fp)
  8207e8:	e1bffe17 	ldw	r6,-8(fp)
  8207ec:	08202780 	call	820278 <alt_up_av_config_read_data>
  8207f0:	e0bfff15 	stw	r2,-4(fp)
  8207f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8207f8:	e037883a 	mov	sp,fp
  8207fc:	dfc00117 	ldw	ra,4(sp)
  820800:	df000017 	ldw	fp,0(sp)
  820804:	dec00204 	addi	sp,sp,8
  820808:	f800283a 	ret

0082080c <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  82080c:	defffa04 	addi	sp,sp,-24
  820810:	dfc00515 	stw	ra,20(sp)
  820814:	df000415 	stw	fp,16(sp)
  820818:	df000404 	addi	fp,sp,16
  82081c:	e13ffc15 	stw	r4,-16(fp)
  820820:	e17ffd15 	stw	r5,-12(fp)
  820824:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
  820828:	e0bffc17 	ldw	r2,-16(fp)
  82082c:	10800b17 	ldw	r2,44(r2)
  820830:	10800260 	cmpeqi	r2,r2,9
  820834:	1000031e 	bne	r2,zero,820844 <alt_up_av_config_write_D5M_cfg_register+0x38>
		return -EINVAL;
  820838:	00bffa84 	movi	r2,-22
  82083c:	e0bfff15 	stw	r2,-4(fp)
  820840:	00000506 	br	820858 <alt_up_av_config_write_D5M_cfg_register+0x4c>
	
	return alt_up_av_config_write_data(av_config, addr, data);
  820844:	e13ffc17 	ldw	r4,-16(fp)
  820848:	e17ffd17 	ldw	r5,-12(fp)
  82084c:	e1bffe17 	ldw	r6,-8(fp)
  820850:	08202140 	call	820214 <alt_up_av_config_write_data>
  820854:	e0bfff15 	stw	r2,-4(fp)
  820858:	e0bfff17 	ldw	r2,-4(fp)
}
  82085c:	e037883a 	mov	sp,fp
  820860:	dfc00117 	ldw	ra,4(sp)
  820864:	df000017 	ldw	fp,0(sp)
  820868:	dec00204 	addi	sp,sp,8
  82086c:	f800283a 	ret

00820870 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
  820870:	defffa04 	addi	sp,sp,-24
  820874:	dfc00515 	stw	ra,20(sp)
  820878:	df000415 	stw	fp,16(sp)
  82087c:	df000404 	addi	fp,sp,16
  820880:	e13ffc15 	stw	r4,-16(fp)
  820884:	e17ffd15 	stw	r5,-12(fp)
  820888:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  82088c:	e0bffc17 	ldw	r2,-16(fp)
  820890:	10800b17 	ldw	r2,44(r2)
  820894:	108002a0 	cmpeqi	r2,r2,10
  820898:	1000031e 	bne	r2,zero,8208a8 <alt_up_av_config_read_LTM_cfg_register+0x38>
		return -EINVAL;
  82089c:	00bffa84 	movi	r2,-22
  8208a0:	e0bfff15 	stw	r2,-4(fp)
  8208a4:	00000506 	br	8208bc <alt_up_av_config_read_LTM_cfg_register+0x4c>

	return alt_up_av_config_read_data(av_config, addr, data);
  8208a8:	e13ffc17 	ldw	r4,-16(fp)
  8208ac:	e17ffd17 	ldw	r5,-12(fp)
  8208b0:	e1bffe17 	ldw	r6,-8(fp)
  8208b4:	08202780 	call	820278 <alt_up_av_config_read_data>
  8208b8:	e0bfff15 	stw	r2,-4(fp)
  8208bc:	e0bfff17 	ldw	r2,-4(fp)
}
  8208c0:	e037883a 	mov	sp,fp
  8208c4:	dfc00117 	ldw	ra,4(sp)
  8208c8:	df000017 	ldw	fp,0(sp)
  8208cc:	dec00204 	addi	sp,sp,8
  8208d0:	f800283a 	ret

008208d4 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
  8208d4:	defffa04 	addi	sp,sp,-24
  8208d8:	dfc00515 	stw	ra,20(sp)
  8208dc:	df000415 	stw	fp,16(sp)
  8208e0:	df000404 	addi	fp,sp,16
  8208e4:	e13ffc15 	stw	r4,-16(fp)
  8208e8:	e17ffd15 	stw	r5,-12(fp)
  8208ec:	e1bffe15 	stw	r6,-8(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
  8208f0:	e0bffc17 	ldw	r2,-16(fp)
  8208f4:	10800b17 	ldw	r2,44(r2)
  8208f8:	108002a0 	cmpeqi	r2,r2,10
  8208fc:	1000031e 	bne	r2,zero,82090c <alt_up_av_config_write_LTM_cfg_register+0x38>
		return -EINVAL;
  820900:	00bffa84 	movi	r2,-22
  820904:	e0bfff15 	stw	r2,-4(fp)
  820908:	00000506 	br	820920 <alt_up_av_config_write_LTM_cfg_register+0x4c>

	return alt_up_av_config_write_data(av_config, addr, data);
  82090c:	e13ffc17 	ldw	r4,-16(fp)
  820910:	e17ffd17 	ldw	r5,-12(fp)
  820914:	e1bffe17 	ldw	r6,-8(fp)
  820918:	08202140 	call	820214 <alt_up_av_config_write_data>
  82091c:	e0bfff15 	stw	r2,-4(fp)
  820920:	e0bfff17 	ldw	r2,-4(fp)
}
  820924:	e037883a 	mov	sp,fp
  820928:	dfc00117 	ldw	ra,4(sp)
  82092c:	df000017 	ldw	fp,0(sp)
  820930:	dec00204 	addi	sp,sp,8
  820934:	f800283a 	ret

00820938 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  820938:	defffc04 	addi	sp,sp,-16
  82093c:	df000315 	stw	fp,12(sp)
  820940:	df000304 	addi	fp,sp,12
  820944:	e13ffe15 	stw	r4,-8(fp)
  820948:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  82094c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  820950:	e0bfff17 	ldw	r2,-4(fp)
  820954:	1004c03a 	cmpne	r2,r2,zero
  820958:	1000061e 	bne	r2,zero,820974 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  82095c:	e0bffe17 	ldw	r2,-8(fp)
  820960:	1007883a 	mov	r3,r2
  820964:	e0bffd03 	ldbu	r2,-12(fp)
  820968:	10c4b03a 	or	r2,r2,r3
  82096c:	e0bffd05 	stb	r2,-12(fp)
  820970:	00000806 	br	820994 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  820974:	e0bffe17 	ldw	r2,-8(fp)
  820978:	1007883a 	mov	r3,r2
  82097c:	e0bffd03 	ldbu	r2,-12(fp)
  820980:	10c4b03a 	or	r2,r2,r3
  820984:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  820988:	e0bffd03 	ldbu	r2,-12(fp)
  82098c:	10801014 	ori	r2,r2,64
  820990:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  820994:	e0fffd03 	ldbu	r3,-12(fp)
  820998:	00bfe004 	movi	r2,-128
  82099c:	1884b03a 	or	r2,r3,r2
  8209a0:	10803fcc 	andi	r2,r2,255
}
  8209a4:	e037883a 	mov	sp,fp
  8209a8:	df000017 	ldw	fp,0(sp)
  8209ac:	dec00104 	addi	sp,sp,4
  8209b0:	f800283a 	ret

008209b4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  8209b4:	defffd04 	addi	sp,sp,-12
  8209b8:	df000215 	stw	fp,8(sp)
  8209bc:	df000204 	addi	fp,sp,8
  8209c0:	e13ffe15 	stw	r4,-8(fp)
  8209c4:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  8209c8:	e0bffe17 	ldw	r2,-8(fp)
  8209cc:	10800a17 	ldw	r2,40(r2)
  8209d0:	e0ffff03 	ldbu	r3,-4(fp)
  8209d4:	10c00025 	stbio	r3,0(r2)
}
  8209d8:	e037883a 	mov	sp,fp
  8209dc:	df000017 	ldw	fp,0(sp)
  8209e0:	dec00104 	addi	sp,sp,4
  8209e4:	f800283a 	ret

008209e8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  8209e8:	defffe04 	addi	sp,sp,-8
  8209ec:	df000115 	stw	fp,4(sp)
  8209f0:	df000104 	addi	fp,sp,4
  8209f4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  8209f8:	e0bfff17 	ldw	r2,-4(fp)
  8209fc:	10800a17 	ldw	r2,40(r2)
  820a00:	1007883a 	mov	r3,r2
  820a04:	00800044 	movi	r2,1
  820a08:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  820a0c:	e037883a 	mov	sp,fp
  820a10:	df000017 	ldw	fp,0(sp)
  820a14:	dec00104 	addi	sp,sp,4
  820a18:	f800283a 	ret

00820a1c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  820a1c:	defffc04 	addi	sp,sp,-16
  820a20:	dfc00315 	stw	ra,12(sp)
  820a24:	df000215 	stw	fp,8(sp)
  820a28:	df000204 	addi	fp,sp,8
  820a2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  820a30:	e13fff17 	ldw	r4,-4(fp)
  820a34:	014020f4 	movhi	r5,131
  820a38:	29406104 	addi	r5,r5,388
  820a3c:	08277040 	call	827704 <alt_find_dev>
  820a40:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  820a44:	e0bffe17 	ldw	r2,-8(fp)
}
  820a48:	e037883a 	mov	sp,fp
  820a4c:	dfc00117 	ldw	ra,4(sp)
  820a50:	df000017 	ldw	fp,0(sp)
  820a54:	dec00204 	addi	sp,sp,8
  820a58:	f800283a 	ret

00820a5c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  820a5c:	defffb04 	addi	sp,sp,-20
  820a60:	df000415 	stw	fp,16(sp)
  820a64:	df000404 	addi	fp,sp,16
  820a68:	e13ffd15 	stw	r4,-12(fp)
  820a6c:	e17ffe15 	stw	r5,-8(fp)
  820a70:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  820a74:	e03ffc15 	stw	zero,-16(fp)
  820a78:	00000f06 	br	820ab8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  820a7c:	e0bffd17 	ldw	r2,-12(fp)
  820a80:	10800a17 	ldw	r2,40(r2)
  820a84:	11000044 	addi	r4,r2,1
  820a88:	e0fffc17 	ldw	r3,-16(fp)
  820a8c:	e0bffe17 	ldw	r2,-8(fp)
  820a90:	1885883a 	add	r2,r3,r2
  820a94:	10800003 	ldbu	r2,0(r2)
  820a98:	10c03fcc 	andi	r3,r2,255
  820a9c:	18c0201c 	xori	r3,r3,128
  820aa0:	18ffe004 	addi	r3,r3,-128
  820aa4:	2005883a 	mov	r2,r4
  820aa8:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  820aac:	e0bffc17 	ldw	r2,-16(fp)
  820ab0:	10800044 	addi	r2,r2,1
  820ab4:	e0bffc15 	stw	r2,-16(fp)
  820ab8:	e0fffc17 	ldw	r3,-16(fp)
  820abc:	e0bfff17 	ldw	r2,-4(fp)
  820ac0:	18bfee36 	bltu	r3,r2,820a7c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  820ac4:	e037883a 	mov	sp,fp
  820ac8:	df000017 	ldw	fp,0(sp)
  820acc:	dec00104 	addi	sp,sp,4
  820ad0:	f800283a 	ret

00820ad4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  820ad4:	defffd04 	addi	sp,sp,-12
  820ad8:	df000215 	stw	fp,8(sp)
  820adc:	df000204 	addi	fp,sp,8
  820ae0:	e13ffe15 	stw	r4,-8(fp)
  820ae4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  820ae8:	00000d06 	br	820b20 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  820aec:	e0bffe17 	ldw	r2,-8(fp)
  820af0:	10800a17 	ldw	r2,40(r2)
  820af4:	11000044 	addi	r4,r2,1
  820af8:	e0bfff17 	ldw	r2,-4(fp)
  820afc:	10800003 	ldbu	r2,0(r2)
  820b00:	10c03fcc 	andi	r3,r2,255
  820b04:	18c0201c 	xori	r3,r3,128
  820b08:	18ffe004 	addi	r3,r3,-128
  820b0c:	2005883a 	mov	r2,r4
  820b10:	10c00025 	stbio	r3,0(r2)
		++ptr;
  820b14:	e0bfff17 	ldw	r2,-4(fp)
  820b18:	10800044 	addi	r2,r2,1
  820b1c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  820b20:	e0bfff17 	ldw	r2,-4(fp)
  820b24:	10800003 	ldbu	r2,0(r2)
  820b28:	10803fcc 	andi	r2,r2,255
  820b2c:	1080201c 	xori	r2,r2,128
  820b30:	10bfe004 	addi	r2,r2,-128
  820b34:	1004c03a 	cmpne	r2,r2,zero
  820b38:	103fec1e 	bne	r2,zero,820aec <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  820b3c:	e037883a 	mov	sp,fp
  820b40:	df000017 	ldw	fp,0(sp)
  820b44:	dec00104 	addi	sp,sp,4
  820b48:	f800283a 	ret

00820b4c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  820b4c:	defffb04 	addi	sp,sp,-20
  820b50:	dfc00415 	stw	ra,16(sp)
  820b54:	df000315 	stw	fp,12(sp)
  820b58:	df000304 	addi	fp,sp,12
  820b5c:	e13ffd15 	stw	r4,-12(fp)
  820b60:	e17ffe15 	stw	r5,-8(fp)
  820b64:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  820b68:	e0bffd17 	ldw	r2,-12(fp)
  820b6c:	10800017 	ldw	r2,0(r2)
  820b70:	1009883a 	mov	r4,r2
  820b74:	e1bfff17 	ldw	r6,-4(fp)
  820b78:	e17ffe17 	ldw	r5,-8(fp)
  820b7c:	0820a5c0 	call	820a5c <alt_up_character_lcd_write>
	return 0;
  820b80:	0005883a 	mov	r2,zero
}
  820b84:	e037883a 	mov	sp,fp
  820b88:	dfc00117 	ldw	ra,4(sp)
  820b8c:	df000017 	ldw	fp,0(sp)
  820b90:	dec00204 	addi	sp,sp,8
  820b94:	f800283a 	ret

00820b98 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  820b98:	defff904 	addi	sp,sp,-28
  820b9c:	dfc00615 	stw	ra,24(sp)
  820ba0:	df000515 	stw	fp,20(sp)
  820ba4:	df000504 	addi	fp,sp,20
  820ba8:	e13ffc15 	stw	r4,-16(fp)
  820bac:	e17ffd15 	stw	r5,-12(fp)
  820bb0:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  820bb4:	e0bffd17 	ldw	r2,-12(fp)
  820bb8:	10800a28 	cmpgeui	r2,r2,40
  820bbc:	1000031e 	bne	r2,zero,820bcc <alt_up_character_lcd_set_cursor_pos+0x34>
  820bc0:	e0bffe17 	ldw	r2,-8(fp)
  820bc4:	108000b0 	cmpltui	r2,r2,2
  820bc8:	1000031e 	bne	r2,zero,820bd8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  820bcc:	00bfffc4 	movi	r2,-1
  820bd0:	e0bfff15 	stw	r2,-4(fp)
  820bd4:	00000806 	br	820bf8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  820bd8:	e13ffd17 	ldw	r4,-12(fp)
  820bdc:	e17ffe17 	ldw	r5,-8(fp)
  820be0:	08209380 	call	820938 <get_DDRAM_addr>
  820be4:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  820be8:	e17ffb03 	ldbu	r5,-20(fp)
  820bec:	e13ffc17 	ldw	r4,-16(fp)
  820bf0:	08209b40 	call	8209b4 <alt_up_character_lcd_send_cmd>
	return 0;
  820bf4:	e03fff15 	stw	zero,-4(fp)
  820bf8:	e0bfff17 	ldw	r2,-4(fp)
}
  820bfc:	e037883a 	mov	sp,fp
  820c00:	dfc00117 	ldw	ra,4(sp)
  820c04:	df000017 	ldw	fp,0(sp)
  820c08:	dec00204 	addi	sp,sp,8
  820c0c:	f800283a 	ret

00820c10 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  820c10:	defff904 	addi	sp,sp,-28
  820c14:	dfc00615 	stw	ra,24(sp)
  820c18:	df000515 	stw	fp,20(sp)
  820c1c:	df000504 	addi	fp,sp,20
  820c20:	e13ffc15 	stw	r4,-16(fp)
  820c24:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  820c28:	e0bffd17 	ldw	r2,-12(fp)
  820c2c:	1005003a 	cmpeq	r2,r2,zero
  820c30:	10001e1e 	bne	r2,zero,820cac <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  820c34:	e0bffd17 	ldw	r2,-12(fp)
  820c38:	10800050 	cmplti	r2,r2,1
  820c3c:	1000031e 	bne	r2,zero,820c4c <alt_up_character_lcd_shift_cursor+0x3c>
  820c40:	00800504 	movi	r2,20
  820c44:	e0bfff05 	stb	r2,-4(fp)
  820c48:	00000206 	br	820c54 <alt_up_character_lcd_shift_cursor+0x44>
  820c4c:	00c00404 	movi	r3,16
  820c50:	e0ffff05 	stb	r3,-4(fp)
  820c54:	e0bfff03 	ldbu	r2,-4(fp)
  820c58:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  820c5c:	e0fffd17 	ldw	r3,-12(fp)
  820c60:	e0fffe15 	stw	r3,-8(fp)
  820c64:	e0fffe17 	ldw	r3,-8(fp)
  820c68:	1804403a 	cmpge	r2,r3,zero
  820c6c:	1000031e 	bne	r2,zero,820c7c <alt_up_character_lcd_shift_cursor+0x6c>
  820c70:	e0bffe17 	ldw	r2,-8(fp)
  820c74:	0085c83a 	sub	r2,zero,r2
  820c78:	e0bffe15 	stw	r2,-8(fp)
  820c7c:	e0fffe17 	ldw	r3,-8(fp)
  820c80:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  820c84:	00000306 	br	820c94 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  820c88:	e17ffb43 	ldbu	r5,-19(fp)
  820c8c:	e13ffc17 	ldw	r4,-16(fp)
  820c90:	08209b40 	call	8209b4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  820c94:	e0bffb03 	ldbu	r2,-20(fp)
  820c98:	10bfffc4 	addi	r2,r2,-1
  820c9c:	e0bffb05 	stb	r2,-20(fp)
  820ca0:	e0bffb03 	ldbu	r2,-20(fp)
  820ca4:	10803fd8 	cmpnei	r2,r2,255
  820ca8:	103ff71e 	bne	r2,zero,820c88 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  820cac:	e037883a 	mov	sp,fp
  820cb0:	dfc00117 	ldw	ra,4(sp)
  820cb4:	df000017 	ldw	fp,0(sp)
  820cb8:	dec00204 	addi	sp,sp,8
  820cbc:	f800283a 	ret

00820cc0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  820cc0:	defff904 	addi	sp,sp,-28
  820cc4:	dfc00615 	stw	ra,24(sp)
  820cc8:	df000515 	stw	fp,20(sp)
  820ccc:	df000504 	addi	fp,sp,20
  820cd0:	e13ffc15 	stw	r4,-16(fp)
  820cd4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  820cd8:	e0bffd17 	ldw	r2,-12(fp)
  820cdc:	1005003a 	cmpeq	r2,r2,zero
  820ce0:	10001e1e 	bne	r2,zero,820d5c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  820ce4:	e0bffd17 	ldw	r2,-12(fp)
  820ce8:	10800050 	cmplti	r2,r2,1
  820cec:	1000031e 	bne	r2,zero,820cfc <alt_up_character_lcd_shift_display+0x3c>
  820cf0:	00800704 	movi	r2,28
  820cf4:	e0bfff05 	stb	r2,-4(fp)
  820cf8:	00000206 	br	820d04 <alt_up_character_lcd_shift_display+0x44>
  820cfc:	00c00604 	movi	r3,24
  820d00:	e0ffff05 	stb	r3,-4(fp)
  820d04:	e0bfff03 	ldbu	r2,-4(fp)
  820d08:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  820d0c:	e0fffd17 	ldw	r3,-12(fp)
  820d10:	e0fffe15 	stw	r3,-8(fp)
  820d14:	e0fffe17 	ldw	r3,-8(fp)
  820d18:	1804403a 	cmpge	r2,r3,zero
  820d1c:	1000031e 	bne	r2,zero,820d2c <alt_up_character_lcd_shift_display+0x6c>
  820d20:	e0bffe17 	ldw	r2,-8(fp)
  820d24:	0085c83a 	sub	r2,zero,r2
  820d28:	e0bffe15 	stw	r2,-8(fp)
  820d2c:	e0fffe17 	ldw	r3,-8(fp)
  820d30:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  820d34:	00000306 	br	820d44 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  820d38:	e17ffb43 	ldbu	r5,-19(fp)
  820d3c:	e13ffc17 	ldw	r4,-16(fp)
  820d40:	08209b40 	call	8209b4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  820d44:	e0bffb03 	ldbu	r2,-20(fp)
  820d48:	10bfffc4 	addi	r2,r2,-1
  820d4c:	e0bffb05 	stb	r2,-20(fp)
  820d50:	e0bffb03 	ldbu	r2,-20(fp)
  820d54:	10803fd8 	cmpnei	r2,r2,255
  820d58:	103ff71e 	bne	r2,zero,820d38 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  820d5c:	e037883a 	mov	sp,fp
  820d60:	dfc00117 	ldw	ra,4(sp)
  820d64:	df000017 	ldw	fp,0(sp)
  820d68:	dec00204 	addi	sp,sp,8
  820d6c:	f800283a 	ret

00820d70 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  820d70:	defff904 	addi	sp,sp,-28
  820d74:	dfc00615 	stw	ra,24(sp)
  820d78:	df000515 	stw	fp,20(sp)
  820d7c:	df000504 	addi	fp,sp,20
  820d80:	e13ffc15 	stw	r4,-16(fp)
  820d84:	e17ffd15 	stw	r5,-12(fp)
  820d88:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  820d8c:	e0bffd17 	ldw	r2,-12(fp)
  820d90:	10800a28 	cmpgeui	r2,r2,40
  820d94:	1000031e 	bne	r2,zero,820da4 <alt_up_character_lcd_erase_pos+0x34>
  820d98:	e0bffe17 	ldw	r2,-8(fp)
  820d9c:	108000b0 	cmpltui	r2,r2,2
  820da0:	1000031e 	bne	r2,zero,820db0 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  820da4:	00bfffc4 	movi	r2,-1
  820da8:	e0bfff15 	stw	r2,-4(fp)
  820dac:	00000e06 	br	820de8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  820db0:	e13ffd17 	ldw	r4,-12(fp)
  820db4:	e17ffe17 	ldw	r5,-8(fp)
  820db8:	08209380 	call	820938 <get_DDRAM_addr>
  820dbc:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  820dc0:	e17ffb03 	ldbu	r5,-20(fp)
  820dc4:	e13ffc17 	ldw	r4,-16(fp)
  820dc8:	08209b40 	call	8209b4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  820dcc:	e0bffc17 	ldw	r2,-16(fp)
  820dd0:	10800a17 	ldw	r2,40(r2)
  820dd4:	10800044 	addi	r2,r2,1
  820dd8:	1007883a 	mov	r3,r2
  820ddc:	00800084 	movi	r2,2
  820de0:	18800025 	stbio	r2,0(r3)
	return 0;
  820de4:	e03fff15 	stw	zero,-4(fp)
  820de8:	e0bfff17 	ldw	r2,-4(fp)
}
  820dec:	e037883a 	mov	sp,fp
  820df0:	dfc00117 	ldw	ra,4(sp)
  820df4:	df000017 	ldw	fp,0(sp)
  820df8:	dec00204 	addi	sp,sp,8
  820dfc:	f800283a 	ret

00820e00 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  820e00:	defffd04 	addi	sp,sp,-12
  820e04:	dfc00215 	stw	ra,8(sp)
  820e08:	df000115 	stw	fp,4(sp)
  820e0c:	df000104 	addi	fp,sp,4
  820e10:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  820e14:	e13fff17 	ldw	r4,-4(fp)
  820e18:	01400304 	movi	r5,12
  820e1c:	08209b40 	call	8209b4 <alt_up_character_lcd_send_cmd>
}
  820e20:	e037883a 	mov	sp,fp
  820e24:	dfc00117 	ldw	ra,4(sp)
  820e28:	df000017 	ldw	fp,0(sp)
  820e2c:	dec00204 	addi	sp,sp,8
  820e30:	f800283a 	ret

00820e34 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  820e34:	defffd04 	addi	sp,sp,-12
  820e38:	dfc00215 	stw	ra,8(sp)
  820e3c:	df000115 	stw	fp,4(sp)
  820e40:	df000104 	addi	fp,sp,4
  820e44:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  820e48:	e13fff17 	ldw	r4,-4(fp)
  820e4c:	014003c4 	movi	r5,15
  820e50:	08209b40 	call	8209b4 <alt_up_character_lcd_send_cmd>
}
  820e54:	e037883a 	mov	sp,fp
  820e58:	dfc00117 	ldw	ra,4(sp)
  820e5c:	df000017 	ldw	fp,0(sp)
  820e60:	dec00204 	addi	sp,sp,8
  820e64:	f800283a 	ret

00820e68 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
  820e68:	defffd04 	addi	sp,sp,-12
  820e6c:	df000215 	stw	fp,8(sp)
  820e70:	df000204 	addi	fp,sp,8
  820e74:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
  820e78:	e0bfff17 	ldw	r2,-4(fp)
  820e7c:	1080400c 	andi	r2,r2,256
  820e80:	1004d23a 	srli	r2,r2,8
  820e84:	e0bffe05 	stb	r2,-8(fp)
	return ri;
  820e88:	e0bffe03 	ldbu	r2,-8(fp)
}
  820e8c:	e037883a 	mov	sp,fp
  820e90:	df000017 	ldw	fp,0(sp)
  820e94:	dec00104 	addi	sp,sp,4
  820e98:	f800283a 	ret

00820e9c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
  820e9c:	defffd04 	addi	sp,sp,-12
  820ea0:	df000215 	stw	fp,8(sp)
  820ea4:	df000204 	addi	fp,sp,8
  820ea8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
  820eac:	e0bfff17 	ldw	r2,-4(fp)
  820eb0:	1080004c 	andi	r2,r2,1
  820eb4:	e0bffe05 	stb	r2,-8(fp)
	return re;
  820eb8:	e0bffe03 	ldbu	r2,-8(fp)
}
  820ebc:	e037883a 	mov	sp,fp
  820ec0:	df000017 	ldw	fp,0(sp)
  820ec4:	dec00104 	addi	sp,sp,4
  820ec8:	f800283a 	ret

00820ecc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
  820ecc:	defffd04 	addi	sp,sp,-12
  820ed0:	df000215 	stw	fp,8(sp)
  820ed4:	df000204 	addi	fp,sp,8
  820ed8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
  820edc:	e0bfff17 	ldw	r2,-4(fp)
  820ee0:	1081000c 	andi	r2,r2,1024
  820ee4:	1004d2ba 	srli	r2,r2,10
  820ee8:	e0bffe05 	stb	r2,-8(fp)
	return re;
  820eec:	e0bffe03 	ldbu	r2,-8(fp)
}
  820ef0:	e037883a 	mov	sp,fp
  820ef4:	df000017 	ldw	fp,0(sp)
  820ef8:	dec00104 	addi	sp,sp,4
  820efc:	f800283a 	ret

00820f00 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
  820f00:	defffd04 	addi	sp,sp,-12
  820f04:	df000215 	stw	fp,8(sp)
  820f08:	df000204 	addi	fp,sp,8
  820f0c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
  820f10:	e0bfff17 	ldw	r2,-4(fp)
  820f14:	10bfffec 	andhi	r2,r2,65535
  820f18:	1004d43a 	srli	r2,r2,16
  820f1c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
  820f20:	e0bffe0b 	ldhu	r2,-8(fp)
}
  820f24:	e037883a 	mov	sp,fp
  820f28:	df000017 	ldw	fp,0(sp)
  820f2c:	dec00104 	addi	sp,sp,4
  820f30:	f800283a 	ret

00820f34 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
  820f34:	defffd04 	addi	sp,sp,-12
  820f38:	df000215 	stw	fp,8(sp)
  820f3c:	df000204 	addi	fp,sp,8
  820f40:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
  820f44:	e0bfff17 	ldw	r2,-4(fp)
  820f48:	10a0000c 	andi	r2,r2,32768
  820f4c:	1004d3fa 	srli	r2,r2,15
  820f50:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
  820f54:	e0bffe03 	ldbu	r2,-8(fp)
}
  820f58:	e037883a 	mov	sp,fp
  820f5c:	df000017 	ldw	fp,0(sp)
  820f60:	dec00104 	addi	sp,sp,4
  820f64:	f800283a 	ret

00820f68 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
  820f68:	defffd04 	addi	sp,sp,-12
  820f6c:	df000215 	stw	fp,8(sp)
  820f70:	df000204 	addi	fp,sp,8
  820f74:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
  820f78:	e0bfff17 	ldw	r2,-4(fp)
  820f7c:	e0bffe05 	stb	r2,-8(fp)
	return data;
  820f80:	e0bffe03 	ldbu	r2,-8(fp)
}
  820f84:	e037883a 	mov	sp,fp
  820f88:	df000017 	ldw	fp,0(sp)
  820f8c:	dec00104 	addi	sp,sp,4
  820f90:	f800283a 	ret

00820f94 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
  820f94:	defffb04 	addi	sp,sp,-20
  820f98:	dfc00415 	stw	ra,16(sp)
  820f9c:	df000315 	stw	fp,12(sp)
  820fa0:	df000304 	addi	fp,sp,12
  820fa4:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
  820fa8:	e13fff17 	ldw	r4,-4(fp)
  820fac:	01403fc4 	movi	r5,255
  820fb0:	08211f40 	call	8211f4 <alt_up_ps2_write_data_byte_with_ack>
  820fb4:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
  820fb8:	e0bffd17 	ldw	r2,-12(fp)
  820fbc:	1004c03a 	cmpne	r2,r2,zero
  820fc0:	1000221e 	bne	r2,zero,82104c <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
  820fc4:	e17ffe04 	addi	r5,fp,-8
  820fc8:	e13fff17 	ldw	r4,-4(fp)
  820fcc:	08212600 	call	821260 <alt_up_ps2_read_data_byte_timeout>
  820fd0:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
  820fd4:	e0bffd17 	ldw	r2,-12(fp)
  820fd8:	1004c03a 	cmpne	r2,r2,zero
  820fdc:	10001b1e 	bne	r2,zero,82104c <alt_up_ps2_init+0xb8>
  820fe0:	e0bffe03 	ldbu	r2,-8(fp)
  820fe4:	10803fcc 	andi	r2,r2,255
  820fe8:	10802a98 	cmpnei	r2,r2,170
  820fec:	1000171e 	bne	r2,zero,82104c <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
  820ff0:	e17ffe04 	addi	r5,fp,-8
  820ff4:	e13fff17 	ldw	r4,-4(fp)
  820ff8:	08212600 	call	821260 <alt_up_ps2_read_data_byte_timeout>
  820ffc:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
  821000:	e0bffd17 	ldw	r2,-12(fp)
  821004:	10bfe318 	cmpnei	r2,r2,-116
  821008:	1000041e 	bne	r2,zero,82101c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
  82100c:	e0ffff17 	ldw	r3,-4(fp)
  821010:	00800044 	movi	r2,1
  821014:	18800d15 	stw	r2,52(r3)
  821018:	00000c06 	br	82104c <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
  82101c:	e0bffd17 	ldw	r2,-12(fp)
  821020:	1004c03a 	cmpne	r2,r2,zero
  821024:	1000091e 	bne	r2,zero,82104c <alt_up_ps2_init+0xb8>
  821028:	e0bffe03 	ldbu	r2,-8(fp)
  82102c:	10803fcc 	andi	r2,r2,255
  821030:	1004c03a 	cmpne	r2,r2,zero
  821034:	1000051e 	bne	r2,zero,82104c <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
  821038:	e0bfff17 	ldw	r2,-4(fp)
  82103c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
  821040:	e13fff17 	ldw	r4,-4(fp)
  821044:	01403d04 	movi	r5,244
  821048:	082110c0 	call	82110c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
  82104c:	e037883a 	mov	sp,fp
  821050:	dfc00117 	ldw	ra,4(sp)
  821054:	df000017 	ldw	fp,0(sp)
  821058:	dec00204 	addi	sp,sp,8
  82105c:	f800283a 	ret

00821060 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
  821060:	defffd04 	addi	sp,sp,-12
  821064:	df000215 	stw	fp,8(sp)
  821068:	df000204 	addi	fp,sp,8
  82106c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
  821070:	e0bfff17 	ldw	r2,-4(fp)
  821074:	10800a17 	ldw	r2,40(r2)
  821078:	10800104 	addi	r2,r2,4
  82107c:	10800037 	ldwio	r2,0(r2)
  821080:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
  821084:	e0bffe17 	ldw	r2,-8(fp)
  821088:	10800054 	ori	r2,r2,1
  82108c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
  821090:	e0bfff17 	ldw	r2,-4(fp)
  821094:	10800a17 	ldw	r2,40(r2)
  821098:	10800104 	addi	r2,r2,4
  82109c:	e0fffe17 	ldw	r3,-8(fp)
  8210a0:	10c00035 	stwio	r3,0(r2)
}
  8210a4:	e037883a 	mov	sp,fp
  8210a8:	df000017 	ldw	fp,0(sp)
  8210ac:	dec00104 	addi	sp,sp,4
  8210b0:	f800283a 	ret

008210b4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
  8210b4:	defffd04 	addi	sp,sp,-12
  8210b8:	df000215 	stw	fp,8(sp)
  8210bc:	df000204 	addi	fp,sp,8
  8210c0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
  8210c4:	e0bfff17 	ldw	r2,-4(fp)
  8210c8:	10800a17 	ldw	r2,40(r2)
  8210cc:	10800104 	addi	r2,r2,4
  8210d0:	10800037 	ldwio	r2,0(r2)
  8210d4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
  8210d8:	e0fffe17 	ldw	r3,-8(fp)
  8210dc:	00bfff84 	movi	r2,-2
  8210e0:	1884703a 	and	r2,r3,r2
  8210e4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
  8210e8:	e0bfff17 	ldw	r2,-4(fp)
  8210ec:	10800a17 	ldw	r2,40(r2)
  8210f0:	10800104 	addi	r2,r2,4
  8210f4:	e0fffe17 	ldw	r3,-8(fp)
  8210f8:	10c00035 	stwio	r3,0(r2)
}
  8210fc:	e037883a 	mov	sp,fp
  821100:	df000017 	ldw	fp,0(sp)
  821104:	dec00104 	addi	sp,sp,4
  821108:	f800283a 	ret

0082110c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
  82110c:	defffa04 	addi	sp,sp,-24
  821110:	dfc00515 	stw	ra,20(sp)
  821114:	df000415 	stw	fp,16(sp)
  821118:	df000404 	addi	fp,sp,16
  82111c:	e13ffd15 	stw	r4,-12(fp)
  821120:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
  821124:	e0bffd17 	ldw	r2,-12(fp)
  821128:	10800a17 	ldw	r2,40(r2)
  82112c:	e0fffe03 	ldbu	r3,-8(fp)
  821130:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
  821134:	e0bffd17 	ldw	r2,-12(fp)
  821138:	10800a17 	ldw	r2,40(r2)
  82113c:	10800104 	addi	r2,r2,4
  821140:	10800037 	ldwio	r2,0(r2)
  821144:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
  821148:	e13ffc17 	ldw	r4,-16(fp)
  82114c:	0820ecc0 	call	820ecc <read_CE_bit>
  821150:	10803fcc 	andi	r2,r2,255
  821154:	1005003a 	cmpeq	r2,r2,zero
  821158:	1000031e 	bne	r2,zero,821168 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
  82115c:	00bffec4 	movi	r2,-5
  821160:	e0bfff15 	stw	r2,-4(fp)
  821164:	00000106 	br	82116c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
  821168:	e03fff15 	stw	zero,-4(fp)
  82116c:	e0bfff17 	ldw	r2,-4(fp)
}
  821170:	e037883a 	mov	sp,fp
  821174:	dfc00117 	ldw	ra,4(sp)
  821178:	df000017 	ldw	fp,0(sp)
  82117c:	dec00204 	addi	sp,sp,8
  821180:	f800283a 	ret

00821184 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
  821184:	defffb04 	addi	sp,sp,-20
  821188:	dfc00415 	stw	ra,16(sp)
  82118c:	df000315 	stw	fp,12(sp)
  821190:	df000304 	addi	fp,sp,12
  821194:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
  821198:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
  82119c:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
  8211a0:	e17ffd44 	addi	r5,fp,-11
  8211a4:	e13ffe17 	ldw	r4,-8(fp)
  8211a8:	08212600 	call	821260 <alt_up_ps2_read_data_byte_timeout>
  8211ac:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
  8211b0:	e0bffd03 	ldbu	r2,-12(fp)
  8211b4:	1004c03a 	cmpne	r2,r2,zero
  8211b8:	1000061e 	bne	r2,zero,8211d4 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
  8211bc:	e0bffd43 	ldbu	r2,-11(fp)
  8211c0:	10803fcc 	andi	r2,r2,255
  8211c4:	10803e98 	cmpnei	r2,r2,250
  8211c8:	103ff51e 	bne	r2,zero,8211a0 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
  8211cc:	e03fff15 	stw	zero,-4(fp)
  8211d0:	00000206 	br	8211dc <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
  8211d4:	e0bffd03 	ldbu	r2,-12(fp)
  8211d8:	e0bfff15 	stw	r2,-4(fp)
  8211dc:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
  8211e0:	e037883a 	mov	sp,fp
  8211e4:	dfc00117 	ldw	ra,4(sp)
  8211e8:	df000017 	ldw	fp,0(sp)
  8211ec:	dec00204 	addi	sp,sp,8
  8211f0:	f800283a 	ret

008211f4 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
  8211f4:	defff904 	addi	sp,sp,-28
  8211f8:	dfc00615 	stw	ra,24(sp)
  8211fc:	df000515 	stw	fp,20(sp)
  821200:	df000504 	addi	fp,sp,20
  821204:	e13ffd15 	stw	r4,-12(fp)
  821208:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
  82120c:	e17ffe03 	ldbu	r5,-8(fp)
  821210:	e13ffd17 	ldw	r4,-12(fp)
  821214:	082110c0 	call	82110c <alt_up_ps2_write_data_byte>
  821218:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
  82121c:	e0bffc17 	ldw	r2,-16(fp)
  821220:	1005003a 	cmpeq	r2,r2,zero
  821224:	1000031e 	bne	r2,zero,821234 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
  821228:	e0bffc17 	ldw	r2,-16(fp)
  82122c:	e0bfff15 	stw	r2,-4(fp)
  821230:	00000506 	br	821248 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
  821234:	e13ffd17 	ldw	r4,-12(fp)
  821238:	08211840 	call	821184 <alt_up_ps2_wait_for_ack>
  82123c:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
  821240:	e0bffb17 	ldw	r2,-20(fp)
  821244:	e0bfff15 	stw	r2,-4(fp)
  821248:	e0bfff17 	ldw	r2,-4(fp)
}
  82124c:	e037883a 	mov	sp,fp
  821250:	dfc00117 	ldw	ra,4(sp)
  821254:	df000017 	ldw	fp,0(sp)
  821258:	dec00204 	addi	sp,sp,8
  82125c:	f800283a 	ret

00821260 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
  821260:	defff904 	addi	sp,sp,-28
  821264:	dfc00615 	stw	ra,24(sp)
  821268:	df000515 	stw	fp,20(sp)
  82126c:	df000504 	addi	fp,sp,20
  821270:	e13ffd15 	stw	r4,-12(fp)
  821274:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
  821278:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
  82127c:	e03ffb15 	stw	zero,-20(fp)
  821280:	00000006 	br	821284 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
  821284:	e0bffb17 	ldw	r2,-20(fp)
  821288:	10800044 	addi	r2,r2,1
  82128c:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  821290:	e0bffd17 	ldw	r2,-12(fp)
  821294:	10800a17 	ldw	r2,40(r2)
  821298:	10800037 	ldwio	r2,0(r2)
  82129c:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
  8212a0:	e13ffc17 	ldw	r4,-16(fp)
  8212a4:	0820f340 	call	820f34 <read_data_valid>
  8212a8:	10803fcc 	andi	r2,r2,255
  8212ac:	1005003a 	cmpeq	r2,r2,zero
  8212b0:	1000071e 	bne	r2,zero,8212d0 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
  8212b4:	e13ffc17 	ldw	r4,-16(fp)
  8212b8:	0820f680 	call	820f68 <read_data_byte>
  8212bc:	1007883a 	mov	r3,r2
  8212c0:	e0bffe17 	ldw	r2,-8(fp)
  8212c4:	10c00005 	stb	r3,0(r2)
			return 0;
  8212c8:	e03fff15 	stw	zero,-4(fp)
  8212cc:	00000a06 	br	8212f8 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  8212d0:	e0bffd17 	ldw	r2,-12(fp)
  8212d4:	10800c17 	ldw	r2,48(r2)
  8212d8:	1005003a 	cmpeq	r2,r2,zero
  8212dc:	103fe91e 	bne	r2,zero,821284 <alt_up_ps2_read_data_byte_timeout+0x24>
  8212e0:	e0bffd17 	ldw	r2,-12(fp)
  8212e4:	10c00c17 	ldw	r3,48(r2)
  8212e8:	e0bffb17 	ldw	r2,-20(fp)
  8212ec:	18bfe52e 	bgeu	r3,r2,821284 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
  8212f0:	00bfe304 	movi	r2,-116
  8212f4:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
  8212f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8212fc:	e037883a 	mov	sp,fp
  821300:	dfc00117 	ldw	ra,4(sp)
  821304:	df000017 	ldw	fp,0(sp)
  821308:	dec00204 	addi	sp,sp,8
  82130c:	f800283a 	ret

00821310 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
  821310:	defffa04 	addi	sp,sp,-24
  821314:	dfc00515 	stw	ra,20(sp)
  821318:	df000415 	stw	fp,16(sp)
  82131c:	df000404 	addi	fp,sp,16
  821320:	e13ffd15 	stw	r4,-12(fp)
  821324:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
  821328:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  82132c:	e0bffd17 	ldw	r2,-12(fp)
  821330:	10800a17 	ldw	r2,40(r2)
  821334:	10800037 	ldwio	r2,0(r2)
  821338:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
  82133c:	e13ffc17 	ldw	r4,-16(fp)
  821340:	0820f340 	call	820f34 <read_data_valid>
  821344:	10803fcc 	andi	r2,r2,255
  821348:	1005003a 	cmpeq	r2,r2,zero
  82134c:	1000071e 	bne	r2,zero,82136c <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
  821350:	e13ffc17 	ldw	r4,-16(fp)
  821354:	0820f680 	call	820f68 <read_data_byte>
  821358:	1007883a 	mov	r3,r2
  82135c:	e0bffe17 	ldw	r2,-8(fp)
  821360:	10c00005 	stb	r3,0(r2)
		return 0;
  821364:	e03fff15 	stw	zero,-4(fp)
  821368:	00000206 	br	821374 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
  82136c:	00bfffc4 	movi	r2,-1
  821370:	e0bfff15 	stw	r2,-4(fp)
  821374:	e0bfff17 	ldw	r2,-4(fp)
}
  821378:	e037883a 	mov	sp,fp
  82137c:	dfc00117 	ldw	ra,4(sp)
  821380:	df000017 	ldw	fp,0(sp)
  821384:	dec00204 	addi	sp,sp,8
  821388:	f800283a 	ret

0082138c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
  82138c:	defffb04 	addi	sp,sp,-20
  821390:	dfc00415 	stw	ra,16(sp)
  821394:	df000315 	stw	fp,12(sp)
  821398:	df000304 	addi	fp,sp,12
  82139c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
  8213a0:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
  8213a4:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  8213a8:	e0bfff17 	ldw	r2,-4(fp)
  8213ac:	10800a17 	ldw	r2,40(r2)
  8213b0:	10800037 	ldwio	r2,0(r2)
  8213b4:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
  8213b8:	e13ffd17 	ldw	r4,-12(fp)
  8213bc:	0820f000 	call	820f00 <read_num_bytes_available>
  8213c0:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
  8213c4:	e0bffe0b 	ldhu	r2,-8(fp)
  8213c8:	1004c03a 	cmpne	r2,r2,zero
  8213cc:	103ff61e 	bne	r2,zero,8213a8 <alt_up_ps2_clear_fifo+0x1c>
}
  8213d0:	e037883a 	mov	sp,fp
  8213d4:	dfc00117 	ldw	ra,4(sp)
  8213d8:	df000017 	ldw	fp,0(sp)
  8213dc:	dec00204 	addi	sp,sp,8
  8213e0:	f800283a 	ret

008213e4 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
  8213e4:	defff704 	addi	sp,sp,-36
  8213e8:	dfc00815 	stw	ra,32(sp)
  8213ec:	df000715 	stw	fp,28(sp)
  8213f0:	df000704 	addi	fp,sp,28
  8213f4:	e13ffc15 	stw	r4,-16(fp)
  8213f8:	e17ffd15 	stw	r5,-12(fp)
  8213fc:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
  821400:	e0bffc17 	ldw	r2,-16(fp)
  821404:	10800017 	ldw	r2,0(r2)
  821408:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
  82140c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
  821410:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
  821414:	e0fff917 	ldw	r3,-28(fp)
  821418:	e0bffe17 	ldw	r2,-8(fp)
  82141c:	18bffd16 	blt	r3,r2,821414 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
  821420:	e17ffd17 	ldw	r5,-12(fp)
  821424:	e0bffd17 	ldw	r2,-12(fp)
  821428:	10800044 	addi	r2,r2,1
  82142c:	e0bffd15 	stw	r2,-12(fp)
  821430:	e13ffb17 	ldw	r4,-20(fp)
  821434:	08212600 	call	821260 <alt_up_ps2_read_data_byte_timeout>
  821438:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
  82143c:	e0bffa17 	ldw	r2,-24(fp)
  821440:	1005003a 	cmpeq	r2,r2,zero
  821444:	1000031e 	bne	r2,zero,821454 <alt_up_ps2_read_fd+0x70>
			return count;
  821448:	e0bff917 	ldw	r2,-28(fp)
  82144c:	e0bfff15 	stw	r2,-4(fp)
  821450:	00000506 	br	821468 <alt_up_ps2_read_fd+0x84>
		count++;
  821454:	e0bff917 	ldw	r2,-28(fp)
  821458:	10800044 	addi	r2,r2,1
  82145c:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
  821460:	e0bff917 	ldw	r2,-28(fp)
  821464:	e0bfff15 	stw	r2,-4(fp)
  821468:	e0bfff17 	ldw	r2,-4(fp)
}
  82146c:	e037883a 	mov	sp,fp
  821470:	dfc00117 	ldw	ra,4(sp)
  821474:	df000017 	ldw	fp,0(sp)
  821478:	dec00204 	addi	sp,sp,8
  82147c:	f800283a 	ret

00821480 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
  821480:	defff704 	addi	sp,sp,-36
  821484:	dfc00815 	stw	ra,32(sp)
  821488:	df000715 	stw	fp,28(sp)
  82148c:	df000704 	addi	fp,sp,28
  821490:	e13ffc15 	stw	r4,-16(fp)
  821494:	e17ffd15 	stw	r5,-12(fp)
  821498:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
  82149c:	e0bffc17 	ldw	r2,-16(fp)
  8214a0:	10800017 	ldw	r2,0(r2)
  8214a4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
  8214a8:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
  8214ac:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
  8214b0:	00001206 	br	8214fc <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
  8214b4:	e0bffd17 	ldw	r2,-12(fp)
  8214b8:	10800003 	ldbu	r2,0(r2)
  8214bc:	11403fcc 	andi	r5,r2,255
  8214c0:	e0bffd17 	ldw	r2,-12(fp)
  8214c4:	10800044 	addi	r2,r2,1
  8214c8:	e0bffd15 	stw	r2,-12(fp)
  8214cc:	e13ffb17 	ldw	r4,-20(fp)
  8214d0:	082110c0 	call	82110c <alt_up_ps2_write_data_byte>
  8214d4:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
  8214d8:	e0bffa17 	ldw	r2,-24(fp)
  8214dc:	1005003a 	cmpeq	r2,r2,zero
  8214e0:	1000031e 	bne	r2,zero,8214f0 <alt_up_ps2_write_fd+0x70>
			return count;
  8214e4:	e0bff917 	ldw	r2,-28(fp)
  8214e8:	e0bfff15 	stw	r2,-4(fp)
  8214ec:	00000806 	br	821510 <alt_up_ps2_write_fd+0x90>
		count++;
  8214f0:	e0bff917 	ldw	r2,-28(fp)
  8214f4:	10800044 	addi	r2,r2,1
  8214f8:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
  8214fc:	e0fff917 	ldw	r3,-28(fp)
  821500:	e0bffe17 	ldw	r2,-8(fp)
  821504:	18bfeb16 	blt	r3,r2,8214b4 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
  821508:	e0bff917 	ldw	r2,-28(fp)
  82150c:	e0bfff15 	stw	r2,-4(fp)
  821510:	e0bfff17 	ldw	r2,-4(fp)
}
  821514:	e037883a 	mov	sp,fp
  821518:	dfc00117 	ldw	ra,4(sp)
  82151c:	df000017 	ldw	fp,0(sp)
  821520:	dec00204 	addi	sp,sp,8
  821524:	f800283a 	ret

00821528 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
  821528:	defffc04 	addi	sp,sp,-16
  82152c:	dfc00315 	stw	ra,12(sp)
  821530:	df000215 	stw	fp,8(sp)
  821534:	df000204 	addi	fp,sp,8
  821538:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
  82153c:	e13fff17 	ldw	r4,-4(fp)
  821540:	014020f4 	movhi	r5,131
  821544:	29406104 	addi	r5,r5,388
  821548:	08277040 	call	827704 <alt_find_dev>
  82154c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  821550:	e0bffe17 	ldw	r2,-8(fp)
}
  821554:	e037883a 	mov	sp,fp
  821558:	dfc00117 	ldw	ra,4(sp)
  82155c:	df000017 	ldw	fp,0(sp)
  821560:	dec00204 	addi	sp,sp,8
  821564:	f800283a 	ret

00821568 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  821568:	defffc04 	addi	sp,sp,-16
  82156c:	dfc00315 	stw	ra,12(sp)
  821570:	df000215 	stw	fp,8(sp)
  821574:	df000204 	addi	fp,sp,8
  821578:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  82157c:	e0bfff17 	ldw	r2,-4(fp)
  821580:	10800217 	ldw	r2,8(r2)
  821584:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  821588:	00000c06 	br	8215bc <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  82158c:	e13ffe17 	ldw	r4,-8(fp)
  821590:	014020f4 	movhi	r5,131
  821594:	29645204 	addi	r5,r5,-28344
  821598:	081c2f80 	call	81c2f8 <strcmp>
  82159c:	1004c03a 	cmpne	r2,r2,zero
  8215a0:	1000031e 	bne	r2,zero,8215b0 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  8215a4:	e0bffe17 	ldw	r2,-8(fp)
  8215a8:	10000005 	stb	zero,0(r2)
			break;
  8215ac:	00000a06 	br	8215d8 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  8215b0:	e0bffe17 	ldw	r2,-8(fp)
  8215b4:	10800044 	addi	r2,r2,1
  8215b8:	e0bffe15 	stw	r2,-8(fp)
  8215bc:	e0bffe17 	ldw	r2,-8(fp)
  8215c0:	10800003 	ldbu	r2,0(r2)
  8215c4:	10803fcc 	andi	r2,r2,255
  8215c8:	1080201c 	xori	r2,r2,128
  8215cc:	10bfe004 	addi	r2,r2,-128
  8215d0:	1004c03a 	cmpne	r2,r2,zero
  8215d4:	103fed1e 	bne	r2,zero,82158c <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  8215d8:	e037883a 	mov	sp,fp
  8215dc:	dfc00117 	ldw	ra,4(sp)
  8215e0:	df000017 	ldw	fp,0(sp)
  8215e4:	dec00204 	addi	sp,sp,8
  8215e8:	f800283a 	ret

008215ec <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  8215ec:	defffc04 	addi	sp,sp,-16
  8215f0:	dfc00315 	stw	ra,12(sp)
  8215f4:	df000215 	stw	fp,8(sp)
  8215f8:	df000204 	addi	fp,sp,8
  8215fc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  821600:	e13fff17 	ldw	r4,-4(fp)
  821604:	014020f4 	movhi	r5,131
  821608:	29406104 	addi	r5,r5,388
  82160c:	08277040 	call	827704 <alt_find_dev>
  821610:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  821614:	e0bffe17 	ldw	r2,-8(fp)
}
  821618:	e037883a 	mov	sp,fp
  82161c:	dfc00117 	ldw	ra,4(sp)
  821620:	df000017 	ldw	fp,0(sp)
  821624:	dec00204 	addi	sp,sp,8
  821628:	f800283a 	ret

0082162c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  82162c:	defff904 	addi	sp,sp,-28
  821630:	df000615 	stw	fp,24(sp)
  821634:	df000604 	addi	fp,sp,24
  821638:	e13ffb15 	stw	r4,-20(fp)
  82163c:	e1bffd15 	stw	r6,-12(fp)
  821640:	e1fffe15 	stw	r7,-8(fp)
  821644:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  821648:	e0bffb17 	ldw	r2,-20(fp)
  82164c:	10c00c17 	ldw	r3,48(r2)
  821650:	e0bffd17 	ldw	r2,-12(fp)
  821654:	10c0042e 	bgeu	r2,r3,821668 <alt_up_char_buffer_draw+0x3c>
  821658:	e0bffb17 	ldw	r2,-20(fp)
  82165c:	10c00d17 	ldw	r3,52(r2)
  821660:	e0bffe17 	ldw	r2,-8(fp)
  821664:	10c00336 	bltu	r2,r3,821674 <alt_up_char_buffer_draw+0x48>
		return -1;
  821668:	00bfffc4 	movi	r2,-1
  82166c:	e0bfff15 	stw	r2,-4(fp)
  821670:	00001d06 	br	8216e8 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  821674:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  821678:	e0bffb17 	ldw	r2,-20(fp)
  82167c:	10c00f17 	ldw	r3,60(r2)
  821680:	e0bffd17 	ldw	r2,-12(fp)
  821684:	1886703a 	and	r3,r3,r2
  821688:	e0bffb17 	ldw	r2,-20(fp)
  82168c:	10800e17 	ldw	r2,56(r2)
  821690:	1886983a 	sll	r3,r3,r2
  821694:	e0bffa17 	ldw	r2,-24(fp)
  821698:	10c4b03a 	or	r2,r2,r3
  82169c:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  8216a0:	e0bffb17 	ldw	r2,-20(fp)
  8216a4:	10c01117 	ldw	r3,68(r2)
  8216a8:	e0bffe17 	ldw	r2,-8(fp)
  8216ac:	1886703a 	and	r3,r3,r2
  8216b0:	e0bffb17 	ldw	r2,-20(fp)
  8216b4:	10801017 	ldw	r2,64(r2)
  8216b8:	1886983a 	sll	r3,r3,r2
  8216bc:	e0bffa17 	ldw	r2,-24(fp)
  8216c0:	10c4b03a 	or	r2,r2,r3
  8216c4:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  8216c8:	e0bffb17 	ldw	r2,-20(fp)
  8216cc:	10800b17 	ldw	r2,44(r2)
  8216d0:	1007883a 	mov	r3,r2
  8216d4:	e0bffa17 	ldw	r2,-24(fp)
  8216d8:	1885883a 	add	r2,r3,r2
  8216dc:	e0fffc03 	ldbu	r3,-16(fp)
  8216e0:	10c00025 	stbio	r3,0(r2)

	return 0;
  8216e4:	e03fff15 	stw	zero,-4(fp)
  8216e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8216ec:	e037883a 	mov	sp,fp
  8216f0:	df000017 	ldw	fp,0(sp)
  8216f4:	dec00104 	addi	sp,sp,4
  8216f8:	f800283a 	ret

008216fc <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  8216fc:	defff904 	addi	sp,sp,-28
  821700:	df000615 	stw	fp,24(sp)
  821704:	df000604 	addi	fp,sp,24
  821708:	e13ffb15 	stw	r4,-20(fp)
  82170c:	e17ffc15 	stw	r5,-16(fp)
  821710:	e1bffd15 	stw	r6,-12(fp)
  821714:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  821718:	e0bffb17 	ldw	r2,-20(fp)
  82171c:	10c00c17 	ldw	r3,48(r2)
  821720:	e0bffd17 	ldw	r2,-12(fp)
  821724:	10c0042e 	bgeu	r2,r3,821738 <alt_up_char_buffer_string+0x3c>
  821728:	e0bffb17 	ldw	r2,-20(fp)
  82172c:	10c00d17 	ldw	r3,52(r2)
  821730:	e0bffe17 	ldw	r2,-8(fp)
  821734:	10c00336 	bltu	r2,r3,821744 <alt_up_char_buffer_string+0x48>
		return -1;
  821738:	00bfffc4 	movi	r2,-1
  82173c:	e0bfff15 	stw	r2,-4(fp)
  821740:	00002e06 	br	8217fc <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  821744:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  821748:	e0bffb17 	ldw	r2,-20(fp)
  82174c:	10801017 	ldw	r2,64(r2)
  821750:	1007883a 	mov	r3,r2
  821754:	e0bffe17 	ldw	r2,-8(fp)
  821758:	10c6983a 	sll	r3,r2,r3
  82175c:	e0bffd17 	ldw	r2,-12(fp)
  821760:	1885883a 	add	r2,r3,r2
  821764:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  821768:	00001c06 	br	8217dc <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  82176c:	e0bffb17 	ldw	r2,-20(fp)
  821770:	10800b17 	ldw	r2,44(r2)
  821774:	1007883a 	mov	r3,r2
  821778:	e0bffa17 	ldw	r2,-24(fp)
  82177c:	1889883a 	add	r4,r3,r2
  821780:	e0bffc17 	ldw	r2,-16(fp)
  821784:	10800003 	ldbu	r2,0(r2)
  821788:	10c03fcc 	andi	r3,r2,255
  82178c:	18c0201c 	xori	r3,r3,128
  821790:	18ffe004 	addi	r3,r3,-128
  821794:	2005883a 	mov	r2,r4
  821798:	10c00025 	stbio	r3,0(r2)
		++ptr;
  82179c:	e0bffc17 	ldw	r2,-16(fp)
  8217a0:	10800044 	addi	r2,r2,1
  8217a4:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  8217a8:	e0bffd17 	ldw	r2,-12(fp)
  8217ac:	10800044 	addi	r2,r2,1
  8217b0:	e0bffd15 	stw	r2,-12(fp)
  8217b4:	e0bffb17 	ldw	r2,-20(fp)
  8217b8:	10c00c17 	ldw	r3,48(r2)
  8217bc:	e0bffd17 	ldw	r2,-12(fp)
  8217c0:	10c00336 	bltu	r2,r3,8217d0 <alt_up_char_buffer_string+0xd4>
			return -1;
  8217c4:	00bfffc4 	movi	r2,-1
  8217c8:	e0bfff15 	stw	r2,-4(fp)
  8217cc:	00000b06 	br	8217fc <alt_up_char_buffer_string+0x100>
		++offset;
  8217d0:	e0bffa17 	ldw	r2,-24(fp)
  8217d4:	10800044 	addi	r2,r2,1
  8217d8:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  8217dc:	e0bffc17 	ldw	r2,-16(fp)
  8217e0:	10800003 	ldbu	r2,0(r2)
  8217e4:	10803fcc 	andi	r2,r2,255
  8217e8:	1080201c 	xori	r2,r2,128
  8217ec:	10bfe004 	addi	r2,r2,-128
  8217f0:	1004c03a 	cmpne	r2,r2,zero
  8217f4:	103fdd1e 	bne	r2,zero,82176c <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  8217f8:	e03fff15 	stw	zero,-4(fp)
  8217fc:	e0bfff17 	ldw	r2,-4(fp)
}
  821800:	e037883a 	mov	sp,fp
  821804:	df000017 	ldw	fp,0(sp)
  821808:	dec00104 	addi	sp,sp,4
  82180c:	f800283a 	ret

00821810 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  821810:	defffe04 	addi	sp,sp,-8
  821814:	df000115 	stw	fp,4(sp)
  821818:	df000104 	addi	fp,sp,4
  82181c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  821820:	e0bfff17 	ldw	r2,-4(fp)
  821824:	10800a17 	ldw	r2,40(r2)
  821828:	10800084 	addi	r2,r2,2
  82182c:	1007883a 	mov	r3,r2
  821830:	00800044 	movi	r2,1
  821834:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  821838:	e0bfff17 	ldw	r2,-4(fp)
  82183c:	10800a17 	ldw	r2,40(r2)
  821840:	10800084 	addi	r2,r2,2
  821844:	10800023 	ldbuio	r2,0(r2)
  821848:	1080004c 	andi	r2,r2,1
  82184c:	10803fcc 	andi	r2,r2,255
  821850:	1004c03a 	cmpne	r2,r2,zero
  821854:	103ff81e 	bne	r2,zero,821838 <alt_up_char_buffer_clear+0x28>
	return 0;
  821858:	0005883a 	mov	r2,zero
}
  82185c:	e037883a 	mov	sp,fp
  821860:	df000017 	ldw	fp,0(sp)
  821864:	dec00104 	addi	sp,sp,4
  821868:	f800283a 	ret

0082186c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  82186c:	defffc04 	addi	sp,sp,-16
  821870:	dfc00315 	stw	ra,12(sp)
  821874:	df000215 	stw	fp,8(sp)
  821878:	df000204 	addi	fp,sp,8
  82187c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  821880:	e13fff17 	ldw	r4,-4(fp)
  821884:	014020f4 	movhi	r5,131
  821888:	29406104 	addi	r5,r5,388
  82188c:	08277040 	call	827704 <alt_find_dev>
  821890:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  821894:	e0bffe17 	ldw	r2,-8(fp)
}
  821898:	e037883a 	mov	sp,fp
  82189c:	dfc00117 	ldw	ra,4(sp)
  8218a0:	df000017 	ldw	fp,0(sp)
  8218a4:	dec00204 	addi	sp,sp,8
  8218a8:	f800283a 	ret

008218ac <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  8218ac:	defff904 	addi	sp,sp,-28
  8218b0:	df000615 	stw	fp,24(sp)
  8218b4:	df000604 	addi	fp,sp,24
  8218b8:	e13ffb15 	stw	r4,-20(fp)
  8218bc:	e17ffc15 	stw	r5,-16(fp)
  8218c0:	e1bffd15 	stw	r6,-12(fp)
  8218c4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  8218c8:	e0bffb17 	ldw	r2,-20(fp)
  8218cc:	10c00f17 	ldw	r3,60(r2)
  8218d0:	e0bffd17 	ldw	r2,-12(fp)
  8218d4:	10c0042e 	bgeu	r2,r3,8218e8 <alt_up_pixel_buffer_dma_draw+0x3c>
  8218d8:	e0bffb17 	ldw	r2,-20(fp)
  8218dc:	10c01017 	ldw	r3,64(r2)
  8218e0:	e0bffe17 	ldw	r2,-8(fp)
  8218e4:	10c00336 	bltu	r2,r3,8218f4 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  8218e8:	00bfffc4 	movi	r2,-1
  8218ec:	e0bfff15 	stw	r2,-4(fp)
  8218f0:	00005106 	br	821a38 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  8218f4:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  8218f8:	e0bffb17 	ldw	r2,-20(fp)
  8218fc:	10800d17 	ldw	r2,52(r2)
  821900:	1004c03a 	cmpne	r2,r2,zero
  821904:	1000151e 	bne	r2,zero,82195c <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  821908:	e0bffb17 	ldw	r2,-20(fp)
  82190c:	10c01217 	ldw	r3,72(r2)
  821910:	e0bffd17 	ldw	r2,-12(fp)
  821914:	1886703a 	and	r3,r3,r2
  821918:	e0bffb17 	ldw	r2,-20(fp)
  82191c:	10801117 	ldw	r2,68(r2)
  821920:	1886983a 	sll	r3,r3,r2
  821924:	e0bffa17 	ldw	r2,-24(fp)
  821928:	10c4b03a 	or	r2,r2,r3
  82192c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  821930:	e0bffb17 	ldw	r2,-20(fp)
  821934:	10c01417 	ldw	r3,80(r2)
  821938:	e0bffe17 	ldw	r2,-8(fp)
  82193c:	1886703a 	and	r3,r3,r2
  821940:	e0bffb17 	ldw	r2,-20(fp)
  821944:	10801317 	ldw	r2,76(r2)
  821948:	1886983a 	sll	r3,r3,r2
  82194c:	e0bffa17 	ldw	r2,-24(fp)
  821950:	10c4b03a 	or	r2,r2,r3
  821954:	e0bffa15 	stw	r2,-24(fp)
  821958:	00001706 	br	8219b8 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  82195c:	e0bffb17 	ldw	r2,-20(fp)
  821960:	10c01217 	ldw	r3,72(r2)
  821964:	e0bffd17 	ldw	r2,-12(fp)
  821968:	1886703a 	and	r3,r3,r2
  82196c:	e0bffb17 	ldw	r2,-20(fp)
  821970:	10801117 	ldw	r2,68(r2)
  821974:	1886983a 	sll	r3,r3,r2
  821978:	e0bffa17 	ldw	r2,-24(fp)
  82197c:	10c5883a 	add	r2,r2,r3
  821980:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  821984:	e0bffb17 	ldw	r2,-20(fp)
  821988:	10c01417 	ldw	r3,80(r2)
  82198c:	e0bffe17 	ldw	r2,-8(fp)
  821990:	1886703a 	and	r3,r3,r2
  821994:	e0bffb17 	ldw	r2,-20(fp)
  821998:	10800f17 	ldw	r2,60(r2)
  82199c:	1887383a 	mul	r3,r3,r2
  8219a0:	e0bffb17 	ldw	r2,-20(fp)
  8219a4:	10801117 	ldw	r2,68(r2)
  8219a8:	1886983a 	sll	r3,r3,r2
  8219ac:	e0bffa17 	ldw	r2,-24(fp)
  8219b0:	10c5883a 	add	r2,r2,r3
  8219b4:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8219b8:	e0bffb17 	ldw	r2,-20(fp)
  8219bc:	10800e17 	ldw	r2,56(r2)
  8219c0:	10800058 	cmpnei	r2,r2,1
  8219c4:	1000081e 	bne	r2,zero,8219e8 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  8219c8:	e0bffb17 	ldw	r2,-20(fp)
  8219cc:	10800c17 	ldw	r2,48(r2)
  8219d0:	1007883a 	mov	r3,r2
  8219d4:	e0bffa17 	ldw	r2,-24(fp)
  8219d8:	1885883a 	add	r2,r3,r2
  8219dc:	e0fffc17 	ldw	r3,-16(fp)
  8219e0:	10c00025 	stbio	r3,0(r2)
  8219e4:	00001306 	br	821a34 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8219e8:	e0bffb17 	ldw	r2,-20(fp)
  8219ec:	10800e17 	ldw	r2,56(r2)
  8219f0:	10800098 	cmpnei	r2,r2,2
  8219f4:	1000081e 	bne	r2,zero,821a18 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  8219f8:	e0bffb17 	ldw	r2,-20(fp)
  8219fc:	10800c17 	ldw	r2,48(r2)
  821a00:	1007883a 	mov	r3,r2
  821a04:	e0bffa17 	ldw	r2,-24(fp)
  821a08:	1885883a 	add	r2,r3,r2
  821a0c:	e0fffc17 	ldw	r3,-16(fp)
  821a10:	10c0002d 	sthio	r3,0(r2)
  821a14:	00000706 	br	821a34 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  821a18:	e0bffb17 	ldw	r2,-20(fp)
  821a1c:	10800c17 	ldw	r2,48(r2)
  821a20:	1007883a 	mov	r3,r2
  821a24:	e0bffa17 	ldw	r2,-24(fp)
  821a28:	1885883a 	add	r2,r3,r2
  821a2c:	e0fffc17 	ldw	r3,-16(fp)
  821a30:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  821a34:	e03fff15 	stw	zero,-4(fp)
  821a38:	e0bfff17 	ldw	r2,-4(fp)
}
  821a3c:	e037883a 	mov	sp,fp
  821a40:	df000017 	ldw	fp,0(sp)
  821a44:	dec00104 	addi	sp,sp,4
  821a48:	f800283a 	ret

00821a4c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  821a4c:	defffd04 	addi	sp,sp,-12
  821a50:	df000215 	stw	fp,8(sp)
  821a54:	df000204 	addi	fp,sp,8
  821a58:	e13ffe15 	stw	r4,-8(fp)
  821a5c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  821a60:	e0bffe17 	ldw	r2,-8(fp)
  821a64:	10800a17 	ldw	r2,40(r2)
  821a68:	10800104 	addi	r2,r2,4
  821a6c:	e0ffff17 	ldw	r3,-4(fp)
  821a70:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  821a74:	e0bffe17 	ldw	r2,-8(fp)
  821a78:	10800a17 	ldw	r2,40(r2)
  821a7c:	10800104 	addi	r2,r2,4
  821a80:	10800037 	ldwio	r2,0(r2)
  821a84:	1007883a 	mov	r3,r2
  821a88:	e0bffe17 	ldw	r2,-8(fp)
  821a8c:	10c00c15 	stw	r3,48(r2)
	return 0;
  821a90:	0005883a 	mov	r2,zero
}
  821a94:	e037883a 	mov	sp,fp
  821a98:	df000017 	ldw	fp,0(sp)
  821a9c:	dec00104 	addi	sp,sp,4
  821aa0:	f800283a 	ret

00821aa4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  821aa4:	defffe04 	addi	sp,sp,-8
  821aa8:	df000115 	stw	fp,4(sp)
  821aac:	df000104 	addi	fp,sp,4
  821ab0:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  821ab4:	e0bfff17 	ldw	r2,-4(fp)
  821ab8:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  821abc:	e0bfff17 	ldw	r2,-4(fp)
  821ac0:	10800a17 	ldw	r2,40(r2)
  821ac4:	1007883a 	mov	r3,r2
  821ac8:	00800044 	movi	r2,1
  821acc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  821ad0:	e0bfff17 	ldw	r2,-4(fp)
  821ad4:	10c00b17 	ldw	r3,44(r2)
  821ad8:	e0bfff17 	ldw	r2,-4(fp)
  821adc:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  821ae0:	e0bfff17 	ldw	r2,-4(fp)
  821ae4:	11000b15 	stw	r4,44(r2)
	return 0;
  821ae8:	0005883a 	mov	r2,zero
}
  821aec:	e037883a 	mov	sp,fp
  821af0:	df000017 	ldw	fp,0(sp)
  821af4:	dec00104 	addi	sp,sp,4
  821af8:	f800283a 	ret

00821afc <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  821afc:	defffe04 	addi	sp,sp,-8
  821b00:	df000115 	stw	fp,4(sp)
  821b04:	df000104 	addi	fp,sp,4
  821b08:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  821b0c:	e0bfff17 	ldw	r2,-4(fp)
  821b10:	10800a17 	ldw	r2,40(r2)
  821b14:	10800304 	addi	r2,r2,12
  821b18:	10800037 	ldwio	r2,0(r2)
  821b1c:	1080004c 	andi	r2,r2,1
}
  821b20:	e037883a 	mov	sp,fp
  821b24:	df000017 	ldw	fp,0(sp)
  821b28:	dec00104 	addi	sp,sp,4
  821b2c:	f800283a 	ret

00821b30 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  821b30:	defff604 	addi	sp,sp,-40
  821b34:	df000915 	stw	fp,36(sp)
  821b38:	df000904 	addi	fp,sp,36
  821b3c:	e13ff715 	stw	r4,-36(fp)
  821b40:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  821b44:	e0bff817 	ldw	r2,-32(fp)
  821b48:	10800058 	cmpnei	r2,r2,1
  821b4c:	1000041e 	bne	r2,zero,821b60 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  821b50:	e0bff717 	ldw	r2,-36(fp)
  821b54:	10800c17 	ldw	r2,48(r2)
  821b58:	e0bfff15 	stw	r2,-4(fp)
  821b5c:	00000306 	br	821b6c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  821b60:	e0bff717 	ldw	r2,-36(fp)
  821b64:	10800b17 	ldw	r2,44(r2)
  821b68:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  821b6c:	e0bff717 	ldw	r2,-36(fp)
  821b70:	10800f17 	ldw	r2,60(r2)
  821b74:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  821b78:	e0bff717 	ldw	r2,-36(fp)
  821b7c:	10800e17 	ldw	r2,56(r2)
  821b80:	10800098 	cmpnei	r2,r2,2
  821b84:	1000051e 	bne	r2,zero,821b9c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  821b88:	e0fffe17 	ldw	r3,-8(fp)
  821b8c:	e0fffe17 	ldw	r3,-8(fp)
  821b90:	18c5883a 	add	r2,r3,r3
  821b94:	e0bffe15 	stw	r2,-8(fp)
  821b98:	00000506 	br	821bb0 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  821b9c:	e13ffe17 	ldw	r4,-8(fp)
  821ba0:	e13ffe17 	ldw	r4,-8(fp)
  821ba4:	2105883a 	add	r2,r4,r4
  821ba8:	1085883a 	add	r2,r2,r2
  821bac:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  821bb0:	e0bff717 	ldw	r2,-36(fp)
  821bb4:	10801017 	ldw	r2,64(r2)
  821bb8:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  821bbc:	e0bff717 	ldw	r2,-36(fp)
  821bc0:	10800d17 	ldw	r2,52(r2)
  821bc4:	1004c03a 	cmpne	r2,r2,zero
  821bc8:	10001e1e 	bne	r2,zero,821c44 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  821bcc:	e0bff717 	ldw	r2,-36(fp)
  821bd0:	10801317 	ldw	r2,76(r2)
  821bd4:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  821bd8:	e03ffb15 	stw	zero,-20(fp)
  821bdc:	00001506 	br	821c34 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  821be0:	e03ffc15 	stw	zero,-16(fp)
  821be4:	00000706 	br	821c04 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  821be8:	e0ffff17 	ldw	r3,-4(fp)
  821bec:	e0bffc17 	ldw	r2,-16(fp)
  821bf0:	1885883a 	add	r2,r3,r2
  821bf4:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  821bf8:	e0bffc17 	ldw	r2,-16(fp)
  821bfc:	10800104 	addi	r2,r2,4
  821c00:	e0bffc15 	stw	r2,-16(fp)
  821c04:	e0fffc17 	ldw	r3,-16(fp)
  821c08:	e13ffe17 	ldw	r4,-8(fp)
  821c0c:	193ff636 	bltu	r3,r4,821be8 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  821c10:	e0fffa17 	ldw	r3,-24(fp)
  821c14:	00800044 	movi	r2,1
  821c18:	10c4983a 	sll	r2,r2,r3
  821c1c:	e0ffff17 	ldw	r3,-4(fp)
  821c20:	1887883a 	add	r3,r3,r2
  821c24:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  821c28:	e13ffb17 	ldw	r4,-20(fp)
  821c2c:	21000044 	addi	r4,r4,1
  821c30:	e13ffb15 	stw	r4,-20(fp)
  821c34:	e0bffb17 	ldw	r2,-20(fp)
  821c38:	e0fffd17 	ldw	r3,-12(fp)
  821c3c:	10ffe836 	bltu	r2,r3,821be0 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  821c40:	00001006 	br	821c84 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  821c44:	e13ffd17 	ldw	r4,-12(fp)
  821c48:	e0bffe17 	ldw	r2,-8(fp)
  821c4c:	2089383a 	mul	r4,r4,r2
  821c50:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  821c54:	e03ff915 	stw	zero,-28(fp)
  821c58:	00000706 	br	821c78 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  821c5c:	e0ffff17 	ldw	r3,-4(fp)
  821c60:	e0bff917 	ldw	r2,-28(fp)
  821c64:	1885883a 	add	r2,r3,r2
  821c68:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  821c6c:	e0fff917 	ldw	r3,-28(fp)
  821c70:	18c00104 	addi	r3,r3,4
  821c74:	e0fff915 	stw	r3,-28(fp)
  821c78:	e0bff917 	ldw	r2,-28(fp)
  821c7c:	e13ffd17 	ldw	r4,-12(fp)
  821c80:	113ff636 	bltu	r2,r4,821c5c <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  821c84:	e037883a 	mov	sp,fp
  821c88:	df000017 	ldw	fp,0(sp)
  821c8c:	dec00104 	addi	sp,sp,4
  821c90:	f800283a 	ret

00821c94 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  821c94:	deffed04 	addi	sp,sp,-76
  821c98:	df001215 	stw	fp,72(sp)
  821c9c:	df001204 	addi	fp,sp,72
  821ca0:	e13fee15 	stw	r4,-72(fp)
  821ca4:	e17fef15 	stw	r5,-68(fp)
  821ca8:	e1bff015 	stw	r6,-64(fp)
  821cac:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  821cb0:	e0bfee17 	ldw	r2,-72(fp)
  821cb4:	10800f17 	ldw	r2,60(r2)
  821cb8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  821cbc:	e0bfee17 	ldw	r2,-72(fp)
  821cc0:	10801017 	ldw	r2,64(r2)
  821cc4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  821cc8:	e0bfef17 	ldw	r2,-68(fp)
  821ccc:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  821cd0:	e0fff117 	ldw	r3,-60(fp)
  821cd4:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  821cd8:	e13ff017 	ldw	r4,-64(fp)
  821cdc:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  821ce0:	e0800117 	ldw	r2,4(fp)
  821ce4:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  821ce8:	e0c00217 	ldw	r3,8(fp)
  821cec:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  821cf0:	e13ffa17 	ldw	r4,-24(fp)
  821cf4:	e0bffb17 	ldw	r2,-20(fp)
  821cf8:	2080062e 	bgeu	r4,r2,821d14 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  821cfc:	e0fffb17 	ldw	r3,-20(fp)
  821d00:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  821d04:	e13ffa17 	ldw	r4,-24(fp)
  821d08:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  821d0c:	e0bffc17 	ldw	r2,-16(fp)
  821d10:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  821d14:	e0fff817 	ldw	r3,-32(fp)
  821d18:	e13ff917 	ldw	r4,-28(fp)
  821d1c:	1900062e 	bgeu	r3,r4,821d38 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  821d20:	e0bff917 	ldw	r2,-28(fp)
  821d24:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  821d28:	e0fff817 	ldw	r3,-32(fp)
  821d2c:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  821d30:	e13ffc17 	ldw	r4,-16(fp)
  821d34:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  821d38:	e0bffb17 	ldw	r2,-20(fp)
  821d3c:	e0fffe17 	ldw	r3,-8(fp)
  821d40:	10c10d2e 	bgeu	r2,r3,822178 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  821d44:	e13ff917 	ldw	r4,-28(fp)
  821d48:	e0bffd17 	ldw	r2,-12(fp)
  821d4c:	20800136 	bltu	r4,r2,821d54 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  821d50:	00010906 	br	822178 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  821d54:	e0fffa17 	ldw	r3,-24(fp)
  821d58:	e13ffe17 	ldw	r4,-8(fp)
  821d5c:	19000336 	bltu	r3,r4,821d6c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  821d60:	e0bffe17 	ldw	r2,-8(fp)
  821d64:	10bfffc4 	addi	r2,r2,-1
  821d68:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  821d6c:	e0fff817 	ldw	r3,-32(fp)
  821d70:	e13ffd17 	ldw	r4,-12(fp)
  821d74:	19000336 	bltu	r3,r4,821d84 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  821d78:	e0bffd17 	ldw	r2,-12(fp)
  821d7c:	10bfffc4 	addi	r2,r2,-1
  821d80:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  821d84:	e0800317 	ldw	r2,12(fp)
  821d88:	10800058 	cmpnei	r2,r2,1
  821d8c:	1000041e 	bne	r2,zero,821da0 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  821d90:	e0bfee17 	ldw	r2,-72(fp)
  821d94:	10800c17 	ldw	r2,48(r2)
  821d98:	e0bfff15 	stw	r2,-4(fp)
  821d9c:	00000306 	br	821dac <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  821da0:	e0bfee17 	ldw	r2,-72(fp)
  821da4:	10800b17 	ldw	r2,44(r2)
  821da8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  821dac:	e0bfee17 	ldw	r2,-72(fp)
  821db0:	10800d17 	ldw	r2,52(r2)
  821db4:	1004c03a 	cmpne	r2,r2,zero
  821db8:	1000721e 	bne	r2,zero,821f84 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  821dbc:	e0bfee17 	ldw	r2,-72(fp)
  821dc0:	10801317 	ldw	r2,76(r2)
  821dc4:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  821dc8:	e0bff417 	ldw	r2,-48(fp)
  821dcc:	e0fff917 	ldw	r3,-28(fp)
  821dd0:	1884983a 	sll	r2,r3,r2
  821dd4:	e13fff17 	ldw	r4,-4(fp)
  821dd8:	2089883a 	add	r4,r4,r2
  821ddc:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  821de0:	e0bfee17 	ldw	r2,-72(fp)
  821de4:	10800e17 	ldw	r2,56(r2)
  821de8:	10800058 	cmpnei	r2,r2,1
  821dec:	10001e1e 	bne	r2,zero,821e68 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  821df0:	e0bff917 	ldw	r2,-28(fp)
  821df4:	e0bff515 	stw	r2,-44(fp)
  821df8:	00001706 	br	821e58 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  821dfc:	e0fffb17 	ldw	r3,-20(fp)
  821e00:	e0fff615 	stw	r3,-40(fp)
  821e04:	00000806 	br	821e28 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  821e08:	e0ffff17 	ldw	r3,-4(fp)
  821e0c:	e0bff617 	ldw	r2,-40(fp)
  821e10:	1885883a 	add	r2,r3,r2
  821e14:	e0fff717 	ldw	r3,-36(fp)
  821e18:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  821e1c:	e13ff617 	ldw	r4,-40(fp)
  821e20:	21000044 	addi	r4,r4,1
  821e24:	e13ff615 	stw	r4,-40(fp)
  821e28:	e0bffa17 	ldw	r2,-24(fp)
  821e2c:	e0fff617 	ldw	r3,-40(fp)
  821e30:	10fff52e 	bgeu	r2,r3,821e08 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  821e34:	e0fff417 	ldw	r3,-48(fp)
  821e38:	00800044 	movi	r2,1
  821e3c:	10c4983a 	sll	r2,r2,r3
  821e40:	e13fff17 	ldw	r4,-4(fp)
  821e44:	2089883a 	add	r4,r4,r2
  821e48:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  821e4c:	e0bff517 	ldw	r2,-44(fp)
  821e50:	10800044 	addi	r2,r2,1
  821e54:	e0bff515 	stw	r2,-44(fp)
  821e58:	e0fff817 	ldw	r3,-32(fp)
  821e5c:	e13ff517 	ldw	r4,-44(fp)
  821e60:	193fe62e 	bgeu	r3,r4,821dfc <alt_up_pixel_buffer_dma_draw_box+0x168>
  821e64:	0000c406 	br	822178 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  821e68:	e0bfee17 	ldw	r2,-72(fp)
  821e6c:	10800e17 	ldw	r2,56(r2)
  821e70:	10800098 	cmpnei	r2,r2,2
  821e74:	1000211e 	bne	r2,zero,821efc <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  821e78:	e0bff917 	ldw	r2,-28(fp)
  821e7c:	e0bff515 	stw	r2,-44(fp)
  821e80:	00001a06 	br	821eec <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  821e84:	e0fffb17 	ldw	r3,-20(fp)
  821e88:	e0fff615 	stw	r3,-40(fp)
  821e8c:	00000b06 	br	821ebc <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  821e90:	e13ff617 	ldw	r4,-40(fp)
  821e94:	e13ff617 	ldw	r4,-40(fp)
  821e98:	2105883a 	add	r2,r4,r4
  821e9c:	1007883a 	mov	r3,r2
  821ea0:	e0bfff17 	ldw	r2,-4(fp)
  821ea4:	1885883a 	add	r2,r3,r2
  821ea8:	e0fff717 	ldw	r3,-36(fp)
  821eac:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  821eb0:	e0bff617 	ldw	r2,-40(fp)
  821eb4:	10800044 	addi	r2,r2,1
  821eb8:	e0bff615 	stw	r2,-40(fp)
  821ebc:	e0fffa17 	ldw	r3,-24(fp)
  821ec0:	e13ff617 	ldw	r4,-40(fp)
  821ec4:	193ff22e 	bgeu	r3,r4,821e90 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  821ec8:	e0fff417 	ldw	r3,-48(fp)
  821ecc:	00800044 	movi	r2,1
  821ed0:	10c4983a 	sll	r2,r2,r3
  821ed4:	e0ffff17 	ldw	r3,-4(fp)
  821ed8:	1887883a 	add	r3,r3,r2
  821edc:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  821ee0:	e13ff517 	ldw	r4,-44(fp)
  821ee4:	21000044 	addi	r4,r4,1
  821ee8:	e13ff515 	stw	r4,-44(fp)
  821eec:	e0bff817 	ldw	r2,-32(fp)
  821ef0:	e0fff517 	ldw	r3,-44(fp)
  821ef4:	10ffe32e 	bgeu	r2,r3,821e84 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  821ef8:	00009f06 	br	822178 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  821efc:	e13ff917 	ldw	r4,-28(fp)
  821f00:	e13ff515 	stw	r4,-44(fp)
  821f04:	00001b06 	br	821f74 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  821f08:	e0bffb17 	ldw	r2,-20(fp)
  821f0c:	e0bff615 	stw	r2,-40(fp)
  821f10:	00000c06 	br	821f44 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  821f14:	e0fff617 	ldw	r3,-40(fp)
  821f18:	e0fff617 	ldw	r3,-40(fp)
  821f1c:	18c5883a 	add	r2,r3,r3
  821f20:	1085883a 	add	r2,r2,r2
  821f24:	1007883a 	mov	r3,r2
  821f28:	e0bfff17 	ldw	r2,-4(fp)
  821f2c:	1885883a 	add	r2,r3,r2
  821f30:	e0fff717 	ldw	r3,-36(fp)
  821f34:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  821f38:	e13ff617 	ldw	r4,-40(fp)
  821f3c:	21000044 	addi	r4,r4,1
  821f40:	e13ff615 	stw	r4,-40(fp)
  821f44:	e0bffa17 	ldw	r2,-24(fp)
  821f48:	e0fff617 	ldw	r3,-40(fp)
  821f4c:	10fff12e 	bgeu	r2,r3,821f14 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  821f50:	e0fff417 	ldw	r3,-48(fp)
  821f54:	00800044 	movi	r2,1
  821f58:	10c4983a 	sll	r2,r2,r3
  821f5c:	e13fff17 	ldw	r4,-4(fp)
  821f60:	2089883a 	add	r4,r4,r2
  821f64:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  821f68:	e0bff517 	ldw	r2,-44(fp)
  821f6c:	10800044 	addi	r2,r2,1
  821f70:	e0bff515 	stw	r2,-44(fp)
  821f74:	e0fff817 	ldw	r3,-32(fp)
  821f78:	e13ff517 	ldw	r4,-44(fp)
  821f7c:	193fe22e 	bgeu	r3,r4,821f08 <alt_up_pixel_buffer_dma_draw_box+0x274>
  821f80:	00007d06 	br	822178 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  821f84:	e0bfee17 	ldw	r2,-72(fp)
  821f88:	10800e17 	ldw	r2,56(r2)
  821f8c:	10800058 	cmpnei	r2,r2,1
  821f90:	1000221e 	bne	r2,zero,82201c <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  821f94:	e0fff917 	ldw	r3,-28(fp)
  821f98:	e13ffe17 	ldw	r4,-8(fp)
  821f9c:	1905383a 	mul	r2,r3,r4
  821fa0:	e0ffff17 	ldw	r3,-4(fp)
  821fa4:	1887883a 	add	r3,r3,r2
  821fa8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  821fac:	e13ff917 	ldw	r4,-28(fp)
  821fb0:	e13ff215 	stw	r4,-56(fp)
  821fb4:	00001506 	br	82200c <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  821fb8:	e0bffb17 	ldw	r2,-20(fp)
  821fbc:	e0bff315 	stw	r2,-52(fp)
  821fc0:	00000806 	br	821fe4 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  821fc4:	e0ffff17 	ldw	r3,-4(fp)
  821fc8:	e0bff317 	ldw	r2,-52(fp)
  821fcc:	1885883a 	add	r2,r3,r2
  821fd0:	e0fff717 	ldw	r3,-36(fp)
  821fd4:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  821fd8:	e0fff317 	ldw	r3,-52(fp)
  821fdc:	18c00044 	addi	r3,r3,1
  821fe0:	e0fff315 	stw	r3,-52(fp)
  821fe4:	e13ffa17 	ldw	r4,-24(fp)
  821fe8:	e0bff317 	ldw	r2,-52(fp)
  821fec:	20bff52e 	bgeu	r4,r2,821fc4 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  821ff0:	e0ffff17 	ldw	r3,-4(fp)
  821ff4:	e13ffe17 	ldw	r4,-8(fp)
  821ff8:	1907883a 	add	r3,r3,r4
  821ffc:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  822000:	e0bff217 	ldw	r2,-56(fp)
  822004:	10800044 	addi	r2,r2,1
  822008:	e0bff215 	stw	r2,-56(fp)
  82200c:	e0fff817 	ldw	r3,-32(fp)
  822010:	e13ff217 	ldw	r4,-56(fp)
  822014:	193fe82e 	bgeu	r3,r4,821fb8 <alt_up_pixel_buffer_dma_draw_box+0x324>
  822018:	00005706 	br	822178 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82201c:	e0bfee17 	ldw	r2,-72(fp)
  822020:	10800e17 	ldw	r2,56(r2)
  822024:	10800098 	cmpnei	r2,r2,2
  822028:	1000291e 	bne	r2,zero,8220d0 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  82202c:	e0fffe17 	ldw	r3,-8(fp)
  822030:	e0fffe17 	ldw	r3,-8(fp)
  822034:	18c5883a 	add	r2,r3,r3
  822038:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  82203c:	e13ff917 	ldw	r4,-28(fp)
  822040:	e0fffe17 	ldw	r3,-8(fp)
  822044:	20c5383a 	mul	r2,r4,r3
  822048:	e13fff17 	ldw	r4,-4(fp)
  82204c:	2089883a 	add	r4,r4,r2
  822050:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  822054:	e0bff917 	ldw	r2,-28(fp)
  822058:	e0bff215 	stw	r2,-56(fp)
  82205c:	00001806 	br	8220c0 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  822060:	e0fffb17 	ldw	r3,-20(fp)
  822064:	e0fff315 	stw	r3,-52(fp)
  822068:	00000b06 	br	822098 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  82206c:	e13ff317 	ldw	r4,-52(fp)
  822070:	e13ff317 	ldw	r4,-52(fp)
  822074:	2105883a 	add	r2,r4,r4
  822078:	1007883a 	mov	r3,r2
  82207c:	e0bfff17 	ldw	r2,-4(fp)
  822080:	1885883a 	add	r2,r3,r2
  822084:	e0fff717 	ldw	r3,-36(fp)
  822088:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  82208c:	e0bff317 	ldw	r2,-52(fp)
  822090:	10800044 	addi	r2,r2,1
  822094:	e0bff315 	stw	r2,-52(fp)
  822098:	e0fffa17 	ldw	r3,-24(fp)
  82209c:	e13ff317 	ldw	r4,-52(fp)
  8220a0:	193ff22e 	bgeu	r3,r4,82206c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  8220a4:	e0bfff17 	ldw	r2,-4(fp)
  8220a8:	e0fffe17 	ldw	r3,-8(fp)
  8220ac:	10c5883a 	add	r2,r2,r3
  8220b0:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8220b4:	e13ff217 	ldw	r4,-56(fp)
  8220b8:	21000044 	addi	r4,r4,1
  8220bc:	e13ff215 	stw	r4,-56(fp)
  8220c0:	e0bff817 	ldw	r2,-32(fp)
  8220c4:	e0fff217 	ldw	r3,-56(fp)
  8220c8:	10ffe52e 	bgeu	r2,r3,822060 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  8220cc:	00002a06 	br	822178 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  8220d0:	e13ffe17 	ldw	r4,-8(fp)
  8220d4:	e13ffe17 	ldw	r4,-8(fp)
  8220d8:	2105883a 	add	r2,r4,r4
  8220dc:	1085883a 	add	r2,r2,r2
  8220e0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  8220e4:	e0fff917 	ldw	r3,-28(fp)
  8220e8:	e13ffe17 	ldw	r4,-8(fp)
  8220ec:	1905383a 	mul	r2,r3,r4
  8220f0:	e0ffff17 	ldw	r3,-4(fp)
  8220f4:	1887883a 	add	r3,r3,r2
  8220f8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8220fc:	e13ff917 	ldw	r4,-28(fp)
  822100:	e13ff215 	stw	r4,-56(fp)
  822104:	00001906 	br	82216c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  822108:	e0bffb17 	ldw	r2,-20(fp)
  82210c:	e0bff315 	stw	r2,-52(fp)
  822110:	00000c06 	br	822144 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  822114:	e0fff317 	ldw	r3,-52(fp)
  822118:	e0fff317 	ldw	r3,-52(fp)
  82211c:	18c5883a 	add	r2,r3,r3
  822120:	1085883a 	add	r2,r2,r2
  822124:	1007883a 	mov	r3,r2
  822128:	e0bfff17 	ldw	r2,-4(fp)
  82212c:	1885883a 	add	r2,r3,r2
  822130:	e0fff717 	ldw	r3,-36(fp)
  822134:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  822138:	e13ff317 	ldw	r4,-52(fp)
  82213c:	21000044 	addi	r4,r4,1
  822140:	e13ff315 	stw	r4,-52(fp)
  822144:	e0bffa17 	ldw	r2,-24(fp)
  822148:	e0fff317 	ldw	r3,-52(fp)
  82214c:	10fff12e 	bgeu	r2,r3,822114 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  822150:	e13fff17 	ldw	r4,-4(fp)
  822154:	e0bffe17 	ldw	r2,-8(fp)
  822158:	2089883a 	add	r4,r4,r2
  82215c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  822160:	e0fff217 	ldw	r3,-56(fp)
  822164:	18c00044 	addi	r3,r3,1
  822168:	e0fff215 	stw	r3,-56(fp)
  82216c:	e13ff817 	ldw	r4,-32(fp)
  822170:	e0bff217 	ldw	r2,-56(fp)
  822174:	20bfe42e 	bgeu	r4,r2,822108 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  822178:	e037883a 	mov	sp,fp
  82217c:	df000017 	ldw	fp,0(sp)
  822180:	dec00104 	addi	sp,sp,4
  822184:	f800283a 	ret

00822188 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  822188:	defff204 	addi	sp,sp,-56
  82218c:	df000d15 	stw	fp,52(sp)
  822190:	df000d04 	addi	fp,sp,52
  822194:	e13ff315 	stw	r4,-52(fp)
  822198:	e17ff415 	stw	r5,-48(fp)
  82219c:	e1bff515 	stw	r6,-44(fp)
  8221a0:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  8221a4:	e0bff317 	ldw	r2,-52(fp)
  8221a8:	10800f17 	ldw	r2,60(r2)
  8221ac:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  8221b0:	e0bff317 	ldw	r2,-52(fp)
  8221b4:	10801017 	ldw	r2,64(r2)
  8221b8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  8221bc:	e0bff417 	ldw	r2,-48(fp)
  8221c0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  8221c4:	e0fff517 	ldw	r3,-44(fp)
  8221c8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  8221cc:	e13ff617 	ldw	r4,-40(fp)
  8221d0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  8221d4:	e0800117 	ldw	r2,4(fp)
  8221d8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  8221dc:	e0fffb17 	ldw	r3,-20(fp)
  8221e0:	e13ffc17 	ldw	r4,-16(fp)
  8221e4:	1900042e 	bgeu	r3,r4,8221f8 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  8221e8:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  8221ec:	e0fffb17 	ldw	r3,-20(fp)
  8221f0:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  8221f4:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  8221f8:	e13ffc17 	ldw	r4,-16(fp)
  8221fc:	e0bffe17 	ldw	r2,-8(fp)
  822200:	2080b12e 	bgeu	r4,r2,8224c8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  822204:	e0fffa17 	ldw	r3,-24(fp)
  822208:	e13ffd17 	ldw	r4,-12(fp)
  82220c:	19000136 	bltu	r3,r4,822214 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  822210:	0000ad06 	br	8224c8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  822214:	e0bffb17 	ldw	r2,-20(fp)
  822218:	e0fffe17 	ldw	r3,-8(fp)
  82221c:	10c00336 	bltu	r2,r3,82222c <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  822220:	e13ffe17 	ldw	r4,-8(fp)
  822224:	213fffc4 	addi	r4,r4,-1
  822228:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  82222c:	e0800217 	ldw	r2,8(fp)
  822230:	10800058 	cmpnei	r2,r2,1
  822234:	1000041e 	bne	r2,zero,822248 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  822238:	e0bff317 	ldw	r2,-52(fp)
  82223c:	10800c17 	ldw	r2,48(r2)
  822240:	e0bfff15 	stw	r2,-4(fp)
  822244:	00000306 	br	822254 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  822248:	e0bff317 	ldw	r2,-52(fp)
  82224c:	10800b17 	ldw	r2,44(r2)
  822250:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  822254:	e0bff317 	ldw	r2,-52(fp)
  822258:	10800d17 	ldw	r2,52(r2)
  82225c:	1004c03a 	cmpne	r2,r2,zero
  822260:	1000431e 	bne	r2,zero,822370 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  822264:	e0bff317 	ldw	r2,-52(fp)
  822268:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  82226c:	e0fffa17 	ldw	r3,-24(fp)
  822270:	1884983a 	sll	r2,r3,r2
  822274:	e13fff17 	ldw	r4,-4(fp)
  822278:	2089883a 	add	r4,r4,r2
  82227c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  822280:	e0bff317 	ldw	r2,-52(fp)
  822284:	10800e17 	ldw	r2,56(r2)
  822288:	10800058 	cmpnei	r2,r2,1
  82228c:	10000f1e 	bne	r2,zero,8222cc <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  822290:	e0bffc17 	ldw	r2,-16(fp)
  822294:	e0bff815 	stw	r2,-32(fp)
  822298:	00000806 	br	8222bc <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  82229c:	e0ffff17 	ldw	r3,-4(fp)
  8222a0:	e0bff817 	ldw	r2,-32(fp)
  8222a4:	1885883a 	add	r2,r3,r2
  8222a8:	e0fff917 	ldw	r3,-28(fp)
  8222ac:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  8222b0:	e0fff817 	ldw	r3,-32(fp)
  8222b4:	18c00044 	addi	r3,r3,1
  8222b8:	e0fff815 	stw	r3,-32(fp)
  8222bc:	e13ffb17 	ldw	r4,-20(fp)
  8222c0:	e0bff817 	ldw	r2,-32(fp)
  8222c4:	20bff52e 	bgeu	r4,r2,82229c <alt_up_pixel_buffer_dma_draw_hline+0x114>
  8222c8:	00007f06 	br	8224c8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8222cc:	e0bff317 	ldw	r2,-52(fp)
  8222d0:	10800e17 	ldw	r2,56(r2)
  8222d4:	10800098 	cmpnei	r2,r2,2
  8222d8:	1000121e 	bne	r2,zero,822324 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  8222dc:	e0fffc17 	ldw	r3,-16(fp)
  8222e0:	e0fff815 	stw	r3,-32(fp)
  8222e4:	00000b06 	br	822314 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  8222e8:	e13ff817 	ldw	r4,-32(fp)
  8222ec:	e13ff817 	ldw	r4,-32(fp)
  8222f0:	2105883a 	add	r2,r4,r4
  8222f4:	1007883a 	mov	r3,r2
  8222f8:	e0bfff17 	ldw	r2,-4(fp)
  8222fc:	1885883a 	add	r2,r3,r2
  822300:	e0fff917 	ldw	r3,-28(fp)
  822304:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  822308:	e0bff817 	ldw	r2,-32(fp)
  82230c:	10800044 	addi	r2,r2,1
  822310:	e0bff815 	stw	r2,-32(fp)
  822314:	e0fffb17 	ldw	r3,-20(fp)
  822318:	e13ff817 	ldw	r4,-32(fp)
  82231c:	193ff22e 	bgeu	r3,r4,8222e8 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  822320:	00006906 	br	8224c8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  822324:	e0bffc17 	ldw	r2,-16(fp)
  822328:	e0bff815 	stw	r2,-32(fp)
  82232c:	00000c06 	br	822360 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  822330:	e0fff817 	ldw	r3,-32(fp)
  822334:	e0fff817 	ldw	r3,-32(fp)
  822338:	18c5883a 	add	r2,r3,r3
  82233c:	1085883a 	add	r2,r2,r2
  822340:	1007883a 	mov	r3,r2
  822344:	e0bfff17 	ldw	r2,-4(fp)
  822348:	1885883a 	add	r2,r3,r2
  82234c:	e0fff917 	ldw	r3,-28(fp)
  822350:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  822354:	e13ff817 	ldw	r4,-32(fp)
  822358:	21000044 	addi	r4,r4,1
  82235c:	e13ff815 	stw	r4,-32(fp)
  822360:	e0bffb17 	ldw	r2,-20(fp)
  822364:	e0fff817 	ldw	r3,-32(fp)
  822368:	10fff12e 	bgeu	r2,r3,822330 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  82236c:	00005606 	br	8224c8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  822370:	e0bff317 	ldw	r2,-52(fp)
  822374:	10800e17 	ldw	r2,56(r2)
  822378:	10800058 	cmpnei	r2,r2,1
  82237c:	1000151e 	bne	r2,zero,8223d4 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  822380:	e13ffa17 	ldw	r4,-24(fp)
  822384:	e0fffe17 	ldw	r3,-8(fp)
  822388:	20c5383a 	mul	r2,r4,r3
  82238c:	e13fff17 	ldw	r4,-4(fp)
  822390:	2089883a 	add	r4,r4,r2
  822394:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  822398:	e0bffc17 	ldw	r2,-16(fp)
  82239c:	e0bff715 	stw	r2,-36(fp)
  8223a0:	00000806 	br	8223c4 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  8223a4:	e0ffff17 	ldw	r3,-4(fp)
  8223a8:	e0bff717 	ldw	r2,-36(fp)
  8223ac:	1885883a 	add	r2,r3,r2
  8223b0:	e0fff917 	ldw	r3,-28(fp)
  8223b4:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  8223b8:	e0fff717 	ldw	r3,-36(fp)
  8223bc:	18c00044 	addi	r3,r3,1
  8223c0:	e0fff715 	stw	r3,-36(fp)
  8223c4:	e13ffb17 	ldw	r4,-20(fp)
  8223c8:	e0bff717 	ldw	r2,-36(fp)
  8223cc:	20bff52e 	bgeu	r4,r2,8223a4 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  8223d0:	00003d06 	br	8224c8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  8223d4:	e0bff317 	ldw	r2,-52(fp)
  8223d8:	10800e17 	ldw	r2,56(r2)
  8223dc:	10800098 	cmpnei	r2,r2,2
  8223e0:	10001c1e 	bne	r2,zero,822454 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  8223e4:	e0fffe17 	ldw	r3,-8(fp)
  8223e8:	e0fffe17 	ldw	r3,-8(fp)
  8223ec:	18c5883a 	add	r2,r3,r3
  8223f0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  8223f4:	e13ffa17 	ldw	r4,-24(fp)
  8223f8:	e0fffe17 	ldw	r3,-8(fp)
  8223fc:	20c5383a 	mul	r2,r4,r3
  822400:	e13fff17 	ldw	r4,-4(fp)
  822404:	2089883a 	add	r4,r4,r2
  822408:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  82240c:	e0bffc17 	ldw	r2,-16(fp)
  822410:	e0bff715 	stw	r2,-36(fp)
  822414:	00000b06 	br	822444 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  822418:	e0fff717 	ldw	r3,-36(fp)
  82241c:	e0fff717 	ldw	r3,-36(fp)
  822420:	18c5883a 	add	r2,r3,r3
  822424:	1007883a 	mov	r3,r2
  822428:	e0bfff17 	ldw	r2,-4(fp)
  82242c:	1885883a 	add	r2,r3,r2
  822430:	e0fff917 	ldw	r3,-28(fp)
  822434:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  822438:	e13ff717 	ldw	r4,-36(fp)
  82243c:	21000044 	addi	r4,r4,1
  822440:	e13ff715 	stw	r4,-36(fp)
  822444:	e0bffb17 	ldw	r2,-20(fp)
  822448:	e0fff717 	ldw	r3,-36(fp)
  82244c:	10fff22e 	bgeu	r2,r3,822418 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  822450:	00001d06 	br	8224c8 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  822454:	e13ffe17 	ldw	r4,-8(fp)
  822458:	e13ffe17 	ldw	r4,-8(fp)
  82245c:	2105883a 	add	r2,r4,r4
  822460:	1085883a 	add	r2,r2,r2
  822464:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  822468:	e0fffa17 	ldw	r3,-24(fp)
  82246c:	e13ffe17 	ldw	r4,-8(fp)
  822470:	1905383a 	mul	r2,r3,r4
  822474:	e0ffff17 	ldw	r3,-4(fp)
  822478:	1887883a 	add	r3,r3,r2
  82247c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  822480:	e13ffc17 	ldw	r4,-16(fp)
  822484:	e13ff715 	stw	r4,-36(fp)
  822488:	00000c06 	br	8224bc <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  82248c:	e0fff717 	ldw	r3,-36(fp)
  822490:	e0fff717 	ldw	r3,-36(fp)
  822494:	18c5883a 	add	r2,r3,r3
  822498:	1085883a 	add	r2,r2,r2
  82249c:	1007883a 	mov	r3,r2
  8224a0:	e0bfff17 	ldw	r2,-4(fp)
  8224a4:	1885883a 	add	r2,r3,r2
  8224a8:	e0fff917 	ldw	r3,-28(fp)
  8224ac:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  8224b0:	e13ff717 	ldw	r4,-36(fp)
  8224b4:	21000044 	addi	r4,r4,1
  8224b8:	e13ff715 	stw	r4,-36(fp)
  8224bc:	e0bffb17 	ldw	r2,-20(fp)
  8224c0:	e0fff717 	ldw	r3,-36(fp)
  8224c4:	10fff12e 	bgeu	r2,r3,82248c <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  8224c8:	e037883a 	mov	sp,fp
  8224cc:	df000017 	ldw	fp,0(sp)
  8224d0:	dec00104 	addi	sp,sp,4
  8224d4:	f800283a 	ret

008224d8 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  8224d8:	defff104 	addi	sp,sp,-60
  8224dc:	df000e15 	stw	fp,56(sp)
  8224e0:	df000e04 	addi	fp,sp,56
  8224e4:	e13ff215 	stw	r4,-56(fp)
  8224e8:	e17ff315 	stw	r5,-52(fp)
  8224ec:	e1bff415 	stw	r6,-48(fp)
  8224f0:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  8224f4:	e0bff217 	ldw	r2,-56(fp)
  8224f8:	10800f17 	ldw	r2,60(r2)
  8224fc:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  822500:	e0bff217 	ldw	r2,-56(fp)
  822504:	10801017 	ldw	r2,64(r2)
  822508:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  82250c:	e0bff317 	ldw	r2,-52(fp)
  822510:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  822514:	e0fff417 	ldw	r3,-48(fp)
  822518:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  82251c:	e13ff517 	ldw	r4,-44(fp)
  822520:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  822524:	e0800117 	ldw	r2,4(fp)
  822528:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  82252c:	e0fffa17 	ldw	r3,-24(fp)
  822530:	e13ffb17 	ldw	r4,-20(fp)
  822534:	1900042e 	bgeu	r3,r4,822548 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  822538:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  82253c:	e0fffa17 	ldw	r3,-24(fp)
  822540:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  822544:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  822548:	e13ffc17 	ldw	r4,-16(fp)
  82254c:	e0bffe17 	ldw	r2,-8(fp)
  822550:	2080d12e 	bgeu	r4,r2,822898 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  822554:	e0fffb17 	ldw	r3,-20(fp)
  822558:	e13ffd17 	ldw	r4,-12(fp)
  82255c:	19000136 	bltu	r3,r4,822564 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  822560:	0000cd06 	br	822898 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  822564:	e0bffa17 	ldw	r2,-24(fp)
  822568:	e0fffd17 	ldw	r3,-12(fp)
  82256c:	10c00336 	bltu	r2,r3,82257c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  822570:	e13ffd17 	ldw	r4,-12(fp)
  822574:	213fffc4 	addi	r4,r4,-1
  822578:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  82257c:	e0800217 	ldw	r2,8(fp)
  822580:	10800058 	cmpnei	r2,r2,1
  822584:	1000041e 	bne	r2,zero,822598 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  822588:	e0bff217 	ldw	r2,-56(fp)
  82258c:	10800c17 	ldw	r2,48(r2)
  822590:	e0bfff15 	stw	r2,-4(fp)
  822594:	00000306 	br	8225a4 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  822598:	e0bff217 	ldw	r2,-56(fp)
  82259c:	10800b17 	ldw	r2,44(r2)
  8225a0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  8225a4:	e0bff217 	ldw	r2,-56(fp)
  8225a8:	10800d17 	ldw	r2,52(r2)
  8225ac:	1004c03a 	cmpne	r2,r2,zero
  8225b0:	1000571e 	bne	r2,zero,822710 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  8225b4:	e0bff217 	ldw	r2,-56(fp)
  8225b8:	10801317 	ldw	r2,76(r2)
  8225bc:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  8225c0:	e0bff717 	ldw	r2,-36(fp)
  8225c4:	e0fffb17 	ldw	r3,-20(fp)
  8225c8:	1884983a 	sll	r2,r3,r2
  8225cc:	e13fff17 	ldw	r4,-4(fp)
  8225d0:	2089883a 	add	r4,r4,r2
  8225d4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  8225d8:	e0bff217 	ldw	r2,-56(fp)
  8225dc:	10800e17 	ldw	r2,56(r2)
  8225e0:	10800058 	cmpnei	r2,r2,1
  8225e4:	1000151e 	bne	r2,zero,82263c <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  8225e8:	e0bffb17 	ldw	r2,-20(fp)
  8225ec:	e0bff815 	stw	r2,-32(fp)
  8225f0:	00000e06 	br	82262c <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  8225f4:	e0ffff17 	ldw	r3,-4(fp)
  8225f8:	e0bffc17 	ldw	r2,-16(fp)
  8225fc:	1885883a 	add	r2,r3,r2
  822600:	e0fff917 	ldw	r3,-28(fp)
  822604:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  822608:	e0fff717 	ldw	r3,-36(fp)
  82260c:	00800044 	movi	r2,1
  822610:	10c4983a 	sll	r2,r2,r3
  822614:	e0ffff17 	ldw	r3,-4(fp)
  822618:	1887883a 	add	r3,r3,r2
  82261c:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  822620:	e13ff817 	ldw	r4,-32(fp)
  822624:	21000044 	addi	r4,r4,1
  822628:	e13ff815 	stw	r4,-32(fp)
  82262c:	e0bffa17 	ldw	r2,-24(fp)
  822630:	e0fff817 	ldw	r3,-32(fp)
  822634:	10ffef2e 	bgeu	r2,r3,8225f4 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  822638:	00009706 	br	822898 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  82263c:	e0bff217 	ldw	r2,-56(fp)
  822640:	10800e17 	ldw	r2,56(r2)
  822644:	10800098 	cmpnei	r2,r2,2
  822648:	1000181e 	bne	r2,zero,8226ac <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  82264c:	e13ffb17 	ldw	r4,-20(fp)
  822650:	e13ff815 	stw	r4,-32(fp)
  822654:	00001106 	br	82269c <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  822658:	e0fffc17 	ldw	r3,-16(fp)
  82265c:	e0fffc17 	ldw	r3,-16(fp)
  822660:	18c5883a 	add	r2,r3,r3
  822664:	1007883a 	mov	r3,r2
  822668:	e0bfff17 	ldw	r2,-4(fp)
  82266c:	1885883a 	add	r2,r3,r2
  822670:	e0fff917 	ldw	r3,-28(fp)
  822674:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  822678:	e0fff717 	ldw	r3,-36(fp)
  82267c:	00800044 	movi	r2,1
  822680:	10c4983a 	sll	r2,r2,r3
  822684:	e13fff17 	ldw	r4,-4(fp)
  822688:	2089883a 	add	r4,r4,r2
  82268c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  822690:	e0bff817 	ldw	r2,-32(fp)
  822694:	10800044 	addi	r2,r2,1
  822698:	e0bff815 	stw	r2,-32(fp)
  82269c:	e0fffa17 	ldw	r3,-24(fp)
  8226a0:	e13ff817 	ldw	r4,-32(fp)
  8226a4:	193fec2e 	bgeu	r3,r4,822658 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  8226a8:	00007b06 	br	822898 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8226ac:	e0bffb17 	ldw	r2,-20(fp)
  8226b0:	e0bff815 	stw	r2,-32(fp)
  8226b4:	00001206 	br	822700 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  8226b8:	e0fffc17 	ldw	r3,-16(fp)
  8226bc:	e0fffc17 	ldw	r3,-16(fp)
  8226c0:	18c5883a 	add	r2,r3,r3
  8226c4:	1085883a 	add	r2,r2,r2
  8226c8:	1007883a 	mov	r3,r2
  8226cc:	e0bfff17 	ldw	r2,-4(fp)
  8226d0:	1885883a 	add	r2,r3,r2
  8226d4:	e0fff917 	ldw	r3,-28(fp)
  8226d8:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  8226dc:	e0fff717 	ldw	r3,-36(fp)
  8226e0:	00800044 	movi	r2,1
  8226e4:	10c4983a 	sll	r2,r2,r3
  8226e8:	e13fff17 	ldw	r4,-4(fp)
  8226ec:	2089883a 	add	r4,r4,r2
  8226f0:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  8226f4:	e0bff817 	ldw	r2,-32(fp)
  8226f8:	10800044 	addi	r2,r2,1
  8226fc:	e0bff815 	stw	r2,-32(fp)
  822700:	e0fffa17 	ldw	r3,-24(fp)
  822704:	e13ff817 	ldw	r4,-32(fp)
  822708:	193feb2e 	bgeu	r3,r4,8226b8 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  82270c:	00006206 	br	822898 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  822710:	e0bff217 	ldw	r2,-56(fp)
  822714:	10800e17 	ldw	r2,56(r2)
  822718:	10800058 	cmpnei	r2,r2,1
  82271c:	1000191e 	bne	r2,zero,822784 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  822720:	e0fffb17 	ldw	r3,-20(fp)
  822724:	e13ffe17 	ldw	r4,-8(fp)
  822728:	1905383a 	mul	r2,r3,r4
  82272c:	e0ffff17 	ldw	r3,-4(fp)
  822730:	1887883a 	add	r3,r3,r2
  822734:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  822738:	e13ffb17 	ldw	r4,-20(fp)
  82273c:	e13ff615 	stw	r4,-40(fp)
  822740:	00000c06 	br	822774 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  822744:	e0ffff17 	ldw	r3,-4(fp)
  822748:	e0bffc17 	ldw	r2,-16(fp)
  82274c:	1885883a 	add	r2,r3,r2
  822750:	e0fff917 	ldw	r3,-28(fp)
  822754:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  822758:	e0bfff17 	ldw	r2,-4(fp)
  82275c:	e0fffe17 	ldw	r3,-8(fp)
  822760:	10c5883a 	add	r2,r2,r3
  822764:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  822768:	e13ff617 	ldw	r4,-40(fp)
  82276c:	21000044 	addi	r4,r4,1
  822770:	e13ff615 	stw	r4,-40(fp)
  822774:	e0bffa17 	ldw	r2,-24(fp)
  822778:	e0fff617 	ldw	r3,-40(fp)
  82277c:	10fff12e 	bgeu	r2,r3,822744 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  822780:	00004506 	br	822898 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  822784:	e0bff217 	ldw	r2,-56(fp)
  822788:	10800e17 	ldw	r2,56(r2)
  82278c:	10800098 	cmpnei	r2,r2,2
  822790:	1000201e 	bne	r2,zero,822814 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  822794:	e13ffe17 	ldw	r4,-8(fp)
  822798:	e13ffe17 	ldw	r4,-8(fp)
  82279c:	2105883a 	add	r2,r4,r4
  8227a0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  8227a4:	e0fffb17 	ldw	r3,-20(fp)
  8227a8:	e13ffe17 	ldw	r4,-8(fp)
  8227ac:	1905383a 	mul	r2,r3,r4
  8227b0:	e0ffff17 	ldw	r3,-4(fp)
  8227b4:	1887883a 	add	r3,r3,r2
  8227b8:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  8227bc:	e13ffb17 	ldw	r4,-20(fp)
  8227c0:	e13ff615 	stw	r4,-40(fp)
  8227c4:	00000f06 	br	822804 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  8227c8:	e0fffc17 	ldw	r3,-16(fp)
  8227cc:	e0fffc17 	ldw	r3,-16(fp)
  8227d0:	18c5883a 	add	r2,r3,r3
  8227d4:	1007883a 	mov	r3,r2
  8227d8:	e0bfff17 	ldw	r2,-4(fp)
  8227dc:	1885883a 	add	r2,r3,r2
  8227e0:	e0fff917 	ldw	r3,-28(fp)
  8227e4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  8227e8:	e13fff17 	ldw	r4,-4(fp)
  8227ec:	e0bffe17 	ldw	r2,-8(fp)
  8227f0:	2089883a 	add	r4,r4,r2
  8227f4:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  8227f8:	e0fff617 	ldw	r3,-40(fp)
  8227fc:	18c00044 	addi	r3,r3,1
  822800:	e0fff615 	stw	r3,-40(fp)
  822804:	e13ffa17 	ldw	r4,-24(fp)
  822808:	e0bff617 	ldw	r2,-40(fp)
  82280c:	20bfee2e 	bgeu	r4,r2,8227c8 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  822810:	00002106 	br	822898 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  822814:	e0fffe17 	ldw	r3,-8(fp)
  822818:	e0fffe17 	ldw	r3,-8(fp)
  82281c:	18c5883a 	add	r2,r3,r3
  822820:	1085883a 	add	r2,r2,r2
  822824:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  822828:	e13ffb17 	ldw	r4,-20(fp)
  82282c:	e0fffe17 	ldw	r3,-8(fp)
  822830:	20c5383a 	mul	r2,r4,r3
  822834:	e13fff17 	ldw	r4,-4(fp)
  822838:	2089883a 	add	r4,r4,r2
  82283c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  822840:	e0bffb17 	ldw	r2,-20(fp)
  822844:	e0bff615 	stw	r2,-40(fp)
  822848:	00001006 	br	82288c <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  82284c:	e0fffc17 	ldw	r3,-16(fp)
  822850:	e0fffc17 	ldw	r3,-16(fp)
  822854:	18c5883a 	add	r2,r3,r3
  822858:	1085883a 	add	r2,r2,r2
  82285c:	1007883a 	mov	r3,r2
  822860:	e0bfff17 	ldw	r2,-4(fp)
  822864:	1885883a 	add	r2,r3,r2
  822868:	e0fff917 	ldw	r3,-28(fp)
  82286c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  822870:	e13fff17 	ldw	r4,-4(fp)
  822874:	e0bffe17 	ldw	r2,-8(fp)
  822878:	2089883a 	add	r4,r4,r2
  82287c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  822880:	e0fff617 	ldw	r3,-40(fp)
  822884:	18c00044 	addi	r3,r3,1
  822888:	e0fff615 	stw	r3,-40(fp)
  82288c:	e13ffa17 	ldw	r4,-24(fp)
  822890:	e0bff617 	ldw	r2,-40(fp)
  822894:	20bfed2e 	bgeu	r4,r2,82284c <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  822898:	e037883a 	mov	sp,fp
  82289c:	df000017 	ldw	fp,0(sp)
  8228a0:	dec00104 	addi	sp,sp,4
  8228a4:	f800283a 	ret

008228a8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  8228a8:	defff804 	addi	sp,sp,-32
  8228ac:	dfc00715 	stw	ra,28(sp)
  8228b0:	df000615 	stw	fp,24(sp)
  8228b4:	df000604 	addi	fp,sp,24
  8228b8:	e13ffc15 	stw	r4,-16(fp)
  8228bc:	e17ffd15 	stw	r5,-12(fp)
  8228c0:	e1bffe15 	stw	r6,-8(fp)
  8228c4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  8228c8:	e0800317 	ldw	r2,12(fp)
  8228cc:	d8800015 	stw	r2,0(sp)
  8228d0:	e0800417 	ldw	r2,16(fp)
  8228d4:	d8800115 	stw	r2,4(sp)
  8228d8:	e13ffc17 	ldw	r4,-16(fp)
  8228dc:	e17ffd17 	ldw	r5,-12(fp)
  8228e0:	e1bfff17 	ldw	r6,-4(fp)
  8228e4:	e1fffe17 	ldw	r7,-8(fp)
  8228e8:	08221880 	call	822188 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  8228ec:	e0800317 	ldw	r2,12(fp)
  8228f0:	d8800015 	stw	r2,0(sp)
  8228f4:	e0800417 	ldw	r2,16(fp)
  8228f8:	d8800115 	stw	r2,4(sp)
  8228fc:	e13ffc17 	ldw	r4,-16(fp)
  822900:	e17ffd17 	ldw	r5,-12(fp)
  822904:	e1bfff17 	ldw	r6,-4(fp)
  822908:	e1c00217 	ldw	r7,8(fp)
  82290c:	08221880 	call	822188 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  822910:	e0800317 	ldw	r2,12(fp)
  822914:	d8800015 	stw	r2,0(sp)
  822918:	e0800417 	ldw	r2,16(fp)
  82291c:	d8800115 	stw	r2,4(sp)
  822920:	e13ffc17 	ldw	r4,-16(fp)
  822924:	e17ffd17 	ldw	r5,-12(fp)
  822928:	e1bffe17 	ldw	r6,-8(fp)
  82292c:	e1c00217 	ldw	r7,8(fp)
  822930:	08224d80 	call	8224d8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  822934:	e0800317 	ldw	r2,12(fp)
  822938:	d8800015 	stw	r2,0(sp)
  82293c:	e0800417 	ldw	r2,16(fp)
  822940:	d8800115 	stw	r2,4(sp)
  822944:	e13ffc17 	ldw	r4,-16(fp)
  822948:	e17fff17 	ldw	r5,-4(fp)
  82294c:	e1bffe17 	ldw	r6,-8(fp)
  822950:	e1c00217 	ldw	r7,8(fp)
  822954:	08224d80 	call	8224d8 <alt_up_pixel_buffer_dma_draw_vline>
}
  822958:	e037883a 	mov	sp,fp
  82295c:	dfc00117 	ldw	ra,4(sp)
  822960:	df000017 	ldw	fp,0(sp)
  822964:	dec00204 	addi	sp,sp,8
  822968:	f800283a 	ret

0082296c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  82296c:	defffb04 	addi	sp,sp,-20
  822970:	df000415 	stw	fp,16(sp)
  822974:	df000404 	addi	fp,sp,16
  822978:	e13ffc15 	stw	r4,-16(fp)
  82297c:	e17ffd15 	stw	r5,-12(fp)
  822980:	e1bffe15 	stw	r6,-8(fp)
  822984:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  822988:	e0c00217 	ldw	r3,8(fp)
  82298c:	1804c03a 	cmpne	r2,r3,zero
  822990:	10000b1e 	bne	r2,zero,8229c0 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  822994:	e13ffd17 	ldw	r4,-12(fp)
  822998:	e0ffff17 	ldw	r3,-4(fp)
  82299c:	20c5383a 	mul	r2,r4,r3
  8229a0:	e13ffe17 	ldw	r4,-8(fp)
  8229a4:	1105883a 	add	r2,r2,r4
  8229a8:	1007883a 	mov	r3,r2
  8229ac:	e0bffc17 	ldw	r2,-16(fp)
  8229b0:	1885883a 	add	r2,r3,r2
  8229b4:	e0c00117 	ldw	r3,4(fp)
  8229b8:	10c00025 	stbio	r3,0(r2)
  8229bc:	00001b06 	br	822a2c <helper_plot_pixel+0xc0>
	else if (mode == 1)
  8229c0:	e1000217 	ldw	r4,8(fp)
  8229c4:	20800058 	cmpnei	r2,r4,1
  8229c8:	10000c1e 	bne	r2,zero,8229fc <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  8229cc:	e0fffd17 	ldw	r3,-12(fp)
  8229d0:	e13fff17 	ldw	r4,-4(fp)
  8229d4:	1905383a 	mul	r2,r3,r4
  8229d8:	e0fffe17 	ldw	r3,-8(fp)
  8229dc:	10c5883a 	add	r2,r2,r3
  8229e0:	1085883a 	add	r2,r2,r2
  8229e4:	1007883a 	mov	r3,r2
  8229e8:	e0bffc17 	ldw	r2,-16(fp)
  8229ec:	1885883a 	add	r2,r3,r2
  8229f0:	e1000117 	ldw	r4,4(fp)
  8229f4:	1100002d 	sthio	r4,0(r2)
  8229f8:	00000c06 	br	822a2c <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  8229fc:	e0fffd17 	ldw	r3,-12(fp)
  822a00:	e13fff17 	ldw	r4,-4(fp)
  822a04:	1905383a 	mul	r2,r3,r4
  822a08:	e0fffe17 	ldw	r3,-8(fp)
  822a0c:	10c5883a 	add	r2,r2,r3
  822a10:	1085883a 	add	r2,r2,r2
  822a14:	1085883a 	add	r2,r2,r2
  822a18:	1007883a 	mov	r3,r2
  822a1c:	e0bffc17 	ldw	r2,-16(fp)
  822a20:	1885883a 	add	r2,r3,r2
  822a24:	e1000117 	ldw	r4,4(fp)
  822a28:	11000035 	stwio	r4,0(r2)
}
  822a2c:	e037883a 	mov	sp,fp
  822a30:	df000017 	ldw	fp,0(sp)
  822a34:	dec00104 	addi	sp,sp,4
  822a38:	f800283a 	ret

00822a3c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  822a3c:	deffe404 	addi	sp,sp,-112
  822a40:	dfc01b15 	stw	ra,108(sp)
  822a44:	df001a15 	stw	fp,104(sp)
  822a48:	df001a04 	addi	fp,sp,104
  822a4c:	e13fe815 	stw	r4,-96(fp)
  822a50:	e17fe915 	stw	r5,-92(fp)
  822a54:	e1bfea15 	stw	r6,-88(fp)
  822a58:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  822a5c:	e0bfe917 	ldw	r2,-92(fp)
  822a60:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  822a64:	e0ffea17 	ldw	r3,-88(fp)
  822a68:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  822a6c:	e13feb17 	ldw	r4,-84(fp)
  822a70:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  822a74:	e0800217 	ldw	r2,8(fp)
  822a78:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  822a7c:	e0fff717 	ldw	r3,-36(fp)
  822a80:	e13ff917 	ldw	r4,-28(fp)
  822a84:	1905c83a 	sub	r2,r3,r4
  822a88:	e0bfff15 	stw	r2,-4(fp)
  822a8c:	e0ffff17 	ldw	r3,-4(fp)
  822a90:	1804403a 	cmpge	r2,r3,zero
  822a94:	1000031e 	bne	r2,zero,822aa4 <alt_up_pixel_buffer_dma_draw_line+0x68>
  822a98:	e13fff17 	ldw	r4,-4(fp)
  822a9c:	0109c83a 	sub	r4,zero,r4
  822aa0:	e13fff15 	stw	r4,-4(fp)
  822aa4:	e0fff817 	ldw	r3,-32(fp)
  822aa8:	e13ffa17 	ldw	r4,-24(fp)
  822aac:	1905c83a 	sub	r2,r3,r4
  822ab0:	e0bffe15 	stw	r2,-8(fp)
  822ab4:	e0fffe17 	ldw	r3,-8(fp)
  822ab8:	1804403a 	cmpge	r2,r3,zero
  822abc:	1000031e 	bne	r2,zero,822acc <alt_up_pixel_buffer_dma_draw_line+0x90>
  822ac0:	e13ffe17 	ldw	r4,-8(fp)
  822ac4:	0109c83a 	sub	r4,zero,r4
  822ac8:	e13ffe15 	stw	r4,-8(fp)
  822acc:	e0fffe17 	ldw	r3,-8(fp)
  822ad0:	e13fff17 	ldw	r4,-4(fp)
  822ad4:	1904803a 	cmplt	r2,r3,r4
  822ad8:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  822adc:	e0bfe817 	ldw	r2,-96(fp)
  822ae0:	10800e17 	ldw	r2,56(r2)
  822ae4:	10800060 	cmpeqi	r2,r2,1
  822ae8:	10000c1e 	bne	r2,zero,822b1c <alt_up_pixel_buffer_dma_draw_line+0xe0>
  822aec:	e0bfe817 	ldw	r2,-96(fp)
  822af0:	10800e17 	ldw	r2,56(r2)
  822af4:	10800098 	cmpnei	r2,r2,2
  822af8:	1000031e 	bne	r2,zero,822b08 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  822afc:	00800044 	movi	r2,1
  822b00:	e0bffc15 	stw	r2,-16(fp)
  822b04:	00000206 	br	822b10 <alt_up_pixel_buffer_dma_draw_line+0xd4>
  822b08:	00c00084 	movi	r3,2
  822b0c:	e0fffc15 	stw	r3,-16(fp)
  822b10:	e13ffc17 	ldw	r4,-16(fp)
  822b14:	e13ffd15 	stw	r4,-12(fp)
  822b18:	00000106 	br	822b20 <alt_up_pixel_buffer_dma_draw_line+0xe4>
  822b1c:	e03ffd15 	stw	zero,-12(fp)
  822b20:	e0bffd17 	ldw	r2,-12(fp)
  822b24:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  822b28:	e0c00317 	ldw	r3,12(fp)
  822b2c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  822b30:	e0bfe817 	ldw	r2,-96(fp)
  822b34:	10800d17 	ldw	r2,52(r2)
  822b38:	1004c03a 	cmpne	r2,r2,zero
  822b3c:	1000091e 	bne	r2,zero,822b64 <alt_up_pixel_buffer_dma_draw_line+0x128>
  822b40:	e0bfe817 	ldw	r2,-96(fp)
  822b44:	10c01317 	ldw	r3,76(r2)
  822b48:	e0bfef17 	ldw	r2,-68(fp)
  822b4c:	1885c83a 	sub	r2,r3,r2
  822b50:	1007883a 	mov	r3,r2
  822b54:	00800044 	movi	r2,1
  822b58:	10c4983a 	sll	r2,r2,r3
  822b5c:	e0bffb15 	stw	r2,-20(fp)
  822b60:	00000306 	br	822b70 <alt_up_pixel_buffer_dma_draw_line+0x134>
  822b64:	e0bfe817 	ldw	r2,-96(fp)
  822b68:	10800f17 	ldw	r2,60(r2)
  822b6c:	e0bffb15 	stw	r2,-20(fp)
  822b70:	e13ffb17 	ldw	r4,-20(fp)
  822b74:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  822b78:	e0800417 	ldw	r2,16(fp)
  822b7c:	10800058 	cmpnei	r2,r2,1
  822b80:	1000041e 	bne	r2,zero,822b94 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  822b84:	e0bfe817 	ldw	r2,-96(fp)
  822b88:	10800c17 	ldw	r2,48(r2)
  822b8c:	e0bfed15 	stw	r2,-76(fp)
  822b90:	00000306 	br	822ba0 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  822b94:	e0bfe817 	ldw	r2,-96(fp)
  822b98:	10800b17 	ldw	r2,44(r2)
  822b9c:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  822ba0:	e0fff603 	ldbu	r3,-40(fp)
  822ba4:	18803fcc 	andi	r2,r3,255
  822ba8:	1080201c 	xori	r2,r2,128
  822bac:	10bfe004 	addi	r2,r2,-128
  822bb0:	10800050 	cmplti	r2,r2,1
  822bb4:	10000c1e 	bne	r2,zero,822be8 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  822bb8:	e13ffa17 	ldw	r4,-24(fp)
  822bbc:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  822bc0:	e0bff917 	ldw	r2,-28(fp)
  822bc4:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  822bc8:	e0fff317 	ldw	r3,-52(fp)
  822bcc:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  822bd0:	e13ff817 	ldw	r4,-32(fp)
  822bd4:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  822bd8:	e0bff717 	ldw	r2,-36(fp)
  822bdc:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  822be0:	e0fff317 	ldw	r3,-52(fp)
  822be4:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  822be8:	e13ff817 	ldw	r4,-32(fp)
  822bec:	e0bffa17 	ldw	r2,-24(fp)
  822bf0:	20800c0e 	bge	r4,r2,822c24 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  822bf4:	e0fffa17 	ldw	r3,-24(fp)
  822bf8:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  822bfc:	e13ff817 	ldw	r4,-32(fp)
  822c00:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  822c04:	e0bff317 	ldw	r2,-52(fp)
  822c08:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  822c0c:	e0fff917 	ldw	r3,-28(fp)
  822c10:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  822c14:	e13ff717 	ldw	r4,-36(fp)
  822c18:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  822c1c:	e0bff317 	ldw	r2,-52(fp)
  822c20:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  822c24:	e0fff817 	ldw	r3,-32(fp)
  822c28:	e13ffa17 	ldw	r4,-24(fp)
  822c2c:	1907c83a 	sub	r3,r3,r4
  822c30:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  822c34:	e0fff717 	ldw	r3,-36(fp)
  822c38:	e13ff917 	ldw	r4,-28(fp)
  822c3c:	1905c83a 	sub	r2,r3,r4
  822c40:	e0bff415 	stw	r2,-48(fp)
  822c44:	e0fff417 	ldw	r3,-48(fp)
  822c48:	1804403a 	cmpge	r2,r3,zero
  822c4c:	1000031e 	bne	r2,zero,822c5c <alt_up_pixel_buffer_dma_draw_line+0x220>
  822c50:	e13ff417 	ldw	r4,-48(fp)
  822c54:	0109c83a 	sub	r4,zero,r4
  822c58:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  822c5c:	e0fff517 	ldw	r3,-44(fp)
  822c60:	1804d7fa 	srli	r2,r3,31
  822c64:	e13ff517 	ldw	r4,-44(fp)
  822c68:	1105883a 	add	r2,r2,r4
  822c6c:	1005d07a 	srai	r2,r2,1
  822c70:	0085c83a 	sub	r2,zero,r2
  822c74:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  822c78:	e0bff917 	ldw	r2,-28(fp)
  822c7c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  822c80:	e0fff917 	ldw	r3,-28(fp)
  822c84:	e13ff717 	ldw	r4,-36(fp)
  822c88:	1900030e 	bge	r3,r4,822c98 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  822c8c:	00800044 	movi	r2,1
  822c90:	e0bff215 	stw	r2,-56(fp)
  822c94:	00000206 	br	822ca0 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  822c98:	00ffffc4 	movi	r3,-1
  822c9c:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  822ca0:	e13ff603 	ldbu	r4,-40(fp)
  822ca4:	20803fcc 	andi	r2,r4,255
  822ca8:	1080201c 	xori	r2,r2,128
  822cac:	10bfe004 	addi	r2,r2,-128
  822cb0:	10800058 	cmpnei	r2,r2,1
  822cb4:	1000221e 	bne	r2,zero,822d40 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  822cb8:	e0bffa17 	ldw	r2,-24(fp)
  822cbc:	e0bff115 	stw	r2,-60(fp)
  822cc0:	00001b06 	br	822d30 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  822cc4:	e0ffee17 	ldw	r3,-72(fp)
  822cc8:	d8c00015 	stw	r3,0(sp)
  822ccc:	e13fef17 	ldw	r4,-68(fp)
  822cd0:	d9000115 	stw	r4,4(sp)
  822cd4:	e13fed17 	ldw	r4,-76(fp)
  822cd8:	e17fec17 	ldw	r5,-80(fp)
  822cdc:	e1bff017 	ldw	r6,-64(fp)
  822ce0:	e1fff117 	ldw	r7,-60(fp)
  822ce4:	082296c0 	call	82296c <helper_plot_pixel>
			error = error + deltay;
  822ce8:	e0bff317 	ldw	r2,-52(fp)
  822cec:	e0fff417 	ldw	r3,-48(fp)
  822cf0:	10c5883a 	add	r2,r2,r3
  822cf4:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  822cf8:	e13ff317 	ldw	r4,-52(fp)
  822cfc:	20800050 	cmplti	r2,r4,1
  822d00:	1000081e 	bne	r2,zero,822d24 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  822d04:	e0bff017 	ldw	r2,-64(fp)
  822d08:	e0fff217 	ldw	r3,-56(fp)
  822d0c:	10c5883a 	add	r2,r2,r3
  822d10:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  822d14:	e13ff317 	ldw	r4,-52(fp)
  822d18:	e0bff517 	ldw	r2,-44(fp)
  822d1c:	2089c83a 	sub	r4,r4,r2
  822d20:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  822d24:	e0fff117 	ldw	r3,-60(fp)
  822d28:	18c00044 	addi	r3,r3,1
  822d2c:	e0fff115 	stw	r3,-60(fp)
  822d30:	e13ff817 	ldw	r4,-32(fp)
  822d34:	e0bff117 	ldw	r2,-60(fp)
  822d38:	20bfe20e 	bge	r4,r2,822cc4 <alt_up_pixel_buffer_dma_draw_line+0x288>
  822d3c:	00002106 	br	822dc4 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  822d40:	e0fffa17 	ldw	r3,-24(fp)
  822d44:	e0fff115 	stw	r3,-60(fp)
  822d48:	00001b06 	br	822db8 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  822d4c:	e13fee17 	ldw	r4,-72(fp)
  822d50:	d9000015 	stw	r4,0(sp)
  822d54:	e0bfef17 	ldw	r2,-68(fp)
  822d58:	d8800115 	stw	r2,4(sp)
  822d5c:	e13fed17 	ldw	r4,-76(fp)
  822d60:	e17fec17 	ldw	r5,-80(fp)
  822d64:	e1bff117 	ldw	r6,-60(fp)
  822d68:	e1fff017 	ldw	r7,-64(fp)
  822d6c:	082296c0 	call	82296c <helper_plot_pixel>
			error = error + deltay;
  822d70:	e0fff317 	ldw	r3,-52(fp)
  822d74:	e13ff417 	ldw	r4,-48(fp)
  822d78:	1907883a 	add	r3,r3,r4
  822d7c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  822d80:	e0fff317 	ldw	r3,-52(fp)
  822d84:	18800050 	cmplti	r2,r3,1
  822d88:	1000081e 	bne	r2,zero,822dac <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  822d8c:	e13ff017 	ldw	r4,-64(fp)
  822d90:	e0bff217 	ldw	r2,-56(fp)
  822d94:	2089883a 	add	r4,r4,r2
  822d98:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  822d9c:	e0fff317 	ldw	r3,-52(fp)
  822da0:	e13ff517 	ldw	r4,-44(fp)
  822da4:	1907c83a 	sub	r3,r3,r4
  822da8:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  822dac:	e0bff117 	ldw	r2,-60(fp)
  822db0:	10800044 	addi	r2,r2,1
  822db4:	e0bff115 	stw	r2,-60(fp)
  822db8:	e0fff817 	ldw	r3,-32(fp)
  822dbc:	e13ff117 	ldw	r4,-60(fp)
  822dc0:	193fe20e 	bge	r3,r4,822d4c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  822dc4:	e037883a 	mov	sp,fp
  822dc8:	dfc00117 	ldw	ra,4(sp)
  822dcc:	df000017 	ldw	fp,0(sp)
  822dd0:	dec00204 	addi	sp,sp,8
  822dd4:	f800283a 	ret

00822dd8 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  822dd8:	defffa04 	addi	sp,sp,-24
  822ddc:	dfc00515 	stw	ra,20(sp)
  822de0:	df000415 	stw	fp,16(sp)
  822de4:	df000404 	addi	fp,sp,16
  822de8:	e13ffe15 	stw	r4,-8(fp)
  822dec:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  822df0:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
  822df4:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  822df8:	1005003a 	cmpeq	r2,r2,zero
  822dfc:	1000221e 	bne	r2,zero,822e88 <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
  822e00:	00803fc4 	movi	r2,255
  822e04:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  822e08:	d0bc4c17 	ldw	r2,-3792(gp)
  822e0c:	1009883a 	mov	r4,r2
  822e10:	e0fffe17 	ldw	r3,-8(fp)
  822e14:	e0bfff17 	ldw	r2,-4(fp)
  822e18:	1885883a 	add	r2,r3,r2
  822e1c:	1006927a 	slli	r3,r2,9
  822e20:	2005883a 	mov	r2,r4
  822e24:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  822e28:	d0bc4b17 	ldw	r2,-3796(gp)
  822e2c:	1007883a 	mov	r3,r2
  822e30:	00800604 	movi	r2,24
  822e34:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  822e38:	d0bc4817 	ldw	r2,-3808(gp)
  822e3c:	1080002b 	ldhuio	r2,0(r2)
  822e40:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
  822e44:	e0bffc0b 	ldhu	r2,-16(fp)
  822e48:	10bfffcc 	andi	r2,r2,65535
  822e4c:	1080010c 	andi	r2,r2,4
  822e50:	1004c03a 	cmpne	r2,r2,zero
  822e54:	103ff81e 	bne	r2,zero,822e38 <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  822e58:	e0bffc0b 	ldhu	r2,-16(fp)
  822e5c:	10bfffcc 	andi	r2,r2,65535
  822e60:	1080040c 	andi	r2,r2,16
  822e64:	1004c03a 	cmpne	r2,r2,zero
  822e68:	1000071e 	bne	r2,zero,822e88 <Write_Sector_Data+0xb0>
			result = true;
  822e6c:	00800044 	movi	r2,1
  822e70:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
  822e74:	d03c5115 	stw	zero,-3772(gp)
			current_sector_index = sector_index + partition_offset;
  822e78:	e0fffe17 	ldw	r3,-8(fp)
  822e7c:	e0bfff17 	ldw	r2,-4(fp)
  822e80:	1885883a 	add	r2,r3,r2
  822e84:	d0bc5215 	stw	r2,-3768(gp)
		}
	}
	return result;
  822e88:	e0bffd17 	ldw	r2,-12(fp)
}
  822e8c:	e037883a 	mov	sp,fp
  822e90:	dfc00117 	ldw	ra,4(sp)
  822e94:	df000017 	ldw	fp,0(sp)
  822e98:	dec00204 	addi	sp,sp,8
  822e9c:	f800283a 	ret

00822ea0 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  822ea0:	defffd04 	addi	sp,sp,-12
  822ea4:	dfc00215 	stw	ra,8(sp)
  822ea8:	df000115 	stw	fp,4(sp)
  822eac:	df000104 	addi	fp,sp,4
	bool result = true;
  822eb0:	00800044 	movi	r2,1
  822eb4:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
  822eb8:	d0bc5117 	ldw	r2,-3772(gp)
  822ebc:	1005003a 	cmpeq	r2,r2,zero
  822ec0:	1000051e 	bne	r2,zero,822ed8 <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
  822ec4:	d0bc5217 	ldw	r2,-3768(gp)
  822ec8:	1009883a 	mov	r4,r2
  822ecc:	000b883a 	mov	r5,zero
  822ed0:	0822dd80 	call	822dd8 <Write_Sector_Data>
  822ed4:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
  822ed8:	e0bfff17 	ldw	r2,-4(fp)
}
  822edc:	e037883a 	mov	sp,fp
  822ee0:	dfc00117 	ldw	ra,4(sp)
  822ee4:	df000017 	ldw	fp,0(sp)
  822ee8:	dec00204 	addi	sp,sp,8
  822eec:	f800283a 	ret

00822ef0 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  822ef0:	defff904 	addi	sp,sp,-28
  822ef4:	dfc00615 	stw	ra,24(sp)
  822ef8:	df000515 	stw	fp,20(sp)
  822efc:	df000504 	addi	fp,sp,20
  822f00:	e13ffd15 	stw	r4,-12(fp)
  822f04:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  822f08:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  822f0c:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  822f10:	1005003a 	cmpeq	r2,r2,zero
  822f14:	10002d1e 	bne	r2,zero,822fcc <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
  822f18:	00803fc4 	movi	r2,255
  822f1c:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  822f20:	d0bc5117 	ldw	r2,-3772(gp)
  822f24:	1005003a 	cmpeq	r2,r2,zero
  822f28:	1000081e 	bne	r2,zero,822f4c <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  822f2c:	d0bc5217 	ldw	r2,-3768(gp)
  822f30:	1009883a 	mov	r4,r2
  822f34:	000b883a 	mov	r5,zero
  822f38:	0822dd80 	call	822dd8 <Write_Sector_Data>
  822f3c:	1004c03a 	cmpne	r2,r2,zero
  822f40:	1000021e 	bne	r2,zero,822f4c <Read_Sector_Data+0x5c>
				return false;
  822f44:	e03fff15 	stw	zero,-4(fp)
  822f48:	00002206 	br	822fd4 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  822f4c:	d0bc4c17 	ldw	r2,-3792(gp)
  822f50:	1009883a 	mov	r4,r2
  822f54:	e0fffd17 	ldw	r3,-12(fp)
  822f58:	e0bffe17 	ldw	r2,-8(fp)
  822f5c:	1885883a 	add	r2,r3,r2
  822f60:	1006927a 	slli	r3,r2,9
  822f64:	2005883a 	mov	r2,r4
  822f68:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  822f6c:	d0bc4b17 	ldw	r2,-3796(gp)
  822f70:	1007883a 	mov	r3,r2
  822f74:	00800444 	movi	r2,17
  822f78:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  822f7c:	d0bc4817 	ldw	r2,-3808(gp)
  822f80:	1080002b 	ldhuio	r2,0(r2)
  822f84:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  822f88:	e0bffb0b 	ldhu	r2,-20(fp)
  822f8c:	10bfffcc 	andi	r2,r2,65535
  822f90:	1080010c 	andi	r2,r2,4
  822f94:	1004c03a 	cmpne	r2,r2,zero
  822f98:	103ff81e 	bne	r2,zero,822f7c <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
  822f9c:	e0bffb0b 	ldhu	r2,-20(fp)
  822fa0:	10bfffcc 	andi	r2,r2,65535
  822fa4:	1080040c 	andi	r2,r2,16
  822fa8:	1004c03a 	cmpne	r2,r2,zero
  822fac:	1000071e 	bne	r2,zero,822fcc <Read_Sector_Data+0xdc>
			result = true;
  822fb0:	00800044 	movi	r2,1
  822fb4:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  822fb8:	d03c5115 	stw	zero,-3772(gp)
			current_sector_index = sector_index + partition_offset;
  822fbc:	e0fffd17 	ldw	r3,-12(fp)
  822fc0:	e0bffe17 	ldw	r2,-8(fp)
  822fc4:	1885883a 	add	r2,r3,r2
  822fc8:	d0bc5215 	stw	r2,-3768(gp)
		}
	}
	return result;
  822fcc:	e0bffc17 	ldw	r2,-16(fp)
  822fd0:	e0bfff15 	stw	r2,-4(fp)
  822fd4:	e0bfff17 	ldw	r2,-4(fp)
}
  822fd8:	e037883a 	mov	sp,fp
  822fdc:	dfc00117 	ldw	ra,4(sp)
  822fe0:	df000017 	ldw	fp,0(sp)
  822fe4:	dec00204 	addi	sp,sp,8
  822fe8:	f800283a 	ret

00822fec <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  822fec:	defffa04 	addi	sp,sp,-24
  822ff0:	dfc00515 	stw	ra,20(sp)
  822ff4:	df000415 	stw	fp,16(sp)
  822ff8:	df000404 	addi	fp,sp,16
  822ffc:	e13ffd15 	stw	r4,-12(fp)
  823000:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  823004:	e0bffd17 	ldw	r2,-12(fp)
  823008:	1006d23a 	srli	r3,r2,8
  82300c:	d0bc4e17 	ldw	r2,-3784(gp)
  823010:	1885883a 	add	r2,r3,r2
  823014:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  823018:	008020f4 	movhi	r2,131
  82301c:	109cd904 	addi	r2,r2,29540
  823020:	10c01117 	ldw	r3,68(r2)
  823024:	e0bffc17 	ldw	r2,-16(fp)
  823028:	10c5883a 	add	r2,r2,r3
  82302c:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
  823030:	d0fc5217 	ldw	r3,-3768(gp)
  823034:	e0bffc17 	ldw	r2,-16(fp)
  823038:	10c00726 	beq	r2,r3,823058 <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
  82303c:	e13ffc17 	ldw	r4,-16(fp)
  823040:	000b883a 	mov	r5,zero
  823044:	0822ef00 	call	822ef0 <Read_Sector_Data>
  823048:	1004c03a 	cmpne	r2,r2,zero
  82304c:	1000021e 	bne	r2,zero,823058 <get_cluster_flag+0x6c>
			return false;
  823050:	e03fff15 	stw	zero,-4(fp)
  823054:	00000d06 	br	82308c <get_cluster_flag+0xa0>
		}
	}
	*flag
  823058:	d0bc5017 	ldw	r2,-3776(gp)
  82305c:	10800a17 	ldw	r2,40(r2)
  823060:	1007883a 	mov	r3,r2
  823064:	e0bffd17 	ldw	r2,-12(fp)
  823068:	10803fcc 	andi	r2,r2,255
  82306c:	1085883a 	add	r2,r2,r2
  823070:	1885883a 	add	r2,r3,r2
  823074:	1080002b 	ldhuio	r2,0(r2)
  823078:	1007883a 	mov	r3,r2
  82307c:	e0bffe17 	ldw	r2,-8(fp)
  823080:	10c0000d 	sth	r3,0(r2)
			= (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
  823084:	00800044 	movi	r2,1
  823088:	e0bfff15 	stw	r2,-4(fp)
  82308c:	e0bfff17 	ldw	r2,-4(fp)
}
  823090:	e037883a 	mov	sp,fp
  823094:	dfc00117 	ldw	ra,4(sp)
  823098:	df000017 	ldw	fp,0(sp)
  82309c:	dec00204 	addi	sp,sp,8
  8230a0:	f800283a 	ret

008230a4 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  8230a4:	defff904 	addi	sp,sp,-28
  8230a8:	dfc00615 	stw	ra,24(sp)
  8230ac:	df000515 	stw	fp,20(sp)
  8230b0:	df000504 	addi	fp,sp,20
  8230b4:	e13ffc15 	stw	r4,-16(fp)
  8230b8:	e1bffe15 	stw	r6,-8(fp)
  8230bc:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
  8230c0:	e0bffc17 	ldw	r2,-16(fp)
  8230c4:	1006d23a 	srli	r3,r2,8
  8230c8:	d0bc4e17 	ldw	r2,-3784(gp)
  8230cc:	1885883a 	add	r2,r3,r2
  8230d0:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
  8230d4:	e0bffe17 	ldw	r2,-8(fp)
  8230d8:	1005003a 	cmpeq	r2,r2,zero
  8230dc:	1000071e 	bne	r2,zero,8230fc <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
  8230e0:	008020f4 	movhi	r2,131
  8230e4:	109cd904 	addi	r2,r2,29540
  8230e8:	10c01117 	ldw	r3,68(r2)
  8230ec:	e0bffb17 	ldw	r2,-20(fp)
  8230f0:	10c5883a 	add	r2,r2,r3
  8230f4:	e0bffb15 	stw	r2,-20(fp)
  8230f8:	00000606 	br	823114 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
  8230fc:	008020f4 	movhi	r2,131
  823100:	109cd904 	addi	r2,r2,29540
  823104:	10c01217 	ldw	r3,72(r2)
  823108:	e0bffb17 	ldw	r2,-20(fp)
  82310c:	10c5883a 	add	r2,r2,r3
  823110:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
  823114:	d0fc5217 	ldw	r3,-3768(gp)
  823118:	e0bffb17 	ldw	r2,-20(fp)
  82311c:	10c00726 	beq	r2,r3,82313c <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
  823120:	e13ffb17 	ldw	r4,-20(fp)
  823124:	000b883a 	mov	r5,zero
  823128:	0822ef00 	call	822ef0 <Read_Sector_Data>
  82312c:	1004c03a 	cmpne	r2,r2,zero
  823130:	1000021e 	bne	r2,zero,82313c <mark_cluster+0x98>
			return false;
  823134:	e03fff15 	stw	zero,-4(fp)
  823138:	00000d06 	br	823170 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  82313c:	d0bc5017 	ldw	r2,-3776(gp)
  823140:	10800a17 	ldw	r2,40(r2)
  823144:	1007883a 	mov	r3,r2
  823148:	e0bffc17 	ldw	r2,-16(fp)
  82314c:	10803fcc 	andi	r2,r2,255
  823150:	1085883a 	add	r2,r2,r2
  823154:	1885883a 	add	r2,r3,r2
  823158:	e0fffd0f 	ldh	r3,-12(fp)
  82315c:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
  823160:	00800044 	movi	r2,1
  823164:	d0bc5115 	stw	r2,-3772(gp)
	return true;
  823168:	00800044 	movi	r2,1
  82316c:	e0bfff15 	stw	r2,-4(fp)
  823170:	e0bfff17 	ldw	r2,-4(fp)
}
  823174:	e037883a 	mov	sp,fp
  823178:	dfc00117 	ldw	ra,4(sp)
  82317c:	df000017 	ldw	fp,0(sp)
  823180:	dec00204 	addi	sp,sp,8
  823184:	f800283a 	ret

00823188 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
  823188:	defff704 	addi	sp,sp,-36
  82318c:	dfc00815 	stw	ra,32(sp)
  823190:	df000715 	stw	fp,28(sp)
  823194:	df000704 	addi	fp,sp,28
	bool result = false;
  823198:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
  82319c:	0009883a 	mov	r4,zero
  8231a0:	000b883a 	mov	r5,zero
  8231a4:	08273080 	call	827308 <Read_Sector_Data_Attempt_CRC>
  8231a8:	1005003a 	cmpeq	r2,r2,zero
  8231ac:	10005c1e 	bne	r2,zero,823320 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  8231b0:	d0bc5017 	ldw	r2,-3776(gp)
  8231b4:	10800a17 	ldw	r2,40(r2)
  8231b8:	10807f84 	addi	r2,r2,510
  8231bc:	1080002b 	ldhuio	r2,0(r2)
  8231c0:	10bfffcc 	andi	r2,r2,65535
  8231c4:	10a0001c 	xori	r2,r2,32768
  8231c8:	10a00004 	addi	r2,r2,-32768
  8231cc:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
  8231d0:	e0bffd17 	ldw	r2,-12(fp)
  8231d4:	10ffffcc 	andi	r3,r2,65535
  8231d8:	00aa9554 	movui	r2,43605
  8231dc:	1880501e 	bne	r3,r2,823320 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  8231e0:	e03ffe15 	stw	zero,-8(fp)
  8231e4:	00004b06 	br	823314 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
  8231e8:	e0bffe17 	ldw	r2,-8(fp)
  8231ec:	1004913a 	slli	r2,r2,4
  8231f0:	10806f84 	addi	r2,r2,446
  8231f4:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type
  8231f8:	d0bc5017 	ldw	r2,-3776(gp)
  8231fc:	10800a17 	ldw	r2,40(r2)
  823200:	1007883a 	mov	r3,r2
  823204:	e0bffa17 	ldw	r2,-24(fp)
  823208:	1885883a 	add	r2,r3,r2
  82320c:	10800104 	addi	r2,r2,4
  823210:	10800023 	ldbuio	r2,0(r2)
  823214:	e0bff905 	stb	r2,-28(fp)
						= (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
  823218:	e0bff907 	ldb	r2,-28(fp)
  82321c:	10800060 	cmpeqi	r2,r2,1
  823220:	1000091e 	bne	r2,zero,823248 <Check_for_Master_Boot_Record+0xc0>
  823224:	e0bff907 	ldb	r2,-28(fp)
  823228:	10800120 	cmpeqi	r2,r2,4
  82322c:	1000061e 	bne	r2,zero,823248 <Check_for_Master_Boot_Record+0xc0>
  823230:	e0bff907 	ldb	r2,-28(fp)
  823234:	108001a0 	cmpeqi	r2,r2,6
  823238:	1000031e 	bne	r2,zero,823248 <Check_for_Master_Boot_Record+0xc0>
  82323c:	e0bff907 	ldb	r2,-28(fp)
  823240:	10800398 	cmpnei	r2,r2,14
  823244:	1000301e 	bne	r2,zero,823308 <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset
  823248:	d0bc5017 	ldw	r2,-3776(gp)
  82324c:	10800a17 	ldw	r2,40(r2)
  823250:	1007883a 	mov	r3,r2
  823254:	e0bffa17 	ldw	r2,-24(fp)
  823258:	1885883a 	add	r2,r3,r2
  82325c:	10800284 	addi	r2,r2,10
  823260:	1080002b 	ldhuio	r2,0(r2)
  823264:	10bfffcc 	andi	r2,r2,65535
  823268:	1008943a 	slli	r4,r2,16
  82326c:	d0bc5017 	ldw	r2,-3776(gp)
  823270:	10800a17 	ldw	r2,40(r2)
  823274:	1007883a 	mov	r3,r2
  823278:	e0bffa17 	ldw	r2,-24(fp)
  82327c:	1885883a 	add	r2,r3,r2
  823280:	10800204 	addi	r2,r2,8
  823284:	1080002b 	ldhuio	r2,0(r2)
  823288:	10bfffcc 	andi	r2,r2,65535
  82328c:	2084b03a 	or	r2,r4,r2
  823290:	e0bffc15 	stw	r2,-16(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size
  823294:	d0bc5017 	ldw	r2,-3776(gp)
  823298:	10800a17 	ldw	r2,40(r2)
  82329c:	1007883a 	mov	r3,r2
  8232a0:	e0bffa17 	ldw	r2,-24(fp)
  8232a4:	1885883a 	add	r2,r3,r2
  8232a8:	10800384 	addi	r2,r2,14
  8232ac:	1080002b 	ldhuio	r2,0(r2)
  8232b0:	10bfffcc 	andi	r2,r2,65535
  8232b4:	1008943a 	slli	r4,r2,16
  8232b8:	d0bc5017 	ldw	r2,-3776(gp)
  8232bc:	10800a17 	ldw	r2,40(r2)
  8232c0:	1007883a 	mov	r3,r2
  8232c4:	e0bffa17 	ldw	r2,-24(fp)
  8232c8:	1885883a 	add	r2,r3,r2
  8232cc:	10800304 	addi	r2,r2,12
  8232d0:	1080002b 	ldhuio	r2,0(r2)
  8232d4:	10bfffcc 	andi	r2,r2,65535
  8232d8:	2084b03a 	or	r2,r4,r2
  8232dc:	e0bffb15 	stw	r2,-20(fp)
							= (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
  8232e0:	e0bffb17 	ldw	r2,-20(fp)
  8232e4:	10800050 	cmplti	r2,r2,1
  8232e8:	1000071e 	bne	r2,zero,823308 <Check_for_Master_Boot_Record+0x180>
						result = true;
  8232ec:	00800044 	movi	r2,1
  8232f0:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  8232f4:	e0bffb17 	ldw	r2,-20(fp)
  8232f8:	d0bc4f15 	stw	r2,-3780(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  8232fc:	e0bffc17 	ldw	r2,-16(fp)
  823300:	d0bc4e15 	stw	r2,-3784(gp)
						break;
  823304:	00000606 	br	823320 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
  823308:	e0bffe17 	ldw	r2,-8(fp)
  82330c:	10800044 	addi	r2,r2,1
  823310:	e0bffe15 	stw	r2,-8(fp)
  823314:	e0bffe17 	ldw	r2,-8(fp)
  823318:	10800110 	cmplti	r2,r2,4
  82331c:	103fb21e 	bne	r2,zero,8231e8 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
  823320:	e0bfff17 	ldw	r2,-4(fp)
}
  823324:	e037883a 	mov	sp,fp
  823328:	dfc00117 	ldw	ra,4(sp)
  82332c:	df000017 	ldw	fp,0(sp)
  823330:	dec00204 	addi	sp,sp,8
  823334:	f800283a 	ret

00823338 <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  823338:	defff804 	addi	sp,sp,-32
  82333c:	dfc00715 	stw	ra,28(sp)
  823340:	df000615 	stw	fp,24(sp)
  823344:	df000604 	addi	fp,sp,24
  823348:	e13ffc15 	stw	r4,-16(fp)
  82334c:	e17ffd15 	stw	r5,-12(fp)
  823350:	e1bffe15 	stw	r6,-8(fp)
  823354:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
  823358:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  82335c:	e0bffc17 	ldw	r2,-16(fp)
  823360:	108007cc 	andi	r2,r2,31
  823364:	1004c03a 	cmpne	r2,r2,zero
  823368:	10008e1e 	bne	r2,zero,8235a4 <Read_File_Record_At_Offset+0x26c>
  82336c:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  823370:	1005003a 	cmpeq	r2,r2,zero
  823374:	10008b1e 	bne	r2,zero,8235a4 <Read_File_Record_At_Offset+0x26c>
  823378:	d0bc4717 	ldw	r2,-3812(gp)
  82337c:	1005003a 	cmpeq	r2,r2,zero
  823380:	1000881e 	bne	r2,zero,8235a4 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  823384:	e03ffa15 	stw	zero,-24(fp)
  823388:	00001006 	br	8233cc <Read_File_Record_At_Offset+0x94>
			record->name[counter]
  82338c:	e17ffa17 	ldw	r5,-24(fp)
  823390:	d0bc5017 	ldw	r2,-3776(gp)
  823394:	10800a17 	ldw	r2,40(r2)
  823398:	1009883a 	mov	r4,r2
  82339c:	e0fffc17 	ldw	r3,-16(fp)
  8233a0:	e0bffa17 	ldw	r2,-24(fp)
  8233a4:	1885883a 	add	r2,r3,r2
  8233a8:	2085883a 	add	r2,r4,r2
  8233ac:	10800023 	ldbuio	r2,0(r2)
  8233b0:	1007883a 	mov	r3,r2
  8233b4:	e0bffd17 	ldw	r2,-12(fp)
  8233b8:	1145883a 	add	r2,r2,r5
  8233bc:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
  8233c0:	e0bffa17 	ldw	r2,-24(fp)
  8233c4:	10800044 	addi	r2,r2,1
  8233c8:	e0bffa15 	stw	r2,-24(fp)
  8233cc:	e0bffa17 	ldw	r2,-24(fp)
  8233d0:	10800210 	cmplti	r2,r2,8
  8233d4:	103fed1e 	bne	r2,zero,82338c <Read_File_Record_At_Offset+0x54>
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  8233d8:	e03ffa15 	stw	zero,-24(fp)
  8233dc:	00001206 	br	823428 <Read_File_Record_At_Offset+0xf0>
			record->extension[counter]
  8233e0:	e17ffa17 	ldw	r5,-24(fp)
  8233e4:	d0bc5017 	ldw	r2,-3776(gp)
  8233e8:	10800a17 	ldw	r2,40(r2)
  8233ec:	1009883a 	mov	r4,r2
  8233f0:	e0fffc17 	ldw	r3,-16(fp)
  8233f4:	e0bffa17 	ldw	r2,-24(fp)
  8233f8:	1885883a 	add	r2,r3,r2
  8233fc:	2085883a 	add	r2,r4,r2
  823400:	10800204 	addi	r2,r2,8
  823404:	10800023 	ldbuio	r2,0(r2)
  823408:	1007883a 	mov	r3,r2
  82340c:	e0bffd17 	ldw	r2,-12(fp)
  823410:	2885883a 	add	r2,r5,r2
  823414:	10800204 	addi	r2,r2,8
  823418:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
  82341c:	e0bffa17 	ldw	r2,-24(fp)
  823420:	10800044 	addi	r2,r2,1
  823424:	e0bffa15 	stw	r2,-24(fp)
  823428:	e0bffa17 	ldw	r2,-24(fp)
  82342c:	108000d0 	cmplti	r2,r2,3
  823430:	103feb1e 	bne	r2,zero,8233e0 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter]
					= (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes
  823434:	d0bc5017 	ldw	r2,-3776(gp)
  823438:	10800a17 	ldw	r2,40(r2)
  82343c:	1007883a 	mov	r3,r2
  823440:	e0bffc17 	ldw	r2,-16(fp)
  823444:	1885883a 	add	r2,r3,r2
  823448:	108002c4 	addi	r2,r2,11
  82344c:	10800023 	ldbuio	r2,0(r2)
  823450:	1007883a 	mov	r3,r2
  823454:	e0bffd17 	ldw	r2,-12(fp)
  823458:	10c002c5 	stb	r3,11(r2)
				= (char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time
  82345c:	d0bc5017 	ldw	r2,-3776(gp)
  823460:	10800a17 	ldw	r2,40(r2)
  823464:	1007883a 	mov	r3,r2
  823468:	e0bffc17 	ldw	r2,-16(fp)
  82346c:	1885883a 	add	r2,r3,r2
  823470:	10800384 	addi	r2,r2,14
  823474:	1080002b 	ldhuio	r2,0(r2)
  823478:	1007883a 	mov	r3,r2
  82347c:	e0bffd17 	ldw	r2,-12(fp)
  823480:	10c0030d 	sth	r3,12(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date
  823484:	d0bc5017 	ldw	r2,-3776(gp)
  823488:	10800a17 	ldw	r2,40(r2)
  82348c:	1007883a 	mov	r3,r2
  823490:	e0bffc17 	ldw	r2,-16(fp)
  823494:	1885883a 	add	r2,r3,r2
  823498:	10800404 	addi	r2,r2,16
  82349c:	1080002b 	ldhuio	r2,0(r2)
  8234a0:	1007883a 	mov	r3,r2
  8234a4:	e0bffd17 	ldw	r2,-12(fp)
  8234a8:	10c0038d 	sth	r3,14(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date
  8234ac:	d0bc5017 	ldw	r2,-3776(gp)
  8234b0:	10800a17 	ldw	r2,40(r2)
  8234b4:	1007883a 	mov	r3,r2
  8234b8:	e0bffc17 	ldw	r2,-16(fp)
  8234bc:	1885883a 	add	r2,r3,r2
  8234c0:	10800484 	addi	r2,r2,18
  8234c4:	1080002b 	ldhuio	r2,0(r2)
  8234c8:	1007883a 	mov	r3,r2
  8234cc:	e0bffd17 	ldw	r2,-12(fp)
  8234d0:	10c0040d 	sth	r3,16(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time
  8234d4:	d0bc5017 	ldw	r2,-3776(gp)
  8234d8:	10800a17 	ldw	r2,40(r2)
  8234dc:	1007883a 	mov	r3,r2
  8234e0:	e0bffc17 	ldw	r2,-16(fp)
  8234e4:	1885883a 	add	r2,r3,r2
  8234e8:	10800584 	addi	r2,r2,22
  8234ec:	1080002b 	ldhuio	r2,0(r2)
  8234f0:	1007883a 	mov	r3,r2
  8234f4:	e0bffd17 	ldw	r2,-12(fp)
  8234f8:	10c0048d 	sth	r3,18(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date
  8234fc:	d0bc5017 	ldw	r2,-3776(gp)
  823500:	10800a17 	ldw	r2,40(r2)
  823504:	1007883a 	mov	r3,r2
  823508:	e0bffc17 	ldw	r2,-16(fp)
  82350c:	1885883a 	add	r2,r3,r2
  823510:	10800604 	addi	r2,r2,24
  823514:	1080002b 	ldhuio	r2,0(r2)
  823518:	1007883a 	mov	r3,r2
  82351c:	e0bffd17 	ldw	r2,-12(fp)
  823520:	10c0050d 	sth	r3,20(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index
  823524:	d0bc5017 	ldw	r2,-3776(gp)
  823528:	10800a17 	ldw	r2,40(r2)
  82352c:	1007883a 	mov	r3,r2
  823530:	e0bffc17 	ldw	r2,-16(fp)
  823534:	1885883a 	add	r2,r3,r2
  823538:	10800684 	addi	r2,r2,26
  82353c:	1080002b 	ldhuio	r2,0(r2)
  823540:	1007883a 	mov	r3,r2
  823544:	e0bffd17 	ldw	r2,-12(fp)
  823548:	10c0058d 	sth	r3,22(r2)
				= (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes
  82354c:	d0bc5017 	ldw	r2,-3776(gp)
  823550:	10800a17 	ldw	r2,40(r2)
  823554:	1007883a 	mov	r3,r2
  823558:	e0bffc17 	ldw	r2,-16(fp)
  82355c:	1885883a 	add	r2,r3,r2
  823560:	10800704 	addi	r2,r2,28
  823564:	10800037 	ldwio	r2,0(r2)
  823568:	1007883a 	mov	r3,r2
  82356c:	e0bffd17 	ldw	r2,-12(fp)
  823570:	10c00615 	stw	r3,24(r2)
				= (unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
  823574:	e0fffd17 	ldw	r3,-12(fp)
  823578:	e0bffe17 	ldw	r2,-8(fp)
  82357c:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  823580:	e0fffd17 	ldw	r3,-12(fp)
  823584:	e0bfff17 	ldw	r2,-4(fp)
  823588:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  82358c:	e0bffc17 	ldw	r2,-16(fp)
  823590:	1007883a 	mov	r3,r2
  823594:	e0bffd17 	ldw	r2,-12(fp)
  823598:	10c00c0d 	sth	r3,48(r2)
		result = true;
  82359c:	00800044 	movi	r2,1
  8235a0:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  8235a4:	e0bffb17 	ldw	r2,-20(fp)
}
  8235a8:	e037883a 	mov	sp,fp
  8235ac:	dfc00117 	ldw	ra,4(sp)
  8235b0:	df000017 	ldw	fp,0(sp)
  8235b4:	dec00204 	addi	sp,sp,8
  8235b8:	f800283a 	ret

008235bc <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  8235bc:	defff904 	addi	sp,sp,-28
  8235c0:	dfc00615 	stw	ra,24(sp)
  8235c4:	df000515 	stw	fp,20(sp)
  8235c8:	df000504 	addi	fp,sp,20
  8235cc:	e13ffe15 	stw	r4,-8(fp)
  8235d0:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
  8235d4:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
  8235d8:	e0bffe17 	ldw	r2,-8(fp)
  8235dc:	108007cc 	andi	r2,r2,31
  8235e0:	1004c03a 	cmpne	r2,r2,zero
  8235e4:	10009d1e 	bne	r2,zero,82385c <Write_File_Record_At_Offset+0x2a0>
  8235e8:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  8235ec:	1005003a 	cmpeq	r2,r2,zero
  8235f0:	10009a1e 	bne	r2,zero,82385c <Write_File_Record_At_Offset+0x2a0>
  8235f4:	d0bc4717 	ldw	r2,-3812(gp)
  8235f8:	1005003a 	cmpeq	r2,r2,zero
  8235fc:	1000971e 	bne	r2,zero,82385c <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  823600:	e03ffc15 	stw	zero,-16(fp)
  823604:	00001e06 	br	823680 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
  823608:	e0bffc17 	ldw	r2,-16(fp)
  82360c:	10c00044 	addi	r3,r2,1
  823610:	e0bfff17 	ldw	r2,-4(fp)
  823614:	10c5883a 	add	r2,r2,r3
  823618:	10800003 	ldbu	r2,0(r2)
  82361c:	10803fcc 	andi	r2,r2,255
  823620:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
  823624:	e0bffb0f 	ldh	r2,-20(fp)
  823628:	1004923a 	slli	r2,r2,8
  82362c:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
  823630:	e0fffc17 	ldw	r3,-16(fp)
  823634:	e0bfff17 	ldw	r2,-4(fp)
  823638:	10c5883a 	add	r2,r2,r3
  82363c:	10800003 	ldbu	r2,0(r2)
  823640:	10c03fcc 	andi	r3,r2,255
  823644:	e0bffb0b 	ldhu	r2,-20(fp)
  823648:	10c4b03a 	or	r2,r2,r3
  82364c:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  823650:	d0bc5017 	ldw	r2,-3776(gp)
  823654:	10800a17 	ldw	r2,40(r2)
  823658:	1009883a 	mov	r4,r2
  82365c:	e0fffe17 	ldw	r3,-8(fp)
  823660:	e0bffc17 	ldw	r2,-16(fp)
  823664:	1885883a 	add	r2,r3,r2
  823668:	2085883a 	add	r2,r4,r2
  82366c:	e0fffb0f 	ldh	r3,-20(fp)
  823670:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
  823674:	e0bffc17 	ldw	r2,-16(fp)
  823678:	10800084 	addi	r2,r2,2
  82367c:	e0bffc15 	stw	r2,-16(fp)
  823680:	e0bffc17 	ldw	r2,-16(fp)
  823684:	10800210 	cmplti	r2,r2,8
  823688:	103fdf1e 	bne	r2,zero,823608 <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  82368c:	e03ffc15 	stw	zero,-16(fp)
  823690:	00001306 	br	8236e0 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  823694:	d0bc5017 	ldw	r2,-3776(gp)
  823698:	10800a17 	ldw	r2,40(r2)
  82369c:	1009883a 	mov	r4,r2
  8236a0:	e0fffe17 	ldw	r3,-8(fp)
  8236a4:	e0bffc17 	ldw	r2,-16(fp)
  8236a8:	1885883a 	add	r2,r3,r2
  8236ac:	2085883a 	add	r2,r4,r2
  8236b0:	11000204 	addi	r4,r2,8
  8236b4:	e0fffc17 	ldw	r3,-16(fp)
  8236b8:	e0bfff17 	ldw	r2,-4(fp)
  8236bc:	1885883a 	add	r2,r3,r2
  8236c0:	10800204 	addi	r2,r2,8
  8236c4:	10800003 	ldbu	r2,0(r2)
  8236c8:	10c03fcc 	andi	r3,r2,255
  8236cc:	2005883a 	mov	r2,r4
  8236d0:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
  8236d4:	e0bffc17 	ldw	r2,-16(fp)
  8236d8:	10800044 	addi	r2,r2,1
  8236dc:	e0bffc15 	stw	r2,-16(fp)
  8236e0:	e0bffc17 	ldw	r2,-16(fp)
  8236e4:	108000d0 	cmplti	r2,r2,3
  8236e8:	103fea1e 	bne	r2,zero,823694 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  8236ec:	d0bc5017 	ldw	r2,-3776(gp)
  8236f0:	10800a17 	ldw	r2,40(r2)
  8236f4:	1007883a 	mov	r3,r2
  8236f8:	e0bffe17 	ldw	r2,-8(fp)
  8236fc:	1885883a 	add	r2,r3,r2
  823700:	110002c4 	addi	r4,r2,11
  823704:	e0bfff17 	ldw	r2,-4(fp)
  823708:	108002c3 	ldbu	r2,11(r2)
  82370c:	10c03fcc 	andi	r3,r2,255
  823710:	2005883a 	mov	r2,r4
  823714:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  823718:	d0bc5017 	ldw	r2,-3776(gp)
  82371c:	10800a17 	ldw	r2,40(r2)
  823720:	1007883a 	mov	r3,r2
  823724:	e0bffe17 	ldw	r2,-8(fp)
  823728:	1885883a 	add	r2,r3,r2
  82372c:	11000384 	addi	r4,r2,14
  823730:	e0bfff17 	ldw	r2,-4(fp)
  823734:	1080030b 	ldhu	r2,12(r2)
  823738:	10ffffcc 	andi	r3,r2,65535
  82373c:	2005883a 	mov	r2,r4
  823740:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  823744:	d0bc5017 	ldw	r2,-3776(gp)
  823748:	10800a17 	ldw	r2,40(r2)
  82374c:	1007883a 	mov	r3,r2
  823750:	e0bffe17 	ldw	r2,-8(fp)
  823754:	1885883a 	add	r2,r3,r2
  823758:	11000404 	addi	r4,r2,16
  82375c:	e0bfff17 	ldw	r2,-4(fp)
  823760:	1080038b 	ldhu	r2,14(r2)
  823764:	10ffffcc 	andi	r3,r2,65535
  823768:	2005883a 	mov	r2,r4
  82376c:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  823770:	d0bc5017 	ldw	r2,-3776(gp)
  823774:	10800a17 	ldw	r2,40(r2)
  823778:	1007883a 	mov	r3,r2
  82377c:	e0bffe17 	ldw	r2,-8(fp)
  823780:	1885883a 	add	r2,r3,r2
  823784:	11000484 	addi	r4,r2,18
  823788:	e0bfff17 	ldw	r2,-4(fp)
  82378c:	1080040b 	ldhu	r2,16(r2)
  823790:	10ffffcc 	andi	r3,r2,65535
  823794:	2005883a 	mov	r2,r4
  823798:	10c0002d 	sthio	r3,0(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  82379c:	d0bc5017 	ldw	r2,-3776(gp)
  8237a0:	10800a17 	ldw	r2,40(r2)
  8237a4:	1007883a 	mov	r3,r2
  8237a8:	e0bffe17 	ldw	r2,-8(fp)
  8237ac:	1885883a 	add	r2,r3,r2
  8237b0:	11000584 	addi	r4,r2,22
  8237b4:	e0bfff17 	ldw	r2,-4(fp)
  8237b8:	1080048b 	ldhu	r2,18(r2)
  8237bc:	10ffffcc 	andi	r3,r2,65535
  8237c0:	2005883a 	mov	r2,r4
  8237c4:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  8237c8:	d0bc5017 	ldw	r2,-3776(gp)
  8237cc:	10800a17 	ldw	r2,40(r2)
  8237d0:	1007883a 	mov	r3,r2
  8237d4:	e0bffe17 	ldw	r2,-8(fp)
  8237d8:	1885883a 	add	r2,r3,r2
  8237dc:	11000604 	addi	r4,r2,24
  8237e0:	e0bfff17 	ldw	r2,-4(fp)
  8237e4:	1080050b 	ldhu	r2,20(r2)
  8237e8:	10ffffcc 	andi	r3,r2,65535
  8237ec:	2005883a 	mov	r2,r4
  8237f0:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  8237f4:	d0bc5017 	ldw	r2,-3776(gp)
  8237f8:	10800a17 	ldw	r2,40(r2)
  8237fc:	1007883a 	mov	r3,r2
  823800:	e0bffe17 	ldw	r2,-8(fp)
  823804:	1885883a 	add	r2,r3,r2
  823808:	11000684 	addi	r4,r2,26
  82380c:	e0bfff17 	ldw	r2,-4(fp)
  823810:	1080058b 	ldhu	r2,22(r2)
  823814:	10ffffcc 	andi	r3,r2,65535
  823818:	2005883a 	mov	r2,r4
  82381c:	10c0002d 	sthio	r3,0(r2)
		IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  823820:	d0bc5017 	ldw	r2,-3776(gp)
  823824:	10800a17 	ldw	r2,40(r2)
  823828:	1007883a 	mov	r3,r2
  82382c:	e0bffe17 	ldw	r2,-8(fp)
  823830:	1885883a 	add	r2,r3,r2
  823834:	11000704 	addi	r4,r2,28
  823838:	e0bfff17 	ldw	r2,-4(fp)
  82383c:	10800617 	ldw	r2,24(r2)
  823840:	1007883a 	mov	r3,r2
  823844:	2005883a 	mov	r2,r4
  823848:	10c00035 	stwio	r3,0(r2)
		current_sector_modified = true;
  82384c:	00800044 	movi	r2,1
  823850:	d0bc5115 	stw	r2,-3772(gp)
		result = true;
  823854:	00800044 	movi	r2,1
  823858:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
  82385c:	e0bffd17 	ldw	r2,-12(fp)
}
  823860:	e037883a 	mov	sp,fp
  823864:	dfc00117 	ldw	ra,4(sp)
  823868:	df000017 	ldw	fp,0(sp)
  82386c:	dec00204 	addi	sp,sp,8
  823870:	f800283a 	ret

00823874 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
  823874:	defff804 	addi	sp,sp,-32
  823878:	dfc00715 	stw	ra,28(sp)
  82387c:	df000615 	stw	fp,24(sp)
  823880:	dc000515 	stw	r16,20(sp)
  823884:	df000504 	addi	fp,sp,20
  823888:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
  82388c:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
  823890:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
  823894:	0009883a 	mov	r4,zero
  823898:	e17fff17 	ldw	r5,-4(fp)
  82389c:	08273080 	call	827308 <Read_Sector_Data_Attempt_CRC>
  8238a0:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  8238a4:	d0bc5017 	ldw	r2,-3776(gp)
  8238a8:	10800a17 	ldw	r2,40(r2)
  8238ac:	10807f84 	addi	r2,r2,510
  8238b0:	1080002b 	ldhuio	r2,0(r2)
  8238b4:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  8238b8:	e0bffc0f 	ldh	r2,-16(fp)
  8238bc:	10ffffcc 	andi	r3,r2,65535
  8238c0:	00aa9554 	movui	r2,43605
  8238c4:	1881751e 	bne	r3,r2,823e9c <Check_for_DOS_FAT+0x628>
  8238c8:	e0bffe17 	ldw	r2,-8(fp)
  8238cc:	1005003a 	cmpeq	r2,r2,zero
  8238d0:	1001721e 	bne	r2,zero,823e9c <Check_for_DOS_FAT+0x628>
		int num_clusters = 0;
  8238d4:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0]
  8238d8:	d0bc5017 	ldw	r2,-3776(gp)
  8238dc:	10800a17 	ldw	r2,40(r2)
  8238e0:	10800023 	ldbuio	r2,0(r2)
  8238e4:	1007883a 	mov	r3,r2
  8238e8:	008020f4 	movhi	r2,131
  8238ec:	109cd904 	addi	r2,r2,29540
  8238f0:	10c00005 	stb	r3,0(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
  8238f4:	d0bc5017 	ldw	r2,-3776(gp)
  8238f8:	10800a17 	ldw	r2,40(r2)
  8238fc:	10800044 	addi	r2,r2,1
  823900:	10800023 	ldbuio	r2,0(r2)
  823904:	1007883a 	mov	r3,r2
  823908:	008020f4 	movhi	r2,131
  82390c:	109cd904 	addi	r2,r2,29540
  823910:	10c00045 	stb	r3,1(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
  823914:	d0bc5017 	ldw	r2,-3776(gp)
  823918:	10800a17 	ldw	r2,40(r2)
  82391c:	10800084 	addi	r2,r2,2
  823920:	10800023 	ldbuio	r2,0(r2)
  823924:	1007883a 	mov	r3,r2
  823928:	008020f4 	movhi	r2,131
  82392c:	109cd904 	addi	r2,r2,29540
  823930:	10c00085 	stb	r3,2(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  823934:	e03ffd15 	stw	zero,-12(fp)
  823938:	00001006 	br	82397c <Check_for_DOS_FAT+0x108>
			boot_sector_data.OEM_name[counter]
  82393c:	e13ffd17 	ldw	r4,-12(fp)
  823940:	d0bc5017 	ldw	r2,-3776(gp)
  823944:	10800a17 	ldw	r2,40(r2)
  823948:	1007883a 	mov	r3,r2
  82394c:	e0bffd17 	ldw	r2,-12(fp)
  823950:	1885883a 	add	r2,r3,r2
  823954:	108000c4 	addi	r2,r2,3
  823958:	10800023 	ldbuio	r2,0(r2)
  82395c:	1007883a 	mov	r3,r2
  823960:	008020f4 	movhi	r2,131
  823964:	109cd904 	addi	r2,r2,29540
  823968:	1105883a 	add	r2,r2,r4
  82396c:	10c000c5 	stb	r3,3(r2)
				= (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1]
				= (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2]
				= (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
  823970:	e0bffd17 	ldw	r2,-12(fp)
  823974:	10800044 	addi	r2,r2,1
  823978:	e0bffd15 	stw	r2,-12(fp)
  82397c:	e0bffd17 	ldw	r2,-12(fp)
  823980:	10800210 	cmplti	r2,r2,8
  823984:	103fed1e 	bne	r2,zero,82393c <Check_for_DOS_FAT+0xc8>
			boot_sector_data.OEM_name[counter]
					= (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes
  823988:	d0bc5017 	ldw	r2,-3776(gp)
  82398c:	10800a17 	ldw	r2,40(r2)
  823990:	10800304 	addi	r2,r2,12
  823994:	10800023 	ldbuio	r2,0(r2)
  823998:	10803fcc 	andi	r2,r2,255
  82399c:	1004923a 	slli	r2,r2,8
  8239a0:	1007883a 	mov	r3,r2
  8239a4:	d0bc5017 	ldw	r2,-3776(gp)
  8239a8:	10800a17 	ldw	r2,40(r2)
  8239ac:	108002c4 	addi	r2,r2,11
  8239b0:	10800023 	ldbuio	r2,0(r2)
  8239b4:	10803fcc 	andi	r2,r2,255
  8239b8:	1080201c 	xori	r2,r2,128
  8239bc:	10bfe004 	addi	r2,r2,-128
  8239c0:	1884b03a 	or	r2,r3,r2
  8239c4:	1007883a 	mov	r3,r2
  8239c8:	008020f4 	movhi	r2,131
  8239cc:	109cd904 	addi	r2,r2,29540
  8239d0:	10c0030d 	sth	r3,12(r2)
				= (((unsigned char) IORD_8DIRECT(device_pointer->base, 12))
						<< 8) | ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster
  8239d4:	d0bc5017 	ldw	r2,-3776(gp)
  8239d8:	10800a17 	ldw	r2,40(r2)
  8239dc:	10800344 	addi	r2,r2,13
  8239e0:	10800023 	ldbuio	r2,0(r2)
  8239e4:	1007883a 	mov	r3,r2
  8239e8:	008020f4 	movhi	r2,131
  8239ec:	109cd904 	addi	r2,r2,29540
  8239f0:	10c00385 	stb	r3,14(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors
  8239f4:	d0bc5017 	ldw	r2,-3776(gp)
  8239f8:	10800a17 	ldw	r2,40(r2)
  8239fc:	10800384 	addi	r2,r2,14
  823a00:	1080002b 	ldhuio	r2,0(r2)
  823a04:	1007883a 	mov	r3,r2
  823a08:	008020f4 	movhi	r2,131
  823a0c:	109cd904 	addi	r2,r2,29540
  823a10:	10c0040d 	sth	r3,16(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs
  823a14:	d0bc5017 	ldw	r2,-3776(gp)
  823a18:	10800a17 	ldw	r2,40(r2)
  823a1c:	10800404 	addi	r2,r2,16
  823a20:	10800023 	ldbuio	r2,0(r2)
  823a24:	1007883a 	mov	r3,r2
  823a28:	008020f4 	movhi	r2,131
  823a2c:	109cd904 	addi	r2,r2,29540
  823a30:	10c00485 	stb	r3,18(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires
  823a34:	d0bc5017 	ldw	r2,-3776(gp)
  823a38:	10800a17 	ldw	r2,40(r2)
  823a3c:	10800484 	addi	r2,r2,18
  823a40:	10800023 	ldbuio	r2,0(r2)
  823a44:	10803fcc 	andi	r2,r2,255
  823a48:	1004923a 	slli	r2,r2,8
  823a4c:	1007883a 	mov	r3,r2
  823a50:	d0bc5017 	ldw	r2,-3776(gp)
  823a54:	10800a17 	ldw	r2,40(r2)
  823a58:	10800444 	addi	r2,r2,17
  823a5c:	10800023 	ldbuio	r2,0(r2)
  823a60:	10803fcc 	andi	r2,r2,255
  823a64:	1884b03a 	or	r2,r3,r2
  823a68:	1007883a 	mov	r3,r2
  823a6c:	008020f4 	movhi	r2,131
  823a70:	109cd904 	addi	r2,r2,29540
  823a74:	10c0050d 	sth	r3,20(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition
  823a78:	d0bc5017 	ldw	r2,-3776(gp)
  823a7c:	10800a17 	ldw	r2,40(r2)
  823a80:	10800504 	addi	r2,r2,20
  823a84:	10800023 	ldbuio	r2,0(r2)
  823a88:	10803fcc 	andi	r2,r2,255
  823a8c:	1004923a 	slli	r2,r2,8
  823a90:	1007883a 	mov	r3,r2
  823a94:	d0bc5017 	ldw	r2,-3776(gp)
  823a98:	10800a17 	ldw	r2,40(r2)
  823a9c:	108004c4 	addi	r2,r2,19
  823aa0:	10800023 	ldbuio	r2,0(r2)
  823aa4:	10803fcc 	andi	r2,r2,255
  823aa8:	1884b03a 	or	r2,r3,r2
  823aac:	1007883a 	mov	r3,r2
  823ab0:	008020f4 	movhi	r2,131
  823ab4:	109cd904 	addi	r2,r2,29540
  823ab8:	10c0058d 	sth	r3,22(r2)
				= (((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor
  823abc:	d0bc5017 	ldw	r2,-3776(gp)
  823ac0:	10800a17 	ldw	r2,40(r2)
  823ac4:	10800544 	addi	r2,r2,21
  823ac8:	10800023 	ldbuio	r2,0(r2)
  823acc:	1007883a 	mov	r3,r2
  823ad0:	008020f4 	movhi	r2,131
  823ad4:	109cd904 	addi	r2,r2,29540
  823ad8:	10c00605 	stb	r3,24(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table
  823adc:	d0bc5017 	ldw	r2,-3776(gp)
  823ae0:	10800a17 	ldw	r2,40(r2)
  823ae4:	10800584 	addi	r2,r2,22
  823ae8:	1080002b 	ldhuio	r2,0(r2)
  823aec:	1007883a 	mov	r3,r2
  823af0:	008020f4 	movhi	r2,131
  823af4:	109cd904 	addi	r2,r2,29540
  823af8:	10c0068d 	sth	r3,26(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track
  823afc:	d0bc5017 	ldw	r2,-3776(gp)
  823b00:	10800a17 	ldw	r2,40(r2)
  823b04:	10800604 	addi	r2,r2,24
  823b08:	1080002b 	ldhuio	r2,0(r2)
  823b0c:	1007883a 	mov	r3,r2
  823b10:	008020f4 	movhi	r2,131
  823b14:	109cd904 	addi	r2,r2,29540
  823b18:	10c0070d 	sth	r3,28(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads
  823b1c:	d0bc5017 	ldw	r2,-3776(gp)
  823b20:	10800a17 	ldw	r2,40(r2)
  823b24:	10800684 	addi	r2,r2,26
  823b28:	1080002b 	ldhuio	r2,0(r2)
  823b2c:	1007883a 	mov	r3,r2
  823b30:	008020f4 	movhi	r2,131
  823b34:	109cd904 	addi	r2,r2,29540
  823b38:	10c0078d 	sth	r3,30(r2)
				= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors
  823b3c:	d0bc5017 	ldw	r2,-3776(gp)
  823b40:	10800a17 	ldw	r2,40(r2)
  823b44:	10800704 	addi	r2,r2,28
  823b48:	10800037 	ldwio	r2,0(r2)
  823b4c:	1007883a 	mov	r3,r2
  823b50:	008020f4 	movhi	r2,131
  823b54:	109cd904 	addi	r2,r2,29540
  823b58:	10c00815 	stw	r3,32(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB
  823b5c:	d0bc5017 	ldw	r2,-3776(gp)
  823b60:	10800a17 	ldw	r2,40(r2)
  823b64:	10800804 	addi	r2,r2,32
  823b68:	10800037 	ldwio	r2,0(r2)
  823b6c:	1007883a 	mov	r3,r2
  823b70:	008020f4 	movhi	r2,131
  823b74:	109cd904 	addi	r2,r2,29540
  823b78:	10c00915 	stw	r3,36(r2)
				= ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number
  823b7c:	d0bc5017 	ldw	r2,-3776(gp)
  823b80:	10800a17 	ldw	r2,40(r2)
  823b84:	10800904 	addi	r2,r2,36
  823b88:	10800023 	ldbuio	r2,0(r2)
  823b8c:	1007883a 	mov	r3,r2
  823b90:	008020f4 	movhi	r2,131
  823b94:	109cd904 	addi	r2,r2,29540
  823b98:	10c00a05 	stb	r3,40(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head
  823b9c:	d0bc5017 	ldw	r2,-3776(gp)
  823ba0:	10800a17 	ldw	r2,40(r2)
  823ba4:	10800944 	addi	r2,r2,37
  823ba8:	10800023 	ldbuio	r2,0(r2)
  823bac:	1007883a 	mov	r3,r2
  823bb0:	008020f4 	movhi	r2,131
  823bb4:	109cd904 	addi	r2,r2,29540
  823bb8:	10c00a45 	stb	r3,41(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature
  823bbc:	d0bc5017 	ldw	r2,-3776(gp)
  823bc0:	10800a17 	ldw	r2,40(r2)
  823bc4:	10800984 	addi	r2,r2,38
  823bc8:	10800023 	ldbuio	r2,0(r2)
  823bcc:	1007883a 	mov	r3,r2
  823bd0:	008020f4 	movhi	r2,131
  823bd4:	109cd904 	addi	r2,r2,29540
  823bd8:	10c00a85 	stb	r3,42(r2)
				= ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset
  823bdc:	008020f4 	movhi	r2,131
  823be0:	109cd904 	addi	r2,r2,29540
  823be4:	1080040b 	ldhu	r2,16(r2)
  823be8:	10ffffcc 	andi	r3,r2,65535
  823bec:	008020f4 	movhi	r2,131
  823bf0:	109cd904 	addi	r2,r2,29540
  823bf4:	10c01115 	stw	r3,68(r2)
				= boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset
  823bf8:	008020f4 	movhi	r2,131
  823bfc:	109cd904 	addi	r2,r2,29540
  823c00:	10c01117 	ldw	r3,68(r2)
  823c04:	008020f4 	movhi	r2,131
  823c08:	109cd904 	addi	r2,r2,29540
  823c0c:	1080068b 	ldhu	r2,26(r2)
  823c10:	10bfffcc 	andi	r2,r2,65535
  823c14:	1887883a 	add	r3,r3,r2
  823c18:	008020f4 	movhi	r2,131
  823c1c:	109cd904 	addi	r2,r2,29540
  823c20:	10c01215 	stw	r3,72(r2)
				= boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset
  823c24:	008020f4 	movhi	r2,131
  823c28:	109cd904 	addi	r2,r2,29540
  823c2c:	10c01217 	ldw	r3,72(r2)
  823c30:	008020f4 	movhi	r2,131
  823c34:	109cd904 	addi	r2,r2,29540
  823c38:	1080068b 	ldhu	r2,26(r2)
  823c3c:	10bfffcc 	andi	r2,r2,65535
  823c40:	1887883a 	add	r3,r3,r2
  823c44:	008020f4 	movhi	r2,131
  823c48:	109cd904 	addi	r2,r2,29540
  823c4c:	10c01315 	stw	r3,76(r2)
				= boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset
  823c50:	008020f4 	movhi	r2,131
  823c54:	109cd904 	addi	r2,r2,29540
  823c58:	14001317 	ldw	r16,76(r2)
  823c5c:	008020f4 	movhi	r2,131
  823c60:	109cd904 	addi	r2,r2,29540
  823c64:	1080050b 	ldhu	r2,20(r2)
  823c68:	10bfffcc 	andi	r2,r2,65535
  823c6c:	1008917a 	slli	r4,r2,5
  823c70:	008020f4 	movhi	r2,131
  823c74:	109cd904 	addi	r2,r2,29540
  823c78:	1080030b 	ldhu	r2,12(r2)
  823c7c:	117fffcc 	andi	r5,r2,65535
  823c80:	08145fc0 	call	8145fc <__divsi3>
  823c84:	8087883a 	add	r3,r16,r2
  823c88:	008020f4 	movhi	r2,131
  823c8c:	109cd904 	addi	r2,r2,29540
  823c90:	10c01415 	stw	r3,80(r2)
				= boot_sector_data.root_directory_sector_offset + (32
						* boot_sector_data.max_number_of_dir_entires
						/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
  823c94:	008020f4 	movhi	r2,131
  823c98:	109cd904 	addi	r2,r2,29540
  823c9c:	1080058b 	ldhu	r2,22(r2)
  823ca0:	10bfffcc 	andi	r2,r2,65535
  823ca4:	1005003a 	cmpeq	r2,r2,zero
  823ca8:	10000b1e 	bne	r2,zero,823cd8 <Check_for_DOS_FAT+0x464>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
  823cac:	008020f4 	movhi	r2,131
  823cb0:	109cd904 	addi	r2,r2,29540
  823cb4:	1080058b 	ldhu	r2,22(r2)
  823cb8:	113fffcc 	andi	r4,r2,65535
  823cbc:	008020f4 	movhi	r2,131
  823cc0:	109cd904 	addi	r2,r2,29540
  823cc4:	10800383 	ldbu	r2,14(r2)
  823cc8:	11403fcc 	andi	r5,r2,255
  823ccc:	08145fc0 	call	8145fc <__divsi3>
  823cd0:	e0bffb15 	stw	r2,-20(fp)
  823cd4:	00000906 	br	823cfc <Check_for_DOS_FAT+0x488>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
  823cd8:	008020f4 	movhi	r2,131
  823cdc:	109cd904 	addi	r2,r2,29540
  823ce0:	11000917 	ldw	r4,36(r2)
  823ce4:	008020f4 	movhi	r2,131
  823ce8:	109cd904 	addi	r2,r2,29540
  823cec:	10800383 	ldbu	r2,14(r2)
  823cf0:	11403fcc 	andi	r5,r2,255
  823cf4:	08146bc0 	call	8146bc <__udivsi3>
  823cf8:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
  823cfc:	e0bffb17 	ldw	r2,-20(fp)
  823d00:	1083fdc8 	cmpgei	r2,r2,4087
  823d04:	1000051e 	bne	r2,zero,823d1c <Check_for_DOS_FAT+0x4a8>
			boot_sector_data.bits_for_cluster_index = 12;
  823d08:	00c020f4 	movhi	r3,131
  823d0c:	18dcd904 	addi	r3,r3,29540
  823d10:	00800304 	movi	r2,12
  823d14:	18801085 	stb	r2,66(r3)
  823d18:	00000c06 	br	823d4c <Check_for_DOS_FAT+0x4d8>
		} else if (num_clusters <= 65517) {
  823d1c:	e0fffb17 	ldw	r3,-20(fp)
  823d20:	00bffb54 	movui	r2,65517
  823d24:	10c00516 	blt	r2,r3,823d3c <Check_for_DOS_FAT+0x4c8>
			boot_sector_data.bits_for_cluster_index = 16;
  823d28:	00c020f4 	movhi	r3,131
  823d2c:	18dcd904 	addi	r3,r3,29540
  823d30:	00800404 	movi	r2,16
  823d34:	18801085 	stb	r2,66(r3)
  823d38:	00000406 	br	823d4c <Check_for_DOS_FAT+0x4d8>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
  823d3c:	00c020f4 	movhi	r3,131
  823d40:	18dcd904 	addi	r3,r3,29540
  823d44:	00800804 	movi	r2,32
  823d48:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
  823d4c:	e03ffd15 	stw	zero,-12(fp)
  823d50:	00001106 	br	823d98 <Check_for_DOS_FAT+0x524>
			boot_sector_data.volume_id[counter]
  823d54:	e13ffd17 	ldw	r4,-12(fp)
  823d58:	d0bc5017 	ldw	r2,-3776(gp)
  823d5c:	10800a17 	ldw	r2,40(r2)
  823d60:	1007883a 	mov	r3,r2
  823d64:	e0bffd17 	ldw	r2,-12(fp)
  823d68:	1885883a 	add	r2,r3,r2
  823d6c:	108009c4 	addi	r2,r2,39
  823d70:	10800023 	ldbuio	r2,0(r2)
  823d74:	1007883a 	mov	r3,r2
  823d78:	008020f4 	movhi	r2,131
  823d7c:	109cd904 	addi	r2,r2,29540
  823d80:	2085883a 	add	r2,r4,r2
  823d84:	10800a04 	addi	r2,r2,40
  823d88:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
  823d8c:	e0bffd17 	ldw	r2,-12(fp)
  823d90:	10800044 	addi	r2,r2,1
  823d94:	e0bffd15 	stw	r2,-12(fp)
  823d98:	e0bffd17 	ldw	r2,-12(fp)
  823d9c:	10800110 	cmplti	r2,r2,4
  823da0:	103fec1e 	bne	r2,zero,823d54 <Check_for_DOS_FAT+0x4e0>
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  823da4:	e03ffd15 	stw	zero,-12(fp)
  823da8:	00001106 	br	823df0 <Check_for_DOS_FAT+0x57c>
			boot_sector_data.volume_label[counter]
  823dac:	e13ffd17 	ldw	r4,-12(fp)
  823db0:	d0bc5017 	ldw	r2,-3776(gp)
  823db4:	10800a17 	ldw	r2,40(r2)
  823db8:	1007883a 	mov	r3,r2
  823dbc:	e0bffd17 	ldw	r2,-12(fp)
  823dc0:	1885883a 	add	r2,r3,r2
  823dc4:	10800ac4 	addi	r2,r2,43
  823dc8:	10800023 	ldbuio	r2,0(r2)
  823dcc:	1007883a 	mov	r3,r2
  823dd0:	008020f4 	movhi	r2,131
  823dd4:	109cd904 	addi	r2,r2,29540
  823dd8:	2085883a 	add	r2,r4,r2
  823ddc:	10800b04 	addi	r2,r2,44
  823de0:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
  823de4:	e0bffd17 	ldw	r2,-12(fp)
  823de8:	10800044 	addi	r2,r2,1
  823dec:	e0bffd15 	stw	r2,-12(fp)
  823df0:	e0bffd17 	ldw	r2,-12(fp)
  823df4:	108002d0 	cmplti	r2,r2,11
  823df8:	103fec1e 	bne	r2,zero,823dac <Check_for_DOS_FAT+0x538>
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  823dfc:	e03ffd15 	stw	zero,-12(fp)
  823e00:	00001106 	br	823e48 <Check_for_DOS_FAT+0x5d4>
			boot_sector_data.file_system_type[counter]
  823e04:	e13ffd17 	ldw	r4,-12(fp)
  823e08:	d0bc5017 	ldw	r2,-3776(gp)
  823e0c:	10800a17 	ldw	r2,40(r2)
  823e10:	1007883a 	mov	r3,r2
  823e14:	e0bffd17 	ldw	r2,-12(fp)
  823e18:	1885883a 	add	r2,r3,r2
  823e1c:	10800d84 	addi	r2,r2,54
  823e20:	10800023 	ldbuio	r2,0(r2)
  823e24:	1007883a 	mov	r3,r2
  823e28:	008020f4 	movhi	r2,131
  823e2c:	109cd904 	addi	r2,r2,29540
  823e30:	2085883a 	add	r2,r4,r2
  823e34:	10800e04 	addi	r2,r2,56
  823e38:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
  823e3c:	e0bffd17 	ldw	r2,-12(fp)
  823e40:	10800044 	addi	r2,r2,1
  823e44:	e0bffd15 	stw	r2,-12(fp)
  823e48:	e0bffd17 	ldw	r2,-12(fp)
  823e4c:	10800210 	cmplti	r2,r2,8
  823e50:	103fec1e 	bne	r2,zero,823e04 <Check_for_DOS_FAT+0x590>
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  823e54:	e03ffd15 	stw	zero,-12(fp)
  823e58:	00000a06 	br	823e84 <Check_for_DOS_FAT+0x610>
			active_files[counter].in_use = false;
  823e5c:	e0bffd17 	ldw	r2,-12(fp)
  823e60:	00c020f4 	movhi	r3,131
  823e64:	18dcee04 	addi	r3,r3,29624
  823e68:	100491ba 	slli	r2,r2,6
  823e6c:	10c5883a 	add	r2,r2,r3
  823e70:	10800f04 	addi	r2,r2,60
  823e74:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter]
					= ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
  823e78:	e0bffd17 	ldw	r2,-12(fp)
  823e7c:	10800044 	addi	r2,r2,1
  823e80:	e0bffd15 	stw	r2,-12(fp)
  823e84:	e0bffd17 	ldw	r2,-12(fp)
  823e88:	10800510 	cmplti	r2,r2,20
  823e8c:	103ff31e 	bne	r2,zero,823e5c <Check_for_DOS_FAT+0x5e8>
			active_files[counter].in_use = false;
		}
		result = true;
  823e90:	00800044 	movi	r2,1
  823e94:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
  823e98:	00000106 	br	823ea0 <Check_for_DOS_FAT+0x62c>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
  823e9c:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
  823ea0:	e0bffe17 	ldw	r2,-8(fp)
}
  823ea4:	e037883a 	mov	sp,fp
  823ea8:	dfc00217 	ldw	ra,8(sp)
  823eac:	df000117 	ldw	fp,4(sp)
  823eb0:	dc000017 	ldw	r16,0(sp)
  823eb4:	dec00304 	addi	sp,sp,12
  823eb8:	f800283a 	ret

00823ebc <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  823ebc:	defffc04 	addi	sp,sp,-16
  823ec0:	dfc00315 	stw	ra,12(sp)
  823ec4:	df000215 	stw	fp,8(sp)
  823ec8:	df000204 	addi	fp,sp,8
	bool result = false;
  823ecc:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  823ed0:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  823ed4:	1005003a 	cmpeq	r2,r2,zero
  823ed8:	1000331e 	bne	r2,zero,823fa8 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
  823edc:	0009883a 	mov	r4,zero
  823ee0:	000b883a 	mov	r5,zero
  823ee4:	08273080 	call	827308 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
  823ee8:	d0bc4a17 	ldw	r2,-3800(gp)
  823eec:	1080000b 	ldhu	r2,0(r2)
  823ef0:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
  823ef4:	d03c4e15 	stw	zero,-3784(gp)
		fat_partition_size_in_512_byte_sectors = 0;
  823ef8:	d03c4f15 	stw	zero,-3780(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00)
  823efc:	e0bffe0f 	ldh	r2,-8(fp)
  823f00:	1004803a 	cmplt	r2,r2,zero
  823f04:	1000281e 	bne	r2,zero,823fa8 <Look_for_FAT16+0xec>
  823f08:	e0bffe0b 	ldhu	r2,-8(fp)
  823f0c:	10bfffcc 	andi	r2,r2,65535
  823f10:	1083000c 	andi	r2,r2,3072
  823f14:	10830020 	cmpeqi	r2,r2,3072
  823f18:	1000231e 	bne	r2,zero,823fa8 <Look_for_FAT16+0xec>
				!= 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
  823f1c:	e0bffe0b 	ldhu	r2,-8(fp)
  823f20:	10bfffcc 	andi	r2,r2,65535
  823f24:	1083000c 	andi	r2,r2,3072
  823f28:	10810018 	cmpnei	r2,r2,1024
  823f2c:	1000031e 	bne	r2,zero,823f3c <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  823f30:	0009883a 	mov	r4,zero
  823f34:	08238740 	call	823874 <Check_for_DOS_FAT>
  823f38:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
  823f3c:	e0bffe0b 	ldhu	r2,-8(fp)
  823f40:	10bfffcc 	andi	r2,r2,65535
  823f44:	1083000c 	andi	r2,r2,3072
  823f48:	1004c03a 	cmpne	r2,r2,zero
  823f4c:	1000061e 	bne	r2,zero,823f68 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
  823f50:	08231880 	call	823188 <Check_for_Master_Boot_Record>
  823f54:	1005003a 	cmpeq	r2,r2,zero
  823f58:	1000031e 	bne	r2,zero,823f68 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
  823f5c:	d13c4e17 	ldw	r4,-3784(gp)
  823f60:	08238740 	call	823874 <Check_for_DOS_FAT>
  823f64:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
  823f68:	e0bfff17 	ldw	r2,-4(fp)
  823f6c:	10800058 	cmpnei	r2,r2,1
  823f70:	10000d1e 	bne	r2,zero,823fa8 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
  823f74:	008020f4 	movhi	r2,131
  823f78:	109cd904 	addi	r2,r2,29540
  823f7c:	10801083 	ldbu	r2,66(r2)
  823f80:	10803fcc 	andi	r2,r2,255
  823f84:	10800420 	cmpeqi	r2,r2,16
  823f88:	1000021e 	bne	r2,zero,823f94 <Look_for_FAT16+0xd8>
					result = false;
  823f8c:	e03fff15 	stw	zero,-4(fp)
  823f90:	00000506 	br	823fa8 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors
  823f94:	008020f4 	movhi	r2,131
  823f98:	109cd904 	addi	r2,r2,29540
  823f9c:	1080058b 	ldhu	r2,22(r2)
  823fa0:	10bfffcc 	andi	r2,r2,65535
  823fa4:	d0bc4f15 	stw	r2,-3780(gp)
							= boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
  823fa8:	e0bfff17 	ldw	r2,-4(fp)
}
  823fac:	e037883a 	mov	sp,fp
  823fb0:	dfc00117 	ldw	ra,4(sp)
  823fb4:	df000017 	ldw	fp,0(sp)
  823fb8:	dec00204 	addi	sp,sp,8
  823fbc:	f800283a 	ret

00823fc0 <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  823fc0:	defffb04 	addi	sp,sp,-20
  823fc4:	dfc00415 	stw	ra,16(sp)
  823fc8:	df000315 	stw	fp,12(sp)
  823fcc:	df000304 	addi	fp,sp,12
  823fd0:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
  823fd4:	e13fff17 	ldw	r4,-4(fp)
  823fd8:	0815adc0 	call	815adc <strlen>
  823fdc:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  823fe0:	e03ffe15 	stw	zero,-8(fp)
  823fe4:	00002206 	br	824070 <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
  823fe8:	e0bffe17 	ldw	r2,-8(fp)
  823fec:	1007883a 	mov	r3,r2
  823ff0:	e0bfff17 	ldw	r2,-4(fp)
  823ff4:	1885883a 	add	r2,r3,r2
  823ff8:	10800003 	ldbu	r2,0(r2)
  823ffc:	10803fcc 	andi	r2,r2,255
  824000:	1080201c 	xori	r2,r2,128
  824004:	10bfe004 	addi	r2,r2,-128
  824008:	10801850 	cmplti	r2,r2,97
  82400c:	1000151e 	bne	r2,zero,824064 <filename_to_upper_case+0xa4>
  824010:	e0bffe17 	ldw	r2,-8(fp)
  824014:	1007883a 	mov	r3,r2
  824018:	e0bfff17 	ldw	r2,-4(fp)
  82401c:	1885883a 	add	r2,r3,r2
  824020:	10800003 	ldbu	r2,0(r2)
  824024:	10803fcc 	andi	r2,r2,255
  824028:	1080201c 	xori	r2,r2,128
  82402c:	10bfe004 	addi	r2,r2,-128
  824030:	10801ec8 	cmpgei	r2,r2,123
  824034:	10000b1e 	bne	r2,zero,824064 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
  824038:	e0bffe17 	ldw	r2,-8(fp)
  82403c:	1007883a 	mov	r3,r2
  824040:	e0bfff17 	ldw	r2,-4(fp)
  824044:	1889883a 	add	r4,r3,r2
  824048:	e0bffe17 	ldw	r2,-8(fp)
  82404c:	1007883a 	mov	r3,r2
  824050:	e0bfff17 	ldw	r2,-4(fp)
  824054:	1885883a 	add	r2,r3,r2
  824058:	10800003 	ldbu	r2,0(r2)
  82405c:	10bff804 	addi	r2,r2,-32
  824060:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
  824064:	e0bffe17 	ldw	r2,-8(fp)
  824068:	10800044 	addi	r2,r2,1
  82406c:	e0bffe15 	stw	r2,-8(fp)
  824070:	e0fffe17 	ldw	r3,-8(fp)
  824074:	e0bffd17 	ldw	r2,-12(fp)
  824078:	18bfdb16 	blt	r3,r2,823fe8 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
  82407c:	e037883a 	mov	sp,fp
  824080:	dfc00117 	ldw	ra,4(sp)
  824084:	df000017 	ldw	fp,0(sp)
  824088:	dec00204 	addi	sp,sp,8
  82408c:	f800283a 	ret

00824090 <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  824090:	defff804 	addi	sp,sp,-32
  824094:	dfc00715 	stw	ra,28(sp)
  824098:	df000615 	stw	fp,24(sp)
  82409c:	df000604 	addi	fp,sp,24
  8240a0:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
  8240a4:	e13fff17 	ldw	r4,-4(fp)
  8240a8:	0815adc0 	call	815adc <strlen>
  8240ac:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
  8240b0:	00bfffc4 	movi	r2,-1
  8240b4:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
  8240b8:	00bfffc4 	movi	r2,-1
  8240bc:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
  8240c0:	00800044 	movi	r2,1
  8240c4:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
  8240c8:	e03ffd15 	stw	zero,-12(fp)
  8240cc:	00007606 	br	8242a8 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ') || ((last_dir_break_position == (index
  8240d0:	e0bffd17 	ldw	r2,-12(fp)
  8240d4:	1007883a 	mov	r3,r2
  8240d8:	e0bfff17 	ldw	r2,-4(fp)
  8240dc:	1885883a 	add	r2,r3,r2
  8240e0:	10800003 	ldbu	r2,0(r2)
  8240e4:	10803fcc 	andi	r2,r2,255
  8240e8:	1080201c 	xori	r2,r2,128
  8240ec:	10bfe004 	addi	r2,r2,-128
  8240f0:	10800820 	cmpeqi	r2,r2,32
  8240f4:	1000431e 	bne	r2,zero,824204 <check_file_name_for_FAT16_compliance+0x174>
  8240f8:	e0bffd17 	ldw	r2,-12(fp)
  8240fc:	10ffffc4 	addi	r3,r2,-1
  824100:	e0bffc17 	ldw	r2,-16(fp)
  824104:	1880141e 	bne	r3,r2,824158 <check_file_name_for_FAT16_compliance+0xc8>
  824108:	e0bffd17 	ldw	r2,-12(fp)
  82410c:	1007883a 	mov	r3,r2
  824110:	e0bfff17 	ldw	r2,-4(fp)
  824114:	1885883a 	add	r2,r3,r2
  824118:	10800003 	ldbu	r2,0(r2)
  82411c:	10803fcc 	andi	r2,r2,255
  824120:	1080201c 	xori	r2,r2,128
  824124:	10bfe004 	addi	r2,r2,-128
  824128:	10801720 	cmpeqi	r2,r2,92
  82412c:	1000351e 	bne	r2,zero,824204 <check_file_name_for_FAT16_compliance+0x174>
  824130:	e0bffd17 	ldw	r2,-12(fp)
  824134:	1007883a 	mov	r3,r2
  824138:	e0bfff17 	ldw	r2,-4(fp)
  82413c:	1885883a 	add	r2,r3,r2
  824140:	10800003 	ldbu	r2,0(r2)
  824144:	10803fcc 	andi	r2,r2,255
  824148:	1080201c 	xori	r2,r2,128
  82414c:	10bfe004 	addi	r2,r2,-128
  824150:	10800be0 	cmpeqi	r2,r2,47
  824154:	10002b1e 	bne	r2,zero,824204 <check_file_name_for_FAT16_compliance+0x174>
  824158:	e0fffd17 	ldw	r3,-12(fp)
  82415c:	e0bffb17 	ldw	r2,-20(fp)
  824160:	1885c83a 	sub	r2,r3,r2
  824164:	10800258 	cmpnei	r2,r2,9
  824168:	10000a1e 	bne	r2,zero,824194 <check_file_name_for_FAT16_compliance+0x104>
  82416c:	e0bffd17 	ldw	r2,-12(fp)
  824170:	1007883a 	mov	r3,r2
  824174:	e0bfff17 	ldw	r2,-4(fp)
  824178:	1885883a 	add	r2,r3,r2
  82417c:	10800003 	ldbu	r2,0(r2)
  824180:	10803fcc 	andi	r2,r2,255
  824184:	1080201c 	xori	r2,r2,128
  824188:	10bfe004 	addi	r2,r2,-128
  82418c:	10800b98 	cmpnei	r2,r2,46
  824190:	10001c1e 	bne	r2,zero,824204 <check_file_name_for_FAT16_compliance+0x174>
  824194:	e0fffc17 	ldw	r3,-16(fp)
  824198:	e0bffb17 	ldw	r2,-20(fp)
  82419c:	18801b26 	beq	r3,r2,82420c <check_file_name_for_FAT16_compliance+0x17c>
  8241a0:	e0fffd17 	ldw	r3,-12(fp)
  8241a4:	e0bffb17 	ldw	r2,-20(fp)
  8241a8:	1885c83a 	sub	r2,r3,r2
  8241ac:	10800110 	cmplti	r2,r2,4
  8241b0:	1000161e 	bne	r2,zero,82420c <check_file_name_for_FAT16_compliance+0x17c>
  8241b4:	e0bffd17 	ldw	r2,-12(fp)
  8241b8:	1007883a 	mov	r3,r2
  8241bc:	e0bfff17 	ldw	r2,-4(fp)
  8241c0:	1885883a 	add	r2,r3,r2
  8241c4:	10800003 	ldbu	r2,0(r2)
  8241c8:	10803fcc 	andi	r2,r2,255
  8241cc:	1080201c 	xori	r2,r2,128
  8241d0:	10bfe004 	addi	r2,r2,-128
  8241d4:	10801720 	cmpeqi	r2,r2,92
  8241d8:	10000c1e 	bne	r2,zero,82420c <check_file_name_for_FAT16_compliance+0x17c>
  8241dc:	e0bffd17 	ldw	r2,-12(fp)
  8241e0:	1007883a 	mov	r3,r2
  8241e4:	e0bfff17 	ldw	r2,-4(fp)
  8241e8:	1885883a 	add	r2,r3,r2
  8241ec:	10800003 	ldbu	r2,0(r2)
  8241f0:	10803fcc 	andi	r2,r2,255
  8241f4:	1080201c 	xori	r2,r2,128
  8241f8:	10bfe004 	addi	r2,r2,-128
  8241fc:	10800be0 	cmpeqi	r2,r2,47
  824200:	1000021e 	bne	r2,zero,82420c <check_file_name_for_FAT16_compliance+0x17c>
				- 1)) && ((file_name[index] == '\\') || (file_name[index]
				== '/'))) || ((index - last_period == 9) && (file_name[index]
				!= '.')) || ((last_dir_break_position != last_period) && (index
				- last_period > 3) && (file_name[index] != '\\')
				&& (file_name[index] != '/'))) {
			result = false;
  824204:	e03ffa15 	stw	zero,-24(fp)
			break;
  824208:	00002a06 	br	8242b4 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
  82420c:	e0bffd17 	ldw	r2,-12(fp)
  824210:	1007883a 	mov	r3,r2
  824214:	e0bfff17 	ldw	r2,-4(fp)
  824218:	1885883a 	add	r2,r3,r2
  82421c:	10800003 	ldbu	r2,0(r2)
  824220:	10803fcc 	andi	r2,r2,255
  824224:	1080201c 	xori	r2,r2,128
  824228:	10bfe004 	addi	r2,r2,-128
  82422c:	10801720 	cmpeqi	r2,r2,92
  824230:	10000a1e 	bne	r2,zero,82425c <check_file_name_for_FAT16_compliance+0x1cc>
  824234:	e0bffd17 	ldw	r2,-12(fp)
  824238:	1007883a 	mov	r3,r2
  82423c:	e0bfff17 	ldw	r2,-4(fp)
  824240:	1885883a 	add	r2,r3,r2
  824244:	10800003 	ldbu	r2,0(r2)
  824248:	10803fcc 	andi	r2,r2,255
  82424c:	1080201c 	xori	r2,r2,128
  824250:	10bfe004 	addi	r2,r2,-128
  824254:	10800bd8 	cmpnei	r2,r2,47
  824258:	1000041e 	bne	r2,zero,82426c <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
  82425c:	e0bffd17 	ldw	r2,-12(fp)
  824260:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
  824264:	e0bffd17 	ldw	r2,-12(fp)
  824268:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
  82426c:	e0bffd17 	ldw	r2,-12(fp)
  824270:	1007883a 	mov	r3,r2
  824274:	e0bfff17 	ldw	r2,-4(fp)
  824278:	1885883a 	add	r2,r3,r2
  82427c:	10800003 	ldbu	r2,0(r2)
  824280:	10803fcc 	andi	r2,r2,255
  824284:	1080201c 	xori	r2,r2,128
  824288:	10bfe004 	addi	r2,r2,-128
  82428c:	10800b98 	cmpnei	r2,r2,46
  824290:	1000021e 	bne	r2,zero,82429c <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
  824294:	e0bffd17 	ldw	r2,-12(fp)
  824298:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
  82429c:	e0bffd17 	ldw	r2,-12(fp)
  8242a0:	10800044 	addi	r2,r2,1
  8242a4:	e0bffd15 	stw	r2,-12(fp)
  8242a8:	e0fffd17 	ldw	r3,-12(fp)
  8242ac:	e0bffe17 	ldw	r2,-8(fp)
  8242b0:	18bf8716 	blt	r3,r2,8240d0 <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
  8242b4:	e0fffe17 	ldw	r3,-8(fp)
  8242b8:	e0bfff17 	ldw	r2,-4(fp)
  8242bc:	1885883a 	add	r2,r3,r2
  8242c0:	10bfffc4 	addi	r2,r2,-1
  8242c4:	10800003 	ldbu	r2,0(r2)
  8242c8:	10803fcc 	andi	r2,r2,255
  8242cc:	1080201c 	xori	r2,r2,128
  8242d0:	10bfe004 	addi	r2,r2,-128
  8242d4:	10801720 	cmpeqi	r2,r2,92
  8242d8:	10000a1e 	bne	r2,zero,824304 <check_file_name_for_FAT16_compliance+0x274>
  8242dc:	e0fffe17 	ldw	r3,-8(fp)
  8242e0:	e0bfff17 	ldw	r2,-4(fp)
  8242e4:	1885883a 	add	r2,r3,r2
  8242e8:	10bfffc4 	addi	r2,r2,-1
  8242ec:	10800003 	ldbu	r2,0(r2)
  8242f0:	10803fcc 	andi	r2,r2,255
  8242f4:	1080201c 	xori	r2,r2,128
  8242f8:	10bfe004 	addi	r2,r2,-128
  8242fc:	10800bd8 	cmpnei	r2,r2,47
  824300:	1000011e 	bne	r2,zero,824308 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
  824304:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
  824308:	e0bffa17 	ldw	r2,-24(fp)
}
  82430c:	e037883a 	mov	sp,fp
  824310:	dfc00117 	ldw	ra,4(sp)
  824314:	df000017 	ldw	fp,0(sp)
  824318:	dec00204 	addi	sp,sp,8
  82431c:	f800283a 	ret

00824320 <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  824320:	defffb04 	addi	sp,sp,-20
  824324:	dfc00415 	stw	ra,16(sp)
  824328:	df000315 	stw	fp,12(sp)
  82432c:	df000304 	addi	fp,sp,12
  824330:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
  824334:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
  824338:	e13fff17 	ldw	r4,-4(fp)
  82433c:	0815adc0 	call	815adc <strlen>
  824340:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
  824344:	e03ffe15 	stw	zero,-8(fp)
  824348:	00001706 	br	8243a8 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
  82434c:	e0bffe17 	ldw	r2,-8(fp)
  824350:	1007883a 	mov	r3,r2
  824354:	e0bfff17 	ldw	r2,-4(fp)
  824358:	1885883a 	add	r2,r3,r2
  82435c:	10800003 	ldbu	r2,0(r2)
  824360:	10803fcc 	andi	r2,r2,255
  824364:	1080201c 	xori	r2,r2,128
  824368:	10bfe004 	addi	r2,r2,-128
  82436c:	10801720 	cmpeqi	r2,r2,92
  824370:	1000101e 	bne	r2,zero,8243b4 <get_dir_divider_location+0x94>
  824374:	e0bffe17 	ldw	r2,-8(fp)
  824378:	1007883a 	mov	r3,r2
  82437c:	e0bfff17 	ldw	r2,-4(fp)
  824380:	1885883a 	add	r2,r3,r2
  824384:	10800003 	ldbu	r2,0(r2)
  824388:	10803fcc 	andi	r2,r2,255
  82438c:	1080201c 	xori	r2,r2,128
  824390:	10bfe004 	addi	r2,r2,-128
  824394:	10800be0 	cmpeqi	r2,r2,47
  824398:	1000061e 	bne	r2,zero,8243b4 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
  82439c:	e0bffe17 	ldw	r2,-8(fp)
  8243a0:	10800044 	addi	r2,r2,1
  8243a4:	e0bffe15 	stw	r2,-8(fp)
  8243a8:	e0fffe17 	ldw	r3,-8(fp)
  8243ac:	e0bffd17 	ldw	r2,-12(fp)
  8243b0:	18bfe616 	blt	r3,r2,82434c <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
  8243b4:	e0fffe17 	ldw	r3,-8(fp)
  8243b8:	e0bffd17 	ldw	r2,-12(fp)
  8243bc:	1880021e 	bne	r3,r2,8243c8 <get_dir_divider_location+0xa8>
		index = -1;
  8243c0:	00bfffc4 	movi	r2,-1
  8243c4:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
  8243c8:	e0bffe17 	ldw	r2,-8(fp)
}
  8243cc:	e037883a 	mov	sp,fp
  8243d0:	dfc00117 	ldw	ra,4(sp)
  8243d4:	df000017 	ldw	fp,0(sp)
  8243d8:	dec00204 	addi	sp,sp,8
  8243dc:	f800283a 	ret

008243e0 <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  8243e0:	defff604 	addi	sp,sp,-40
  8243e4:	df000915 	stw	fp,36(sp)
  8243e8:	df000904 	addi	fp,sp,36
  8243ec:	e13ff915 	stw	r4,-28(fp)
  8243f0:	e17ffa15 	stw	r5,-24(fp)
  8243f4:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
  8243f8:	00800044 	movi	r2,1
  8243fc:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
  824400:	e03ff715 	stw	zero,-36(fp)
  824404:	00005006 	br	824548 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
  824408:	e0fff717 	ldw	r3,-36(fp)
  82440c:	e0bff917 	ldw	r2,-28(fp)
  824410:	10c5883a 	add	r2,r2,r3
  824414:	10800003 	ldbu	r2,0(r2)
  824418:	10803fcc 	andi	r2,r2,255
  82441c:	10801870 	cmpltui	r2,r2,97
  824420:	1000111e 	bne	r2,zero,824468 <match_file_record_to_name_ext+0x88>
  824424:	e0fff717 	ldw	r3,-36(fp)
  824428:	e0bff917 	ldw	r2,-28(fp)
  82442c:	10c5883a 	add	r2,r2,r3
  824430:	10800003 	ldbu	r2,0(r2)
  824434:	10803fcc 	andi	r2,r2,255
  824438:	10801ee8 	cmpgeui	r2,r2,123
  82443c:	10000a1e 	bne	r2,zero,824468 <match_file_record_to_name_ext+0x88>
  824440:	e0fff717 	ldw	r3,-36(fp)
  824444:	e0bff917 	ldw	r2,-28(fp)
  824448:	10c5883a 	add	r2,r2,r3
  82444c:	10800003 	ldbu	r2,0(r2)
  824450:	10bff804 	addi	r2,r2,-32
  824454:	10803fcc 	andi	r2,r2,255
  824458:	1080201c 	xori	r2,r2,128
  82445c:	10bfe004 	addi	r2,r2,-128
  824460:	e0bfff15 	stw	r2,-4(fp)
  824464:	00000806 	br	824488 <match_file_record_to_name_ext+0xa8>
  824468:	e0fff717 	ldw	r3,-36(fp)
  82446c:	e0bff917 	ldw	r2,-28(fp)
  824470:	10c5883a 	add	r2,r2,r3
  824474:	10800003 	ldbu	r2,0(r2)
  824478:	10803fcc 	andi	r2,r2,255
  82447c:	1080201c 	xori	r2,r2,128
  824480:	10bfe004 	addi	r2,r2,-128
  824484:	e0bfff15 	stw	r2,-4(fp)
  824488:	e0bff717 	ldw	r2,-36(fp)
  82448c:	1007883a 	mov	r3,r2
  824490:	e0bffa17 	ldw	r2,-24(fp)
  824494:	1885883a 	add	r2,r3,r2
  824498:	10800003 	ldbu	r2,0(r2)
  82449c:	10803fcc 	andi	r2,r2,255
  8244a0:	1080201c 	xori	r2,r2,128
  8244a4:	10bfe004 	addi	r2,r2,-128
  8244a8:	10801850 	cmplti	r2,r2,97
  8244ac:	1000151e 	bne	r2,zero,824504 <match_file_record_to_name_ext+0x124>
  8244b0:	e0bff717 	ldw	r2,-36(fp)
  8244b4:	1007883a 	mov	r3,r2
  8244b8:	e0bffa17 	ldw	r2,-24(fp)
  8244bc:	1885883a 	add	r2,r3,r2
  8244c0:	10800003 	ldbu	r2,0(r2)
  8244c4:	10803fcc 	andi	r2,r2,255
  8244c8:	1080201c 	xori	r2,r2,128
  8244cc:	10bfe004 	addi	r2,r2,-128
  8244d0:	10801ec8 	cmpgei	r2,r2,123
  8244d4:	10000b1e 	bne	r2,zero,824504 <match_file_record_to_name_ext+0x124>
  8244d8:	e0bff717 	ldw	r2,-36(fp)
  8244dc:	1007883a 	mov	r3,r2
  8244e0:	e0bffa17 	ldw	r2,-24(fp)
  8244e4:	1885883a 	add	r2,r3,r2
  8244e8:	10800003 	ldbu	r2,0(r2)
  8244ec:	10bff804 	addi	r2,r2,-32
  8244f0:	10803fcc 	andi	r2,r2,255
  8244f4:	1080201c 	xori	r2,r2,128
  8244f8:	10bfe004 	addi	r2,r2,-128
  8244fc:	e0bffe15 	stw	r2,-8(fp)
  824500:	00000906 	br	824528 <match_file_record_to_name_ext+0x148>
  824504:	e0bff717 	ldw	r2,-36(fp)
  824508:	1007883a 	mov	r3,r2
  82450c:	e0bffa17 	ldw	r2,-24(fp)
  824510:	1885883a 	add	r2,r3,r2
  824514:	10800003 	ldbu	r2,0(r2)
  824518:	10803fcc 	andi	r2,r2,255
  82451c:	1080201c 	xori	r2,r2,128
  824520:	10bfe004 	addi	r2,r2,-128
  824524:	e0bffe15 	stw	r2,-8(fp)
  824528:	e0bfff17 	ldw	r2,-4(fp)
  82452c:	e0fffe17 	ldw	r3,-8(fp)
  824530:	10c00226 	beq	r2,r3,82453c <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
  824534:	e03ff815 	stw	zero,-32(fp)
			break;
  824538:	00000606 	br	824554 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
  82453c:	e0bff717 	ldw	r2,-36(fp)
  824540:	10800044 	addi	r2,r2,1
  824544:	e0bff715 	stw	r2,-36(fp)
  824548:	e0bff717 	ldw	r2,-36(fp)
  82454c:	10800210 	cmplti	r2,r2,8
  824550:	103fad1e 	bne	r2,zero,824408 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  824554:	e03ff715 	stw	zero,-36(fp)
  824558:	00005406 	br	8246ac <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
  82455c:	e0fff717 	ldw	r3,-36(fp)
  824560:	e0bff917 	ldw	r2,-28(fp)
  824564:	1885883a 	add	r2,r3,r2
  824568:	10800204 	addi	r2,r2,8
  82456c:	10800003 	ldbu	r2,0(r2)
  824570:	10803fcc 	andi	r2,r2,255
  824574:	10801870 	cmpltui	r2,r2,97
  824578:	1000131e 	bne	r2,zero,8245c8 <match_file_record_to_name_ext+0x1e8>
  82457c:	e0fff717 	ldw	r3,-36(fp)
  824580:	e0bff917 	ldw	r2,-28(fp)
  824584:	1885883a 	add	r2,r3,r2
  824588:	10800204 	addi	r2,r2,8
  82458c:	10800003 	ldbu	r2,0(r2)
  824590:	10803fcc 	andi	r2,r2,255
  824594:	10801ee8 	cmpgeui	r2,r2,123
  824598:	10000b1e 	bne	r2,zero,8245c8 <match_file_record_to_name_ext+0x1e8>
  82459c:	e0fff717 	ldw	r3,-36(fp)
  8245a0:	e0bff917 	ldw	r2,-28(fp)
  8245a4:	1885883a 	add	r2,r3,r2
  8245a8:	10800204 	addi	r2,r2,8
  8245ac:	10800003 	ldbu	r2,0(r2)
  8245b0:	10bff804 	addi	r2,r2,-32
  8245b4:	10803fcc 	andi	r2,r2,255
  8245b8:	1080201c 	xori	r2,r2,128
  8245bc:	10bfe004 	addi	r2,r2,-128
  8245c0:	e0bffd15 	stw	r2,-12(fp)
  8245c4:	00000906 	br	8245ec <match_file_record_to_name_ext+0x20c>
  8245c8:	e0fff717 	ldw	r3,-36(fp)
  8245cc:	e0bff917 	ldw	r2,-28(fp)
  8245d0:	1885883a 	add	r2,r3,r2
  8245d4:	10800204 	addi	r2,r2,8
  8245d8:	10800003 	ldbu	r2,0(r2)
  8245dc:	10803fcc 	andi	r2,r2,255
  8245e0:	1080201c 	xori	r2,r2,128
  8245e4:	10bfe004 	addi	r2,r2,-128
  8245e8:	e0bffd15 	stw	r2,-12(fp)
  8245ec:	e0bff717 	ldw	r2,-36(fp)
  8245f0:	1007883a 	mov	r3,r2
  8245f4:	e0bffb17 	ldw	r2,-20(fp)
  8245f8:	1885883a 	add	r2,r3,r2
  8245fc:	10800003 	ldbu	r2,0(r2)
  824600:	10803fcc 	andi	r2,r2,255
  824604:	1080201c 	xori	r2,r2,128
  824608:	10bfe004 	addi	r2,r2,-128
  82460c:	10801850 	cmplti	r2,r2,97
  824610:	1000151e 	bne	r2,zero,824668 <match_file_record_to_name_ext+0x288>
  824614:	e0bff717 	ldw	r2,-36(fp)
  824618:	1007883a 	mov	r3,r2
  82461c:	e0bffb17 	ldw	r2,-20(fp)
  824620:	1885883a 	add	r2,r3,r2
  824624:	10800003 	ldbu	r2,0(r2)
  824628:	10803fcc 	andi	r2,r2,255
  82462c:	1080201c 	xori	r2,r2,128
  824630:	10bfe004 	addi	r2,r2,-128
  824634:	10801ec8 	cmpgei	r2,r2,123
  824638:	10000b1e 	bne	r2,zero,824668 <match_file_record_to_name_ext+0x288>
  82463c:	e0bff717 	ldw	r2,-36(fp)
  824640:	1007883a 	mov	r3,r2
  824644:	e0bffb17 	ldw	r2,-20(fp)
  824648:	1885883a 	add	r2,r3,r2
  82464c:	10800003 	ldbu	r2,0(r2)
  824650:	10bff804 	addi	r2,r2,-32
  824654:	10803fcc 	andi	r2,r2,255
  824658:	1080201c 	xori	r2,r2,128
  82465c:	10bfe004 	addi	r2,r2,-128
  824660:	e0bffc15 	stw	r2,-16(fp)
  824664:	00000906 	br	82468c <match_file_record_to_name_ext+0x2ac>
  824668:	e0bff717 	ldw	r2,-36(fp)
  82466c:	1007883a 	mov	r3,r2
  824670:	e0bffb17 	ldw	r2,-20(fp)
  824674:	1885883a 	add	r2,r3,r2
  824678:	10800003 	ldbu	r2,0(r2)
  82467c:	10803fcc 	andi	r2,r2,255
  824680:	1080201c 	xori	r2,r2,128
  824684:	10bfe004 	addi	r2,r2,-128
  824688:	e0bffc15 	stw	r2,-16(fp)
  82468c:	e0bffd17 	ldw	r2,-12(fp)
  824690:	e0fffc17 	ldw	r3,-16(fp)
  824694:	10c00226 	beq	r2,r3,8246a0 <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
  824698:	e03ff815 	stw	zero,-32(fp)
			break;
  82469c:	00000606 	br	8246b8 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
  8246a0:	e0bff717 	ldw	r2,-36(fp)
  8246a4:	10800044 	addi	r2,r2,1
  8246a8:	e0bff715 	stw	r2,-36(fp)
  8246ac:	e0bff717 	ldw	r2,-36(fp)
  8246b0:	108000d0 	cmplti	r2,r2,3
  8246b4:	103fa91e 	bne	r2,zero,82455c <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
  8246b8:	e0bff817 	ldw	r2,-32(fp)
}
  8246bc:	e037883a 	mov	sp,fp
  8246c0:	df000017 	ldw	fp,0(sp)
  8246c4:	dec00104 	addi	sp,sp,4
  8246c8:	f800283a 	ret

008246cc <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  8246cc:	deffe604 	addi	sp,sp,-104
  8246d0:	dfc01915 	stw	ra,100(sp)
  8246d4:	df001815 	stw	fp,96(sp)
  8246d8:	df001804 	addi	fp,sp,96
  8246dc:	e13ffc15 	stw	r4,-16(fp)
  8246e0:	e17ffd15 	stw	r5,-12(fp)
  8246e4:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
  8246e8:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
  8246ec:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
  8246f0:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
  8246f4:	e13ffc17 	ldw	r4,-16(fp)
  8246f8:	08243200 	call	824320 <get_dir_divider_location>
  8246fc:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
  824700:	00012206 	br	824b8c <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  824704:	00800804 	movi	r2,32
  824708:	e0bff805 	stb	r2,-32(fp)
  82470c:	00800804 	movi	r2,32
  824710:	e0bff845 	stb	r2,-31(fp)
  824714:	00800804 	movi	r2,32
  824718:	e0bff885 	stb	r2,-30(fp)
  82471c:	00800804 	movi	r2,32
  824720:	e0bff8c5 	stb	r2,-29(fp)
  824724:	00800804 	movi	r2,32
  824728:	e0bff905 	stb	r2,-28(fp)
  82472c:	00800804 	movi	r2,32
  824730:	e0bff945 	stb	r2,-27(fp)
  824734:	00800804 	movi	r2,32
  824738:	e0bff985 	stb	r2,-26(fp)
  82473c:	00800804 	movi	r2,32
  824740:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
  824744:	00800804 	movi	r2,32
  824748:	e0bffa05 	stb	r2,-24(fp)
  82474c:	00800804 	movi	r2,32
  824750:	e0bffa45 	stb	r2,-23(fp)
  824754:	00800804 	movi	r2,32
  824758:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
  82475c:	00bfffc4 	movi	r2,-1
  824760:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
  824764:	e0bff617 	ldw	r2,-40(fp)
  824768:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  82476c:	e03ff415 	stw	zero,-48(fp)
  824770:	00002e06 	br	82482c <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
  824774:	e0fff417 	ldw	r3,-48(fp)
  824778:	e0bff317 	ldw	r2,-52(fp)
  82477c:	1885883a 	add	r2,r3,r2
  824780:	1007883a 	mov	r3,r2
  824784:	e0bffc17 	ldw	r2,-16(fp)
  824788:	1885883a 	add	r2,r3,r2
  82478c:	10800003 	ldbu	r2,0(r2)
  824790:	10803fcc 	andi	r2,r2,255
  824794:	1080201c 	xori	r2,r2,128
  824798:	10bfe004 	addi	r2,r2,-128
  82479c:	10800b98 	cmpnei	r2,r2,46
  8247a0:	1000031e 	bne	r2,zero,8247b0 <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
  8247a4:	e0bff417 	ldw	r2,-48(fp)
  8247a8:	e0bff215 	stw	r2,-56(fp)
  8247ac:	00001c06 	br	824820 <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
  8247b0:	e0bff217 	ldw	r2,-56(fp)
  8247b4:	1004403a 	cmpge	r2,r2,zero
  8247b8:	10000c1e 	bne	r2,zero,8247ec <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
  8247bc:	e13ff417 	ldw	r4,-48(fp)
  8247c0:	e0fff417 	ldw	r3,-48(fp)
  8247c4:	e0bff317 	ldw	r2,-52(fp)
  8247c8:	1885883a 	add	r2,r3,r2
  8247cc:	1007883a 	mov	r3,r2
  8247d0:	e0bffc17 	ldw	r2,-16(fp)
  8247d4:	1885883a 	add	r2,r3,r2
  8247d8:	10c00003 	ldbu	r3,0(r2)
  8247dc:	e0bff804 	addi	r2,fp,-32
  8247e0:	1105883a 	add	r2,r2,r4
  8247e4:	10c00005 	stb	r3,0(r2)
  8247e8:	00000d06 	br	824820 <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index]
  8247ec:	e0fff417 	ldw	r3,-48(fp)
  8247f0:	e0bff217 	ldw	r2,-56(fp)
  8247f4:	1889c83a 	sub	r4,r3,r2
  8247f8:	e0fff417 	ldw	r3,-48(fp)
  8247fc:	e0bff317 	ldw	r2,-52(fp)
  824800:	1885883a 	add	r2,r3,r2
  824804:	1007883a 	mov	r3,r2
  824808:	e0bffc17 	ldw	r2,-16(fp)
  82480c:	1885883a 	add	r2,r3,r2
  824810:	10c00003 	ldbu	r3,0(r2)
  824814:	e0bffa04 	addi	r2,fp,-24
  824818:	1105883a 	add	r2,r2,r4
  82481c:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
  824820:	e0bff417 	ldw	r2,-48(fp)
  824824:	10800044 	addi	r2,r2,1
  824828:	e0bff415 	stw	r2,-48(fp)
  82482c:	e0fff417 	ldw	r3,-48(fp)
  824830:	e0bff517 	ldw	r2,-44(fp)
  824834:	18bfcf16 	blt	r3,r2,824774 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index]
						= file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
  824838:	e0bff617 	ldw	r2,-40(fp)
  82483c:	1004c03a 	cmpne	r2,r2,zero
  824840:	1000551e 	bne	r2,zero,824998 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
  824844:	008020f4 	movhi	r2,131
  824848:	109cd904 	addi	r2,r2,29540
  82484c:	1080050b 	ldhu	r2,20(r2)
  824850:	10bfffcc 	andi	r2,r2,65535
  824854:	1008917a 	slli	r4,r2,5
  824858:	008020f4 	movhi	r2,131
  82485c:	109cd904 	addi	r2,r2,29540
  824860:	1080030b 	ldhu	r2,12(r2)
  824864:	117fffcc 	andi	r5,r2,65535
  824868:	08145fc0 	call	8145fc <__divsi3>
  82486c:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  824870:	e03fef15 	stw	zero,-68(fp)
  824874:	00003806 	br	824958 <get_home_directory_cluster_for_file+0x28c>
				if (Read_Sector_Data(sector_index
  824878:	008020f4 	movhi	r2,131
  82487c:	109cd904 	addi	r2,r2,29540
  824880:	10c01317 	ldw	r3,76(r2)
  824884:	e0bfef17 	ldw	r2,-68(fp)
  824888:	1885883a 	add	r2,r3,r2
  82488c:	1009883a 	mov	r4,r2
  824890:	d17c4e17 	ldw	r5,-3784(gp)
  824894:	0822ef00 	call	822ef0 <Read_Sector_Data>
  824898:	1005003a 	cmpeq	r2,r2,zero
  82489c:	1000311e 	bne	r2,zero,824964 <get_home_directory_cluster_for_file+0x298>
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  8248a0:	e03fee15 	stw	zero,-72(fp)
  8248a4:	00002306 	br	824934 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  8248a8:	e0bfee17 	ldw	r2,-72(fp)
  8248ac:	1008917a 	slli	r4,r2,5
  8248b0:	e1ffef17 	ldw	r7,-68(fp)
  8248b4:	e17ffe17 	ldw	r5,-8(fp)
  8248b8:	000d883a 	mov	r6,zero
  8248bc:	08233380 	call	823338 <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
  8248c0:	e0bffe17 	ldw	r2,-8(fp)
  8248c4:	10800003 	ldbu	r2,0(r2)
  8248c8:	10803fcc 	andi	r2,r2,255
  8248cc:	10803960 	cmpeqi	r2,r2,229
  8248d0:	1000151e 	bne	r2,zero,824928 <get_home_directory_cluster_for_file+0x25c>
  8248d4:	e0bffe17 	ldw	r2,-8(fp)
  8248d8:	10800003 	ldbu	r2,0(r2)
  8248dc:	10803fcc 	andi	r2,r2,255
  8248e0:	1005003a 	cmpeq	r2,r2,zero
  8248e4:	1000101e 	bne	r2,zero,824928 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  8248e8:	e17ff804 	addi	r5,fp,-32
  8248ec:	e1bffa04 	addi	r6,fp,-24
  8248f0:	e13ffe17 	ldw	r4,-8(fp)
  8248f4:	08243e00 	call	8243e0 <match_file_record_to_name_ext>
  8248f8:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
  8248fc:	e0bfed17 	ldw	r2,-76(fp)
  824900:	1005003a 	cmpeq	r2,r2,zero
  824904:	1000081e 	bne	r2,zero,824928 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
  824908:	e0bffe17 	ldw	r2,-8(fp)
  82490c:	1080058b 	ldhu	r2,22(r2)
  824910:	10bfffcc 	andi	r2,r2,65535
  824914:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  824918:	e0fffe17 	ldw	r3,-8(fp)
  82491c:	00800044 	movi	r2,1
  824920:	18800a15 	stw	r2,40(r3)
								break;
  824924:	00000606 	br	824940 <get_home_directory_cluster_for_file+0x274>
				if (Read_Sector_Data(sector_index
						+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  824928:	e0bfee17 	ldw	r2,-72(fp)
  82492c:	10800044 	addi	r2,r2,1
  824930:	e0bfee15 	stw	r2,-72(fp)
  824934:	e0bfee17 	ldw	r2,-72(fp)
  824938:	10800410 	cmplti	r2,r2,16
  82493c:	103fda1e 	bne	r2,zero,8248a8 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
  824940:	e0fff117 	ldw	r3,-60(fp)
  824944:	e0bff617 	ldw	r2,-40(fp)
  824948:	1880061e 	bne	r3,r2,824964 <get_home_directory_cluster_for_file+0x298>
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  82494c:	e0bfef17 	ldw	r2,-68(fp)
  824950:	10800044 	addi	r2,r2,1
  824954:	e0bfef15 	stw	r2,-68(fp)
  824958:	e0ffef17 	ldw	r3,-68(fp)
  82495c:	e0bff017 	ldw	r2,-64(fp)
  824960:	18bfc516 	blt	r3,r2,824878 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
  824964:	e0fff117 	ldw	r3,-60(fp)
  824968:	e0bff617 	ldw	r2,-40(fp)
  82496c:	18800826 	beq	r3,r2,824990 <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  824970:	e0bff117 	ldw	r2,-60(fp)
  824974:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  824978:	e0fff317 	ldw	r3,-52(fp)
  82497c:	e0bff517 	ldw	r2,-44(fp)
  824980:	1885883a 	add	r2,r3,r2
  824984:	10800044 	addi	r2,r2,1
  824988:	e0bff315 	stw	r2,-52(fp)
  82498c:	00007406 	br	824b60 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  824990:	e03fff15 	stw	zero,-4(fp)
  824994:	00008c06 	br	824bc8 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
  824998:	e0bff617 	ldw	r2,-40(fp)
  82499c:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
  8249a0:	e0bfec17 	ldw	r2,-80(fp)
  8249a4:	10ffff84 	addi	r3,r2,-2
  8249a8:	008020f4 	movhi	r2,131
  8249ac:	109cd904 	addi	r2,r2,29540
  8249b0:	10800383 	ldbu	r2,14(r2)
  8249b4:	10803fcc 	andi	r2,r2,255
  8249b8:	1885383a 	mul	r2,r3,r2
  8249bc:	1007883a 	mov	r3,r2
  8249c0:	008020f4 	movhi	r2,131
  8249c4:	109cd904 	addi	r2,r2,29540
  8249c8:	10801417 	ldw	r2,80(r2)
  8249cc:	1885883a 	add	r2,r3,r2
  8249d0:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0; sector_index
  8249d4:	e03fea15 	stw	zero,-88(fp)
  8249d8:	00003206 	br	824aa4 <get_home_directory_cluster_for_file+0x3d8>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
  8249dc:	e0ffea17 	ldw	r3,-88(fp)
  8249e0:	e0bfeb17 	ldw	r2,-84(fp)
  8249e4:	1889883a 	add	r4,r3,r2
  8249e8:	d17c4e17 	ldw	r5,-3784(gp)
  8249ec:	0822ef00 	call	822ef0 <Read_Sector_Data>
  8249f0:	1005003a 	cmpeq	r2,r2,zero
  8249f4:	1000311e 	bne	r2,zero,824abc <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  8249f8:	e03fe915 	stw	zero,-92(fp)
  8249fc:	00002006 	br	824a80 <get_home_directory_cluster_for_file+0x3b4>
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
  824a00:	e0bfe917 	ldw	r2,-92(fp)
  824a04:	1008917a 	slli	r4,r2,5
  824a08:	e1bfec17 	ldw	r6,-80(fp)
  824a0c:	e1ffea17 	ldw	r7,-88(fp)
  824a10:	e17ffe17 	ldw	r5,-8(fp)
  824a14:	08233380 	call	823338 <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
  824a18:	e0bffe17 	ldw	r2,-8(fp)
  824a1c:	10800003 	ldbu	r2,0(r2)
  824a20:	10803fcc 	andi	r2,r2,255
  824a24:	10803960 	cmpeqi	r2,r2,229
  824a28:	1000121e 	bne	r2,zero,824a74 <get_home_directory_cluster_for_file+0x3a8>
  824a2c:	e0bffe17 	ldw	r2,-8(fp)
  824a30:	10800003 	ldbu	r2,0(r2)
  824a34:	10803fcc 	andi	r2,r2,255
  824a38:	1005003a 	cmpeq	r2,r2,zero
  824a3c:	10000d1e 	bne	r2,zero,824a74 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
  824a40:	e17ff804 	addi	r5,fp,-32
  824a44:	e1bffa04 	addi	r6,fp,-24
  824a48:	e13ffe17 	ldw	r4,-8(fp)
  824a4c:	08243e00 	call	8243e0 <match_file_record_to_name_ext>
  824a50:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
  824a54:	e0bfe817 	ldw	r2,-96(fp)
  824a58:	1005003a 	cmpeq	r2,r2,zero
  824a5c:	1000051e 	bne	r2,zero,824a74 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster
  824a60:	e0bffe17 	ldw	r2,-8(fp)
  824a64:	1080058b 	ldhu	r2,22(r2)
  824a68:	10bfffcc 	andi	r2,r2,65535
  824a6c:	e0bff115 	stw	r2,-60(fp)
											= file_record->start_cluster_index;
									break;
  824a70:	00000606 	br	824a8c <get_home_directory_cluster_for_file+0x3c0>
						< boot_sector_data.sectors_per_cluster; sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16; file_counter++) {
  824a74:	e0bfe917 	ldw	r2,-92(fp)
  824a78:	10800044 	addi	r2,r2,1
  824a7c:	e0bfe915 	stw	r2,-92(fp)
  824a80:	e0bfe917 	ldw	r2,-92(fp)
  824a84:	10800410 	cmplti	r2,r2,16
  824a88:	103fdd1e 	bne	r2,zero,824a00 <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
  824a8c:	e0fff117 	ldw	r3,-60(fp)
  824a90:	e0bff617 	ldw	r2,-40(fp)
  824a94:	1880091e 	bne	r3,r2,824abc <get_home_directory_cluster_for_file+0x3f0>
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
						< boot_sector_data.sectors_per_cluster; sector_index++) {
  824a98:	e0bfea17 	ldw	r2,-88(fp)
  824a9c:	10800044 	addi	r2,r2,1
  824aa0:	e0bfea15 	stw	r2,-88(fp)
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0; sector_index
  824aa4:	008020f4 	movhi	r2,131
  824aa8:	109cd904 	addi	r2,r2,29540
  824aac:	10800383 	ldbu	r2,14(r2)
  824ab0:	10c03fcc 	andi	r3,r2,255
  824ab4:	e0bfea17 	ldw	r2,-88(fp)
  824ab8:	10ffc816 	blt	r2,r3,8249dc <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
  824abc:	e0fff117 	ldw	r3,-60(fp)
  824ac0:	e0bff617 	ldw	r2,-40(fp)
  824ac4:	1880131e 	bne	r3,r2,824b14 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
  824ac8:	e13ff117 	ldw	r4,-60(fp)
  824acc:	e17ffb04 	addi	r5,fp,-20
  824ad0:	0822fec0 	call	822fec <get_cluster_flag>
  824ad4:	1005003a 	cmpeq	r2,r2,zero
  824ad8:	10000c1e 	bne	r2,zero,824b0c <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  824adc:	e0bffb0b 	ldhu	r2,-20(fp)
  824ae0:	10bfffcc 	andi	r2,r2,65535
  824ae4:	10fffe0c 	andi	r3,r2,65528
  824ae8:	00bffe14 	movui	r2,65528
  824aec:	1880021e 	bne	r3,r2,824af8 <get_home_directory_cluster_for_file+0x42c>
							return false;
  824af0:	e03fff15 	stw	zero,-4(fp)
  824af4:	00003406 	br	824bc8 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  824af8:	e0bffb0b 	ldhu	r2,-20(fp)
  824afc:	10bfffcc 	andi	r2,r2,65535
  824b00:	10bffe0c 	andi	r2,r2,65528
  824b04:	e0bff115 	stw	r2,-60(fp)
  824b08:	00000206 	br	824b14 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
  824b0c:	e03fff15 	stw	zero,-4(fp)
  824b10:	00002d06 	br	824bc8 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8)
					&& (new_cluster == home_dir_cluster));
  824b14:	e0ffec17 	ldw	r3,-80(fp)
  824b18:	00bffdd4 	movui	r2,65527
  824b1c:	10c00316 	blt	r2,r3,824b2c <get_home_directory_cluster_for_file+0x460>
  824b20:	e0fff117 	ldw	r3,-60(fp)
  824b24:	e0bff617 	ldw	r2,-40(fp)
  824b28:	18bf9d26 	beq	r3,r2,8249a0 <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
  824b2c:	e0fff117 	ldw	r3,-60(fp)
  824b30:	e0bff617 	ldw	r2,-40(fp)
  824b34:	18800826 	beq	r3,r2,824b58 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
  824b38:	e0bff117 	ldw	r2,-60(fp)
  824b3c:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
  824b40:	e0fff317 	ldw	r3,-52(fp)
  824b44:	e0bff517 	ldw	r2,-44(fp)
  824b48:	1885883a 	add	r2,r3,r2
  824b4c:	10800044 	addi	r2,r2,1
  824b50:	e0bff315 	stw	r2,-52(fp)
  824b54:	00000206 	br	824b60 <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
  824b58:	e03fff15 	stw	zero,-4(fp)
  824b5c:	00001a06 	br	824bc8 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
  824b60:	e0bff317 	ldw	r2,-52(fp)
  824b64:	1007883a 	mov	r3,r2
  824b68:	e0bffc17 	ldw	r2,-16(fp)
  824b6c:	1889883a 	add	r4,r3,r2
  824b70:	08243200 	call	824320 <get_dir_divider_location>
  824b74:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
  824b78:	e0bff517 	ldw	r2,-44(fp)
  824b7c:	1004403a 	cmpge	r2,r2,zero
  824b80:	1000021e 	bne	r2,zero,824b8c <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
  824b84:	00800044 	movi	r2,1
  824b88:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
  824b8c:	e0bff517 	ldw	r2,-44(fp)
  824b90:	10800048 	cmpgei	r2,r2,1
  824b94:	103edb1e 	bne	r2,zero,824704 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
  824b98:	e0fffd17 	ldw	r3,-12(fp)
  824b9c:	e0bff617 	ldw	r2,-40(fp)
  824ba0:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
  824ba4:	e0bff617 	ldw	r2,-40(fp)
  824ba8:	1004c03a 	cmpne	r2,r2,zero
  824bac:	1000041e 	bne	r2,zero,824bc0 <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
  824bb0:	e0bffe17 	ldw	r2,-8(fp)
  824bb4:	10000a15 	stw	zero,40(r2)
		result = true;
  824bb8:	00800044 	movi	r2,1
  824bbc:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
  824bc0:	e0bff717 	ldw	r2,-36(fp)
  824bc4:	e0bfff15 	stw	r2,-4(fp)
  824bc8:	e0bfff17 	ldw	r2,-4(fp)
}
  824bcc:	e037883a 	mov	sp,fp
  824bd0:	dfc00117 	ldw	ra,4(sp)
  824bd4:	df000017 	ldw	fp,0(sp)
  824bd8:	dec00204 	addi	sp,sp,8
  824bdc:	f800283a 	ret

00824be0 <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  824be0:	deffe704 	addi	sp,sp,-100
  824be4:	dfc01815 	stw	ra,96(sp)
  824be8:	df001715 	stw	fp,92(sp)
  824bec:	df001704 	addi	fp,sp,92
  824bf0:	e13ffc15 	stw	r4,-16(fp)
  824bf4:	e17ffd15 	stw	r5,-12(fp)
  824bf8:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
  824bfc:	e13ffd17 	ldw	r4,-12(fp)
  824c00:	08243200 	call	824320 <get_dir_divider_location>
  824c04:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
  824c08:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  824c0c:	00800804 	movi	r2,32
  824c10:	e0bff805 	stb	r2,-32(fp)
  824c14:	00800804 	movi	r2,32
  824c18:	e0bff845 	stb	r2,-31(fp)
  824c1c:	00800804 	movi	r2,32
  824c20:	e0bff885 	stb	r2,-30(fp)
  824c24:	00800804 	movi	r2,32
  824c28:	e0bff8c5 	stb	r2,-29(fp)
  824c2c:	00800804 	movi	r2,32
  824c30:	e0bff905 	stb	r2,-28(fp)
  824c34:	00800804 	movi	r2,32
  824c38:	e0bff945 	stb	r2,-27(fp)
  824c3c:	00800804 	movi	r2,32
  824c40:	e0bff985 	stb	r2,-26(fp)
  824c44:	00800804 	movi	r2,32
  824c48:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
  824c4c:	00800804 	movi	r2,32
  824c50:	e0bffa05 	stb	r2,-24(fp)
  824c54:	00800804 	movi	r2,32
  824c58:	e0bffa45 	stb	r2,-23(fp)
  824c5c:	00800804 	movi	r2,32
  824c60:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
  824c64:	00bfffc4 	movi	r2,-1
  824c68:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
  824c6c:	e0bffc17 	ldw	r2,-16(fp)
  824c70:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
  824c74:	e13ffd17 	ldw	r4,-12(fp)
  824c78:	0815adc0 	call	815adc <strlen>
  824c7c:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
  824c80:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
  824c84:	00000b06 	br	824cb4 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
  824c88:	e0fff617 	ldw	r3,-40(fp)
  824c8c:	e0bff717 	ldw	r2,-36(fp)
  824c90:	1885883a 	add	r2,r3,r2
  824c94:	10800044 	addi	r2,r2,1
  824c98:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
  824c9c:	e0bff617 	ldw	r2,-40(fp)
  824ca0:	1007883a 	mov	r3,r2
  824ca4:	e0bffd17 	ldw	r2,-12(fp)
  824ca8:	1889883a 	add	r4,r3,r2
  824cac:	08243200 	call	824320 <get_dir_divider_location>
  824cb0:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
  824cb4:	e0bff717 	ldw	r2,-36(fp)
  824cb8:	10800048 	cmpgei	r2,r2,1
  824cbc:	103ff21e 	bne	r2,zero,824c88 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  824cc0:	e0bff617 	ldw	r2,-40(fp)
  824cc4:	e0bff315 	stw	r2,-52(fp)
  824cc8:	00002b06 	br	824d78 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
  824ccc:	e0bff317 	ldw	r2,-52(fp)
  824cd0:	1007883a 	mov	r3,r2
  824cd4:	e0bffd17 	ldw	r2,-12(fp)
  824cd8:	1885883a 	add	r2,r3,r2
  824cdc:	10800003 	ldbu	r2,0(r2)
  824ce0:	10803fcc 	andi	r2,r2,255
  824ce4:	1080201c 	xori	r2,r2,128
  824ce8:	10bfe004 	addi	r2,r2,-128
  824cec:	10800b98 	cmpnei	r2,r2,46
  824cf0:	1000031e 	bne	r2,zero,824d00 <find_file_in_directory+0x120>
			ext_index = index;
  824cf4:	e0bff317 	ldw	r2,-52(fp)
  824cf8:	e0bff515 	stw	r2,-44(fp)
  824cfc:	00001b06 	br	824d6c <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
  824d00:	e0bff517 	ldw	r2,-44(fp)
  824d04:	1004403a 	cmpge	r2,r2,zero
  824d08:	10000c1e 	bne	r2,zero,824d3c <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
  824d0c:	e0fff317 	ldw	r3,-52(fp)
  824d10:	e0bff617 	ldw	r2,-40(fp)
  824d14:	1889c83a 	sub	r4,r3,r2
  824d18:	e0bff317 	ldw	r2,-52(fp)
  824d1c:	1007883a 	mov	r3,r2
  824d20:	e0bffd17 	ldw	r2,-12(fp)
  824d24:	1885883a 	add	r2,r3,r2
  824d28:	10c00003 	ldbu	r3,0(r2)
  824d2c:	e0bff804 	addi	r2,fp,-32
  824d30:	1105883a 	add	r2,r2,r4
  824d34:	10c00005 	stb	r3,0(r2)
  824d38:	00000c06 	br	824d6c <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
  824d3c:	e0fff317 	ldw	r3,-52(fp)
  824d40:	e0bff517 	ldw	r2,-44(fp)
  824d44:	1885c83a 	sub	r2,r3,r2
  824d48:	113fffc4 	addi	r4,r2,-1
  824d4c:	e0bff317 	ldw	r2,-52(fp)
  824d50:	1007883a 	mov	r3,r2
  824d54:	e0bffd17 	ldw	r2,-12(fp)
  824d58:	1885883a 	add	r2,r3,r2
  824d5c:	10c00003 	ldbu	r3,0(r2)
  824d60:	e0bffa04 	addi	r2,fp,-24
  824d64:	1105883a 	add	r2,r2,r4
  824d68:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
  824d6c:	e0bff317 	ldw	r2,-52(fp)
  824d70:	10800044 	addi	r2,r2,1
  824d74:	e0bff315 	stw	r2,-52(fp)
  824d78:	e0fff317 	ldw	r3,-52(fp)
  824d7c:	e0bff217 	ldw	r2,-56(fp)
  824d80:	18bfd216 	blt	r3,r2,824ccc <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
  824d84:	e0bffc17 	ldw	r2,-16(fp)
  824d88:	1004c03a 	cmpne	r2,r2,zero
  824d8c:	1000441e 	bne	r2,zero,824ea0 <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
  824d90:	008020f4 	movhi	r2,131
  824d94:	109cd904 	addi	r2,r2,29540
  824d98:	1080050b 	ldhu	r2,20(r2)
  824d9c:	10bfffcc 	andi	r2,r2,65535
  824da0:	1008917a 	slli	r4,r2,5
  824da4:	008020f4 	movhi	r2,131
  824da8:	109cd904 	addi	r2,r2,29540
  824dac:	1080030b 	ldhu	r2,12(r2)
  824db0:	117fffcc 	andi	r5,r2,65535
  824db4:	08145fc0 	call	8145fc <__divsi3>
  824db8:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  824dbc:	e03fef15 	stw	zero,-68(fp)
  824dc0:	00003306 	br	824e90 <find_file_in_directory+0x2b0>
			if (Read_Sector_Data(sector_index
  824dc4:	008020f4 	movhi	r2,131
  824dc8:	109cd904 	addi	r2,r2,29540
  824dcc:	10c01317 	ldw	r3,76(r2)
  824dd0:	e0bfef17 	ldw	r2,-68(fp)
  824dd4:	1885883a 	add	r2,r3,r2
  824dd8:	1009883a 	mov	r4,r2
  824ddc:	d17c4e17 	ldw	r5,-3784(gp)
  824de0:	0822ef00 	call	822ef0 <Read_Sector_Data>
  824de4:	1005003a 	cmpeq	r2,r2,zero
  824de8:	10008e1e 	bne	r2,zero,825024 <find_file_in_directory+0x444>
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  824dec:	e03fee15 	stw	zero,-72(fp)
  824df0:	00001e06 	br	824e6c <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
  824df4:	e0bfee17 	ldw	r2,-72(fp)
  824df8:	1008917a 	slli	r4,r2,5
  824dfc:	e1ffef17 	ldw	r7,-68(fp)
  824e00:	e17ffe17 	ldw	r5,-8(fp)
  824e04:	000d883a 	mov	r6,zero
  824e08:	08233380 	call	823338 <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5) && (file_record->name[0]
  824e0c:	e0bffe17 	ldw	r2,-8(fp)
  824e10:	10800003 	ldbu	r2,0(r2)
  824e14:	10803fcc 	andi	r2,r2,255
  824e18:	10803960 	cmpeqi	r2,r2,229
  824e1c:	1000101e 	bne	r2,zero,824e60 <find_file_in_directory+0x280>
  824e20:	e0bffe17 	ldw	r2,-8(fp)
  824e24:	10800003 	ldbu	r2,0(r2)
  824e28:	10803fcc 	andi	r2,r2,255
  824e2c:	1005003a 	cmpeq	r2,r2,zero
  824e30:	10000b1e 	bne	r2,zero,824e60 <find_file_in_directory+0x280>
							!= 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
  824e34:	e17ff804 	addi	r5,fp,-32
  824e38:	e1bffa04 	addi	r6,fp,-24
  824e3c:	e13ffe17 	ldw	r4,-8(fp)
  824e40:	08243e00 	call	8243e0 <match_file_record_to_name_ext>
  824e44:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
  824e48:	e0bfed17 	ldw	r2,-76(fp)
  824e4c:	1005003a 	cmpeq	r2,r2,zero
  824e50:	1000031e 	bne	r2,zero,824e60 <find_file_in_directory+0x280>
							result = true;
  824e54:	00800044 	movi	r2,1
  824e58:	e0bff115 	stw	r2,-60(fp)
							break;
  824e5c:	00000606 	br	824e78 <find_file_in_directory+0x298>
			if (Read_Sector_Data(sector_index
					+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  824e60:	e0bfee17 	ldw	r2,-72(fp)
  824e64:	10800044 	addi	r2,r2,1
  824e68:	e0bfee15 	stw	r2,-72(fp)
  824e6c:	e0bfee17 	ldw	r2,-72(fp)
  824e70:	10800410 	cmplti	r2,r2,16
  824e74:	103fdf1e 	bne	r2,zero,824df4 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
  824e78:	e0bff117 	ldw	r2,-60(fp)
  824e7c:	1004c03a 	cmpne	r2,r2,zero
  824e80:	1000681e 	bne	r2,zero,825024 <find_file_in_directory+0x444>
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  824e84:	e0bfef17 	ldw	r2,-68(fp)
  824e88:	10800044 	addi	r2,r2,1
  824e8c:	e0bfef15 	stw	r2,-68(fp)
  824e90:	e0ffef17 	ldw	r3,-68(fp)
  824e94:	e0bff017 	ldw	r2,-64(fp)
  824e98:	18bfca16 	blt	r3,r2,824dc4 <find_file_in_directory+0x1e4>
  824e9c:	00006106 	br	825024 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
  824ea0:	e0bff417 	ldw	r2,-48(fp)
  824ea4:	10ffff84 	addi	r3,r2,-2
  824ea8:	008020f4 	movhi	r2,131
  824eac:	109cd904 	addi	r2,r2,29540
  824eb0:	10800383 	ldbu	r2,14(r2)
  824eb4:	10803fcc 	andi	r2,r2,255
  824eb8:	1885383a 	mul	r2,r3,r2
  824ebc:	1007883a 	mov	r3,r2
  824ec0:	008020f4 	movhi	r2,131
  824ec4:	109cd904 	addi	r2,r2,29540
  824ec8:	10801417 	ldw	r2,80(r2)
  824ecc:	1885883a 	add	r2,r3,r2
  824ed0:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0; sector_index
  824ed4:	e03feb15 	stw	zero,-84(fp)
  824ed8:	00003006 	br	824f9c <find_file_in_directory+0x3bc>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
  824edc:	e0ffeb17 	ldw	r3,-84(fp)
  824ee0:	e0bfec17 	ldw	r2,-80(fp)
  824ee4:	1889883a 	add	r4,r3,r2
  824ee8:	d17c4e17 	ldw	r5,-3784(gp)
  824eec:	0822ef00 	call	822ef0 <Read_Sector_Data>
  824ef0:	1005003a 	cmpeq	r2,r2,zero
  824ef4:	10002f1e 	bne	r2,zero,824fb4 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  824ef8:	e03fea15 	stw	zero,-88(fp)
  824efc:	00001e06 	br	824f78 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
  824f00:	e0bfea17 	ldw	r2,-88(fp)
  824f04:	1008917a 	slli	r4,r2,5
  824f08:	e1bff417 	ldw	r6,-48(fp)
  824f0c:	e1ffeb17 	ldw	r7,-84(fp)
  824f10:	e17ffe17 	ldw	r5,-8(fp)
  824f14:	08233380 	call	823338 <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
  824f18:	e0bffe17 	ldw	r2,-8(fp)
  824f1c:	10800003 	ldbu	r2,0(r2)
  824f20:	10803fcc 	andi	r2,r2,255
  824f24:	10803960 	cmpeqi	r2,r2,229
  824f28:	1000101e 	bne	r2,zero,824f6c <find_file_in_directory+0x38c>
  824f2c:	e0bffe17 	ldw	r2,-8(fp)
  824f30:	10800003 	ldbu	r2,0(r2)
  824f34:	10803fcc 	andi	r2,r2,255
  824f38:	1005003a 	cmpeq	r2,r2,zero
  824f3c:	10000b1e 	bne	r2,zero,824f6c <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
  824f40:	e17ff804 	addi	r5,fp,-32
  824f44:	e1bffa04 	addi	r6,fp,-24
  824f48:	e13ffe17 	ldw	r4,-8(fp)
  824f4c:	08243e00 	call	8243e0 <match_file_record_to_name_ext>
  824f50:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
  824f54:	e0bfe917 	ldw	r2,-92(fp)
  824f58:	1005003a 	cmpeq	r2,r2,zero
  824f5c:	1000031e 	bne	r2,zero,824f6c <find_file_in_directory+0x38c>
								result = true;
  824f60:	00800044 	movi	r2,1
  824f64:	e0bff115 	stw	r2,-60(fp)
								break;
  824f68:	00000606 	br	824f84 <find_file_in_directory+0x3a4>
					< boot_sector_data.sectors_per_cluster; sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
  824f6c:	e0bfea17 	ldw	r2,-88(fp)
  824f70:	10800044 	addi	r2,r2,1
  824f74:	e0bfea15 	stw	r2,-88(fp)
  824f78:	e0bfea17 	ldw	r2,-88(fp)
  824f7c:	10800410 	cmplti	r2,r2,16
  824f80:	103fdf1e 	bne	r2,zero,824f00 <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
  824f84:	e0bff117 	ldw	r2,-60(fp)
  824f88:	1004c03a 	cmpne	r2,r2,zero
  824f8c:	1000091e 	bne	r2,zero,824fb4 <find_file_in_directory+0x3d4>
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
					< boot_sector_data.sectors_per_cluster; sector_index++) {
  824f90:	e0bfeb17 	ldw	r2,-84(fp)
  824f94:	10800044 	addi	r2,r2,1
  824f98:	e0bfeb15 	stw	r2,-84(fp)
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0; sector_index
  824f9c:	008020f4 	movhi	r2,131
  824fa0:	109cd904 	addi	r2,r2,29540
  824fa4:	10800383 	ldbu	r2,14(r2)
  824fa8:	10c03fcc 	andi	r3,r2,255
  824fac:	e0bfeb17 	ldw	r2,-84(fp)
  824fb0:	10ffca16 	blt	r2,r3,824edc <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
  824fb4:	e0bff117 	ldw	r2,-60(fp)
  824fb8:	1004c03a 	cmpne	r2,r2,zero
  824fbc:	1000131e 	bne	r2,zero,82500c <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
  824fc0:	e13ff417 	ldw	r4,-48(fp)
  824fc4:	e17ffb04 	addi	r5,fp,-20
  824fc8:	0822fec0 	call	822fec <get_cluster_flag>
  824fcc:	1005003a 	cmpeq	r2,r2,zero
  824fd0:	10000c1e 	bne	r2,zero,825004 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  824fd4:	e0bffb0b 	ldhu	r2,-20(fp)
  824fd8:	10bfffcc 	andi	r2,r2,65535
  824fdc:	10fffe0c 	andi	r3,r2,65528
  824fe0:	00bffe14 	movui	r2,65528
  824fe4:	1880021e 	bne	r3,r2,824ff0 <find_file_in_directory+0x410>
						return false;
  824fe8:	e03fff15 	stw	zero,-4(fp)
  824fec:	00000f06 	br	82502c <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
  824ff0:	e0bffb0b 	ldhu	r2,-20(fp)
  824ff4:	10bfffcc 	andi	r2,r2,65535
  824ff8:	10bffe0c 	andi	r2,r2,65528
  824ffc:	e0bff415 	stw	r2,-48(fp)
  825000:	00000206 	br	82500c <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
  825004:	e03fff15 	stw	zero,-4(fp)
  825008:	00000806 	br	82502c <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
  82500c:	e0fff417 	ldw	r3,-48(fp)
  825010:	00bffdd4 	movui	r2,65527
  825014:	10c00316 	blt	r2,r3,825024 <find_file_in_directory+0x444>
  825018:	e0bff117 	ldw	r2,-60(fp)
  82501c:	1005003a 	cmpeq	r2,r2,zero
  825020:	103f9f1e 	bne	r2,zero,824ea0 <find_file_in_directory+0x2c0>
	}

	return result;
  825024:	e0bff117 	ldw	r2,-60(fp)
  825028:	e0bfff15 	stw	r2,-4(fp)
  82502c:	e0bfff17 	ldw	r2,-4(fp)
}
  825030:	e037883a 	mov	sp,fp
  825034:	dfc00117 	ldw	ra,4(sp)
  825038:	df000017 	ldw	fp,0(sp)
  82503c:	dec00204 	addi	sp,sp,8
  825040:	f800283a 	ret

00825044 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  825044:	defff504 	addi	sp,sp,-44
  825048:	dfc00a15 	stw	ra,40(sp)
  82504c:	df000915 	stw	fp,36(sp)
  825050:	df000904 	addi	fp,sp,36
  825054:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
  825058:	008020f4 	movhi	r2,131
  82505c:	109cd904 	addi	r2,r2,29540
  825060:	10801117 	ldw	r2,68(r2)
  825064:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
  825068:	00800084 	movi	r2,2
  82506c:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
  825070:	00bfffc4 	movi	r2,-1
  825074:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
  825078:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  82507c:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  825080:	008020f4 	movhi	r2,131
  825084:	109cd904 	addi	r2,r2,29540
  825088:	10801417 	ldw	r2,80(r2)
  82508c:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  825090:	008020f4 	movhi	r2,131
  825094:	109cd904 	addi	r2,r2,29540
  825098:	1080058b 	ldhu	r2,22(r2)
  82509c:	10bfffcc 	andi	r2,r2,65535
  8250a0:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
  8250a4:	008020f4 	movhi	r2,131
  8250a8:	109cd904 	addi	r2,r2,29540
  8250ac:	10800917 	ldw	r2,36(r2)
  8250b0:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
  8250b4:	e0fff817 	ldw	r3,-32(fp)
  8250b8:	e0bff717 	ldw	r2,-36(fp)
  8250bc:	10c00b2e 	bgeu	r2,r3,8250ec <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
  8250c0:	e0fff817 	ldw	r3,-32(fp)
  8250c4:	e0bff917 	ldw	r2,-28(fp)
  8250c8:	1889c83a 	sub	r4,r3,r2
  8250cc:	008020f4 	movhi	r2,131
  8250d0:	109cd904 	addi	r2,r2,29540
  8250d4:	10800383 	ldbu	r2,14(r2)
  8250d8:	11403fcc 	andi	r5,r2,255
  8250dc:	08146bc0 	call	8146bc <__udivsi3>
  8250e0:	10800044 	addi	r2,r2,1
  8250e4:	e0bffa15 	stw	r2,-24(fp)
  8250e8:	00002906 	br	825190 <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
  8250ec:	e0fff717 	ldw	r3,-36(fp)
  8250f0:	e0bff917 	ldw	r2,-28(fp)
  8250f4:	1889c83a 	sub	r4,r3,r2
  8250f8:	008020f4 	movhi	r2,131
  8250fc:	109cd904 	addi	r2,r2,29540
  825100:	10800383 	ldbu	r2,14(r2)
  825104:	11403fcc 	andi	r5,r2,255
  825108:	08146bc0 	call	8146bc <__udivsi3>
  82510c:	10800044 	addi	r2,r2,1
  825110:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  825114:	00001e06 	br	825190 <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector, fat_partition_offset_in_512_byte_sectors)) {
  825118:	e13ffe17 	ldw	r4,-8(fp)
  82511c:	d17c4e17 	ldw	r5,-3784(gp)
  825120:	0822ef00 	call	822ef0 <Read_Sector_Data>
  825124:	1005003a 	cmpeq	r2,r2,zero
  825128:	1000131e 	bne	r2,zero,825178 <find_first_empty_cluster+0x134>
			do {
				cluster
  82512c:	d0bc5017 	ldw	r2,-3776(gp)
  825130:	10800a17 	ldw	r2,40(r2)
  825134:	1007883a 	mov	r3,r2
  825138:	e0bffd17 	ldw	r2,-12(fp)
  82513c:	10803fcc 	andi	r2,r2,255
  825140:	1085883a 	add	r2,r2,r2
  825144:	1885883a 	add	r2,r3,r2
  825148:	1080002b 	ldhuio	r2,0(r2)
  82514c:	e0bffc0d 	sth	r2,-16(fp)
						= ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
  825150:	e0bffc0f 	ldh	r2,-16(fp)
  825154:	1005003a 	cmpeq	r2,r2,zero
  825158:	1000071e 	bne	r2,zero,825178 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
  82515c:	e0bffd17 	ldw	r2,-12(fp)
  825160:	10800044 	addi	r2,r2,1
  825164:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
  825168:	e0bffd17 	ldw	r2,-12(fp)
  82516c:	10803fcc 	andi	r2,r2,255
  825170:	1004c03a 	cmpne	r2,r2,zero
  825174:	103fed1e 	bne	r2,zero,82512c <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
  825178:	e0bffc0f 	ldh	r2,-16(fp)
  82517c:	1005003a 	cmpeq	r2,r2,zero
  825180:	1000081e 	bne	r2,zero,8251a4 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
  825184:	e0bffe17 	ldw	r2,-8(fp)
  825188:	10800044 	addi	r2,r2,1
  82518c:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
  825190:	008020f4 	movhi	r2,131
  825194:	109cd904 	addi	r2,r2,29540
  825198:	10c01217 	ldw	r3,72(r2)
  82519c:	e0bffe17 	ldw	r2,-8(fp)
  8251a0:	18bfdd1e 	bne	r3,r2,825118 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
  8251a4:	e0bffc0f 	ldh	r2,-16(fp)
  8251a8:	1004c03a 	cmpne	r2,r2,zero
  8251ac:	1000081e 	bne	r2,zero,8251d0 <find_first_empty_cluster+0x18c>
  8251b0:	e0fffc0f 	ldh	r3,-16(fp)
  8251b4:	e0bffa17 	ldw	r2,-24(fp)
  8251b8:	10c00536 	bltu	r2,r3,8251d0 <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
  8251bc:	e0bfff17 	ldw	r2,-4(fp)
  8251c0:	e0fffd17 	ldw	r3,-12(fp)
  8251c4:	10c00015 	stw	r3,0(r2)
		result = true;
  8251c8:	00800044 	movi	r2,1
  8251cc:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
  8251d0:	e0bffb17 	ldw	r2,-20(fp)
}
  8251d4:	e037883a 	mov	sp,fp
  8251d8:	dfc00117 	ldw	ra,4(sp)
  8251dc:	df000017 	ldw	fp,0(sp)
  8251e0:	dec00204 	addi	sp,sp,8
  8251e4:	f800283a 	ret

008251e8 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  8251e8:	defff404 	addi	sp,sp,-48
  8251ec:	dfc00b15 	stw	ra,44(sp)
  8251f0:	df000a15 	stw	fp,40(sp)
  8251f4:	df000a04 	addi	fp,sp,40
  8251f8:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
  8251fc:	00bfffc4 	movi	r2,-1
  825200:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
  825204:	e0bffe17 	ldw	r2,-8(fp)
  825208:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
  82520c:	e0bffa17 	ldw	r2,-24(fp)
  825210:	10ffff84 	addi	r3,r2,-2
  825214:	008020f4 	movhi	r2,131
  825218:	109cd904 	addi	r2,r2,29540
  82521c:	10800383 	ldbu	r2,14(r2)
  825220:	10803fcc 	andi	r2,r2,255
  825224:	1885383a 	mul	r2,r3,r2
  825228:	1007883a 	mov	r3,r2
  82522c:	008020f4 	movhi	r2,131
  825230:	109cd904 	addi	r2,r2,29540
  825234:	10801417 	ldw	r2,80(r2)
  825238:	1885883a 	add	r2,r3,r2
  82523c:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0; sector_index
  825240:	e03ff815 	stw	zero,-32(fp)
  825244:	00002c06 	br	8252f8 <find_first_empty_record_in_a_subdirectory+0x110>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
  825248:	e0fff817 	ldw	r3,-32(fp)
  82524c:	e0bff917 	ldw	r2,-28(fp)
  825250:	1889883a 	add	r4,r3,r2
  825254:	d17c4e17 	ldw	r5,-3784(gp)
  825258:	0822ef00 	call	822ef0 <Read_Sector_Data>
  82525c:	1005003a 	cmpeq	r2,r2,zero
  825260:	10002b1e 	bne	r2,zero,825310 <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  825264:	e03ff715 	stw	zero,-36(fp)
  825268:	00001d06 	br	8252e0 <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char
  82526c:	d0bc5017 	ldw	r2,-3776(gp)
  825270:	10800a17 	ldw	r2,40(r2)
  825274:	1007883a 	mov	r3,r2
  825278:	e0bff717 	ldw	r2,-36(fp)
  82527c:	1004917a 	slli	r2,r2,5
  825280:	1885883a 	add	r2,r3,r2
  825284:	10800023 	ldbuio	r2,0(r2)
  825288:	10803fcc 	andi	r2,r2,255
  82528c:	e0bff60d 	sth	r2,-40(fp)
							= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
  825290:	e0bff60b 	ldhu	r2,-40(fp)
  825294:	10803960 	cmpeqi	r2,r2,229
  825298:	1000031e 	bne	r2,zero,8252a8 <find_first_empty_record_in_a_subdirectory+0xc0>
  82529c:	e0bff60b 	ldhu	r2,-40(fp)
  8252a0:	1004c03a 	cmpne	r2,r2,zero
  8252a4:	10000b1e 	bne	r2,zero,8252d4 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
  8252a8:	e0bff817 	ldw	r2,-32(fp)
  8252ac:	1006913a 	slli	r3,r2,4
  8252b0:	e0bff717 	ldw	r2,-36(fp)
  8252b4:	1885883a 	add	r2,r3,r2
  8252b8:	1006943a 	slli	r3,r2,16
  8252bc:	e0bffa17 	ldw	r2,-24(fp)
  8252c0:	1884b03a 	or	r2,r3,r2
  8252c4:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
  8252c8:	e0bffb17 	ldw	r2,-20(fp)
  8252cc:	e0bfff15 	stw	r2,-4(fp)
  8252d0:	00005206 	br	82541c <find_first_empty_record_in_a_subdirectory+0x234>
				< boot_sector_data.sectors_per_cluster; sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
  8252d4:	e0bff717 	ldw	r2,-36(fp)
  8252d8:	10800044 	addi	r2,r2,1
  8252dc:	e0bff715 	stw	r2,-36(fp)
  8252e0:	e0bff717 	ldw	r2,-36(fp)
  8252e4:	10800410 	cmplti	r2,r2,16
  8252e8:	103fe01e 	bne	r2,zero,82526c <find_first_empty_record_in_a_subdirectory+0x84>
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
				< boot_sector_data.sectors_per_cluster; sector_index++) {
  8252ec:	e0bff817 	ldw	r2,-32(fp)
  8252f0:	10800044 	addi	r2,r2,1
  8252f4:	e0bff815 	stw	r2,-32(fp)
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0; sector_index
  8252f8:	008020f4 	movhi	r2,131
  8252fc:	109cd904 	addi	r2,r2,29540
  825300:	10800383 	ldbu	r2,14(r2)
  825304:	10c03fcc 	andi	r3,r2,255
  825308:	e0bff817 	ldw	r2,-32(fp)
  82530c:	10ffce16 	blt	r2,r3,825248 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
  825310:	e0bffb17 	ldw	r2,-20(fp)
  825314:	1004403a 	cmpge	r2,r2,zero
  825318:	1000381e 	bne	r2,zero,8253fc <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
  82531c:	e13ffa17 	ldw	r4,-24(fp)
  825320:	e17ffc04 	addi	r5,fp,-16
  825324:	0822fec0 	call	822fec <get_cluster_flag>
  825328:	1005003a 	cmpeq	r2,r2,zero
  82532c:	1000311e 	bne	r2,zero,8253f4 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  825330:	e0bffc0b 	ldhu	r2,-16(fp)
  825334:	10bfffcc 	andi	r2,r2,65535
  825338:	10fffe0c 	andi	r3,r2,65528
  82533c:	00bffe14 	movui	r2,65528
  825340:	18802e1e 	bne	r3,r2,8253fc <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
  825344:	e13ffd04 	addi	r4,fp,-12
  825348:	08250440 	call	825044 <find_first_empty_cluster>
  82534c:	1005003a 	cmpeq	r2,r2,zero
  825350:	1000231e 	bne	r2,zero,8253e0 <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
  825354:	e13ffa17 	ldw	r4,-24(fp)
  825358:	e0bffd17 	ldw	r2,-12(fp)
  82535c:	117fffcc 	andi	r5,r2,65535
  825360:	2960001c 	xori	r5,r5,32768
  825364:	29600004 	addi	r5,r5,-32768
  825368:	01800044 	movi	r6,1
  82536c:	08230a40 	call	8230a4 <mark_cluster>
  825370:	1005003a 	cmpeq	r2,r2,zero
  825374:	10001a1e 	bne	r2,zero,8253e0 <find_first_empty_record_in_a_subdirectory+0x1f8>
  825378:	e0bffd17 	ldw	r2,-12(fp)
  82537c:	1009883a 	mov	r4,r2
  825380:	017fffc4 	movi	r5,-1
  825384:	01800044 	movi	r6,1
  825388:	08230a40 	call	8230a4 <mark_cluster>
  82538c:	1005003a 	cmpeq	r2,r2,zero
  825390:	1000131e 	bne	r2,zero,8253e0 <find_first_empty_record_in_a_subdirectory+0x1f8>
  825394:	e13ffa17 	ldw	r4,-24(fp)
  825398:	e0bffd17 	ldw	r2,-12(fp)
  82539c:	117fffcc 	andi	r5,r2,65535
  8253a0:	2960001c 	xori	r5,r5,32768
  8253a4:	29600004 	addi	r5,r5,-32768
  8253a8:	000d883a 	mov	r6,zero
  8253ac:	08230a40 	call	8230a4 <mark_cluster>
  8253b0:	1005003a 	cmpeq	r2,r2,zero
  8253b4:	10000a1e 	bne	r2,zero,8253e0 <find_first_empty_record_in_a_subdirectory+0x1f8>
  8253b8:	e0bffd17 	ldw	r2,-12(fp)
  8253bc:	1009883a 	mov	r4,r2
  8253c0:	017fffc4 	movi	r5,-1
  8253c4:	000d883a 	mov	r6,zero
  8253c8:	08230a40 	call	8230a4 <mark_cluster>
  8253cc:	1005003a 	cmpeq	r2,r2,zero
  8253d0:	1000031e 	bne	r2,zero,8253e0 <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
  8253d4:	0822ea00 	call	822ea0 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
  8253d8:	e0bffd17 	ldw	r2,-12(fp)
  8253dc:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  8253e0:	e0bffc0b 	ldhu	r2,-16(fp)
  8253e4:	10bfffcc 	andi	r2,r2,65535
  8253e8:	10bffe0c 	andi	r2,r2,65528
  8253ec:	e0bffa15 	stw	r2,-24(fp)
  8253f0:	00000206 	br	8253fc <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
  8253f4:	00bfffc4 	movi	r2,-1
  8253f8:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
  8253fc:	e0fffa17 	ldw	r3,-24(fp)
  825400:	00bffdd4 	movui	r2,65527
  825404:	10c00316 	blt	r2,r3,825414 <find_first_empty_record_in_a_subdirectory+0x22c>
  825408:	e0bffb17 	ldw	r2,-20(fp)
  82540c:	10bfffe0 	cmpeqi	r2,r2,-1
  825410:	103f7e1e 	bne	r2,zero,82520c <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
  825414:	e0bffb17 	ldw	r2,-20(fp)
  825418:	e0bfff15 	stw	r2,-4(fp)
  82541c:	e0bfff17 	ldw	r2,-4(fp)
}
  825420:	e037883a 	mov	sp,fp
  825424:	dfc00117 	ldw	ra,4(sp)
  825428:	df000017 	ldw	fp,0(sp)
  82542c:	dec00204 	addi	sp,sp,8
  825430:	f800283a 	ret

00825434 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  825434:	defff804 	addi	sp,sp,-32
  825438:	dfc00715 	stw	ra,28(sp)
  82543c:	df000615 	stw	fp,24(sp)
  825440:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors = ((32
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
  825444:	008020f4 	movhi	r2,131
  825448:	109cd904 	addi	r2,r2,29540
  82544c:	1080050b 	ldhu	r2,20(r2)
  825450:	10bfffcc 	andi	r2,r2,65535
  825454:	1008917a 	slli	r4,r2,5
  825458:	008020f4 	movhi	r2,131
  82545c:	109cd904 	addi	r2,r2,29540
  825460:	1080030b 	ldhu	r2,12(r2)
  825464:	117fffcc 	andi	r5,r2,65535
  825468:	08145fc0 	call	8145fc <__divsi3>
  82546c:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
  825470:	00bfffc4 	movi	r2,-1
  825474:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  825478:	e03ffd15 	stw	zero,-12(fp)
  82547c:	00002d06 	br	825534 <find_first_empty_record_in_root_directory+0x100>
		if (Read_Sector_Data(sector_index
  825480:	008020f4 	movhi	r2,131
  825484:	109cd904 	addi	r2,r2,29540
  825488:	10c01317 	ldw	r3,76(r2)
  82548c:	e0bffd17 	ldw	r2,-12(fp)
  825490:	1885883a 	add	r2,r3,r2
  825494:	1009883a 	mov	r4,r2
  825498:	d17c4e17 	ldw	r5,-3784(gp)
  82549c:	0822ef00 	call	822ef0 <Read_Sector_Data>
  8254a0:	1005003a 	cmpeq	r2,r2,zero
  8254a4:	1000261e 	bne	r2,zero,825540 <find_first_empty_record_in_root_directory+0x10c>
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  8254a8:	e03ffb15 	stw	zero,-20(fp)
  8254ac:	00001b06 	br	82551c <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char
  8254b0:	d0bc5017 	ldw	r2,-3776(gp)
  8254b4:	10800a17 	ldw	r2,40(r2)
  8254b8:	1007883a 	mov	r3,r2
  8254bc:	e0bffb17 	ldw	r2,-20(fp)
  8254c0:	1004917a 	slli	r2,r2,5
  8254c4:	1885883a 	add	r2,r3,r2
  8254c8:	10800023 	ldbuio	r2,0(r2)
  8254cc:	10803fcc 	andi	r2,r2,255
  8254d0:	e0bffa0d 	sth	r2,-24(fp)
						= ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
  8254d4:	e0bffa0b 	ldhu	r2,-24(fp)
  8254d8:	10803960 	cmpeqi	r2,r2,229
  8254dc:	1000031e 	bne	r2,zero,8254ec <find_first_empty_record_in_root_directory+0xb8>
  8254e0:	e0bffa0b 	ldhu	r2,-24(fp)
  8254e4:	1004c03a 	cmpne	r2,r2,zero
  8254e8:	1000091e 	bne	r2,zero,825510 <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
  8254ec:	e0bffd17 	ldw	r2,-12(fp)
  8254f0:	1006913a 	slli	r3,r2,4
  8254f4:	e0bffb17 	ldw	r2,-20(fp)
  8254f8:	1885883a 	add	r2,r3,r2
  8254fc:	1004943a 	slli	r2,r2,16
  825500:	e0bffc15 	stw	r2,-16(fp)
					return result;
  825504:	e0bffc17 	ldw	r2,-16(fp)
  825508:	e0bfff15 	stw	r2,-4(fp)
  82550c:	00000e06 	br	825548 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(sector_index
				+ boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
  825510:	e0bffb17 	ldw	r2,-20(fp)
  825514:	10800044 	addi	r2,r2,1
  825518:	e0bffb15 	stw	r2,-20(fp)
  82551c:	e0bffb17 	ldw	r2,-20(fp)
  825520:	10800410 	cmplti	r2,r2,16
  825524:	103fe21e 	bne	r2,zero,8254b0 <find_first_empty_record_in_root_directory+0x7c>
			* boot_sector_data.max_number_of_dir_entires)
			/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++) {
  825528:	e0bffd17 	ldw	r2,-12(fp)
  82552c:	10800044 	addi	r2,r2,1
  825530:	e0bffd15 	stw	r2,-12(fp)
  825534:	e0fffd17 	ldw	r3,-12(fp)
  825538:	e0bffe17 	ldw	r2,-8(fp)
  82553c:	18bfd016 	blt	r3,r2,825480 <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
  825540:	e0bffc17 	ldw	r2,-16(fp)
  825544:	e0bfff15 	stw	r2,-4(fp)
  825548:	e0bfff17 	ldw	r2,-4(fp)
}
  82554c:	e037883a 	mov	sp,fp
  825550:	dfc00117 	ldw	ra,4(sp)
  825554:	df000017 	ldw	fp,0(sp)
  825558:	dec00204 	addi	sp,sp,8
  82555c:	f800283a 	ret

00825560 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
  825560:	defffa04 	addi	sp,sp,-24
  825564:	df000515 	stw	fp,20(sp)
  825568:	df000504 	addi	fp,sp,20
  82556c:	e13ffd15 	stw	r4,-12(fp)
  825570:	e17ffe15 	stw	r5,-8(fp)
  825574:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
  825578:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
  82557c:	e03ffc15 	stw	zero,-16(fp)
  825580:	00002b06 	br	825630 <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
  825584:	e0bffb17 	ldw	r2,-20(fp)
  825588:	1007883a 	mov	r3,r2
  82558c:	e0bffd17 	ldw	r2,-12(fp)
  825590:	1885883a 	add	r2,r3,r2
  825594:	10800003 	ldbu	r2,0(r2)
  825598:	10803fcc 	andi	r2,r2,255
  82559c:	1080201c 	xori	r2,r2,128
  8255a0:	10bfe004 	addi	r2,r2,-128
  8255a4:	10800ba0 	cmpeqi	r2,r2,46
  8255a8:	1000181e 	bne	r2,zero,82560c <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
  8255ac:	e0bffc17 	ldw	r2,-16(fp)
  8255b0:	1007883a 	mov	r3,r2
  8255b4:	e0bffe17 	ldw	r2,-8(fp)
  8255b8:	1889883a 	add	r4,r3,r2
  8255bc:	e0bffb17 	ldw	r2,-20(fp)
  8255c0:	1007883a 	mov	r3,r2
  8255c4:	e0bffd17 	ldw	r2,-12(fp)
  8255c8:	1885883a 	add	r2,r3,r2
  8255cc:	10800003 	ldbu	r2,0(r2)
  8255d0:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
  8255d4:	e0bffb17 	ldw	r2,-20(fp)
  8255d8:	1007883a 	mov	r3,r2
  8255dc:	e0bffd17 	ldw	r2,-12(fp)
  8255e0:	1885883a 	add	r2,r3,r2
  8255e4:	10800003 	ldbu	r2,0(r2)
  8255e8:	10803fcc 	andi	r2,r2,255
  8255ec:	1080201c 	xori	r2,r2,128
  8255f0:	10bfe004 	addi	r2,r2,-128
  8255f4:	1005003a 	cmpeq	r2,r2,zero
  8255f8:	10000a1e 	bne	r2,zero,825624 <convert_filename_to_name_extension+0xc4>
				local++;
  8255fc:	e0bffb17 	ldw	r2,-20(fp)
  825600:	10800044 	addi	r2,r2,1
  825604:	e0bffb15 	stw	r2,-20(fp)
  825608:	00000606 	br	825624 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
  82560c:	e0bffc17 	ldw	r2,-16(fp)
  825610:	1007883a 	mov	r3,r2
  825614:	e0bffe17 	ldw	r2,-8(fp)
  825618:	1887883a 	add	r3,r3,r2
  82561c:	00800804 	movi	r2,32
  825620:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
  825624:	e0bffc17 	ldw	r2,-16(fp)
  825628:	10800044 	addi	r2,r2,1
  82562c:	e0bffc15 	stw	r2,-16(fp)
  825630:	e0bffc17 	ldw	r2,-16(fp)
  825634:	10800210 	cmplti	r2,r2,8
  825638:	103fd21e 	bne	r2,zero,825584 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
  82563c:	e0bffb17 	ldw	r2,-20(fp)
  825640:	1007883a 	mov	r3,r2
  825644:	e0bffd17 	ldw	r2,-12(fp)
  825648:	1885883a 	add	r2,r3,r2
  82564c:	10800003 	ldbu	r2,0(r2)
  825650:	10803fcc 	andi	r2,r2,255
  825654:	1080201c 	xori	r2,r2,128
  825658:	10bfe004 	addi	r2,r2,-128
  82565c:	10800b98 	cmpnei	r2,r2,46
  825660:	1000031e 	bne	r2,zero,825670 <convert_filename_to_name_extension+0x110>
		local++;
  825664:	e0bffb17 	ldw	r2,-20(fp)
  825668:	10800044 	addi	r2,r2,1
  82566c:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
  825670:	e03ffc15 	stw	zero,-16(fp)
  825674:	00002106 	br	8256fc <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
  825678:	e0bffb17 	ldw	r2,-20(fp)
  82567c:	1007883a 	mov	r3,r2
  825680:	e0bffd17 	ldw	r2,-12(fp)
  825684:	1885883a 	add	r2,r3,r2
  825688:	10800003 	ldbu	r2,0(r2)
  82568c:	10803fcc 	andi	r2,r2,255
  825690:	1080201c 	xori	r2,r2,128
  825694:	10bfe004 	addi	r2,r2,-128
  825698:	1005003a 	cmpeq	r2,r2,zero
  82569c:	10000e1e 	bne	r2,zero,8256d8 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
  8256a0:	e0bffc17 	ldw	r2,-16(fp)
  8256a4:	1007883a 	mov	r3,r2
  8256a8:	e0bfff17 	ldw	r2,-4(fp)
  8256ac:	1889883a 	add	r4,r3,r2
  8256b0:	e0bffb17 	ldw	r2,-20(fp)
  8256b4:	1007883a 	mov	r3,r2
  8256b8:	e0bffd17 	ldw	r2,-12(fp)
  8256bc:	1885883a 	add	r2,r3,r2
  8256c0:	10800003 	ldbu	r2,0(r2)
  8256c4:	20800005 	stb	r2,0(r4)
			local++;
  8256c8:	e0bffb17 	ldw	r2,-20(fp)
  8256cc:	10800044 	addi	r2,r2,1
  8256d0:	e0bffb15 	stw	r2,-20(fp)
  8256d4:	00000606 	br	8256f0 <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
  8256d8:	e0bffc17 	ldw	r2,-16(fp)
  8256dc:	1007883a 	mov	r3,r2
  8256e0:	e0bfff17 	ldw	r2,-4(fp)
  8256e4:	1887883a 	add	r3,r3,r2
  8256e8:	00800804 	movi	r2,32
  8256ec:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
  8256f0:	e0bffc17 	ldw	r2,-16(fp)
  8256f4:	10800044 	addi	r2,r2,1
  8256f8:	e0bffc15 	stw	r2,-16(fp)
  8256fc:	e0bffc17 	ldw	r2,-16(fp)
  825700:	108000d0 	cmplti	r2,r2,3
  825704:	103fdc1e 	bne	r2,zero,825678 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
  825708:	e037883a 	mov	sp,fp
  82570c:	df000017 	ldw	fp,0(sp)
  825710:	dec00104 	addi	sp,sp,4
  825714:	f800283a 	ret

00825718 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  825718:	defff304 	addi	sp,sp,-52
  82571c:	dfc00c15 	stw	ra,48(sp)
  825720:	df000b15 	stw	fp,44(sp)
  825724:	df000b04 	addi	fp,sp,44
  825728:	e13ffb15 	stw	r4,-20(fp)
  82572c:	e17ffc15 	stw	r5,-16(fp)
  825730:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
  825734:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
  825738:	e13ffa04 	addi	r4,fp,-24
  82573c:	08250440 	call	825044 <find_first_empty_cluster>
  825740:	1005003a 	cmpeq	r2,r2,zero
  825744:	1000a31e 	bne	r2,zero,8259d4 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
  825748:	e0bffd17 	ldw	r2,-12(fp)
  82574c:	10800a17 	ldw	r2,40(r2)
  825750:	1004c03a 	cmpne	r2,r2,zero
  825754:	1000031e 	bne	r2,zero,825764 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
  825758:	08254340 	call	825434 <find_first_empty_record_in_root_directory>
  82575c:	e0bff815 	stw	r2,-32(fp)
  825760:	00000506 	br	825778 <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
  825764:	e0bffd17 	ldw	r2,-12(fp)
  825768:	1080058b 	ldhu	r2,22(r2)
  82576c:	113fffcc 	andi	r4,r2,65535
  825770:	08251e80 	call	8251e8 <find_first_empty_record_in_a_subdirectory>
  825774:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
  825778:	e0bff817 	ldw	r2,-32(fp)
  82577c:	1004803a 	cmplt	r2,r2,zero
  825780:	1000941e 	bne	r2,zero,8259d4 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
  825784:	e13ffb17 	ldw	r4,-20(fp)
  825788:	08243200 	call	824320 <get_dir_divider_location>
  82578c:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
  825790:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
  825794:	00000b06 	br	8257c4 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
  825798:	e0fff517 	ldw	r3,-44(fp)
  82579c:	e0bff617 	ldw	r2,-40(fp)
  8257a0:	1885883a 	add	r2,r3,r2
  8257a4:	10800044 	addi	r2,r2,1
  8257a8:	e0bff515 	stw	r2,-44(fp)
				location
  8257ac:	e0bff517 	ldw	r2,-44(fp)
  8257b0:	1007883a 	mov	r3,r2
  8257b4:	e0bffb17 	ldw	r2,-20(fp)
  8257b8:	1889883a 	add	r4,r3,r2
  8257bc:	08243200 	call	824320 <get_dir_divider_location>
  8257c0:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
  8257c4:	e0bff617 	ldw	r2,-40(fp)
  8257c8:	10800048 	cmpgei	r2,r2,1
  8257cc:	103ff21e 	bne	r2,zero,825798 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location
						= get_dir_divider_location(&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
  8257d0:	e0bff517 	ldw	r2,-44(fp)
  8257d4:	1007883a 	mov	r3,r2
  8257d8:	e0bffb17 	ldw	r2,-20(fp)
  8257dc:	1889883a 	add	r4,r3,r2
  8257e0:	e0bffc17 	ldw	r2,-16(fp)
  8257e4:	100b883a 	mov	r5,r2
  8257e8:	e0bffc17 	ldw	r2,-16(fp)
  8257ec:	10800204 	addi	r2,r2,8
  8257f0:	100d883a 	mov	r6,r2
  8257f4:	08255600 	call	825560 <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
  8257f8:	e0bffc17 	ldw	r2,-16(fp)
  8257fc:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
  825800:	e0bffc17 	ldw	r2,-16(fp)
  825804:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
  825808:	e0bffc17 	ldw	r2,-16(fp)
  82580c:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
  825810:	e0bffc17 	ldw	r2,-16(fp)
  825814:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
  825818:	e0bffc17 	ldw	r2,-16(fp)
  82581c:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
  825820:	e0bffc17 	ldw	r2,-16(fp)
  825824:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
  825828:	e0bffa17 	ldw	r2,-24(fp)
  82582c:	1007883a 	mov	r3,r2
  825830:	e0bffc17 	ldw	r2,-16(fp)
  825834:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
  825838:	e0bffc17 	ldw	r2,-16(fp)
  82583c:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
  825840:	e0fffa17 	ldw	r3,-24(fp)
  825844:	e0bffc17 	ldw	r2,-16(fp)
  825848:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
  82584c:	e0bffc17 	ldw	r2,-16(fp)
  825850:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
  825854:	e0bffc17 	ldw	r2,-16(fp)
  825858:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
  82585c:	e0bff817 	ldw	r2,-32(fp)
  825860:	10ffffcc 	andi	r3,r2,65535
  825864:	e0bffc17 	ldw	r2,-16(fp)
  825868:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
  82586c:	e0bff817 	ldw	r2,-32(fp)
  825870:	1005d43a 	srai	r2,r2,16
  825874:	10bfffcc 	andi	r2,r2,65535
  825878:	e0bfff15 	stw	r2,-4(fp)
  82587c:	e0ffff17 	ldw	r3,-4(fp)
  825880:	1804403a 	cmpge	r2,r3,zero
  825884:	1000031e 	bne	r2,zero,825894 <create_file+0x17c>
  825888:	e0bfff17 	ldw	r2,-4(fp)
  82588c:	108003c4 	addi	r2,r2,15
  825890:	e0bfff15 	stw	r2,-4(fp)
  825894:	e0ffff17 	ldw	r3,-4(fp)
  825898:	1805d13a 	srai	r2,r3,4
  82589c:	1007883a 	mov	r3,r2
  8258a0:	e0bffc17 	ldw	r2,-16(fp)
  8258a4:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
  8258a8:	e0bff817 	ldw	r2,-32(fp)
  8258ac:	1005d43a 	srai	r2,r2,16
  8258b0:	108003cc 	andi	r2,r2,15
  8258b4:	1004917a 	slli	r2,r2,5
  8258b8:	1007883a 	mov	r3,r2
  8258bc:	e0bffc17 	ldw	r2,-16(fp)
  8258c0:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
  8258c4:	e0bffd17 	ldw	r2,-12(fp)
  8258c8:	1080058b 	ldhu	r2,22(r2)
  8258cc:	10ffffcc 	andi	r3,r2,65535
  8258d0:	e0bffc17 	ldw	r2,-16(fp)
  8258d4:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
  8258d8:	e0fffc17 	ldw	r3,-16(fp)
  8258dc:	00800044 	movi	r2,1
  8258e0:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
  8258e4:	e0fffc17 	ldw	r3,-16(fp)
  8258e8:	00800044 	movi	r2,1
  8258ec:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector
  8258f0:	e0bffc17 	ldw	r2,-16(fp)
  8258f4:	10800a17 	ldw	r2,40(r2)
  8258f8:	1004c03a 	cmpne	r2,r2,zero
  8258fc:	1000081e 	bne	r2,zero,825920 <create_file+0x208>
  825900:	008020f4 	movhi	r2,131
  825904:	109cd904 	addi	r2,r2,29540
  825908:	10c01317 	ldw	r3,76(r2)
  82590c:	e0bffc17 	ldw	r2,-16(fp)
  825910:	10800b17 	ldw	r2,44(r2)
  825914:	1887883a 	add	r3,r3,r2
  825918:	e0fffe15 	stw	r3,-8(fp)
  82591c:	00001006 	br	825960 <create_file+0x248>
  825920:	008020f4 	movhi	r2,131
  825924:	109cd904 	addi	r2,r2,29540
  825928:	11001417 	ldw	r4,80(r2)
  82592c:	e0bffc17 	ldw	r2,-16(fp)
  825930:	10800a17 	ldw	r2,40(r2)
  825934:	10ffff84 	addi	r3,r2,-2
  825938:	008020f4 	movhi	r2,131
  82593c:	109cd904 	addi	r2,r2,29540
  825940:	10800383 	ldbu	r2,14(r2)
  825944:	10803fcc 	andi	r2,r2,255
  825948:	1885383a 	mul	r2,r3,r2
  82594c:	2087883a 	add	r3,r4,r2
  825950:	e0bffc17 	ldw	r2,-16(fp)
  825954:	10800b17 	ldw	r2,44(r2)
  825958:	1887883a 	add	r3,r3,r2
  82595c:	e0fffe15 	stw	r3,-8(fp)
  825960:	e0bffe17 	ldw	r2,-8(fp)
  825964:	e0bff715 	stw	r2,-36(fp)
							: (boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
  825968:	e13ff717 	ldw	r4,-36(fp)
  82596c:	d17c4e17 	ldw	r5,-3784(gp)
  825970:	0822ef00 	call	822ef0 <Read_Sector_Data>
  825974:	1005003a 	cmpeq	r2,r2,zero
  825978:	1000161e 	bne	r2,zero,8259d4 <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(
  82597c:	e0bffc17 	ldw	r2,-16(fp)
  825980:	10800c0b 	ldhu	r2,48(r2)
  825984:	113fffcc 	andi	r4,r2,65535
  825988:	2120001c 	xori	r4,r4,32768
  82598c:	21200004 	addi	r4,r4,-32768
  825990:	e17ffc17 	ldw	r5,-16(fp)
  825994:	08235bc0 	call	8235bc <Write_File_Record_At_Offset>
  825998:	1005003a 	cmpeq	r2,r2,zero
  82599c:	10000d1e 	bne	r2,zero,8259d4 <create_file+0x2bc>
						file_record->file_record_offset, file_record)) {
					Save_Modified_Sector();
  8259a0:	0822ea00 	call	822ea0 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
  8259a4:	e13ffa17 	ldw	r4,-24(fp)
  8259a8:	017fffc4 	movi	r5,-1
  8259ac:	01800044 	movi	r6,1
  8259b0:	08230a40 	call	8230a4 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
  8259b4:	e13ffa17 	ldw	r4,-24(fp)
  8259b8:	017fffc4 	movi	r5,-1
  8259bc:	000d883a 	mov	r6,zero
  8259c0:	08230a40 	call	8230a4 <mark_cluster>
  8259c4:	1005003a 	cmpeq	r2,r2,zero
  8259c8:	1000021e 	bne	r2,zero,8259d4 <create_file+0x2bc>
							false)) {
						result = true;
  8259cc:	00800044 	movi	r2,1
  8259d0:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
  8259d4:	e0bff917 	ldw	r2,-28(fp)
}
  8259d8:	e037883a 	mov	sp,fp
  8259dc:	dfc00117 	ldw	ra,4(sp)
  8259e0:	df000017 	ldw	fp,0(sp)
  8259e4:	dec00204 	addi	sp,sp,8
  8259e8:	f800283a 	ret

008259ec <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
  8259ec:	defffb04 	addi	sp,sp,-20
  8259f0:	df000415 	stw	fp,16(sp)
  8259f4:	df000404 	addi	fp,sp,16
  8259f8:	e13ffe15 	stw	r4,-8(fp)
  8259fc:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
  825a00:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  825a04:	e03ffd15 	stw	zero,-12(fp)
  825a08:	00001606 	br	825a64 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
  825a0c:	e0fffd17 	ldw	r3,-12(fp)
  825a10:	e0bffe17 	ldw	r2,-8(fp)
  825a14:	10c5883a 	add	r2,r2,r3
  825a18:	10800003 	ldbu	r2,0(r2)
  825a1c:	10803fcc 	andi	r2,r2,255
  825a20:	10800820 	cmpeqi	r2,r2,32
  825a24:	10000c1e 	bne	r2,zero,825a58 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
  825a28:	e0bffc17 	ldw	r2,-16(fp)
  825a2c:	1007883a 	mov	r3,r2
  825a30:	e0bfff17 	ldw	r2,-4(fp)
  825a34:	1889883a 	add	r4,r3,r2
  825a38:	e0fffd17 	ldw	r3,-12(fp)
  825a3c:	e0bffe17 	ldw	r2,-8(fp)
  825a40:	10c5883a 	add	r2,r2,r3
  825a44:	10800003 	ldbu	r2,0(r2)
  825a48:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  825a4c:	e0bffc17 	ldw	r2,-16(fp)
  825a50:	10800044 	addi	r2,r2,1
  825a54:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
  825a58:	e0bffd17 	ldw	r2,-12(fp)
  825a5c:	10800044 	addi	r2,r2,1
  825a60:	e0bffd15 	stw	r2,-12(fp)
  825a64:	e0bffd17 	ldw	r2,-12(fp)
  825a68:	10800210 	cmplti	r2,r2,8
  825a6c:	103fe71e 	bne	r2,zero,825a0c <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
  825a70:	e0bffe17 	ldw	r2,-8(fp)
  825a74:	10800203 	ldbu	r2,8(r2)
  825a78:	10803fcc 	andi	r2,r2,255
  825a7c:	10800820 	cmpeqi	r2,r2,32
  825a80:	1000261e 	bne	r2,zero,825b1c <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
  825a84:	e0bffc17 	ldw	r2,-16(fp)
  825a88:	1007883a 	mov	r3,r2
  825a8c:	e0bfff17 	ldw	r2,-4(fp)
  825a90:	1887883a 	add	r3,r3,r2
  825a94:	00800b84 	movi	r2,46
  825a98:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  825a9c:	e0bffc17 	ldw	r2,-16(fp)
  825aa0:	10800044 	addi	r2,r2,1
  825aa4:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
  825aa8:	e03ffd15 	stw	zero,-12(fp)
  825aac:	00001806 	br	825b10 <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
  825ab0:	e0fffd17 	ldw	r3,-12(fp)
  825ab4:	e0bffe17 	ldw	r2,-8(fp)
  825ab8:	1885883a 	add	r2,r3,r2
  825abc:	10800204 	addi	r2,r2,8
  825ac0:	10800003 	ldbu	r2,0(r2)
  825ac4:	10803fcc 	andi	r2,r2,255
  825ac8:	10800820 	cmpeqi	r2,r2,32
  825acc:	10000d1e 	bne	r2,zero,825b04 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
  825ad0:	e0bffc17 	ldw	r2,-16(fp)
  825ad4:	1007883a 	mov	r3,r2
  825ad8:	e0bfff17 	ldw	r2,-4(fp)
  825adc:	1889883a 	add	r4,r3,r2
  825ae0:	e0fffd17 	ldw	r3,-12(fp)
  825ae4:	e0bffe17 	ldw	r2,-8(fp)
  825ae8:	1885883a 	add	r2,r3,r2
  825aec:	10800204 	addi	r2,r2,8
  825af0:	10800003 	ldbu	r2,0(r2)
  825af4:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  825af8:	e0bffc17 	ldw	r2,-16(fp)
  825afc:	10800044 	addi	r2,r2,1
  825b00:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
  825b04:	e0bffd17 	ldw	r2,-12(fp)
  825b08:	10800044 	addi	r2,r2,1
  825b0c:	e0bffd15 	stw	r2,-12(fp)
  825b10:	e0bffd17 	ldw	r2,-12(fp)
  825b14:	108000d0 	cmplti	r2,r2,3
  825b18:	103fe51e 	bne	r2,zero,825ab0 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
  825b1c:	e0bffc17 	ldw	r2,-16(fp)
  825b20:	1007883a 	mov	r3,r2
  825b24:	e0bfff17 	ldw	r2,-4(fp)
  825b28:	1885883a 	add	r2,r3,r2
  825b2c:	10000005 	stb	zero,0(r2)
}
  825b30:	e037883a 	mov	sp,fp
  825b34:	df000017 	ldw	fp,0(sp)
  825b38:	dec00104 	addi	sp,sp,4
  825b3c:	f800283a 	ret

00825b40 <alt_up_sd_card_open_dev>:
///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
  825b40:	defffc04 	addi	sp,sp,-16
  825b44:	dfc00315 	stw	ra,12(sp)
  825b48:	df000215 	stw	fp,8(sp)
  825b4c:	df000204 	addi	fp,sp,8
  825b50:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
  825b54:	e13fff17 	ldw	r4,-4(fp)
  825b58:	014020f4 	movhi	r5,131
  825b5c:	29406104 	addi	r5,r5,388
  825b60:	08277040 	call	827704 <alt_find_dev>
  825b64:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
  825b68:	e0bffe17 	ldw	r2,-8(fp)
  825b6c:	1005003a 	cmpeq	r2,r2,zero
  825b70:	10001e1e 	bne	r2,zero,825bec <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  825b74:	e0bffe17 	ldw	r2,-8(fp)
  825b78:	10800a17 	ldw	r2,40(r2)
  825b7c:	10808d04 	addi	r2,r2,564
  825b80:	d0bc4815 	stw	r2,-3808(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  825b84:	e0bffe17 	ldw	r2,-8(fp)
  825b88:	10800a17 	ldw	r2,40(r2)
  825b8c:	10808904 	addi	r2,r2,548
  825b90:	d0bc4915 	stw	r2,-3804(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  825b94:	e0bffe17 	ldw	r2,-8(fp)
  825b98:	10800a17 	ldw	r2,40(r2)
  825b9c:	10808404 	addi	r2,r2,528
  825ba0:	d0bc4a15 	stw	r2,-3800(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  825ba4:	e0bffe17 	ldw	r2,-8(fp)
  825ba8:	10800a17 	ldw	r2,40(r2)
  825bac:	10808c04 	addi	r2,r2,560
  825bb0:	d0bc4b15 	stw	r2,-3796(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  825bb4:	e0bffe17 	ldw	r2,-8(fp)
  825bb8:	10800a17 	ldw	r2,40(r2)
  825bbc:	10808b04 	addi	r2,r2,556
  825bc0:	d0bc4c15 	stw	r2,-3792(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  825bc4:	e0bffe17 	ldw	r2,-8(fp)
  825bc8:	10800a17 	ldw	r2,40(r2)
  825bcc:	d0bc4d15 	stw	r2,-3788(gp)
		device_pointer = dev;
  825bd0:	e0bffe17 	ldw	r2,-8(fp)
  825bd4:	d0bc5015 	stw	r2,-3776(gp)
		initialized = false;
  825bd8:	d03c4615 	stw	zero,-3816(gp)
		is_sd_card_formated_as_FAT16 = false;
  825bdc:	d03c4715 	stw	zero,-3812(gp)
		search_data.valid = false;
  825be0:	008020f4 	movhi	r2,131
  825be4:	109cd404 	addi	r2,r2,29520
  825be8:	10000415 	stw	zero,16(r2)
	}
	return dev;
  825bec:	e0bffe17 	ldw	r2,-8(fp)
}
  825bf0:	e037883a 	mov	sp,fp
  825bf4:	dfc00117 	ldw	ra,4(sp)
  825bf8:	df000017 	ldw	fp,0(sp)
  825bfc:	dec00204 	addi	sp,sp,8
  825c00:	f800283a 	ret

00825c04 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  825c04:	defffd04 	addi	sp,sp,-12
  825c08:	df000215 	stw	fp,8(sp)
  825c0c:	df000204 	addi	fp,sp,8
	bool result = false;
  825c10:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  825c14:	d0bc5017 	ldw	r2,-3776(gp)
  825c18:	1005003a 	cmpeq	r2,r2,zero
  825c1c:	1000081e 	bne	r2,zero,825c40 <alt_up_sd_card_is_Present+0x3c>
  825c20:	d0bc4817 	ldw	r2,-3808(gp)
  825c24:	1080002b 	ldhuio	r2,0(r2)
  825c28:	1080008c 	andi	r2,r2,2
  825c2c:	1005003a 	cmpeq	r2,r2,zero
  825c30:	1000031e 	bne	r2,zero,825c40 <alt_up_sd_card_is_Present+0x3c>
			& 0x02) != 0)) {
		result = true;
  825c34:	00800044 	movi	r2,1
  825c38:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0)
  825c3c:	00001e06 	br	825cb8 <alt_up_sd_card_is_Present+0xb4>
			& 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
  825c40:	d0bc4617 	ldw	r2,-3816(gp)
  825c44:	10800058 	cmpnei	r2,r2,1
  825c48:	10001b1e 	bne	r2,zero,825cb8 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
  825c4c:	d03c4615 	stw	zero,-3816(gp)
		search_data.valid = false;
  825c50:	008020f4 	movhi	r2,131
  825c54:	109cd404 	addi	r2,r2,29520
  825c58:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  825c5c:	d03c4715 	stw	zero,-3812(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  825c60:	e03ffe15 	stw	zero,-8(fp)
  825c64:	00001106 	br	825cac <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
  825c68:	e0bffe17 	ldw	r2,-8(fp)
  825c6c:	00c020f4 	movhi	r3,131
  825c70:	18dcee04 	addi	r3,r3,29624
  825c74:	100491ba 	slli	r2,r2,6
  825c78:	10c5883a 	add	r2,r2,r3
  825c7c:	10800f04 	addi	r2,r2,60
  825c80:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  825c84:	e0bffe17 	ldw	r2,-8(fp)
  825c88:	00c020f4 	movhi	r3,131
  825c8c:	18dcee04 	addi	r3,r3,29624
  825c90:	100491ba 	slli	r2,r2,6
  825c94:	10c5883a 	add	r2,r2,r3
  825c98:	10800e04 	addi	r2,r2,56
  825c9c:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
  825ca0:	e0bffe17 	ldw	r2,-8(fp)
  825ca4:	10800044 	addi	r2,r2,1
  825ca8:	e0bffe15 	stw	r2,-8(fp)
  825cac:	e0bffe17 	ldw	r2,-8(fp)
  825cb0:	10800510 	cmplti	r2,r2,20
  825cb4:	103fec1e 	bne	r2,zero,825c68 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
  825cb8:	e0bfff17 	ldw	r2,-4(fp)
}
  825cbc:	e037883a 	mov	sp,fp
  825cc0:	df000017 	ldw	fp,0(sp)
  825cc4:	dec00104 	addi	sp,sp,4
  825cc8:	f800283a 	ret

00825ccc <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  825ccc:	defffd04 	addi	sp,sp,-12
  825cd0:	dfc00215 	stw	ra,8(sp)
  825cd4:	df000115 	stw	fp,4(sp)
  825cd8:	df000104 	addi	fp,sp,4
	bool result = false;
  825cdc:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
  825ce0:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  825ce4:	1005003a 	cmpeq	r2,r2,zero
  825ce8:	10000d1e 	bne	r2,zero,825d20 <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
  825cec:	d0bc4617 	ldw	r2,-3816(gp)
  825cf0:	1004c03a 	cmpne	r2,r2,zero
  825cf4:	1000071e 	bne	r2,zero,825d14 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  825cf8:	0823ebc0 	call	823ebc <Look_for_FAT16>
  825cfc:	d0bc4715 	stw	r2,-3812(gp)
			initialized = is_sd_card_formated_as_FAT16;
  825d00:	d0bc4717 	ldw	r2,-3812(gp)
  825d04:	d0bc4615 	stw	r2,-3816(gp)
			search_data.valid = false;
  825d08:	008020f4 	movhi	r2,131
  825d0c:	109cd404 	addi	r2,r2,29520
  825d10:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  825d14:	d0bc4717 	ldw	r2,-3812(gp)
  825d18:	e0bfff15 	stw	r2,-4(fp)
  825d1c:	00000206 	br	825d28 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
  825d20:	d03c4615 	stw	zero,-3816(gp)
		is_sd_card_formated_as_FAT16 = false;
  825d24:	d03c4715 	stw	zero,-3812(gp)
	}

	return result;
  825d28:	e0bfff17 	ldw	r2,-4(fp)
}
  825d2c:	e037883a 	mov	sp,fp
  825d30:	dfc00117 	ldw	ra,4(sp)
  825d34:	df000017 	ldw	fp,0(sp)
  825d38:	dec00204 	addi	sp,sp,8
  825d3c:	f800283a 	ret

00825d40 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  825d40:	deffea04 	addi	sp,sp,-88
  825d44:	dfc01515 	stw	ra,84(sp)
  825d48:	df001415 	stw	fp,80(sp)
  825d4c:	df001404 	addi	fp,sp,80
  825d50:	e13ffe15 	stw	r4,-8(fp)
  825d54:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
  825d58:	00800084 	movi	r2,2
  825d5c:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  825d60:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  825d64:	1005003a 	cmpeq	r2,r2,zero
  825d68:	1000241e 	bne	r2,zero,825dfc <alt_up_sd_card_find_first+0xbc>
  825d6c:	d0bc4717 	ldw	r2,-3812(gp)
  825d70:	1005003a 	cmpeq	r2,r2,zero
  825d74:	1000211e 	bne	r2,zero,825dfc <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
  825d78:	e17fed04 	addi	r5,fp,-76
  825d7c:	e1bfee04 	addi	r6,fp,-72
  825d80:	e13ffe17 	ldw	r4,-8(fp)
  825d84:	08246cc0 	call	8246cc <get_home_directory_cluster_for_file>
  825d88:	1005003a 	cmpeq	r2,r2,zero
  825d8c:	1000191e 	bne	r2,zero,825df4 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
  825d90:	e0bfed17 	ldw	r2,-76(fp)
  825d94:	1007883a 	mov	r3,r2
  825d98:	008020f4 	movhi	r2,131
  825d9c:	109cd404 	addi	r2,r2,29520
  825da0:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
  825da4:	e0bfed17 	ldw	r2,-76(fp)
  825da8:	1007883a 	mov	r3,r2
  825dac:	008020f4 	movhi	r2,131
  825db0:	109cd404 	addi	r2,r2,29520
  825db4:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
  825db8:	008020f4 	movhi	r2,131
  825dbc:	109cd404 	addi	r2,r2,29520
  825dc0:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  825dc4:	00c020f4 	movhi	r3,131
  825dc8:	18dcd404 	addi	r3,r3,29520
  825dcc:	00bfffc4 	movi	r2,-1
  825dd0:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  825dd4:	00c020f4 	movhi	r3,131
  825dd8:	18dcd404 	addi	r3,r3,29520
  825ddc:	00800044 	movi	r2,1
  825de0:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  825de4:	e13fff17 	ldw	r4,-4(fp)
  825de8:	0825e140 	call	825e14 <alt_up_sd_card_find_next>
  825dec:	e0bfec0d 	sth	r2,-80(fp)
  825df0:	00000206 	br	825dfc <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
  825df4:	00800044 	movi	r2,1
  825df8:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
  825dfc:	e0bfec0f 	ldh	r2,-80(fp)
}
  825e00:	e037883a 	mov	sp,fp
  825e04:	dfc00117 	ldw	ra,4(sp)
  825e08:	df000017 	ldw	fp,0(sp)
  825e0c:	dec00204 	addi	sp,sp,8
  825e10:	f800283a 	ret

00825e14 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  825e14:	deffe404 	addi	sp,sp,-112
  825e18:	dfc01b15 	stw	ra,108(sp)
  825e1c:	df001a15 	stw	fp,104(sp)
  825e20:	df001a04 	addi	fp,sp,104
  825e24:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
  825e28:	00800084 	movi	r2,2
  825e2c:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  825e30:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  825e34:	1005003a 	cmpeq	r2,r2,zero
  825e38:	1000da1e 	bne	r2,zero,8261a4 <alt_up_sd_card_find_next+0x390>
  825e3c:	d0bc4717 	ldw	r2,-3812(gp)
  825e40:	1005003a 	cmpeq	r2,r2,zero
  825e44:	1000d71e 	bne	r2,zero,8261a4 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
  825e48:	008020f4 	movhi	r2,131
  825e4c:	109cd404 	addi	r2,r2,29520
  825e50:	10800417 	ldw	r2,16(r2)
  825e54:	1005003a 	cmpeq	r2,r2,zero
  825e58:	1000d01e 	bne	r2,zero,82619c <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  825e5c:	008020f4 	movhi	r2,131
  825e60:	109cd404 	addi	r2,r2,29520
  825e64:	10800117 	ldw	r2,4(r2)
  825e68:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
  825e6c:	e0bfec17 	ldw	r2,-80(fp)
  825e70:	1004c03a 	cmpne	r2,r2,zero
  825e74:	1000511e 	bne	r2,zero,825fbc <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
  825e78:	008020f4 	movhi	r2,131
  825e7c:	109cd904 	addi	r2,r2,29540
  825e80:	1080050b 	ldhu	r2,20(r2)
  825e84:	10bfffcc 	andi	r2,r2,65535
  825e88:	1008917a 	slli	r4,r2,5
  825e8c:	008020f4 	movhi	r2,131
  825e90:	109cd904 	addi	r2,r2,29540
  825e94:	1080030b 	ldhu	r2,12(r2)
  825e98:	117fffcc 	andi	r5,r2,65535
  825e9c:	08145fc0 	call	8145fc <__divsi3>
  825ea0:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
  825ea4:	008020f4 	movhi	r2,131
  825ea8:	109cd404 	addi	r2,r2,29520
  825eac:	10800217 	ldw	r2,8(r2)
  825eb0:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
  825eb4:	008020f4 	movhi	r2,131
  825eb8:	109cd404 	addi	r2,r2,29520
  825ebc:	1080030b 	ldhu	r2,12(r2)
  825ec0:	10bfffcc 	andi	r2,r2,65535
  825ec4:	10a0001c 	xori	r2,r2,32768
  825ec8:	10a00004 	addi	r2,r2,-32768
  825ecc:	10800044 	addi	r2,r2,1
  825ed0:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  825ed4:	00003306 	br	825fa4 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(sector_index
  825ed8:	008020f4 	movhi	r2,131
  825edc:	109cd904 	addi	r2,r2,29540
  825ee0:	10c01317 	ldw	r3,76(r2)
  825ee4:	e0bfea17 	ldw	r2,-88(fp)
  825ee8:	1885883a 	add	r2,r3,r2
  825eec:	1009883a 	mov	r4,r2
  825ef0:	d17c4e17 	ldw	r5,-3784(gp)
  825ef4:	0822ef00 	call	822ef0 <Read_Sector_Data>
  825ef8:	1005003a 	cmpeq	r2,r2,zero
  825efc:	10002c1e 	bne	r2,zero,825fb0 <alt_up_sd_card_find_next+0x19c>
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  825f00:	00002106 	br	825f88 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
  825f04:	e0bfe917 	ldw	r2,-92(fp)
  825f08:	1008917a 	slli	r4,r2,5
  825f0c:	e1ffea17 	ldw	r7,-88(fp)
  825f10:	e17fee04 	addi	r5,fp,-72
  825f14:	000d883a 	mov	r6,zero
  825f18:	08233380 	call	823338 <Read_File_Record_At_Offset>
  825f1c:	1005003a 	cmpeq	r2,r2,zero
  825f20:	1000161e 	bne	r2,zero,825f7c <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
  825f24:	e0bfee03 	ldbu	r2,-72(fp)
  825f28:	10803fcc 	andi	r2,r2,255
  825f2c:	1005003a 	cmpeq	r2,r2,zero
  825f30:	1000121e 	bne	r2,zero,825f7c <alt_up_sd_card_find_next+0x168>
  825f34:	e0bfee03 	ldbu	r2,-72(fp)
  825f38:	10803fcc 	andi	r2,r2,255
  825f3c:	10803960 	cmpeqi	r2,r2,229
  825f40:	10000e1e 	bne	r2,zero,825f7c <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector
  825f44:	e0bfe917 	ldw	r2,-92(fp)
  825f48:	1007883a 	mov	r3,r2
  825f4c:	008020f4 	movhi	r2,131
  825f50:	109cd404 	addi	r2,r2,29520
  825f54:	10c0030d 	sth	r3,12(r2)
											= file_counter;
									search_data.current_sector_in_cluster
  825f58:	e0ffea17 	ldw	r3,-88(fp)
  825f5c:	008020f4 	movhi	r2,131
  825f60:	109cd404 	addi	r2,r2,29520
  825f64:	10c00215 	stw	r3,8(r2)
											= sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
  825f68:	e13fee04 	addi	r4,fp,-72
  825f6c:	e17ffe17 	ldw	r5,-8(fp)
  825f70:	08259ec0 	call	8259ec <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
  825f74:	e03fff15 	stw	zero,-4(fp)
  825f78:	00008c06 	br	8261ac <alt_up_sd_card_find_next+0x398>

				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(sector_index
							+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
  825f7c:	e0bfe917 	ldw	r2,-92(fp)
  825f80:	10800044 	addi	r2,r2,1
  825f84:	e0bfe915 	stw	r2,-92(fp)
  825f88:	e0bfe917 	ldw	r2,-92(fp)
  825f8c:	10800410 	cmplti	r2,r2,16
  825f90:	103fdc1e 	bne	r2,zero,825f04 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
  825f94:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
  825f98:	e0bfea17 	ldw	r2,-88(fp)
  825f9c:	10800044 	addi	r2,r2,1
  825fa0:	e0bfea15 	stw	r2,-88(fp)
  825fa4:	e0ffea17 	ldw	r3,-88(fp)
  825fa8:	e0bfeb17 	ldw	r2,-84(fp)
  825fac:	18bfca16 	blt	r3,r2,825ed8 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
  825fb0:	00bfffc4 	movi	r2,-1
  825fb4:	e0bfed0d 	sth	r2,-76(fp)
  825fb8:	00007a06 	br	8261a4 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
  825fbc:	008020f4 	movhi	r2,131
  825fc0:	109cd404 	addi	r2,r2,29520
  825fc4:	1080030b 	ldhu	r2,12(r2)
  825fc8:	10bfffcc 	andi	r2,r2,65535
  825fcc:	10a0001c 	xori	r2,r2,32768
  825fd0:	10a00004 	addi	r2,r2,-32768
  825fd4:	10800044 	addi	r2,r2,1
  825fd8:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
  825fdc:	e0bfec17 	ldw	r2,-80(fp)
  825fe0:	10ffff84 	addi	r3,r2,-2
  825fe4:	008020f4 	movhi	r2,131
  825fe8:	109cd904 	addi	r2,r2,29540
  825fec:	10800383 	ldbu	r2,14(r2)
  825ff0:	10803fcc 	andi	r2,r2,255
  825ff4:	1885383a 	mul	r2,r3,r2
  825ff8:	1007883a 	mov	r3,r2
  825ffc:	008020f4 	movhi	r2,131
  826000:	109cd904 	addi	r2,r2,29540
  826004:	10801417 	ldw	r2,80(r2)
  826008:	1885883a 	add	r2,r3,r2
  82600c:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
  826010:	008020f4 	movhi	r2,131
  826014:	109cd404 	addi	r2,r2,29520
  826018:	10800217 	ldw	r2,8(r2)
  82601c:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  826020:	00003406 	br	8260f4 <alt_up_sd_card_find_next+0x2e0>
						if (Read_Sector_Data(sector_index + start_sector,
  826024:	e0ffe617 	ldw	r3,-104(fp)
  826028:	e0bfe717 	ldw	r2,-100(fp)
  82602c:	1889883a 	add	r4,r3,r2
  826030:	d17c4e17 	ldw	r5,-3784(gp)
  826034:	0822ef00 	call	822ef0 <Read_Sector_Data>
  826038:	1005003a 	cmpeq	r2,r2,zero
  82603c:	1000331e 	bne	r2,zero,82610c <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  826040:	00002506 	br	8260d8 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(file_counter
  826044:	e0bfe817 	ldw	r2,-96(fp)
  826048:	1008917a 	slli	r4,r2,5
  82604c:	e1bfec17 	ldw	r6,-80(fp)
  826050:	e1ffe617 	ldw	r7,-104(fp)
  826054:	e17fee04 	addi	r5,fp,-72
  826058:	08233380 	call	823338 <Read_File_Record_At_Offset>
  82605c:	1005003a 	cmpeq	r2,r2,zero
  826060:	10001a1e 	bne	r2,zero,8260cc <alt_up_sd_card_find_next+0x2b8>
										* 32, &file_record, cluster,
										sector_index)) {
									if ((file_record.name[0] != 0)
  826064:	e0bfee03 	ldbu	r2,-72(fp)
  826068:	10803fcc 	andi	r2,r2,255
  82606c:	1005003a 	cmpeq	r2,r2,zero
  826070:	1000161e 	bne	r2,zero,8260cc <alt_up_sd_card_find_next+0x2b8>
  826074:	e0bfee03 	ldbu	r2,-72(fp)
  826078:	10803fcc 	andi	r2,r2,255
  82607c:	10803960 	cmpeqi	r2,r2,229
  826080:	1000121e 	bne	r2,zero,8260cc <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index
  826084:	e0ffec17 	ldw	r3,-80(fp)
  826088:	008020f4 	movhi	r2,131
  82608c:	109cd404 	addi	r2,r2,29520
  826090:	10c00115 	stw	r3,4(r2)
												= cluster;
										search_data.file_index_in_sector
  826094:	e0bfe817 	ldw	r2,-96(fp)
  826098:	1007883a 	mov	r3,r2
  82609c:	008020f4 	movhi	r2,131
  8260a0:	109cd404 	addi	r2,r2,29520
  8260a4:	10c0030d 	sth	r3,12(r2)
												= file_counter;
										search_data.current_sector_in_cluster
  8260a8:	e0ffe617 	ldw	r3,-104(fp)
  8260ac:	008020f4 	movhi	r2,131
  8260b0:	109cd404 	addi	r2,r2,29520
  8260b4:	10c00215 	stw	r3,8(r2)
												= sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
  8260b8:	e13fee04 	addi	r4,fp,-72
  8260bc:	e17ffe17 	ldw	r5,-8(fp)
  8260c0:	08259ec0 	call	8259ec <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
  8260c4:	e03fff15 	stw	zero,-4(fp)
  8260c8:	00003806 	br	8261ac <alt_up_sd_card_find_next+0x398>
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
  8260cc:	e0bfe817 	ldw	r2,-96(fp)
  8260d0:	10800044 	addi	r2,r2,1
  8260d4:	e0bfe815 	stw	r2,-96(fp)
  8260d8:	e0bfe817 	ldw	r2,-96(fp)
  8260dc:	10800410 	cmplti	r2,r2,16
  8260e0:	103fd81e 	bne	r2,zero,826044 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
  8260e4:	e03fe815 	stw	zero,-96(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++) {
  8260e8:	e0bfe617 	ldw	r2,-104(fp)
  8260ec:	10800044 	addi	r2,r2,1
  8260f0:	e0bfe615 	stw	r2,-104(fp)
  8260f4:	008020f4 	movhi	r2,131
  8260f8:	109cd904 	addi	r2,r2,29540
  8260fc:	10800383 	ldbu	r2,14(r2)
  826100:	10c03fcc 	andi	r3,r2,255
  826104:	e0bfe617 	ldw	r2,-104(fp)
  826108:	10ffc616 	blt	r2,r3,826024 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
  82610c:	008020f4 	movhi	r2,131
  826110:	109cd904 	addi	r2,r2,29540
  826114:	10800383 	ldbu	r2,14(r2)
  826118:	10c03fcc 	andi	r3,r2,255
  82611c:	e0bfe617 	ldw	r2,-104(fp)
  826120:	10c01a16 	blt	r2,r3,82618c <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
  826124:	e13fec17 	ldw	r4,-80(fp)
  826128:	e17fed84 	addi	r5,fp,-74
  82612c:	0822fec0 	call	822fec <get_cluster_flag>
  826130:	1005003a 	cmpeq	r2,r2,zero
  826134:	1000131e 	bne	r2,zero,826184 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
  826138:	e0bfed8b 	ldhu	r2,-74(fp)
  82613c:	10bfffcc 	andi	r2,r2,65535
  826140:	10a0001c 	xori	r2,r2,32768
  826144:	10a00004 	addi	r2,r2,-32768
  826148:	10fffe0c 	andi	r3,r2,65528
  82614c:	00bffe14 	movui	r2,65528
  826150:	1880051e 	bne	r3,r2,826168 <alt_up_sd_card_find_next+0x354>
								result = -1;
  826154:	00bfffc4 	movi	r2,-1
  826158:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
  82615c:	008020f4 	movhi	r2,131
  826160:	109cd404 	addi	r2,r2,29520
  826164:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  826168:	e0bfed8b 	ldhu	r2,-74(fp)
  82616c:	10bfffcc 	andi	r2,r2,65535
  826170:	10a0001c 	xori	r2,r2,32768
  826174:	10a00004 	addi	r2,r2,-32768
  826178:	10bffe0c 	andi	r2,r2,65528
  82617c:	e0bfec15 	stw	r2,-80(fp)
  826180:	00000206 	br	82618c <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
  826184:	00bfffc4 	movi	r2,-1
  826188:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
  82618c:	e0ffec17 	ldw	r3,-80(fp)
  826190:	00bffdd4 	movui	r2,65527
  826194:	10ff910e 	bge	r2,r3,825fdc <alt_up_sd_card_find_next+0x1c8>
  826198:	00000206 	br	8261a4 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
  82619c:	008000c4 	movi	r2,3
  8261a0:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
  8261a4:	e0bfed0f 	ldh	r2,-76(fp)
  8261a8:	e0bfff15 	stw	r2,-4(fp)
  8261ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8261b0:	e037883a 	mov	sp,fp
  8261b4:	dfc00117 	ldw	ra,4(sp)
  8261b8:	df000017 	ldw	fp,0(sp)
  8261bc:	dec00204 	addi	sp,sp,8
  8261c0:	f800283a 	ret

008261c4 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  8261c4:	deffe804 	addi	sp,sp,-96
  8261c8:	dfc01715 	stw	ra,92(sp)
  8261cc:	df001615 	stw	fp,88(sp)
  8261d0:	df001604 	addi	fp,sp,88
  8261d4:	e13ffd15 	stw	r4,-12(fp)
  8261d8:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
  8261dc:	00bfffc4 	movi	r2,-1
  8261e0:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  8261e4:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  8261e8:	1005003a 	cmpeq	r2,r2,zero
  8261ec:	1000d71e 	bne	r2,zero,82654c <alt_up_sd_card_fopen+0x388>
  8261f0:	d0bc4717 	ldw	r2,-3812(gp)
  8261f4:	1005003a 	cmpeq	r2,r2,zero
  8261f8:	1000d41e 	bne	r2,zero,82654c <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
  8261fc:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
  826200:	e13ffd17 	ldw	r4,-12(fp)
  826204:	0823fc00 	call	823fc0 <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
  826208:	e13ffd17 	ldw	r4,-12(fp)
  82620c:	08240900 	call	824090 <check_file_name_for_FAT16_compliance>
  826210:	1005003a 	cmpeq	r2,r2,zero
  826214:	1000cd1e 	bne	r2,zero,82654c <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
  826218:	e17fec04 	addi	r5,fp,-80
  82621c:	e1bfed04 	addi	r6,fp,-76
  826220:	e13ffd17 	ldw	r4,-12(fp)
  826224:	08246cc0 	call	8246cc <get_home_directory_cluster_for_file>
  826228:	1004c03a 	cmpne	r2,r2,zero
  82622c:	1000031e 	bne	r2,zero,82623c <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
  826230:	e0bfeb0f 	ldh	r2,-84(fp)
  826234:	e0bfff15 	stw	r2,-4(fp)
  826238:	0000c606 	br	826554 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  82623c:	e03fea15 	stw	zero,-88(fp)
  826240:	00000f06 	br	826280 <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
  826244:	e0bfea17 	ldw	r2,-88(fp)
  826248:	00c020f4 	movhi	r3,131
  82624c:	18dcee04 	addi	r3,r3,29624
  826250:	100491ba 	slli	r2,r2,6
  826254:	10c5883a 	add	r2,r2,r3
  826258:	10800f04 	addi	r2,r2,60
  82625c:	10800017 	ldw	r2,0(r2)
  826260:	1004c03a 	cmpne	r2,r2,zero
  826264:	1000031e 	bne	r2,zero,826274 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
  826268:	e0bfea17 	ldw	r2,-88(fp)
  82626c:	e0bfeb0d 	sth	r2,-84(fp)
					break;
  826270:	00000606 	br	82628c <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
  826274:	e0bfea17 	ldw	r2,-88(fp)
  826278:	10800044 	addi	r2,r2,1
  82627c:	e0bfea15 	stw	r2,-88(fp)
  826280:	e0bfea17 	ldw	r2,-88(fp)
  826284:	10800510 	cmplti	r2,r2,20
  826288:	103fee1e 	bne	r2,zero,826244 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
  82628c:	e0bfeb0f 	ldh	r2,-84(fp)
  826290:	1004803a 	cmplt	r2,r2,zero
  826294:	1000ad1e 	bne	r2,zero,82654c <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
  826298:	e0bfec17 	ldw	r2,-80(fp)
  82629c:	1009883a 	mov	r4,r2
  8262a0:	e0bfeb0f 	ldh	r2,-84(fp)
  8262a4:	100491ba 	slli	r2,r2,6
  8262a8:	1007883a 	mov	r3,r2
  8262ac:	008020f4 	movhi	r2,131
  8262b0:	109cee04 	addi	r2,r2,29624
  8262b4:	188d883a 	add	r6,r3,r2
  8262b8:	e17ffd17 	ldw	r5,-12(fp)
  8262bc:	0824be00 	call	824be0 <find_file_in_directory>
  8262c0:	1005003a 	cmpeq	r2,r2,zero
  8262c4:	10007d1e 	bne	r2,zero,8264bc <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
  8262c8:	e0bffe17 	ldw	r2,-8(fp)
  8262cc:	1005003a 	cmpeq	r2,r2,zero
  8262d0:	1000031e 	bne	r2,zero,8262e0 <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
  8262d4:	00bfffc4 	movi	r2,-1
  8262d8:	e0bfff15 	stw	r2,-4(fp)
  8262dc:	00009d06 	br	826554 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index
  8262e0:	e17feb0f 	ldh	r5,-84(fp)
  8262e4:	e0bfeb0f 	ldh	r2,-84(fp)
  8262e8:	00c020f4 	movhi	r3,131
  8262ec:	18dcee04 	addi	r3,r3,29624
  8262f0:	100491ba 	slli	r2,r2,6
  8262f4:	10c5883a 	add	r2,r2,r3
  8262f8:	10800504 	addi	r2,r2,20
  8262fc:	1080008b 	ldhu	r2,2(r2)
  826300:	113fffcc 	andi	r4,r2,65535
  826304:	00c020f4 	movhi	r3,131
  826308:	18dcee04 	addi	r3,r3,29624
  82630c:	280491ba 	slli	r2,r5,6
  826310:	10c5883a 	add	r2,r2,r3
  826314:	10800704 	addi	r2,r2,28
  826318:	11000015 	stw	r4,0(r2)
							= active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster
  82631c:	e0bfeb0f 	ldh	r2,-84(fp)
  826320:	00c020f4 	movhi	r3,131
  826324:	18dcee04 	addi	r3,r3,29624
  826328:	100491ba 	slli	r2,r2,6
  82632c:	10c5883a 	add	r2,r2,r3
  826330:	10800804 	addi	r2,r2,32
  826334:	10000015 	stw	zero,0(r2)
							= 0;
					active_files[file_record_index].current_byte_position = 0;
  826338:	e0bfeb0f 	ldh	r2,-84(fp)
  82633c:	00c020f4 	movhi	r3,131
  826340:	18dcee04 	addi	r3,r3,29624
  826344:	100491ba 	slli	r2,r2,6
  826348:	10c5883a 	add	r2,r2,r3
  82634c:	10800904 	addi	r2,r2,36
  826350:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
  826354:	e0bfeb0f 	ldh	r2,-84(fp)
  826358:	00c020f4 	movhi	r3,131
  82635c:	18dcee04 	addi	r3,r3,29624
  826360:	100491ba 	slli	r2,r2,6
  826364:	10c5883a 	add	r2,r2,r3
  826368:	10c00f04 	addi	r3,r2,60
  82636c:	00800044 	movi	r2,1
  826370:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
  826374:	e0bfeb0f 	ldh	r2,-84(fp)
  826378:	00c020f4 	movhi	r3,131
  82637c:	18dcee04 	addi	r3,r3,29624
  826380:	100491ba 	slli	r2,r2,6
  826384:	10c5883a 	add	r2,r2,r3
  826388:	10800e04 	addi	r2,r2,56
  82638c:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  826390:	e03fea15 	stw	zero,-88(fp)
  826394:	00004506 	br	8264ac <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
  826398:	e0ffeb0f 	ldh	r3,-84(fp)
  82639c:	e0bfea17 	ldw	r2,-88(fp)
  8263a0:	18803f26 	beq	r3,r2,8264a0 <alt_up_sd_card_fopen+0x2dc>
  8263a4:	e0bfea17 	ldw	r2,-88(fp)
  8263a8:	00c020f4 	movhi	r3,131
  8263ac:	18dcee04 	addi	r3,r3,29624
  8263b0:	100491ba 	slli	r2,r2,6
  8263b4:	10c5883a 	add	r2,r2,r3
  8263b8:	10800f04 	addi	r2,r2,60
  8263bc:	10800017 	ldw	r2,0(r2)
  8263c0:	10800058 	cmpnei	r2,r2,1
  8263c4:	1000361e 	bne	r2,zero,8264a0 <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
  8263c8:	e0bfeb0f 	ldh	r2,-84(fp)
  8263cc:	00c020f4 	movhi	r3,131
  8263d0:	18dcee04 	addi	r3,r3,29624
  8263d4:	100491ba 	slli	r2,r2,6
  8263d8:	10c5883a 	add	r2,r2,r3
  8263dc:	10800a04 	addi	r2,r2,40
  8263e0:	11000017 	ldw	r4,0(r2)
  8263e4:	e0bfea17 	ldw	r2,-88(fp)
  8263e8:	00c020f4 	movhi	r3,131
  8263ec:	18dcee04 	addi	r3,r3,29624
  8263f0:	100491ba 	slli	r2,r2,6
  8263f4:	10c5883a 	add	r2,r2,r3
  8263f8:	10800a04 	addi	r2,r2,40
  8263fc:	10800017 	ldw	r2,0(r2)
  826400:	2080271e 	bne	r4,r2,8264a0 <alt_up_sd_card_fopen+0x2dc>
  826404:	e0bfeb0f 	ldh	r2,-84(fp)
  826408:	00c020f4 	movhi	r3,131
  82640c:	18dcee04 	addi	r3,r3,29624
  826410:	100491ba 	slli	r2,r2,6
  826414:	10c5883a 	add	r2,r2,r3
  826418:	10800b04 	addi	r2,r2,44
  82641c:	11000017 	ldw	r4,0(r2)
  826420:	e0bfea17 	ldw	r2,-88(fp)
  826424:	00c020f4 	movhi	r3,131
  826428:	18dcee04 	addi	r3,r3,29624
  82642c:	100491ba 	slli	r2,r2,6
  826430:	10c5883a 	add	r2,r2,r3
  826434:	10800b04 	addi	r2,r2,44
  826438:	10800017 	ldw	r2,0(r2)
  82643c:	2080181e 	bne	r4,r2,8264a0 <alt_up_sd_card_fopen+0x2dc>
  826440:	e0bfeb0f 	ldh	r2,-84(fp)
  826444:	00c020f4 	movhi	r3,131
  826448:	18dcee04 	addi	r3,r3,29624
  82644c:	100491ba 	slli	r2,r2,6
  826450:	10c5883a 	add	r2,r2,r3
  826454:	10800c04 	addi	r2,r2,48
  826458:	1100000b 	ldhu	r4,0(r2)
  82645c:	e0bfea17 	ldw	r2,-88(fp)
  826460:	00c020f4 	movhi	r3,131
  826464:	18dcee04 	addi	r3,r3,29624
  826468:	100491ba 	slli	r2,r2,6
  82646c:	10c5883a 	add	r2,r2,r3
  826470:	10800c04 	addi	r2,r2,48
  826474:	1080000b 	ldhu	r2,0(r2)
  826478:	20ffffcc 	andi	r3,r4,65535
  82647c:	18e0001c 	xori	r3,r3,32768
  826480:	18e00004 	addi	r3,r3,-32768
  826484:	10bfffcc 	andi	r2,r2,65535
  826488:	10a0001c 	xori	r2,r2,32768
  82648c:	10a00004 	addi	r2,r2,-32768
  826490:	1880031e 	bne	r3,r2,8264a0 <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
  826494:	00bfff84 	movi	r2,-2
  826498:	e0bfeb0d 	sth	r2,-84(fp)
								break;
  82649c:	00002b06 	br	82654c <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
  8264a0:	e0bfea17 	ldw	r2,-88(fp)
  8264a4:	10800044 	addi	r2,r2,1
  8264a8:	e0bfea15 	stw	r2,-88(fp)
  8264ac:	e0bfea17 	ldw	r2,-88(fp)
  8264b0:	10800510 	cmplti	r2,r2,20
  8264b4:	103fb81e 	bne	r2,zero,826398 <alt_up_sd_card_fopen+0x1d4>
  8264b8:	00002406 	br	82654c <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
  8264bc:	e0bffe17 	ldw	r2,-8(fp)
  8264c0:	1005003a 	cmpeq	r2,r2,zero
  8264c4:	10001f1e 	bne	r2,zero,826544 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
  8264c8:	e0bfeb0f 	ldh	r2,-84(fp)
  8264cc:	100491ba 	slli	r2,r2,6
  8264d0:	1007883a 	mov	r3,r2
  8264d4:	008020f4 	movhi	r2,131
  8264d8:	109cee04 	addi	r2,r2,29624
  8264dc:	188b883a 	add	r5,r3,r2
  8264e0:	e1bfed04 	addi	r6,fp,-76
  8264e4:	e13ffd17 	ldw	r4,-12(fp)
  8264e8:	08257180 	call	825718 <create_file>
  8264ec:	1005003a 	cmpeq	r2,r2,zero
  8264f0:	1000111e 	bne	r2,zero,826538 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
  8264f4:	e0bfeb0f 	ldh	r2,-84(fp)
  8264f8:	00c020f4 	movhi	r3,131
  8264fc:	18dcee04 	addi	r3,r3,29624
  826500:	100491ba 	slli	r2,r2,6
  826504:	10c5883a 	add	r2,r2,r3
  826508:	10c00f04 	addi	r3,r2,60
  82650c:	00800044 	movi	r2,1
  826510:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
  826514:	e0bfeb0f 	ldh	r2,-84(fp)
  826518:	00c020f4 	movhi	r3,131
  82651c:	18dcee04 	addi	r3,r3,29624
  826520:	100491ba 	slli	r2,r2,6
  826524:	10c5883a 	add	r2,r2,r3
  826528:	10c00e04 	addi	r3,r2,56
  82652c:	00800044 	movi	r2,1
  826530:	18800015 	stw	r2,0(r3)
  826534:	00000506 	br	82654c <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
  826538:	00bfffc4 	movi	r2,-1
  82653c:	e0bfeb0d 	sth	r2,-84(fp)
  826540:	00000206 	br	82654c <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
  826544:	00bfffc4 	movi	r2,-1
  826548:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
  82654c:	e0bfeb0f 	ldh	r2,-84(fp)
  826550:	e0bfff15 	stw	r2,-4(fp)
  826554:	e0bfff17 	ldw	r2,-4(fp)
}
  826558:	e037883a 	mov	sp,fp
  82655c:	dfc00117 	ldw	ra,4(sp)
  826560:	df000017 	ldw	fp,0(sp)
  826564:	dec00204 	addi	sp,sp,8
  826568:	f800283a 	ret

0082656c <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  82656c:	defffd04 	addi	sp,sp,-12
  826570:	df000215 	stw	fp,8(sp)
  826574:	df000204 	addi	fp,sp,8
  826578:	e13ffe0d 	sth	r4,-8(fp)
  82657c:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  826580:	e0bffe0f 	ldh	r2,-8(fp)
  826584:	1004803a 	cmplt	r2,r2,zero
  826588:	1000181e 	bne	r2,zero,8265ec <alt_up_sd_card_set_attributes+0x80>
  82658c:	e0bffe0f 	ldh	r2,-8(fp)
  826590:	10800508 	cmpgei	r2,r2,20
  826594:	1000151e 	bne	r2,zero,8265ec <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
  826598:	e0bffe0f 	ldh	r2,-8(fp)
  82659c:	00c020f4 	movhi	r3,131
  8265a0:	18dcee04 	addi	r3,r3,29624
  8265a4:	100491ba 	slli	r2,r2,6
  8265a8:	10c5883a 	add	r2,r2,r3
  8265ac:	10800f04 	addi	r2,r2,60
  8265b0:	10800017 	ldw	r2,0(r2)
  8265b4:	1005003a 	cmpeq	r2,r2,zero
  8265b8:	10000c1e 	bne	r2,zero,8265ec <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes
  8265bc:	e17ffe0f 	ldh	r5,-8(fp)
  8265c0:	e0bfff0b 	ldhu	r2,-4(fp)
  8265c4:	1007883a 	mov	r3,r2
  8265c8:	00bfffc4 	movi	r2,-1
  8265cc:	1884703a 	and	r2,r3,r2
  8265d0:	1009883a 	mov	r4,r2
  8265d4:	00c020f4 	movhi	r3,131
  8265d8:	18dcee04 	addi	r3,r3,29624
  8265dc:	280491ba 	slli	r2,r5,6
  8265e0:	10c5883a 	add	r2,r2,r3
  8265e4:	10800204 	addi	r2,r2,8
  8265e8:	110000c5 	stb	r4,3(r2)
					= ((char) (attributes & 0x00ff));
		}
	}
}
  8265ec:	e037883a 	mov	sp,fp
  8265f0:	df000017 	ldw	fp,0(sp)
  8265f4:	dec00104 	addi	sp,sp,4
  8265f8:	f800283a 	ret

008265fc <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  8265fc:	defffd04 	addi	sp,sp,-12
  826600:	df000215 	stw	fp,8(sp)
  826604:	df000204 	addi	fp,sp,8
  826608:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  82660c:	00bfffc4 	movi	r2,-1
  826610:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  826614:	e0bfff0f 	ldh	r2,-4(fp)
  826618:	1004803a 	cmplt	r2,r2,zero
  82661c:	1000151e 	bne	r2,zero,826674 <alt_up_sd_card_get_attributes+0x78>
  826620:	e0bfff0f 	ldh	r2,-4(fp)
  826624:	10800508 	cmpgei	r2,r2,20
  826628:	1000121e 	bne	r2,zero,826674 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
  82662c:	e0bfff0f 	ldh	r2,-4(fp)
  826630:	00c020f4 	movhi	r3,131
  826634:	18dcee04 	addi	r3,r3,29624
  826638:	100491ba 	slli	r2,r2,6
  82663c:	10c5883a 	add	r2,r2,r3
  826640:	10800f04 	addi	r2,r2,60
  826644:	10800017 	ldw	r2,0(r2)
  826648:	1005003a 	cmpeq	r2,r2,zero
  82664c:	1000091e 	bne	r2,zero,826674 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
  826650:	e0bfff0f 	ldh	r2,-4(fp)
  826654:	00c020f4 	movhi	r3,131
  826658:	18dcee04 	addi	r3,r3,29624
  82665c:	100491ba 	slli	r2,r2,6
  826660:	10c5883a 	add	r2,r2,r3
  826664:	10800204 	addi	r2,r2,8
  826668:	108000c3 	ldbu	r2,3(r2)
  82666c:	10803fcc 	andi	r2,r2,255
  826670:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
  826674:	e0bffe0f 	ldh	r2,-8(fp)
}
  826678:	e037883a 	mov	sp,fp
  82667c:	df000017 	ldw	fp,0(sp)
  826680:	dec00104 	addi	sp,sp,4
  826684:	f800283a 	ret

00826688 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  826688:	defffa04 	addi	sp,sp,-24
  82668c:	dfc00515 	stw	ra,20(sp)
  826690:	df000415 	stw	fp,16(sp)
  826694:	df000404 	addi	fp,sp,16
  826698:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
  82669c:	00bfffc4 	movi	r2,-1
  8266a0:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  8266a4:	e0bffe0f 	ldh	r2,-8(fp)
  8266a8:	1004803a 	cmplt	r2,r2,zero
  8266ac:	1000d31e 	bne	r2,zero,8269fc <alt_up_sd_card_read+0x374>
  8266b0:	e0bffe0f 	ldh	r2,-8(fp)
  8266b4:	10800508 	cmpgei	r2,r2,20
  8266b8:	1000d01e 	bne	r2,zero,8269fc <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
  8266bc:	e0bffe0f 	ldh	r2,-8(fp)
  8266c0:	00c020f4 	movhi	r3,131
  8266c4:	18dcee04 	addi	r3,r3,29624
  8266c8:	100491ba 	slli	r2,r2,6
  8266cc:	10c5883a 	add	r2,r2,r3
  8266d0:	10800f04 	addi	r2,r2,60
  8266d4:	10800017 	ldw	r2,0(r2)
  8266d8:	1005003a 	cmpeq	r2,r2,zero
  8266dc:	1000c71e 	bne	r2,zero,8269fc <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
  8266e0:	e0bffe0f 	ldh	r2,-8(fp)
  8266e4:	00c020f4 	movhi	r3,131
  8266e8:	18dcee04 	addi	r3,r3,29624
  8266ec:	100491ba 	slli	r2,r2,6
  8266f0:	10c5883a 	add	r2,r2,r3
  8266f4:	10800904 	addi	r2,r2,36
  8266f8:	11000017 	ldw	r4,0(r2)
  8266fc:	e0bffe0f 	ldh	r2,-8(fp)
  826700:	00c020f4 	movhi	r3,131
  826704:	18dcee04 	addi	r3,r3,29624
  826708:	100491ba 	slli	r2,r2,6
  82670c:	10c5883a 	add	r2,r2,r3
  826710:	10800604 	addi	r2,r2,24
  826714:	10800017 	ldw	r2,0(r2)
  826718:	2080b82e 	bgeu	r4,r2,8269fc <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
  82671c:	008020f4 	movhi	r2,131
  826720:	109cd904 	addi	r2,r2,29540
  826724:	11001417 	ldw	r4,80(r2)
  826728:	e0bffe0f 	ldh	r2,-8(fp)
  82672c:	00c020f4 	movhi	r3,131
  826730:	18dcee04 	addi	r3,r3,29624
  826734:	100491ba 	slli	r2,r2,6
  826738:	10c5883a 	add	r2,r2,r3
  82673c:	10800704 	addi	r2,r2,28
  826740:	10800017 	ldw	r2,0(r2)
  826744:	10ffff84 	addi	r3,r2,-2
  826748:	008020f4 	movhi	r2,131
  82674c:	109cd904 	addi	r2,r2,29540
  826750:	10800383 	ldbu	r2,14(r2)
  826754:	10803fcc 	andi	r2,r2,255
  826758:	1885383a 	mul	r2,r3,r2
  82675c:	2089883a 	add	r4,r4,r2
  826760:	e0bffe0f 	ldh	r2,-8(fp)
  826764:	00c020f4 	movhi	r3,131
  826768:	18dcee04 	addi	r3,r3,29624
  82676c:	100491ba 	slli	r2,r2,6
  826770:	10c5883a 	add	r2,r2,r3
  826774:	10800804 	addi	r2,r2,32
  826778:	10800017 	ldw	r2,0(r2)
  82677c:	2085883a 	add	r2,r4,r2
  826780:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
  826784:	e0bffe0f 	ldh	r2,-8(fp)
  826788:	00c020f4 	movhi	r3,131
  82678c:	18dcee04 	addi	r3,r3,29624
  826790:	100491ba 	slli	r2,r2,6
  826794:	10c5883a 	add	r2,r2,r3
  826798:	10800904 	addi	r2,r2,36
  82679c:	10800017 	ldw	r2,0(r2)
  8267a0:	1005003a 	cmpeq	r2,r2,zero
  8267a4:	10006a1e 	bne	r2,zero,826950 <alt_up_sd_card_read+0x2c8>
  8267a8:	e0bffe0f 	ldh	r2,-8(fp)
  8267ac:	00c020f4 	movhi	r3,131
  8267b0:	18dcee04 	addi	r3,r3,29624
  8267b4:	100491ba 	slli	r2,r2,6
  8267b8:	10c5883a 	add	r2,r2,r3
  8267bc:	10800904 	addi	r2,r2,36
  8267c0:	10800017 	ldw	r2,0(r2)
  8267c4:	10807fcc 	andi	r2,r2,511
  8267c8:	1004c03a 	cmpne	r2,r2,zero
  8267cc:	1000601e 	bne	r2,zero,826950 <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  8267d0:	e0bffe0f 	ldh	r2,-8(fp)
  8267d4:	00c020f4 	movhi	r3,131
  8267d8:	18dcee04 	addi	r3,r3,29624
  8267dc:	100491ba 	slli	r2,r2,6
  8267e0:	10c5883a 	add	r2,r2,r3
  8267e4:	10800804 	addi	r2,r2,32
  8267e8:	10c00017 	ldw	r3,0(r2)
  8267ec:	008020f4 	movhi	r2,131
  8267f0:	109cd904 	addi	r2,r2,29540
  8267f4:	10800383 	ldbu	r2,14(r2)
  8267f8:	10803fcc 	andi	r2,r2,255
  8267fc:	10bfffc4 	addi	r2,r2,-1
  826800:	1880411e 	bne	r3,r2,826908 <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  826804:	e0bffe0f 	ldh	r2,-8(fp)
  826808:	00c020f4 	movhi	r3,131
  82680c:	18dcee04 	addi	r3,r3,29624
  826810:	100491ba 	slli	r2,r2,6
  826814:	10c5883a 	add	r2,r2,r3
  826818:	10800704 	addi	r2,r2,28
  82681c:	11000017 	ldw	r4,0(r2)
  826820:	e17ffd84 	addi	r5,fp,-10
  826824:	0822fec0 	call	822fec <get_cluster_flag>
  826828:	1005003a 	cmpeq	r2,r2,zero
  82682c:	1000331e 	bne	r2,zero,8268fc <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
  826830:	e0bffd8b 	ldhu	r2,-10(fp)
  826834:	10bfffcc 	andi	r2,r2,65535
  826838:	10fffe0c 	andi	r3,r2,65528
  82683c:	00bffe14 	movui	r2,65528
  826840:	1880031e 	bne	r3,r2,826850 <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
  826844:	00bfffc4 	movi	r2,-1
  826848:	e0bfff15 	stw	r2,-4(fp)
  82684c:	00006d06 	br	826a04 <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index
  826850:	e13ffe0f 	ldh	r4,-8(fp)
  826854:	e0bffd8b 	ldhu	r2,-10(fp)
  826858:	117fffcc 	andi	r5,r2,65535
  82685c:	00c020f4 	movhi	r3,131
  826860:	18dcee04 	addi	r3,r3,29624
  826864:	200491ba 	slli	r2,r4,6
  826868:	10c5883a 	add	r2,r2,r3
  82686c:	10800704 	addi	r2,r2,28
  826870:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  826874:	e0bffe0f 	ldh	r2,-8(fp)
  826878:	00c020f4 	movhi	r3,131
  82687c:	18dcee04 	addi	r3,r3,29624
  826880:	100491ba 	slli	r2,r2,6
  826884:	10c5883a 	add	r2,r2,r3
  826888:	10800804 	addi	r2,r2,32
  82688c:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  826890:	008020f4 	movhi	r2,131
  826894:	109cd904 	addi	r2,r2,29540
  826898:	11001417 	ldw	r4,80(r2)
  82689c:	e0bffe0f 	ldh	r2,-8(fp)
  8268a0:	00c020f4 	movhi	r3,131
  8268a4:	18dcee04 	addi	r3,r3,29624
  8268a8:	100491ba 	slli	r2,r2,6
  8268ac:	10c5883a 	add	r2,r2,r3
  8268b0:	10800704 	addi	r2,r2,28
  8268b4:	10800017 	ldw	r2,0(r2)
  8268b8:	10ffff84 	addi	r3,r2,-2
  8268bc:	008020f4 	movhi	r2,131
  8268c0:	109cd904 	addi	r2,r2,29540
  8268c4:	10800383 	ldbu	r2,14(r2)
  8268c8:	10803fcc 	andi	r2,r2,255
  8268cc:	1885383a 	mul	r2,r3,r2
  8268d0:	2089883a 	add	r4,r4,r2
  8268d4:	e0bffe0f 	ldh	r2,-8(fp)
  8268d8:	00c020f4 	movhi	r3,131
  8268dc:	18dcee04 	addi	r3,r3,29624
  8268e0:	100491ba 	slli	r2,r2,6
  8268e4:	10c5883a 	add	r2,r2,r3
  8268e8:	10800804 	addi	r2,r2,32
  8268ec:	10800017 	ldw	r2,0(r2)
  8268f0:	2085883a 	add	r2,r4,r2
  8268f4:	e0bffc15 	stw	r2,-16(fp)
  8268f8:	00001506 	br	826950 <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
  8268fc:	00bfff84 	movi	r2,-2
  826900:	e0bfff15 	stw	r2,-4(fp)
  826904:	00003f06 	br	826a04 <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  826908:	e17ffe0f 	ldh	r5,-8(fp)
  82690c:	e0bffe0f 	ldh	r2,-8(fp)
  826910:	00c020f4 	movhi	r3,131
  826914:	18dcee04 	addi	r3,r3,29624
  826918:	100491ba 	slli	r2,r2,6
  82691c:	10c5883a 	add	r2,r2,r3
  826920:	10800804 	addi	r2,r2,32
  826924:	10800017 	ldw	r2,0(r2)
  826928:	11000044 	addi	r4,r2,1
  82692c:	00c020f4 	movhi	r3,131
  826930:	18dcee04 	addi	r3,r3,29624
  826934:	280491ba 	slli	r2,r5,6
  826938:	10c5883a 	add	r2,r2,r3
  82693c:	10800804 	addi	r2,r2,32
  826940:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  826944:	e0bffc17 	ldw	r2,-16(fp)
  826948:	10800044 	addi	r2,r2,1
  82694c:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index != (data_sector
  826950:	d0fc4e17 	ldw	r3,-3784(gp)
  826954:	e0bffc17 	ldw	r2,-16(fp)
  826958:	1885883a 	add	r2,r3,r2
  82695c:	1007883a 	mov	r3,r2
  826960:	d0bc5217 	ldw	r2,-3768(gp)
  826964:	18800826 	beq	r3,r2,826988 <alt_up_sd_card_read+0x300>
						+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
  826968:	d17c4e17 	ldw	r5,-3784(gp)
  82696c:	e13ffc17 	ldw	r4,-16(fp)
  826970:	0822ef00 	call	822ef0 <Read_Sector_Data>
  826974:	1004c03a 	cmpne	r2,r2,zero
  826978:	1000031e 	bne	r2,zero,826988 <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
  82697c:	00bfff84 	movi	r2,-2
  826980:	e0bfff15 	stw	r2,-4(fp)
  826984:	00001f06 	br	826a04 <alt_up_sd_card_read+0x37c>
					}
				}

				ch
  826988:	e0bffe0f 	ldh	r2,-8(fp)
  82698c:	00c020f4 	movhi	r3,131
  826990:	18dcee04 	addi	r3,r3,29624
  826994:	100491ba 	slli	r2,r2,6
  826998:	10c5883a 	add	r2,r2,r3
  82699c:	10800904 	addi	r2,r2,36
  8269a0:	10800017 	ldw	r2,0(r2)
  8269a4:	10807fcc 	andi	r2,r2,511
  8269a8:	1007883a 	mov	r3,r2
  8269ac:	d0bc4d17 	ldw	r2,-3788(gp)
  8269b0:	1885883a 	add	r2,r3,r2
  8269b4:	10800023 	ldbuio	r2,0(r2)
  8269b8:	10803fcc 	andi	r2,r2,255
  8269bc:	e0bffd0d 	sth	r2,-12(fp)
						= (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position
  8269c0:	e17ffe0f 	ldh	r5,-8(fp)
  8269c4:	e0bffe0f 	ldh	r2,-8(fp)
  8269c8:	00c020f4 	movhi	r3,131
  8269cc:	18dcee04 	addi	r3,r3,29624
  8269d0:	100491ba 	slli	r2,r2,6
  8269d4:	10c5883a 	add	r2,r2,r3
  8269d8:	10800904 	addi	r2,r2,36
  8269dc:	10800017 	ldw	r2,0(r2)
  8269e0:	11000044 	addi	r4,r2,1
  8269e4:	00c020f4 	movhi	r3,131
  8269e8:	18dcee04 	addi	r3,r3,29624
  8269ec:	280491ba 	slli	r2,r5,6
  8269f0:	10c5883a 	add	r2,r2,r3
  8269f4:	10800904 	addi	r2,r2,36
  8269f8:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
  8269fc:	e0bffd0f 	ldh	r2,-12(fp)
  826a00:	e0bfff15 	stw	r2,-4(fp)
  826a04:	e0bfff17 	ldw	r2,-4(fp)
}
  826a08:	e037883a 	mov	sp,fp
  826a0c:	dfc00117 	ldw	ra,4(sp)
  826a10:	df000017 	ldw	fp,0(sp)
  826a14:	dec00204 	addi	sp,sp,8
  826a18:	f800283a 	ret

00826a1c <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  826a1c:	defff504 	addi	sp,sp,-44
  826a20:	dfc00a15 	stw	ra,40(sp)
  826a24:	df000915 	stw	fp,36(sp)
  826a28:	dc000815 	stw	r16,32(sp)
  826a2c:	df000804 	addi	fp,sp,32
  826a30:	e13ffd0d 	sth	r4,-12(fp)
  826a34:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
  826a38:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
  826a3c:	e0bffd0f 	ldh	r2,-12(fp)
  826a40:	1004803a 	cmplt	r2,r2,zero
  826a44:	1001751e 	bne	r2,zero,82701c <alt_up_sd_card_write+0x600>
  826a48:	e0bffd0f 	ldh	r2,-12(fp)
  826a4c:	10800508 	cmpgei	r2,r2,20
  826a50:	1001721e 	bne	r2,zero,82701c <alt_up_sd_card_write+0x600>
		if (active_files[file_handle].in_use) {
  826a54:	e0bffd0f 	ldh	r2,-12(fp)
  826a58:	00c020f4 	movhi	r3,131
  826a5c:	18dcee04 	addi	r3,r3,29624
  826a60:	100491ba 	slli	r2,r2,6
  826a64:	10c5883a 	add	r2,r2,r3
  826a68:	10800f04 	addi	r2,r2,60
  826a6c:	10800017 	ldw	r2,0(r2)
  826a70:	1005003a 	cmpeq	r2,r2,zero
  826a74:	1001691e 	bne	r2,zero,82701c <alt_up_sd_card_write+0x600>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
  826a78:	008020f4 	movhi	r2,131
  826a7c:	109cd904 	addi	r2,r2,29540
  826a80:	11001417 	ldw	r4,80(r2)
  826a84:	e0bffd0f 	ldh	r2,-12(fp)
  826a88:	00c020f4 	movhi	r3,131
  826a8c:	18dcee04 	addi	r3,r3,29624
  826a90:	100491ba 	slli	r2,r2,6
  826a94:	10c5883a 	add	r2,r2,r3
  826a98:	10800704 	addi	r2,r2,28
  826a9c:	10800017 	ldw	r2,0(r2)
  826aa0:	10ffff84 	addi	r3,r2,-2
  826aa4:	008020f4 	movhi	r2,131
  826aa8:	109cd904 	addi	r2,r2,29540
  826aac:	10800383 	ldbu	r2,14(r2)
  826ab0:	10803fcc 	andi	r2,r2,255
  826ab4:	1885383a 	mul	r2,r3,r2
  826ab8:	2089883a 	add	r4,r4,r2
  826abc:	e0bffd0f 	ldh	r2,-12(fp)
  826ac0:	00c020f4 	movhi	r3,131
  826ac4:	18dcee04 	addi	r3,r3,29624
  826ac8:	100491ba 	slli	r2,r2,6
  826acc:	10c5883a 	add	r2,r2,r3
  826ad0:	10800804 	addi	r2,r2,32
  826ad4:	10800017 	ldw	r2,0(r2)
  826ad8:	2085883a 	add	r2,r4,r2
  826adc:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
  826ae0:	e0bffd0f 	ldh	r2,-12(fp)
  826ae4:	00c020f4 	movhi	r3,131
  826ae8:	18dcee04 	addi	r3,r3,29624
  826aec:	100491ba 	slli	r2,r2,6
  826af0:	10c5883a 	add	r2,r2,r3
  826af4:	10800904 	addi	r2,r2,36
  826af8:	11000017 	ldw	r4,0(r2)
  826afc:	008020f4 	movhi	r2,131
  826b00:	109cd904 	addi	r2,r2,29540
  826b04:	1080030b 	ldhu	r2,12(r2)
  826b08:	117fffcc 	andi	r5,r2,65535
  826b0c:	08146c40 	call	8146c4 <__umodsi3>
  826b10:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
  826b14:	e0bffd0f 	ldh	r2,-12(fp)
  826b18:	00c020f4 	movhi	r3,131
  826b1c:	18dcee04 	addi	r3,r3,29624
  826b20:	100491ba 	slli	r2,r2,6
  826b24:	10c5883a 	add	r2,r2,r3
  826b28:	10800904 	addi	r2,r2,36
  826b2c:	11000017 	ldw	r4,0(r2)
  826b30:	e0bffd0f 	ldh	r2,-12(fp)
  826b34:	00c020f4 	movhi	r3,131
  826b38:	18dcee04 	addi	r3,r3,29624
  826b3c:	100491ba 	slli	r2,r2,6
  826b40:	10c5883a 	add	r2,r2,r3
  826b44:	10800604 	addi	r2,r2,24
  826b48:	10800017 	ldw	r2,0(r2)
  826b4c:	2080682e 	bgeu	r4,r2,826cf0 <alt_up_sd_card_write+0x2d4>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
  826b50:	e0bffd0f 	ldh	r2,-12(fp)
  826b54:	00c020f4 	movhi	r3,131
  826b58:	18dcee04 	addi	r3,r3,29624
  826b5c:	100491ba 	slli	r2,r2,6
  826b60:	10c5883a 	add	r2,r2,r3
  826b64:	10800904 	addi	r2,r2,36
  826b68:	10800017 	ldw	r2,0(r2)
  826b6c:	1005003a 	cmpeq	r2,r2,zero
  826b70:	1000de1e 	bne	r2,zero,826eec <alt_up_sd_card_write+0x4d0>
  826b74:	e0bff80f 	ldh	r2,-32(fp)
  826b78:	1004c03a 	cmpne	r2,r2,zero
  826b7c:	1000db1e 	bne	r2,zero,826eec <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
  826b80:	e0bffd0f 	ldh	r2,-12(fp)
  826b84:	00c020f4 	movhi	r3,131
  826b88:	18dcee04 	addi	r3,r3,29624
  826b8c:	100491ba 	slli	r2,r2,6
  826b90:	10c5883a 	add	r2,r2,r3
  826b94:	10800804 	addi	r2,r2,32
  826b98:	10c00017 	ldw	r3,0(r2)
  826b9c:	008020f4 	movhi	r2,131
  826ba0:	109cd904 	addi	r2,r2,29540
  826ba4:	10800383 	ldbu	r2,14(r2)
  826ba8:	10803fcc 	andi	r2,r2,255
  826bac:	10bfffc4 	addi	r2,r2,-1
  826bb0:	18803c1e 	bne	r3,r2,826ca4 <alt_up_sd_card_write+0x288>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
  826bb4:	e0bffd0f 	ldh	r2,-12(fp)
  826bb8:	00c020f4 	movhi	r3,131
  826bbc:	18dcee04 	addi	r3,r3,29624
  826bc0:	100491ba 	slli	r2,r2,6
  826bc4:	10c5883a 	add	r2,r2,r3
  826bc8:	10800704 	addi	r2,r2,28
  826bcc:	11000017 	ldw	r4,0(r2)
  826bd0:	e17ffb04 	addi	r5,fp,-20
  826bd4:	0822fec0 	call	822fec <get_cluster_flag>
  826bd8:	1005003a 	cmpeq	r2,r2,zero
  826bdc:	10002f1e 	bne	r2,zero,826c9c <alt_up_sd_card_write+0x280>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
  826be0:	e0bffb0b 	ldhu	r2,-20(fp)
  826be4:	10ffffcc 	andi	r3,r2,65535
  826be8:	00bffdd4 	movui	r2,65527
  826bec:	10c0bf36 	bltu	r2,r3,826eec <alt_up_sd_card_write+0x4d0>
								active_files[file_handle].current_cluster_index
  826bf0:	e13ffd0f 	ldh	r4,-12(fp)
  826bf4:	e0bffb0b 	ldhu	r2,-20(fp)
  826bf8:	117fffcc 	andi	r5,r2,65535
  826bfc:	00c020f4 	movhi	r3,131
  826c00:	18dcee04 	addi	r3,r3,29624
  826c04:	200491ba 	slli	r2,r4,6
  826c08:	10c5883a 	add	r2,r2,r3
  826c0c:	10800704 	addi	r2,r2,28
  826c10:	11400015 	stw	r5,0(r2)
										= next_cluster;
								active_files[file_handle].current_sector_in_cluster
  826c14:	e0bffd0f 	ldh	r2,-12(fp)
  826c18:	00c020f4 	movhi	r3,131
  826c1c:	18dcee04 	addi	r3,r3,29624
  826c20:	100491ba 	slli	r2,r2,6
  826c24:	10c5883a 	add	r2,r2,r3
  826c28:	10800804 	addi	r2,r2,32
  826c2c:	10000015 	stw	zero,0(r2)
										= 0;
								data_sector
  826c30:	008020f4 	movhi	r2,131
  826c34:	109cd904 	addi	r2,r2,29540
  826c38:	11001417 	ldw	r4,80(r2)
  826c3c:	e0bffd0f 	ldh	r2,-12(fp)
  826c40:	00c020f4 	movhi	r3,131
  826c44:	18dcee04 	addi	r3,r3,29624
  826c48:	100491ba 	slli	r2,r2,6
  826c4c:	10c5883a 	add	r2,r2,r3
  826c50:	10800704 	addi	r2,r2,28
  826c54:	10800017 	ldw	r2,0(r2)
  826c58:	10ffff84 	addi	r3,r2,-2
  826c5c:	008020f4 	movhi	r2,131
  826c60:	109cd904 	addi	r2,r2,29540
  826c64:	10800383 	ldbu	r2,14(r2)
  826c68:	10803fcc 	andi	r2,r2,255
  826c6c:	1885383a 	mul	r2,r3,r2
  826c70:	2089883a 	add	r4,r4,r2
  826c74:	e0bffd0f 	ldh	r2,-12(fp)
  826c78:	00c020f4 	movhi	r3,131
  826c7c:	18dcee04 	addi	r3,r3,29624
  826c80:	100491ba 	slli	r2,r2,6
  826c84:	10c5883a 	add	r2,r2,r3
  826c88:	10800804 	addi	r2,r2,32
  826c8c:	10800017 	ldw	r2,0(r2)
  826c90:	2085883a 	add	r2,r4,r2
  826c94:	e0bff915 	stw	r2,-28(fp)
  826c98:	00009406 	br	826eec <alt_up_sd_card_write+0x4d0>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
  826c9c:	e03fff15 	stw	zero,-4(fp)
  826ca0:	0000e006 	br	827024 <alt_up_sd_card_write+0x608>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
  826ca4:	e17ffd0f 	ldh	r5,-12(fp)
  826ca8:	e0bffd0f 	ldh	r2,-12(fp)
  826cac:	00c020f4 	movhi	r3,131
  826cb0:	18dcee04 	addi	r3,r3,29624
  826cb4:	100491ba 	slli	r2,r2,6
  826cb8:	10c5883a 	add	r2,r2,r3
  826cbc:	10800804 	addi	r2,r2,32
  826cc0:	10800017 	ldw	r2,0(r2)
  826cc4:	11000044 	addi	r4,r2,1
  826cc8:	00c020f4 	movhi	r3,131
  826ccc:	18dcee04 	addi	r3,r3,29624
  826cd0:	280491ba 	slli	r2,r5,6
  826cd4:	10c5883a 	add	r2,r2,r3
  826cd8:	10800804 	addi	r2,r2,32
  826cdc:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
  826ce0:	e0bff917 	ldw	r2,-28(fp)
  826ce4:	10800044 	addi	r2,r2,1
  826ce8:	e0bff915 	stw	r2,-28(fp)
  826cec:	00007f06 	br	826eec <alt_up_sd_card_write+0x4d0>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
  826cf0:	e0bffd0f 	ldh	r2,-12(fp)
  826cf4:	00c020f4 	movhi	r3,131
  826cf8:	18dcee04 	addi	r3,r3,29624
  826cfc:	100491ba 	slli	r2,r2,6
  826d00:	10c5883a 	add	r2,r2,r3
  826d04:	10800904 	addi	r2,r2,36
  826d08:	10800017 	ldw	r2,0(r2)
  826d0c:	1005003a 	cmpeq	r2,r2,zero
  826d10:	1000761e 	bne	r2,zero,826eec <alt_up_sd_card_write+0x4d0>
  826d14:	e0bff80f 	ldh	r2,-32(fp)
  826d18:	1004c03a 	cmpne	r2,r2,zero
  826d1c:	1000731e 	bne	r2,zero,826eec <alt_up_sd_card_write+0x4d0>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
  826d20:	e0bffd0f 	ldh	r2,-12(fp)
  826d24:	00c020f4 	movhi	r3,131
  826d28:	18dcee04 	addi	r3,r3,29624
  826d2c:	100491ba 	slli	r2,r2,6
  826d30:	10c5883a 	add	r2,r2,r3
  826d34:	10800804 	addi	r2,r2,32
  826d38:	10c00017 	ldw	r3,0(r2)
  826d3c:	008020f4 	movhi	r2,131
  826d40:	109cd904 	addi	r2,r2,29540
  826d44:	10800383 	ldbu	r2,14(r2)
  826d48:	10803fcc 	andi	r2,r2,255
  826d4c:	10bfffc4 	addi	r2,r2,-1
  826d50:	1880381e 	bne	r3,r2,826e34 <alt_up_sd_card_write+0x418>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
  826d54:	e13ffc04 	addi	r4,fp,-16
  826d58:	08250440 	call	825044 <find_first_empty_cluster>
  826d5c:	1005003a 	cmpeq	r2,r2,zero
  826d60:	1000321e 	bne	r2,zero,826e2c <alt_up_sd_card_write+0x410>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
  826d64:	e0bffd0f 	ldh	r2,-12(fp)
  826d68:	00c020f4 	movhi	r3,131
  826d6c:	18dcee04 	addi	r3,r3,29624
  826d70:	100491ba 	slli	r2,r2,6
  826d74:	10c5883a 	add	r2,r2,r3
  826d78:	10800704 	addi	r2,r2,28
  826d7c:	11000017 	ldw	r4,0(r2)
  826d80:	e0bffc17 	ldw	r2,-16(fp)
  826d84:	117fffcc 	andi	r5,r2,65535
  826d88:	2960001c 	xori	r5,r5,32768
  826d8c:	29600004 	addi	r5,r5,-32768
  826d90:	01800044 	movi	r6,1
  826d94:	08230a40 	call	8230a4 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
  826d98:	e13ffc17 	ldw	r4,-16(fp)
  826d9c:	017fffc4 	movi	r5,-1
  826da0:	01800044 	movi	r6,1
  826da4:	08230a40 	call	8230a4 <mark_cluster>
							mark_cluster(
  826da8:	e0bffd0f 	ldh	r2,-12(fp)
  826dac:	00c020f4 	movhi	r3,131
  826db0:	18dcee04 	addi	r3,r3,29624
  826db4:	100491ba 	slli	r2,r2,6
  826db8:	10c5883a 	add	r2,r2,r3
  826dbc:	10800704 	addi	r2,r2,28
  826dc0:	11000017 	ldw	r4,0(r2)
  826dc4:	e0bffc17 	ldw	r2,-16(fp)
  826dc8:	117fffcc 	andi	r5,r2,65535
  826dcc:	2960001c 	xori	r5,r5,32768
  826dd0:	29600004 	addi	r5,r5,-32768
  826dd4:	000d883a 	mov	r6,zero
  826dd8:	08230a40 	call	8230a4 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
  826ddc:	e13ffc17 	ldw	r4,-16(fp)
  826de0:	017fffc4 	movi	r5,-1
  826de4:	000d883a 	mov	r6,zero
  826de8:	08230a40 	call	8230a4 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index
  826dec:	e0bffd0f 	ldh	r2,-12(fp)
  826df0:	e13ffc17 	ldw	r4,-16(fp)
  826df4:	00c020f4 	movhi	r3,131
  826df8:	18dcee04 	addi	r3,r3,29624
  826dfc:	100491ba 	slli	r2,r2,6
  826e00:	10c5883a 	add	r2,r2,r3
  826e04:	10800704 	addi	r2,r2,28
  826e08:	11000015 	stw	r4,0(r2)
									= cluster_number;
							active_files[file_handle].current_sector_in_cluster
  826e0c:	e0bffd0f 	ldh	r2,-12(fp)
  826e10:	00c020f4 	movhi	r3,131
  826e14:	18dcee04 	addi	r3,r3,29624
  826e18:	100491ba 	slli	r2,r2,6
  826e1c:	10c5883a 	add	r2,r2,r3
  826e20:	10800804 	addi	r2,r2,32
  826e24:	10000015 	stw	zero,0(r2)
  826e28:	00001606 	br	826e84 <alt_up_sd_card_write+0x468>
									= 0;
						} else {
							return false;
  826e2c:	e03fff15 	stw	zero,-4(fp)
  826e30:	00007c06 	br	827024 <alt_up_sd_card_write+0x608>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster
  826e34:	e43ffd0f 	ldh	r16,-12(fp)
  826e38:	e0bffd0f 	ldh	r2,-12(fp)
  826e3c:	00c020f4 	movhi	r3,131
  826e40:	18dcee04 	addi	r3,r3,29624
  826e44:	100491ba 	slli	r2,r2,6
  826e48:	10c5883a 	add	r2,r2,r3
  826e4c:	10800904 	addi	r2,r2,36
  826e50:	11000017 	ldw	r4,0(r2)
  826e54:	008020f4 	movhi	r2,131
  826e58:	109cd904 	addi	r2,r2,29540
  826e5c:	1080030b 	ldhu	r2,12(r2)
  826e60:	117fffcc 	andi	r5,r2,65535
  826e64:	08146bc0 	call	8146bc <__udivsi3>
  826e68:	1009883a 	mov	r4,r2
  826e6c:	00c020f4 	movhi	r3,131
  826e70:	18dcee04 	addi	r3,r3,29624
  826e74:	800491ba 	slli	r2,r16,6
  826e78:	10c5883a 	add	r2,r2,r3
  826e7c:	10800804 	addi	r2,r2,32
  826e80:	11000015 	stw	r4,0(r2)
								= active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes;
					}
					data_sector
  826e84:	008020f4 	movhi	r2,131
  826e88:	109cd904 	addi	r2,r2,29540
  826e8c:	11001417 	ldw	r4,80(r2)
  826e90:	e0bffd0f 	ldh	r2,-12(fp)
  826e94:	00c020f4 	movhi	r3,131
  826e98:	18dcee04 	addi	r3,r3,29624
  826e9c:	100491ba 	slli	r2,r2,6
  826ea0:	10c5883a 	add	r2,r2,r3
  826ea4:	10800704 	addi	r2,r2,28
  826ea8:	10800017 	ldw	r2,0(r2)
  826eac:	10ffff84 	addi	r3,r2,-2
  826eb0:	008020f4 	movhi	r2,131
  826eb4:	109cd904 	addi	r2,r2,29540
  826eb8:	10800383 	ldbu	r2,14(r2)
  826ebc:	10803fcc 	andi	r2,r2,255
  826ec0:	1885383a 	mul	r2,r3,r2
  826ec4:	2089883a 	add	r4,r4,r2
  826ec8:	e0bffd0f 	ldh	r2,-12(fp)
  826ecc:	00c020f4 	movhi	r3,131
  826ed0:	18dcee04 	addi	r3,r3,29624
  826ed4:	100491ba 	slli	r2,r2,6
  826ed8:	10c5883a 	add	r2,r2,r3
  826edc:	10800804 	addi	r2,r2,32
  826ee0:	10800017 	ldw	r2,0(r2)
  826ee4:	2085883a 	add	r2,r4,r2
  826ee8:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index != data_sector
  826eec:	d0fc4e17 	ldw	r3,-3784(gp)
  826ef0:	e0bff917 	ldw	r2,-28(fp)
  826ef4:	1885883a 	add	r2,r3,r2
  826ef8:	1007883a 	mov	r3,r2
  826efc:	d0bc5217 	ldw	r2,-3768(gp)
  826f00:	18800726 	beq	r3,r2,826f20 <alt_up_sd_card_write+0x504>
					+ fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data(data_sector,
  826f04:	d17c4e17 	ldw	r5,-3784(gp)
  826f08:	e13ff917 	ldw	r4,-28(fp)
  826f0c:	0822ef00 	call	822ef0 <Read_Sector_Data>
  826f10:	1004c03a 	cmpne	r2,r2,zero
  826f14:	1000021e 	bne	r2,zero,826f20 <alt_up_sd_card_write+0x504>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
  826f18:	e03fff15 	stw	zero,-4(fp)
  826f1c:	00004106 	br	827024 <alt_up_sd_card_write+0x608>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  826f20:	e0bff80f 	ldh	r2,-32(fp)
  826f24:	1007883a 	mov	r3,r2
  826f28:	d0bc4d17 	ldw	r2,-3788(gp)
  826f2c:	1885883a 	add	r2,r3,r2
  826f30:	e0fffe07 	ldb	r3,-8(fp)
  826f34:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position
  826f38:	e17ffd0f 	ldh	r5,-12(fp)
  826f3c:	e0bffd0f 	ldh	r2,-12(fp)
  826f40:	00c020f4 	movhi	r3,131
  826f44:	18dcee04 	addi	r3,r3,29624
  826f48:	100491ba 	slli	r2,r2,6
  826f4c:	10c5883a 	add	r2,r2,r3
  826f50:	10800904 	addi	r2,r2,36
  826f54:	10800017 	ldw	r2,0(r2)
  826f58:	11000044 	addi	r4,r2,1
  826f5c:	00c020f4 	movhi	r3,131
  826f60:	18dcee04 	addi	r3,r3,29624
  826f64:	280491ba 	slli	r2,r5,6
  826f68:	10c5883a 	add	r2,r2,r3
  826f6c:	10800904 	addi	r2,r2,36
  826f70:	11000015 	stw	r4,0(r2)
					= active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
  826f74:	e0bffd0f 	ldh	r2,-12(fp)
  826f78:	00c020f4 	movhi	r3,131
  826f7c:	18dcee04 	addi	r3,r3,29624
  826f80:	100491ba 	slli	r2,r2,6
  826f84:	10c5883a 	add	r2,r2,r3
  826f88:	10800904 	addi	r2,r2,36
  826f8c:	11000017 	ldw	r4,0(r2)
  826f90:	e0bffd0f 	ldh	r2,-12(fp)
  826f94:	00c020f4 	movhi	r3,131
  826f98:	18dcee04 	addi	r3,r3,29624
  826f9c:	100491ba 	slli	r2,r2,6
  826fa0:	10c5883a 	add	r2,r2,r3
  826fa4:	10800604 	addi	r2,r2,24
  826fa8:	10800017 	ldw	r2,0(r2)
  826fac:	20801736 	bltu	r4,r2,82700c <alt_up_sd_card_write+0x5f0>
					>= active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes
  826fb0:	e17ffd0f 	ldh	r5,-12(fp)
  826fb4:	e0bffd0f 	ldh	r2,-12(fp)
  826fb8:	00c020f4 	movhi	r3,131
  826fbc:	18dcee04 	addi	r3,r3,29624
  826fc0:	100491ba 	slli	r2,r2,6
  826fc4:	10c5883a 	add	r2,r2,r3
  826fc8:	10800604 	addi	r2,r2,24
  826fcc:	10800017 	ldw	r2,0(r2)
  826fd0:	11000044 	addi	r4,r2,1
  826fd4:	00c020f4 	movhi	r3,131
  826fd8:	18dcee04 	addi	r3,r3,29624
  826fdc:	280491ba 	slli	r2,r5,6
  826fe0:	10c5883a 	add	r2,r2,r3
  826fe4:	10800604 	addi	r2,r2,24
  826fe8:	11000015 	stw	r4,0(r2)
						= active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
  826fec:	e0bffd0f 	ldh	r2,-12(fp)
  826ff0:	00c020f4 	movhi	r3,131
  826ff4:	18dcee04 	addi	r3,r3,29624
  826ff8:	100491ba 	slli	r2,r2,6
  826ffc:	10c5883a 	add	r2,r2,r3
  827000:	10c00e04 	addi	r3,r2,56
  827004:	00800044 	movi	r2,1
  827008:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
  82700c:	00800044 	movi	r2,1
  827010:	d0bc5115 	stw	r2,-3772(gp)
			result = true;
  827014:	00800044 	movi	r2,1
  827018:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
  82701c:	e0bffa17 	ldw	r2,-24(fp)
  827020:	e0bfff15 	stw	r2,-4(fp)
  827024:	e0bfff17 	ldw	r2,-4(fp)
}
  827028:	e037883a 	mov	sp,fp
  82702c:	dfc00217 	ldw	ra,8(sp)
  827030:	df000117 	ldw	fp,4(sp)
  827034:	dc000017 	ldw	r16,0(sp)
  827038:	dec00304 	addi	sp,sp,12
  82703c:	f800283a 	ret

00827040 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  827040:	defffb04 	addi	sp,sp,-20
  827044:	dfc00415 	stw	ra,16(sp)
  827048:	df000315 	stw	fp,12(sp)
  82704c:	df000304 	addi	fp,sp,12
  827050:	e13fff0d 	sth	r4,-4(fp)
	bool result = false;
  827054:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
  827058:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  82705c:	1005003a 	cmpeq	r2,r2,zero
  827060:	1000641e 	bne	r2,zero,8271f4 <alt_up_sd_card_fclose+0x1b4>
  827064:	d0bc4717 	ldw	r2,-3812(gp)
  827068:	1005003a 	cmpeq	r2,r2,zero
  82706c:	1000611e 	bne	r2,zero,8271f4 <alt_up_sd_card_fclose+0x1b4>
		if (active_files[file_handle].in_use) {
  827070:	e0bfff0f 	ldh	r2,-4(fp)
  827074:	00c020f4 	movhi	r3,131
  827078:	18dcee04 	addi	r3,r3,29624
  82707c:	100491ba 	slli	r2,r2,6
  827080:	10c5883a 	add	r2,r2,r3
  827084:	10800f04 	addi	r2,r2,60
  827088:	10800017 	ldw	r2,0(r2)
  82708c:	1005003a 	cmpeq	r2,r2,zero
  827090:	1000581e 	bne	r2,zero,8271f4 <alt_up_sd_card_fclose+0x1b4>
			if (active_files[file_handle].modified) {
  827094:	e0bfff0f 	ldh	r2,-4(fp)
  827098:	00c020f4 	movhi	r3,131
  82709c:	18dcee04 	addi	r3,r3,29624
  8270a0:	100491ba 	slli	r2,r2,6
  8270a4:	10c5883a 	add	r2,r2,r3
  8270a8:	10800e04 	addi	r2,r2,56
  8270ac:	10800017 	ldw	r2,0(r2)
  8270b0:	1005003a 	cmpeq	r2,r2,zero
  8270b4:	1000461e 	bne	r2,zero,8271d0 <alt_up_sd_card_fclose+0x190>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
  8270b8:	e0bfff0f 	ldh	r2,-4(fp)
  8270bc:	00c020f4 	movhi	r3,131
  8270c0:	18dcee04 	addi	r3,r3,29624
  8270c4:	100491ba 	slli	r2,r2,6
  8270c8:	10c5883a 	add	r2,r2,r3
  8270cc:	10800b04 	addi	r2,r2,44
  8270d0:	10800017 	ldw	r2,0(r2)
  8270d4:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
  8270d8:	e0bfff0f 	ldh	r2,-4(fp)
  8270dc:	00c020f4 	movhi	r3,131
  8270e0:	18dcee04 	addi	r3,r3,29624
  8270e4:	100491ba 	slli	r2,r2,6
  8270e8:	10c5883a 	add	r2,r2,r3
  8270ec:	10800a04 	addi	r2,r2,40
  8270f0:	10800017 	ldw	r2,0(r2)
  8270f4:	1004c03a 	cmpne	r2,r2,zero
  8270f8:	1000071e 	bne	r2,zero,827118 <alt_up_sd_card_fclose+0xd8>
					record_sector = record_sector
  8270fc:	008020f4 	movhi	r2,131
  827100:	109cd904 	addi	r2,r2,29540
  827104:	10c01317 	ldw	r3,76(r2)
  827108:	e0bffd17 	ldw	r2,-12(fp)
  82710c:	10c5883a 	add	r2,r2,r3
  827110:	e0bffd15 	stw	r2,-12(fp)
  827114:	00001406 	br	827168 <alt_up_sd_card_fclose+0x128>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector = record_sector
  827118:	008020f4 	movhi	r2,131
  82711c:	109cd904 	addi	r2,r2,29540
  827120:	10c01417 	ldw	r3,80(r2)
  827124:	e0bffd17 	ldw	r2,-12(fp)
  827128:	1889883a 	add	r4,r3,r2
  82712c:	e0bfff0f 	ldh	r2,-4(fp)
  827130:	00c020f4 	movhi	r3,131
  827134:	18dcee04 	addi	r3,r3,29624
  827138:	100491ba 	slli	r2,r2,6
  82713c:	10c5883a 	add	r2,r2,r3
  827140:	10800a04 	addi	r2,r2,40
  827144:	10800017 	ldw	r2,0(r2)
  827148:	10ffff84 	addi	r3,r2,-2
  82714c:	008020f4 	movhi	r2,131
  827150:	109cd904 	addi	r2,r2,29540
  827154:	10800383 	ldbu	r2,14(r2)
  827158:	10803fcc 	andi	r2,r2,255
  82715c:	1885383a 	mul	r2,r3,r2
  827160:	2085883a 	add	r2,r4,r2
  827164:	e0bffd15 	stw	r2,-12(fp)
							+ boot_sector_data.data_sector_offset
							+ (active_files[file_handle].file_record_cluster
									- 2) * boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
  827168:	e13ffd17 	ldw	r4,-12(fp)
  82716c:	d17c4e17 	ldw	r5,-3784(gp)
  827170:	0822ef00 	call	822ef0 <Read_Sector_Data>
  827174:	1005003a 	cmpeq	r2,r2,zero
  827178:	1000151e 	bne	r2,zero,8271d0 <alt_up_sd_card_fclose+0x190>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
  82717c:	e0bfff0f 	ldh	r2,-4(fp)
  827180:	00c020f4 	movhi	r3,131
  827184:	18dcee04 	addi	r3,r3,29624
  827188:	100491ba 	slli	r2,r2,6
  82718c:	10c5883a 	add	r2,r2,r3
  827190:	10800c04 	addi	r2,r2,48
  827194:	1080000b 	ldhu	r2,0(r2)
  827198:	113fffcc 	andi	r4,r2,65535
  82719c:	2120001c 	xori	r4,r4,32768
  8271a0:	21200004 	addi	r4,r4,-32768
  8271a4:	e0bfff0f 	ldh	r2,-4(fp)
  8271a8:	100491ba 	slli	r2,r2,6
  8271ac:	1007883a 	mov	r3,r2
  8271b0:	008020f4 	movhi	r2,131
  8271b4:	109cee04 	addi	r2,r2,29624
  8271b8:	188b883a 	add	r5,r3,r2
  8271bc:	08235bc0 	call	8235bc <Write_File_Record_At_Offset>
  8271c0:	1005003a 	cmpeq	r2,r2,zero
  8271c4:	1000021e 	bne	r2,zero,8271d0 <alt_up_sd_card_fclose+0x190>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  8271c8:	0822ea00 	call	822ea0 <Save_Modified_Sector>
  8271cc:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  8271d0:	e0bfff0f 	ldh	r2,-4(fp)
  8271d4:	00c020f4 	movhi	r3,131
  8271d8:	18dcee04 	addi	r3,r3,29624
  8271dc:	100491ba 	slli	r2,r2,6
  8271e0:	10c5883a 	add	r2,r2,r3
  8271e4:	10800f04 	addi	r2,r2,60
  8271e8:	10000015 	stw	zero,0(r2)
			result = true;
  8271ec:	00800044 	movi	r2,1
  8271f0:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
  8271f4:	e0bffe17 	ldw	r2,-8(fp)
}
  8271f8:	e037883a 	mov	sp,fp
  8271fc:	dfc00117 	ldw	ra,4(sp)
  827200:	df000017 	ldw	fp,0(sp)
  827204:	dec00204 	addi	sp,sp,8
  827208:	f800283a 	ret

0082720c <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  82720c:	defff904 	addi	sp,sp,-28
  827210:	dfc00615 	stw	ra,24(sp)
  827214:	df000515 	stw	fp,20(sp)
  827218:	df000504 	addi	fp,sp,20
  82721c:	e13ffd15 	stw	r4,-12(fp)
  827220:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
  827224:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
  827228:	0825c040 	call	825c04 <alt_up_sd_card_is_Present>
  82722c:	1005003a 	cmpeq	r2,r2,zero
  827230:	10002d1e 	bne	r2,zero,8272e8 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
  827234:	00803fc4 	movi	r2,255
  827238:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
  82723c:	d0bc5117 	ldw	r2,-3772(gp)
  827240:	1005003a 	cmpeq	r2,r2,zero
  827244:	1000081e 	bne	r2,zero,827268 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
  827248:	d0bc5217 	ldw	r2,-3768(gp)
  82724c:	1009883a 	mov	r4,r2
  827250:	000b883a 	mov	r5,zero
  827254:	0822dd80 	call	822dd8 <Write_Sector_Data>
  827258:	1004c03a 	cmpne	r2,r2,zero
  82725c:	1000021e 	bne	r2,zero,827268 <Read_Sector_Data_CRC+0x5c>
				return false;
  827260:	e03fff15 	stw	zero,-4(fp)
  827264:	00002206 	br	8272f0 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  827268:	d0bc4c17 	ldw	r2,-3792(gp)
  82726c:	1009883a 	mov	r4,r2
  827270:	e0fffd17 	ldw	r3,-12(fp)
  827274:	e0bffe17 	ldw	r2,-8(fp)
  827278:	1885883a 	add	r2,r3,r2
  82727c:	1006927a 	slli	r3,r2,9
  827280:	2005883a 	mov	r2,r4
  827284:	10c00035 	stwio	r3,0(r2)
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  827288:	d0bc4b17 	ldw	r2,-3796(gp)
  82728c:	1007883a 	mov	r3,r2
  827290:	00800444 	movi	r2,17
  827294:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  827298:	d0bc4817 	ldw	r2,-3808(gp)
  82729c:	1080002b 	ldhuio	r2,0(r2)
  8272a0:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
  8272a4:	e0bffb0b 	ldhu	r2,-20(fp)
  8272a8:	10bfffcc 	andi	r2,r2,65535
  8272ac:	1080010c 	andi	r2,r2,4
  8272b0:	1004c03a 	cmpne	r2,r2,zero
  8272b4:	103ff81e 	bne	r2,zero,827298 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
  8272b8:	e0bffb0b 	ldhu	r2,-20(fp)
  8272bc:	10bfffcc 	andi	r2,r2,65535
  8272c0:	10800c0c 	andi	r2,r2,48
  8272c4:	1004c03a 	cmpne	r2,r2,zero
  8272c8:	1000071e 	bne	r2,zero,8272e8 <Read_Sector_Data_CRC+0xdc>
			result = true;
  8272cc:	00800044 	movi	r2,1
  8272d0:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
  8272d4:	d03c5115 	stw	zero,-3772(gp)
			current_sector_index = sector_index + partition_offset;
  8272d8:	e0fffd17 	ldw	r3,-12(fp)
  8272dc:	e0bffe17 	ldw	r2,-8(fp)
  8272e0:	1885883a 	add	r2,r3,r2
  8272e4:	d0bc5215 	stw	r2,-3768(gp)
		}
	}
	return result;
  8272e8:	e0bffc17 	ldw	r2,-16(fp)
  8272ec:	e0bfff15 	stw	r2,-4(fp)
  8272f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8272f4:	e037883a 	mov	sp,fp
  8272f8:	dfc00117 	ldw	ra,4(sp)
  8272fc:	df000017 	ldw	fp,0(sp)
  827300:	dec00204 	addi	sp,sp,8
  827304:	f800283a 	ret

00827308 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
  827308:	defff804 	addi	sp,sp,-32
  82730c:	dfc00715 	stw	ra,28(sp)
  827310:	df000615 	stw	fp,24(sp)
  827314:	df000604 	addi	fp,sp,24
  827318:	e13ffd15 	stw	r4,-12(fp)
  82731c:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
  827320:	00801904 	movi	r2,100
  827324:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
  827328:	e03ffc15 	stw	zero,-16(fp)
  82732c:	00000d06 	br	827364 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
  827330:	e13ffd17 	ldw	r4,-12(fp)
  827334:	e17ffe17 	ldw	r5,-8(fp)
  827338:	082720c0 	call	82720c <Read_Sector_Data_CRC>
  82733c:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
  827340:	e0bffb17 	ldw	r2,-20(fp)
  827344:	1005003a 	cmpeq	r2,r2,zero
  827348:	1000031e 	bne	r2,zero,827358 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
  82734c:	00800044 	movi	r2,1
  827350:	e0bfff15 	stw	r2,-4(fp)
  827354:	00000a06 	br	827380 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
  827358:	e0bffc17 	ldw	r2,-16(fp)
  82735c:	10800044 	addi	r2,r2,1
  827360:	e0bffc15 	stw	r2,-16(fp)
  827364:	e0fffc17 	ldw	r3,-16(fp)
  827368:	e0bffa17 	ldw	r2,-24(fp)
  82736c:	18bff016 	blt	r3,r2,827330 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
  827370:	e13ffd17 	ldw	r4,-12(fp)
  827374:	e17ffe17 	ldw	r5,-8(fp)
  827378:	0822ef00 	call	822ef0 <Read_Sector_Data>
  82737c:	e0bfff15 	stw	r2,-4(fp)
  827380:	e0bfff17 	ldw	r2,-4(fp)
}
  827384:	e037883a 	mov	sp,fp
  827388:	dfc00117 	ldw	ra,4(sp)
  82738c:	df000017 	ldw	fp,0(sp)
  827390:	dec00204 	addi	sp,sp,8
  827394:	f800283a 	ret

00827398 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  827398:	defffa04 	addi	sp,sp,-24
  82739c:	dfc00515 	stw	ra,20(sp)
  8273a0:	df000415 	stw	fp,16(sp)
  8273a4:	df000404 	addi	fp,sp,16
  8273a8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8273ac:	008000c4 	movi	r2,3
  8273b0:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  8273b4:	e0fffc17 	ldw	r3,-16(fp)
  8273b8:	008003f4 	movhi	r2,15
  8273bc:	10909004 	addi	r2,r2,16960
  8273c0:	188b383a 	mul	r5,r3,r2
  8273c4:	0100bef4 	movhi	r4,763
  8273c8:	213c2004 	addi	r4,r4,-3968
  8273cc:	08146bc0 	call	8146bc <__udivsi3>
  8273d0:	100b883a 	mov	r5,r2
  8273d4:	01200034 	movhi	r4,32768
  8273d8:	213fffc4 	addi	r4,r4,-1
  8273dc:	08146bc0 	call	8146bc <__udivsi3>
  8273e0:	100b883a 	mov	r5,r2
  8273e4:	e13fff17 	ldw	r4,-4(fp)
  8273e8:	08146bc0 	call	8146bc <__udivsi3>
  8273ec:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8273f0:	e0bffd17 	ldw	r2,-12(fp)
  8273f4:	1005003a 	cmpeq	r2,r2,zero
  8273f8:	1000281e 	bne	r2,zero,82749c <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  8273fc:	e03ffe15 	stw	zero,-8(fp)
  827400:	00001606 	br	82745c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  827404:	00a00034 	movhi	r2,32768
  827408:	10bfffc4 	addi	r2,r2,-1
  82740c:	10bfffc4 	addi	r2,r2,-1
  827410:	103ffe1e 	bne	r2,zero,82740c <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  827414:	e0fffc17 	ldw	r3,-16(fp)
  827418:	008003f4 	movhi	r2,15
  82741c:	10909004 	addi	r2,r2,16960
  827420:	188b383a 	mul	r5,r3,r2
  827424:	0100bef4 	movhi	r4,763
  827428:	213c2004 	addi	r4,r4,-3968
  82742c:	08146bc0 	call	8146bc <__udivsi3>
  827430:	100b883a 	mov	r5,r2
  827434:	01200034 	movhi	r4,32768
  827438:	213fffc4 	addi	r4,r4,-1
  82743c:	08146bc0 	call	8146bc <__udivsi3>
  827440:	1007883a 	mov	r3,r2
  827444:	e0bfff17 	ldw	r2,-4(fp)
  827448:	10c5c83a 	sub	r2,r2,r3
  82744c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  827450:	e0bffe17 	ldw	r2,-8(fp)
  827454:	10800044 	addi	r2,r2,1
  827458:	e0bffe15 	stw	r2,-8(fp)
  82745c:	e0fffe17 	ldw	r3,-8(fp)
  827460:	e0bffd17 	ldw	r2,-12(fp)
  827464:	18bfe716 	blt	r3,r2,827404 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  827468:	e0fffc17 	ldw	r3,-16(fp)
  82746c:	008003f4 	movhi	r2,15
  827470:	10909004 	addi	r2,r2,16960
  827474:	188b383a 	mul	r5,r3,r2
  827478:	0100bef4 	movhi	r4,763
  82747c:	213c2004 	addi	r4,r4,-3968
  827480:	08146bc0 	call	8146bc <__udivsi3>
  827484:	1007883a 	mov	r3,r2
  827488:	e0bfff17 	ldw	r2,-4(fp)
  82748c:	1885383a 	mul	r2,r3,r2
  827490:	10bfffc4 	addi	r2,r2,-1
  827494:	103ffe1e 	bne	r2,zero,827490 <alt_busy_sleep+0xf8>
  827498:	00000c06 	br	8274cc <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  82749c:	e0fffc17 	ldw	r3,-16(fp)
  8274a0:	008003f4 	movhi	r2,15
  8274a4:	10909004 	addi	r2,r2,16960
  8274a8:	188b383a 	mul	r5,r3,r2
  8274ac:	0100bef4 	movhi	r4,763
  8274b0:	213c2004 	addi	r4,r4,-3968
  8274b4:	08146bc0 	call	8146bc <__udivsi3>
  8274b8:	1007883a 	mov	r3,r2
  8274bc:	e0bfff17 	ldw	r2,-4(fp)
  8274c0:	1885383a 	mul	r2,r3,r2
  8274c4:	10bfffc4 	addi	r2,r2,-1
  8274c8:	00bffe16 	blt	zero,r2,8274c4 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8274cc:	0005883a 	mov	r2,zero
}
  8274d0:	e037883a 	mov	sp,fp
  8274d4:	dfc00117 	ldw	ra,4(sp)
  8274d8:	df000017 	ldw	fp,0(sp)
  8274dc:	dec00204 	addi	sp,sp,8
  8274e0:	f800283a 	ret

008274e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8274e4:	defffe04 	addi	sp,sp,-8
  8274e8:	df000115 	stw	fp,4(sp)
  8274ec:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8274f0:	e03fff15 	stw	zero,-4(fp)
  8274f4:	00000506 	br	82750c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8274f8:	e0bfff17 	ldw	r2,-4(fp)
  8274fc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  827500:	e0bfff17 	ldw	r2,-4(fp)
  827504:	10800804 	addi	r2,r2,32
  827508:	e0bfff15 	stw	r2,-4(fp)
  82750c:	e0bfff17 	ldw	r2,-4(fp)
  827510:	10900030 	cmpltui	r2,r2,16384
  827514:	103ff81e 	bne	r2,zero,8274f8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  827518:	e037883a 	mov	sp,fp
  82751c:	df000017 	ldw	fp,0(sp)
  827520:	dec00104 	addi	sp,sp,4
  827524:	f800283a 	ret

00827528 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  827528:	defff904 	addi	sp,sp,-28
  82752c:	dfc00615 	stw	ra,24(sp)
  827530:	df000515 	stw	fp,20(sp)
  827534:	df000504 	addi	fp,sp,20
  827538:	e13ffd15 	stw	r4,-12(fp)
  82753c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  827540:	e0bffd17 	ldw	r2,-12(fp)
  827544:	1005003a 	cmpeq	r2,r2,zero
  827548:	1000041e 	bne	r2,zero,82755c <alt_dev_llist_insert+0x34>
  82754c:	e0bffd17 	ldw	r2,-12(fp)
  827550:	10800217 	ldw	r2,8(r2)
  827554:	1004c03a 	cmpne	r2,r2,zero
  827558:	1000071e 	bne	r2,zero,827578 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  82755c:	08275dc0 	call	8275dc <alt_get_errno>
  827560:	1007883a 	mov	r3,r2
  827564:	00800584 	movi	r2,22
  827568:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  82756c:	00bffa84 	movi	r2,-22
  827570:	e0bfff15 	stw	r2,-4(fp)
  827574:	00001306 	br	8275c4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  827578:	e0fffd17 	ldw	r3,-12(fp)
  82757c:	e0bffe17 	ldw	r2,-8(fp)
  827580:	e0bffb15 	stw	r2,-20(fp)
  827584:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  827588:	e0fffc17 	ldw	r3,-16(fp)
  82758c:	e0bffb17 	ldw	r2,-20(fp)
  827590:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  827594:	e0bffb17 	ldw	r2,-20(fp)
  827598:	10c00017 	ldw	r3,0(r2)
  82759c:	e0bffc17 	ldw	r2,-16(fp)
  8275a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8275a4:	e0bffb17 	ldw	r2,-20(fp)
  8275a8:	10c00017 	ldw	r3,0(r2)
  8275ac:	e0bffc17 	ldw	r2,-16(fp)
  8275b0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8275b4:	e0fffb17 	ldw	r3,-20(fp)
  8275b8:	e0bffc17 	ldw	r2,-16(fp)
  8275bc:	18800015 	stw	r2,0(r3)

  return 0;  
  8275c0:	e03fff15 	stw	zero,-4(fp)
  8275c4:	e0bfff17 	ldw	r2,-4(fp)
}
  8275c8:	e037883a 	mov	sp,fp
  8275cc:	dfc00117 	ldw	ra,4(sp)
  8275d0:	df000017 	ldw	fp,0(sp)
  8275d4:	dec00204 	addi	sp,sp,8
  8275d8:	f800283a 	ret

008275dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8275dc:	defffd04 	addi	sp,sp,-12
  8275e0:	dfc00215 	stw	ra,8(sp)
  8275e4:	df000115 	stw	fp,4(sp)
  8275e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8275ec:	008020f4 	movhi	r2,131
  8275f0:	10806404 	addi	r2,r2,400
  8275f4:	10800017 	ldw	r2,0(r2)
  8275f8:	1005003a 	cmpeq	r2,r2,zero
  8275fc:	1000061e 	bne	r2,zero,827618 <alt_get_errno+0x3c>
  827600:	008020f4 	movhi	r2,131
  827604:	10806404 	addi	r2,r2,400
  827608:	10800017 	ldw	r2,0(r2)
  82760c:	103ee83a 	callr	r2
  827610:	e0bfff15 	stw	r2,-4(fp)
  827614:	00000306 	br	827624 <alt_get_errno+0x48>
  827618:	008020f4 	movhi	r2,131
  82761c:	109c9104 	addi	r2,r2,29252
  827620:	e0bfff15 	stw	r2,-4(fp)
  827624:	e0bfff17 	ldw	r2,-4(fp)
}
  827628:	e037883a 	mov	sp,fp
  82762c:	dfc00117 	ldw	ra,4(sp)
  827630:	df000017 	ldw	fp,0(sp)
  827634:	dec00204 	addi	sp,sp,8
  827638:	f800283a 	ret

0082763c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  82763c:	defffd04 	addi	sp,sp,-12
  827640:	dfc00215 	stw	ra,8(sp)
  827644:	df000115 	stw	fp,4(sp)
  827648:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  82764c:	00bfff04 	movi	r2,-4
  827650:	00c020f4 	movhi	r3,131
  827654:	18e0b204 	addi	r3,r3,-32056
  827658:	1885883a 	add	r2,r3,r2
  82765c:	e0bfff15 	stw	r2,-4(fp)
  827660:	00000606 	br	82767c <_do_ctors+0x40>
        (*ctor) (); 
  827664:	e0bfff17 	ldw	r2,-4(fp)
  827668:	10800017 	ldw	r2,0(r2)
  82766c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  827670:	e0bfff17 	ldw	r2,-4(fp)
  827674:	10bfff04 	addi	r2,r2,-4
  827678:	e0bfff15 	stw	r2,-4(fp)
  82767c:	e0ffff17 	ldw	r3,-4(fp)
  827680:	008020f4 	movhi	r2,131
  827684:	10a0b104 	addi	r2,r2,-32060
  827688:	18bff62e 	bgeu	r3,r2,827664 <_do_ctors+0x28>
        (*ctor) (); 
}
  82768c:	e037883a 	mov	sp,fp
  827690:	dfc00117 	ldw	ra,4(sp)
  827694:	df000017 	ldw	fp,0(sp)
  827698:	dec00204 	addi	sp,sp,8
  82769c:	f800283a 	ret

008276a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8276a0:	defffd04 	addi	sp,sp,-12
  8276a4:	dfc00215 	stw	ra,8(sp)
  8276a8:	df000115 	stw	fp,4(sp)
  8276ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8276b0:	00bfff04 	movi	r2,-4
  8276b4:	00c020f4 	movhi	r3,131
  8276b8:	18e0b204 	addi	r3,r3,-32056
  8276bc:	1885883a 	add	r2,r3,r2
  8276c0:	e0bfff15 	stw	r2,-4(fp)
  8276c4:	00000606 	br	8276e0 <_do_dtors+0x40>
        (*dtor) (); 
  8276c8:	e0bfff17 	ldw	r2,-4(fp)
  8276cc:	10800017 	ldw	r2,0(r2)
  8276d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8276d4:	e0bfff17 	ldw	r2,-4(fp)
  8276d8:	10bfff04 	addi	r2,r2,-4
  8276dc:	e0bfff15 	stw	r2,-4(fp)
  8276e0:	e0ffff17 	ldw	r3,-4(fp)
  8276e4:	008020f4 	movhi	r2,131
  8276e8:	10a0b204 	addi	r2,r2,-32056
  8276ec:	18bff62e 	bgeu	r3,r2,8276c8 <_do_dtors+0x28>
        (*dtor) (); 
}
  8276f0:	e037883a 	mov	sp,fp
  8276f4:	dfc00117 	ldw	ra,4(sp)
  8276f8:	df000017 	ldw	fp,0(sp)
  8276fc:	dec00204 	addi	sp,sp,8
  827700:	f800283a 	ret

00827704 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  827704:	defff904 	addi	sp,sp,-28
  827708:	dfc00615 	stw	ra,24(sp)
  82770c:	df000515 	stw	fp,20(sp)
  827710:	df000504 	addi	fp,sp,20
  827714:	e13ffd15 	stw	r4,-12(fp)
  827718:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  82771c:	e0bffe17 	ldw	r2,-8(fp)
  827720:	10800017 	ldw	r2,0(r2)
  827724:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  827728:	e13ffd17 	ldw	r4,-12(fp)
  82772c:	0815adc0 	call	815adc <strlen>
  827730:	10800044 	addi	r2,r2,1
  827734:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  827738:	00000d06 	br	827770 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  82773c:	e0bffc17 	ldw	r2,-16(fp)
  827740:	11000217 	ldw	r4,8(r2)
  827744:	e1bffb17 	ldw	r6,-20(fp)
  827748:	e17ffd17 	ldw	r5,-12(fp)
  82774c:	0827e9c0 	call	827e9c <memcmp>
  827750:	1004c03a 	cmpne	r2,r2,zero
  827754:	1000031e 	bne	r2,zero,827764 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  827758:	e0bffc17 	ldw	r2,-16(fp)
  82775c:	e0bfff15 	stw	r2,-4(fp)
  827760:	00000706 	br	827780 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  827764:	e0bffc17 	ldw	r2,-16(fp)
  827768:	10800017 	ldw	r2,0(r2)
  82776c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  827770:	e0fffe17 	ldw	r3,-8(fp)
  827774:	e0bffc17 	ldw	r2,-16(fp)
  827778:	10fff01e 	bne	r2,r3,82773c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  82777c:	e03fff15 	stw	zero,-4(fp)
  827780:	e0bfff17 	ldw	r2,-4(fp)
}
  827784:	e037883a 	mov	sp,fp
  827788:	dfc00117 	ldw	ra,4(sp)
  82778c:	df000017 	ldw	fp,0(sp)
  827790:	dec00204 	addi	sp,sp,8
  827794:	f800283a 	ret

00827798 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  827798:	defffe04 	addi	sp,sp,-8
  82779c:	dfc00115 	stw	ra,4(sp)
  8277a0:	df000015 	stw	fp,0(sp)
  8277a4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  8277a8:	0009883a 	mov	r4,zero
  8277ac:	01500004 	movi	r5,16384
  8277b0:	0827dc00 	call	827dc0 <alt_icache_flush>
#endif
}
  8277b4:	e037883a 	mov	sp,fp
  8277b8:	dfc00117 	ldw	ra,4(sp)
  8277bc:	df000017 	ldw	fp,0(sp)
  8277c0:	dec00204 	addi	sp,sp,8
  8277c4:	f800283a 	ret

008277c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8277c8:	defff904 	addi	sp,sp,-28
  8277cc:	dfc00615 	stw	ra,24(sp)
  8277d0:	df000515 	stw	fp,20(sp)
  8277d4:	df000504 	addi	fp,sp,20
  8277d8:	e13ffc15 	stw	r4,-16(fp)
  8277dc:	e17ffd15 	stw	r5,-12(fp)
  8277e0:	e1bffe15 	stw	r6,-8(fp)
  8277e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8277e8:	e13ffd17 	ldw	r4,-12(fp)
  8277ec:	e17ffe17 	ldw	r5,-8(fp)
  8277f0:	e1bfff17 	ldw	r6,-4(fp)
  8277f4:	08279e00 	call	8279e0 <open>
  8277f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8277fc:	e0bffb17 	ldw	r2,-20(fp)
  827800:	1004803a 	cmplt	r2,r2,zero
  827804:	10001c1e 	bne	r2,zero,827878 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  827808:	e0bffb17 	ldw	r2,-20(fp)
  82780c:	00c020f4 	movhi	r3,131
  827810:	18fb7c04 	addi	r3,r3,-4624
  827814:	10800324 	muli	r2,r2,12
  827818:	10c5883a 	add	r2,r2,r3
  82781c:	10c00017 	ldw	r3,0(r2)
  827820:	e0bffc17 	ldw	r2,-16(fp)
  827824:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  827828:	e0bffb17 	ldw	r2,-20(fp)
  82782c:	00c020f4 	movhi	r3,131
  827830:	18fb7c04 	addi	r3,r3,-4624
  827834:	10800324 	muli	r2,r2,12
  827838:	10c5883a 	add	r2,r2,r3
  82783c:	10800104 	addi	r2,r2,4
  827840:	10c00017 	ldw	r3,0(r2)
  827844:	e0bffc17 	ldw	r2,-16(fp)
  827848:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  82784c:	e0bffb17 	ldw	r2,-20(fp)
  827850:	00c020f4 	movhi	r3,131
  827854:	18fb7c04 	addi	r3,r3,-4624
  827858:	10800324 	muli	r2,r2,12
  82785c:	10c5883a 	add	r2,r2,r3
  827860:	10800204 	addi	r2,r2,8
  827864:	10c00017 	ldw	r3,0(r2)
  827868:	e0bffc17 	ldw	r2,-16(fp)
  82786c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  827870:	e13ffb17 	ldw	r4,-20(fp)
  827874:	081e4300 	call	81e430 <alt_release_fd>
  }
} 
  827878:	e037883a 	mov	sp,fp
  82787c:	dfc00117 	ldw	ra,4(sp)
  827880:	df000017 	ldw	fp,0(sp)
  827884:	dec00204 	addi	sp,sp,8
  827888:	f800283a 	ret

0082788c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  82788c:	defffb04 	addi	sp,sp,-20
  827890:	dfc00415 	stw	ra,16(sp)
  827894:	df000315 	stw	fp,12(sp)
  827898:	df000304 	addi	fp,sp,12
  82789c:	e13ffd15 	stw	r4,-12(fp)
  8278a0:	e17ffe15 	stw	r5,-8(fp)
  8278a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8278a8:	010020f4 	movhi	r4,131
  8278ac:	213b7f04 	addi	r4,r4,-4612
  8278b0:	e17ffd17 	ldw	r5,-12(fp)
  8278b4:	01800044 	movi	r6,1
  8278b8:	01c07fc4 	movi	r7,511
  8278bc:	08277c80 	call	8277c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8278c0:	010020f4 	movhi	r4,131
  8278c4:	213b7c04 	addi	r4,r4,-4624
  8278c8:	e17ffe17 	ldw	r5,-8(fp)
  8278cc:	000d883a 	mov	r6,zero
  8278d0:	01c07fc4 	movi	r7,511
  8278d4:	08277c80 	call	8277c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8278d8:	010020f4 	movhi	r4,131
  8278dc:	213b8204 	addi	r4,r4,-4600
  8278e0:	e17fff17 	ldw	r5,-4(fp)
  8278e4:	01800044 	movi	r6,1
  8278e8:	01c07fc4 	movi	r7,511
  8278ec:	08277c80 	call	8277c8 <alt_open_fd>
}  
  8278f0:	e037883a 	mov	sp,fp
  8278f4:	dfc00117 	ldw	ra,4(sp)
  8278f8:	df000017 	ldw	fp,0(sp)
  8278fc:	dec00204 	addi	sp,sp,8
  827900:	f800283a 	ret

00827904 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  827904:	defffc04 	addi	sp,sp,-16
  827908:	df000315 	stw	fp,12(sp)
  82790c:	df000304 	addi	fp,sp,12
  827910:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  827914:	e0bffe17 	ldw	r2,-8(fp)
  827918:	10800217 	ldw	r2,8(r2)
  82791c:	10d00034 	orhi	r3,r2,16384
  827920:	e0bffe17 	ldw	r2,-8(fp)
  827924:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  827928:	e03ffd15 	stw	zero,-12(fp)
  82792c:	00002006 	br	8279b0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  827930:	e0bffd17 	ldw	r2,-12(fp)
  827934:	00c020f4 	movhi	r3,131
  827938:	18fb7c04 	addi	r3,r3,-4624
  82793c:	10800324 	muli	r2,r2,12
  827940:	10c5883a 	add	r2,r2,r3
  827944:	10c00017 	ldw	r3,0(r2)
  827948:	e0bffe17 	ldw	r2,-8(fp)
  82794c:	10800017 	ldw	r2,0(r2)
  827950:	1880141e 	bne	r3,r2,8279a4 <alt_file_locked+0xa0>
  827954:	e0bffd17 	ldw	r2,-12(fp)
  827958:	00c020f4 	movhi	r3,131
  82795c:	18fb7c04 	addi	r3,r3,-4624
  827960:	10800324 	muli	r2,r2,12
  827964:	10c5883a 	add	r2,r2,r3
  827968:	10800204 	addi	r2,r2,8
  82796c:	10800017 	ldw	r2,0(r2)
  827970:	1004403a 	cmpge	r2,r2,zero
  827974:	10000b1e 	bne	r2,zero,8279a4 <alt_file_locked+0xa0>
  827978:	e0bffd17 	ldw	r2,-12(fp)
  82797c:	10800324 	muli	r2,r2,12
  827980:	1007883a 	mov	r3,r2
  827984:	008020f4 	movhi	r2,131
  827988:	10bb7c04 	addi	r2,r2,-4624
  82798c:	1887883a 	add	r3,r3,r2
  827990:	e0bffe17 	ldw	r2,-8(fp)
  827994:	18800326 	beq	r3,r2,8279a4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  827998:	00bffcc4 	movi	r2,-13
  82799c:	e0bfff15 	stw	r2,-4(fp)
  8279a0:	00000a06 	br	8279cc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8279a4:	e0bffd17 	ldw	r2,-12(fp)
  8279a8:	10800044 	addi	r2,r2,1
  8279ac:	e0bffd15 	stw	r2,-12(fp)
  8279b0:	008020f4 	movhi	r2,131
  8279b4:	10806304 	addi	r2,r2,396
  8279b8:	10800017 	ldw	r2,0(r2)
  8279bc:	1007883a 	mov	r3,r2
  8279c0:	e0bffd17 	ldw	r2,-12(fp)
  8279c4:	18bfda2e 	bgeu	r3,r2,827930 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8279c8:	e03fff15 	stw	zero,-4(fp)
  8279cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8279d0:	e037883a 	mov	sp,fp
  8279d4:	df000017 	ldw	fp,0(sp)
  8279d8:	dec00104 	addi	sp,sp,4
  8279dc:	f800283a 	ret

008279e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8279e0:	defff404 	addi	sp,sp,-48
  8279e4:	dfc00b15 	stw	ra,44(sp)
  8279e8:	df000a15 	stw	fp,40(sp)
  8279ec:	df000a04 	addi	fp,sp,40
  8279f0:	e13ffb15 	stw	r4,-20(fp)
  8279f4:	e17ffc15 	stw	r5,-16(fp)
  8279f8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8279fc:	00bfffc4 	movi	r2,-1
  827a00:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  827a04:	00bffb44 	movi	r2,-19
  827a08:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  827a0c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  827a10:	e13ffb17 	ldw	r4,-20(fp)
  827a14:	014020f4 	movhi	r5,131
  827a18:	29406104 	addi	r5,r5,388
  827a1c:	08277040 	call	827704 <alt_find_dev>
  827a20:	e0bffa15 	stw	r2,-24(fp)
  827a24:	e0bffa17 	ldw	r2,-24(fp)
  827a28:	1004c03a 	cmpne	r2,r2,zero
  827a2c:	1000051e 	bne	r2,zero,827a44 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  827a30:	e13ffb17 	ldw	r4,-20(fp)
  827a34:	0827be80 	call	827be8 <alt_find_file>
  827a38:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  827a3c:	00800044 	movi	r2,1
  827a40:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  827a44:	e0bffa17 	ldw	r2,-24(fp)
  827a48:	1005003a 	cmpeq	r2,r2,zero
  827a4c:	1000301e 	bne	r2,zero,827b10 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  827a50:	e13ffa17 	ldw	r4,-24(fp)
  827a54:	0827d080 	call	827d08 <alt_get_fd>
  827a58:	e0bff815 	stw	r2,-32(fp)
  827a5c:	e0bff817 	ldw	r2,-32(fp)
  827a60:	1004403a 	cmpge	r2,r2,zero
  827a64:	1000031e 	bne	r2,zero,827a74 <open+0x94>
    {
      status = index;
  827a68:	e0bff817 	ldw	r2,-32(fp)
  827a6c:	e0bff715 	stw	r2,-36(fp)
  827a70:	00002906 	br	827b18 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  827a74:	e0bff817 	ldw	r2,-32(fp)
  827a78:	10800324 	muli	r2,r2,12
  827a7c:	1007883a 	mov	r3,r2
  827a80:	008020f4 	movhi	r2,131
  827a84:	10bb7c04 	addi	r2,r2,-4624
  827a88:	1885883a 	add	r2,r3,r2
  827a8c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  827a90:	e0fffc17 	ldw	r3,-16(fp)
  827a94:	00900034 	movhi	r2,16384
  827a98:	10bfffc4 	addi	r2,r2,-1
  827a9c:	1886703a 	and	r3,r3,r2
  827aa0:	e0bff917 	ldw	r2,-28(fp)
  827aa4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  827aa8:	e0bff617 	ldw	r2,-40(fp)
  827aac:	1004c03a 	cmpne	r2,r2,zero
  827ab0:	1000061e 	bne	r2,zero,827acc <open+0xec>
  827ab4:	e13ff917 	ldw	r4,-28(fp)
  827ab8:	08279040 	call	827904 <alt_file_locked>
  827abc:	e0bff715 	stw	r2,-36(fp)
  827ac0:	e0bff717 	ldw	r2,-36(fp)
  827ac4:	1004803a 	cmplt	r2,r2,zero
  827ac8:	1000131e 	bne	r2,zero,827b18 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  827acc:	e0bffa17 	ldw	r2,-24(fp)
  827ad0:	10800317 	ldw	r2,12(r2)
  827ad4:	1005003a 	cmpeq	r2,r2,zero
  827ad8:	1000091e 	bne	r2,zero,827b00 <open+0x120>
  827adc:	e0bffa17 	ldw	r2,-24(fp)
  827ae0:	10800317 	ldw	r2,12(r2)
  827ae4:	e13ff917 	ldw	r4,-28(fp)
  827ae8:	e17ffb17 	ldw	r5,-20(fp)
  827aec:	e1bffc17 	ldw	r6,-16(fp)
  827af0:	e1fffd17 	ldw	r7,-12(fp)
  827af4:	103ee83a 	callr	r2
  827af8:	e0bfff15 	stw	r2,-4(fp)
  827afc:	00000106 	br	827b04 <open+0x124>
  827b00:	e03fff15 	stw	zero,-4(fp)
  827b04:	e0bfff17 	ldw	r2,-4(fp)
  827b08:	e0bff715 	stw	r2,-36(fp)
  827b0c:	00000206 	br	827b18 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  827b10:	00bffb44 	movi	r2,-19
  827b14:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  827b18:	e0bff717 	ldw	r2,-36(fp)
  827b1c:	1004403a 	cmpge	r2,r2,zero
  827b20:	1000091e 	bne	r2,zero,827b48 <open+0x168>
  {
    alt_release_fd (index);  
  827b24:	e13ff817 	ldw	r4,-32(fp)
  827b28:	081e4300 	call	81e430 <alt_release_fd>
    ALT_ERRNO = -status;
  827b2c:	0827b680 	call	827b68 <alt_get_errno>
  827b30:	e0fff717 	ldw	r3,-36(fp)
  827b34:	00c7c83a 	sub	r3,zero,r3
  827b38:	10c00015 	stw	r3,0(r2)
    return -1;
  827b3c:	00bfffc4 	movi	r2,-1
  827b40:	e0bffe15 	stw	r2,-8(fp)
  827b44:	00000206 	br	827b50 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  827b48:	e0bff817 	ldw	r2,-32(fp)
  827b4c:	e0bffe15 	stw	r2,-8(fp)
  827b50:	e0bffe17 	ldw	r2,-8(fp)
}
  827b54:	e037883a 	mov	sp,fp
  827b58:	dfc00117 	ldw	ra,4(sp)
  827b5c:	df000017 	ldw	fp,0(sp)
  827b60:	dec00204 	addi	sp,sp,8
  827b64:	f800283a 	ret

00827b68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  827b68:	defffd04 	addi	sp,sp,-12
  827b6c:	dfc00215 	stw	ra,8(sp)
  827b70:	df000115 	stw	fp,4(sp)
  827b74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  827b78:	008020f4 	movhi	r2,131
  827b7c:	10806404 	addi	r2,r2,400
  827b80:	10800017 	ldw	r2,0(r2)
  827b84:	1005003a 	cmpeq	r2,r2,zero
  827b88:	1000061e 	bne	r2,zero,827ba4 <alt_get_errno+0x3c>
  827b8c:	008020f4 	movhi	r2,131
  827b90:	10806404 	addi	r2,r2,400
  827b94:	10800017 	ldw	r2,0(r2)
  827b98:	103ee83a 	callr	r2
  827b9c:	e0bfff15 	stw	r2,-4(fp)
  827ba0:	00000306 	br	827bb0 <alt_get_errno+0x48>
  827ba4:	008020f4 	movhi	r2,131
  827ba8:	109c9104 	addi	r2,r2,29252
  827bac:	e0bfff15 	stw	r2,-4(fp)
  827bb0:	e0bfff17 	ldw	r2,-4(fp)
}
  827bb4:	e037883a 	mov	sp,fp
  827bb8:	dfc00117 	ldw	ra,4(sp)
  827bbc:	df000017 	ldw	fp,0(sp)
  827bc0:	dec00204 	addi	sp,sp,8
  827bc4:	f800283a 	ret

00827bc8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  827bc8:	deffff04 	addi	sp,sp,-4
  827bcc:	df000015 	stw	fp,0(sp)
  827bd0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  827bd4:	000170fa 	wrctl	ienable,zero
}
  827bd8:	e037883a 	mov	sp,fp
  827bdc:	df000017 	ldw	fp,0(sp)
  827be0:	dec00104 	addi	sp,sp,4
  827be4:	f800283a 	ret

00827be8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  827be8:	defffa04 	addi	sp,sp,-24
  827bec:	dfc00515 	stw	ra,20(sp)
  827bf0:	df000415 	stw	fp,16(sp)
  827bf4:	df000404 	addi	fp,sp,16
  827bf8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  827bfc:	008020f4 	movhi	r2,131
  827c00:	10805f04 	addi	r2,r2,380
  827c04:	10800017 	ldw	r2,0(r2)
  827c08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  827c0c:	00003306 	br	827cdc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  827c10:	e0bffd17 	ldw	r2,-12(fp)
  827c14:	11000217 	ldw	r4,8(r2)
  827c18:	0815adc0 	call	815adc <strlen>
  827c1c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  827c20:	e0bffd17 	ldw	r2,-12(fp)
  827c24:	10c00217 	ldw	r3,8(r2)
  827c28:	e0bffc17 	ldw	r2,-16(fp)
  827c2c:	1885883a 	add	r2,r3,r2
  827c30:	10bfffc4 	addi	r2,r2,-1
  827c34:	10800003 	ldbu	r2,0(r2)
  827c38:	10803fcc 	andi	r2,r2,255
  827c3c:	1080201c 	xori	r2,r2,128
  827c40:	10bfe004 	addi	r2,r2,-128
  827c44:	10800bd8 	cmpnei	r2,r2,47
  827c48:	1000031e 	bne	r2,zero,827c58 <alt_find_file+0x70>
    {
      len -= 1;
  827c4c:	e0bffc17 	ldw	r2,-16(fp)
  827c50:	10bfffc4 	addi	r2,r2,-1
  827c54:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  827c58:	e0bffc17 	ldw	r2,-16(fp)
  827c5c:	1007883a 	mov	r3,r2
  827c60:	e0bffe17 	ldw	r2,-8(fp)
  827c64:	1885883a 	add	r2,r3,r2
  827c68:	10800003 	ldbu	r2,0(r2)
  827c6c:	10803fcc 	andi	r2,r2,255
  827c70:	1080201c 	xori	r2,r2,128
  827c74:	10bfe004 	addi	r2,r2,-128
  827c78:	10800be0 	cmpeqi	r2,r2,47
  827c7c:	10000a1e 	bne	r2,zero,827ca8 <alt_find_file+0xc0>
  827c80:	e0bffc17 	ldw	r2,-16(fp)
  827c84:	1007883a 	mov	r3,r2
  827c88:	e0bffe17 	ldw	r2,-8(fp)
  827c8c:	1885883a 	add	r2,r3,r2
  827c90:	10800003 	ldbu	r2,0(r2)
  827c94:	10803fcc 	andi	r2,r2,255
  827c98:	1080201c 	xori	r2,r2,128
  827c9c:	10bfe004 	addi	r2,r2,-128
  827ca0:	1004c03a 	cmpne	r2,r2,zero
  827ca4:	10000a1e 	bne	r2,zero,827cd0 <alt_find_file+0xe8>
  827ca8:	e0bffd17 	ldw	r2,-12(fp)
  827cac:	11000217 	ldw	r4,8(r2)
  827cb0:	e1bffc17 	ldw	r6,-16(fp)
  827cb4:	e17ffe17 	ldw	r5,-8(fp)
  827cb8:	0827e9c0 	call	827e9c <memcmp>
  827cbc:	1004c03a 	cmpne	r2,r2,zero
  827cc0:	1000031e 	bne	r2,zero,827cd0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  827cc4:	e0bffd17 	ldw	r2,-12(fp)
  827cc8:	e0bfff15 	stw	r2,-4(fp)
  827ccc:	00000806 	br	827cf0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  827cd0:	e0bffd17 	ldw	r2,-12(fp)
  827cd4:	10800017 	ldw	r2,0(r2)
  827cd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  827cdc:	00c020f4 	movhi	r3,131
  827ce0:	18c05f04 	addi	r3,r3,380
  827ce4:	e0bffd17 	ldw	r2,-12(fp)
  827ce8:	10ffc91e 	bne	r2,r3,827c10 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  827cec:	e03fff15 	stw	zero,-4(fp)
  827cf0:	e0bfff17 	ldw	r2,-4(fp)
}
  827cf4:	e037883a 	mov	sp,fp
  827cf8:	dfc00117 	ldw	ra,4(sp)
  827cfc:	df000017 	ldw	fp,0(sp)
  827d00:	dec00204 	addi	sp,sp,8
  827d04:	f800283a 	ret

00827d08 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  827d08:	defffc04 	addi	sp,sp,-16
  827d0c:	df000315 	stw	fp,12(sp)
  827d10:	df000304 	addi	fp,sp,12
  827d14:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  827d18:	00bffa04 	movi	r2,-24
  827d1c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  827d20:	e03ffe15 	stw	zero,-8(fp)
  827d24:	00001e06 	br	827da0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  827d28:	e0bffe17 	ldw	r2,-8(fp)
  827d2c:	00c020f4 	movhi	r3,131
  827d30:	18fb7c04 	addi	r3,r3,-4624
  827d34:	10800324 	muli	r2,r2,12
  827d38:	10c5883a 	add	r2,r2,r3
  827d3c:	10800017 	ldw	r2,0(r2)
  827d40:	1004c03a 	cmpne	r2,r2,zero
  827d44:	1000131e 	bne	r2,zero,827d94 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  827d48:	e0bffe17 	ldw	r2,-8(fp)
  827d4c:	00c020f4 	movhi	r3,131
  827d50:	18fb7c04 	addi	r3,r3,-4624
  827d54:	10800324 	muli	r2,r2,12
  827d58:	10c7883a 	add	r3,r2,r3
  827d5c:	e0bfff17 	ldw	r2,-4(fp)
  827d60:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  827d64:	008020f4 	movhi	r2,131
  827d68:	10806304 	addi	r2,r2,396
  827d6c:	10c00017 	ldw	r3,0(r2)
  827d70:	e0bffe17 	ldw	r2,-8(fp)
  827d74:	1880040e 	bge	r3,r2,827d88 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  827d78:	00c020f4 	movhi	r3,131
  827d7c:	18c06304 	addi	r3,r3,396
  827d80:	e0bffe17 	ldw	r2,-8(fp)
  827d84:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  827d88:	e0bffe17 	ldw	r2,-8(fp)
  827d8c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  827d90:	00000606 	br	827dac <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  827d94:	e0bffe17 	ldw	r2,-8(fp)
  827d98:	10800044 	addi	r2,r2,1
  827d9c:	e0bffe15 	stw	r2,-8(fp)
  827da0:	e0bffe17 	ldw	r2,-8(fp)
  827da4:	10800810 	cmplti	r2,r2,32
  827da8:	103fdf1e 	bne	r2,zero,827d28 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  827dac:	e0bffd17 	ldw	r2,-12(fp)
}
  827db0:	e037883a 	mov	sp,fp
  827db4:	df000017 	ldw	fp,0(sp)
  827db8:	dec00104 	addi	sp,sp,4
  827dbc:	f800283a 	ret

00827dc0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  827dc0:	defffb04 	addi	sp,sp,-20
  827dc4:	df000415 	stw	fp,16(sp)
  827dc8:	df000404 	addi	fp,sp,16
  827dcc:	e13ffe15 	stw	r4,-8(fp)
  827dd0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  827dd4:	e0bfff17 	ldw	r2,-4(fp)
  827dd8:	10900070 	cmpltui	r2,r2,16385
  827ddc:	1000021e 	bne	r2,zero,827de8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  827de0:	00900004 	movi	r2,16384
  827de4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  827de8:	e0fffe17 	ldw	r3,-8(fp)
  827dec:	e0bfff17 	ldw	r2,-4(fp)
  827df0:	1885883a 	add	r2,r3,r2
  827df4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  827df8:	e0bffe17 	ldw	r2,-8(fp)
  827dfc:	e0bffd15 	stw	r2,-12(fp)
  827e00:	00000506 	br	827e18 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  827e04:	e0bffd17 	ldw	r2,-12(fp)
  827e08:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  827e0c:	e0bffd17 	ldw	r2,-12(fp)
  827e10:	10800804 	addi	r2,r2,32
  827e14:	e0bffd15 	stw	r2,-12(fp)
  827e18:	e0fffd17 	ldw	r3,-12(fp)
  827e1c:	e0bffc17 	ldw	r2,-16(fp)
  827e20:	18bff836 	bltu	r3,r2,827e04 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  827e24:	e0bffe17 	ldw	r2,-8(fp)
  827e28:	108007cc 	andi	r2,r2,31
  827e2c:	1005003a 	cmpeq	r2,r2,zero
  827e30:	1000021e 	bne	r2,zero,827e3c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  827e34:	e0bffd17 	ldw	r2,-12(fp)
  827e38:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  827e3c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  827e40:	e037883a 	mov	sp,fp
  827e44:	df000017 	ldw	fp,0(sp)
  827e48:	dec00104 	addi	sp,sp,4
  827e4c:	f800283a 	ret

00827e50 <atexit>:
  827e50:	200b883a 	mov	r5,r4
  827e54:	000d883a 	mov	r6,zero
  827e58:	0009883a 	mov	r4,zero
  827e5c:	000f883a 	mov	r7,zero
  827e60:	0827f101 	jmpi	827f10 <__register_exitproc>

00827e64 <exit>:
  827e64:	defffe04 	addi	sp,sp,-8
  827e68:	000b883a 	mov	r5,zero
  827e6c:	dc000015 	stw	r16,0(sp)
  827e70:	dfc00115 	stw	ra,4(sp)
  827e74:	2021883a 	mov	r16,r4
  827e78:	08280480 	call	828048 <__call_exitprocs>
  827e7c:	008020f4 	movhi	r2,131
  827e80:	10805c04 	addi	r2,r2,368
  827e84:	11000017 	ldw	r4,0(r2)
  827e88:	20800f17 	ldw	r2,60(r4)
  827e8c:	10000126 	beq	r2,zero,827e94 <exit+0x30>
  827e90:	103ee83a 	callr	r2
  827e94:	8009883a 	mov	r4,r16
  827e98:	08282380 	call	828238 <_exit>

00827e9c <memcmp>:
  827e9c:	00c000c4 	movi	r3,3
  827ea0:	1980032e 	bgeu	r3,r6,827eb0 <memcmp+0x14>
  827ea4:	2144b03a 	or	r2,r4,r5
  827ea8:	10c4703a 	and	r2,r2,r3
  827eac:	10000f26 	beq	r2,zero,827eec <memcmp+0x50>
  827eb0:	31ffffc4 	addi	r7,r6,-1
  827eb4:	3000061e 	bne	r6,zero,827ed0 <memcmp+0x34>
  827eb8:	00000a06 	br	827ee4 <memcmp+0x48>
  827ebc:	39ffffc4 	addi	r7,r7,-1
  827ec0:	00bfffc4 	movi	r2,-1
  827ec4:	21000044 	addi	r4,r4,1
  827ec8:	29400044 	addi	r5,r5,1
  827ecc:	38800526 	beq	r7,r2,827ee4 <memcmp+0x48>
  827ed0:	20c00003 	ldbu	r3,0(r4)
  827ed4:	28800003 	ldbu	r2,0(r5)
  827ed8:	18bff826 	beq	r3,r2,827ebc <memcmp+0x20>
  827edc:	1885c83a 	sub	r2,r3,r2
  827ee0:	f800283a 	ret
  827ee4:	0005883a 	mov	r2,zero
  827ee8:	f800283a 	ret
  827eec:	180f883a 	mov	r7,r3
  827ef0:	20c00017 	ldw	r3,0(r4)
  827ef4:	28800017 	ldw	r2,0(r5)
  827ef8:	18bfed1e 	bne	r3,r2,827eb0 <memcmp+0x14>
  827efc:	31bfff04 	addi	r6,r6,-4
  827f00:	21000104 	addi	r4,r4,4
  827f04:	29400104 	addi	r5,r5,4
  827f08:	39bff936 	bltu	r7,r6,827ef0 <memcmp+0x54>
  827f0c:	003fe806 	br	827eb0 <memcmp+0x14>

00827f10 <__register_exitproc>:
  827f10:	defffa04 	addi	sp,sp,-24
  827f14:	008020f4 	movhi	r2,131
  827f18:	10805c04 	addi	r2,r2,368
  827f1c:	dc000015 	stw	r16,0(sp)
  827f20:	14000017 	ldw	r16,0(r2)
  827f24:	dd000415 	stw	r20,16(sp)
  827f28:	2829883a 	mov	r20,r5
  827f2c:	81405217 	ldw	r5,328(r16)
  827f30:	dcc00315 	stw	r19,12(sp)
  827f34:	dc800215 	stw	r18,8(sp)
  827f38:	dc400115 	stw	r17,4(sp)
  827f3c:	dfc00515 	stw	ra,20(sp)
  827f40:	2023883a 	mov	r17,r4
  827f44:	3027883a 	mov	r19,r6
  827f48:	3825883a 	mov	r18,r7
  827f4c:	28002526 	beq	r5,zero,827fe4 <__register_exitproc+0xd4>
  827f50:	29000117 	ldw	r4,4(r5)
  827f54:	008007c4 	movi	r2,31
  827f58:	11002716 	blt	r2,r4,827ff8 <__register_exitproc+0xe8>
  827f5c:	8800101e 	bne	r17,zero,827fa0 <__register_exitproc+0x90>
  827f60:	2105883a 	add	r2,r4,r4
  827f64:	1085883a 	add	r2,r2,r2
  827f68:	20c00044 	addi	r3,r4,1
  827f6c:	1145883a 	add	r2,r2,r5
  827f70:	0009883a 	mov	r4,zero
  827f74:	15000215 	stw	r20,8(r2)
  827f78:	28c00115 	stw	r3,4(r5)
  827f7c:	2005883a 	mov	r2,r4
  827f80:	dfc00517 	ldw	ra,20(sp)
  827f84:	dd000417 	ldw	r20,16(sp)
  827f88:	dcc00317 	ldw	r19,12(sp)
  827f8c:	dc800217 	ldw	r18,8(sp)
  827f90:	dc400117 	ldw	r17,4(sp)
  827f94:	dc000017 	ldw	r16,0(sp)
  827f98:	dec00604 	addi	sp,sp,24
  827f9c:	f800283a 	ret
  827fa0:	29802204 	addi	r6,r5,136
  827fa4:	00800044 	movi	r2,1
  827fa8:	110e983a 	sll	r7,r2,r4
  827fac:	30c04017 	ldw	r3,256(r6)
  827fb0:	2105883a 	add	r2,r4,r4
  827fb4:	1085883a 	add	r2,r2,r2
  827fb8:	1185883a 	add	r2,r2,r6
  827fbc:	19c6b03a 	or	r3,r3,r7
  827fc0:	14802015 	stw	r18,128(r2)
  827fc4:	14c00015 	stw	r19,0(r2)
  827fc8:	00800084 	movi	r2,2
  827fcc:	30c04015 	stw	r3,256(r6)
  827fd0:	88bfe31e 	bne	r17,r2,827f60 <__register_exitproc+0x50>
  827fd4:	30804117 	ldw	r2,260(r6)
  827fd8:	11c4b03a 	or	r2,r2,r7
  827fdc:	30804115 	stw	r2,260(r6)
  827fe0:	003fdf06 	br	827f60 <__register_exitproc+0x50>
  827fe4:	008020f4 	movhi	r2,131
  827fe8:	109e6e04 	addi	r2,r2,31160
  827fec:	100b883a 	mov	r5,r2
  827ff0:	80805215 	stw	r2,328(r16)
  827ff4:	003fd606 	br	827f50 <__register_exitproc+0x40>
  827ff8:	00802074 	movhi	r2,129
  827ffc:	1093d604 	addi	r2,r2,20312
  828000:	1000021e 	bne	r2,zero,82800c <__register_exitproc+0xfc>
  828004:	013fffc4 	movi	r4,-1
  828008:	003fdc06 	br	827f7c <__register_exitproc+0x6c>
  82800c:	01006404 	movi	r4,400
  828010:	103ee83a 	callr	r2
  828014:	1007883a 	mov	r3,r2
  828018:	103ffa26 	beq	r2,zero,828004 <__register_exitproc+0xf4>
  82801c:	80805217 	ldw	r2,328(r16)
  828020:	180b883a 	mov	r5,r3
  828024:	18000115 	stw	zero,4(r3)
  828028:	18800015 	stw	r2,0(r3)
  82802c:	80c05215 	stw	r3,328(r16)
  828030:	18006215 	stw	zero,392(r3)
  828034:	18006315 	stw	zero,396(r3)
  828038:	0009883a 	mov	r4,zero
  82803c:	883fc826 	beq	r17,zero,827f60 <__register_exitproc+0x50>
  828040:	003fd706 	br	827fa0 <__register_exitproc+0x90>

00828044 <register_fini>:
  828044:	f800283a 	ret

00828048 <__call_exitprocs>:
  828048:	008020f4 	movhi	r2,131
  82804c:	10805c04 	addi	r2,r2,368
  828050:	10800017 	ldw	r2,0(r2)
  828054:	defff304 	addi	sp,sp,-52
  828058:	df000b15 	stw	fp,44(sp)
  82805c:	d8800115 	stw	r2,4(sp)
  828060:	00802074 	movhi	r2,129
  828064:	1093d104 	addi	r2,r2,20292
  828068:	1005003a 	cmpeq	r2,r2,zero
  82806c:	d8800215 	stw	r2,8(sp)
  828070:	d8800117 	ldw	r2,4(sp)
  828074:	dd400815 	stw	r21,32(sp)
  828078:	dd000715 	stw	r20,28(sp)
  82807c:	10805204 	addi	r2,r2,328
  828080:	dfc00c15 	stw	ra,48(sp)
  828084:	ddc00a15 	stw	r23,40(sp)
  828088:	dd800915 	stw	r22,36(sp)
  82808c:	dcc00615 	stw	r19,24(sp)
  828090:	dc800515 	stw	r18,20(sp)
  828094:	dc400415 	stw	r17,16(sp)
  828098:	dc000315 	stw	r16,12(sp)
  82809c:	282b883a 	mov	r21,r5
  8280a0:	2039883a 	mov	fp,r4
  8280a4:	d8800015 	stw	r2,0(sp)
  8280a8:	2829003a 	cmpeq	r20,r5,zero
  8280ac:	d8800117 	ldw	r2,4(sp)
  8280b0:	14405217 	ldw	r17,328(r2)
  8280b4:	88001026 	beq	r17,zero,8280f8 <__call_exitprocs+0xb0>
  8280b8:	ddc00017 	ldw	r23,0(sp)
  8280bc:	88800117 	ldw	r2,4(r17)
  8280c0:	8c802204 	addi	r18,r17,136
  8280c4:	143fffc4 	addi	r16,r2,-1
  8280c8:	80000916 	blt	r16,zero,8280f0 <__call_exitprocs+0xa8>
  8280cc:	05bfffc4 	movi	r22,-1
  8280d0:	a000151e 	bne	r20,zero,828128 <__call_exitprocs+0xe0>
  8280d4:	8409883a 	add	r4,r16,r16
  8280d8:	2105883a 	add	r2,r4,r4
  8280dc:	1485883a 	add	r2,r2,r18
  8280e0:	10c02017 	ldw	r3,128(r2)
  8280e4:	a8c01126 	beq	r21,r3,82812c <__call_exitprocs+0xe4>
  8280e8:	843fffc4 	addi	r16,r16,-1
  8280ec:	85bff81e 	bne	r16,r22,8280d0 <__call_exitprocs+0x88>
  8280f0:	d8800217 	ldw	r2,8(sp)
  8280f4:	10003126 	beq	r2,zero,8281bc <__call_exitprocs+0x174>
  8280f8:	dfc00c17 	ldw	ra,48(sp)
  8280fc:	df000b17 	ldw	fp,44(sp)
  828100:	ddc00a17 	ldw	r23,40(sp)
  828104:	dd800917 	ldw	r22,36(sp)
  828108:	dd400817 	ldw	r21,32(sp)
  82810c:	dd000717 	ldw	r20,28(sp)
  828110:	dcc00617 	ldw	r19,24(sp)
  828114:	dc800517 	ldw	r18,20(sp)
  828118:	dc400417 	ldw	r17,16(sp)
  82811c:	dc000317 	ldw	r16,12(sp)
  828120:	dec00d04 	addi	sp,sp,52
  828124:	f800283a 	ret
  828128:	8409883a 	add	r4,r16,r16
  82812c:	88c00117 	ldw	r3,4(r17)
  828130:	2105883a 	add	r2,r4,r4
  828134:	1445883a 	add	r2,r2,r17
  828138:	18ffffc4 	addi	r3,r3,-1
  82813c:	11800217 	ldw	r6,8(r2)
  828140:	1c001526 	beq	r3,r16,828198 <__call_exitprocs+0x150>
  828144:	10000215 	stw	zero,8(r2)
  828148:	303fe726 	beq	r6,zero,8280e8 <__call_exitprocs+0xa0>
  82814c:	00c00044 	movi	r3,1
  828150:	1c06983a 	sll	r3,r3,r16
  828154:	90804017 	ldw	r2,256(r18)
  828158:	8cc00117 	ldw	r19,4(r17)
  82815c:	1884703a 	and	r2,r3,r2
  828160:	10001426 	beq	r2,zero,8281b4 <__call_exitprocs+0x16c>
  828164:	90804117 	ldw	r2,260(r18)
  828168:	1884703a 	and	r2,r3,r2
  82816c:	10000c1e 	bne	r2,zero,8281a0 <__call_exitprocs+0x158>
  828170:	2105883a 	add	r2,r4,r4
  828174:	1485883a 	add	r2,r2,r18
  828178:	11400017 	ldw	r5,0(r2)
  82817c:	e009883a 	mov	r4,fp
  828180:	303ee83a 	callr	r6
  828184:	88800117 	ldw	r2,4(r17)
  828188:	98bfc81e 	bne	r19,r2,8280ac <__call_exitprocs+0x64>
  82818c:	b8800017 	ldw	r2,0(r23)
  828190:	147fd526 	beq	r2,r17,8280e8 <__call_exitprocs+0xa0>
  828194:	003fc506 	br	8280ac <__call_exitprocs+0x64>
  828198:	8c000115 	stw	r16,4(r17)
  82819c:	003fea06 	br	828148 <__call_exitprocs+0x100>
  8281a0:	2105883a 	add	r2,r4,r4
  8281a4:	1485883a 	add	r2,r2,r18
  8281a8:	11000017 	ldw	r4,0(r2)
  8281ac:	303ee83a 	callr	r6
  8281b0:	003ff406 	br	828184 <__call_exitprocs+0x13c>
  8281b4:	303ee83a 	callr	r6
  8281b8:	003ff206 	br	828184 <__call_exitprocs+0x13c>
  8281bc:	88800117 	ldw	r2,4(r17)
  8281c0:	1000081e 	bne	r2,zero,8281e4 <__call_exitprocs+0x19c>
  8281c4:	89000017 	ldw	r4,0(r17)
  8281c8:	20000726 	beq	r4,zero,8281e8 <__call_exitprocs+0x1a0>
  8281cc:	b9000015 	stw	r4,0(r23)
  8281d0:	8809883a 	mov	r4,r17
  8281d4:	0814f440 	call	814f44 <free>
  8281d8:	bc400017 	ldw	r17,0(r23)
  8281dc:	883fb71e 	bne	r17,zero,8280bc <__call_exitprocs+0x74>
  8281e0:	003fc506 	br	8280f8 <__call_exitprocs+0xb0>
  8281e4:	89000017 	ldw	r4,0(r17)
  8281e8:	882f883a 	mov	r23,r17
  8281ec:	2023883a 	mov	r17,r4
  8281f0:	883fb21e 	bne	r17,zero,8280bc <__call_exitprocs+0x74>
  8281f4:	003fc006 	br	8280f8 <__call_exitprocs+0xb0>

008281f8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  8281f8:	defffd04 	addi	sp,sp,-12
  8281fc:	df000215 	stw	fp,8(sp)
  828200:	df000204 	addi	fp,sp,8
  828204:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  828208:	e0bfff17 	ldw	r2,-4(fp)
  82820c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  828210:	e0bffe17 	ldw	r2,-8(fp)
  828214:	1005003a 	cmpeq	r2,r2,zero
  828218:	1000021e 	bne	r2,zero,828224 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  82821c:	002af070 	cmpltui	zero,zero,43969
  828220:	00000106 	br	828228 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  828224:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  828228:	e037883a 	mov	sp,fp
  82822c:	df000017 	ldw	fp,0(sp)
  828230:	dec00104 	addi	sp,sp,4
  828234:	f800283a 	ret

00828238 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  828238:	defffd04 	addi	sp,sp,-12
  82823c:	dfc00215 	stw	ra,8(sp)
  828240:	df000115 	stw	fp,4(sp)
  828244:	df000104 	addi	fp,sp,4
  828248:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  82824c:	e13fff17 	ldw	r4,-4(fp)
  828250:	08281f80 	call	8281f8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  828254:	003fff06 	br	828254 <_exit+0x1c>
  828258:	00000010 	cmplti	zero,zero,0
  82825c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  828260:	00527a01 	jmpi	527a0 <__alt_mem_sdram-0x7ad860>
  828264:	011f7c01 	jmpi	11f7c0 <__alt_mem_sdram-0x6e0840>
  828268:	001b0c0b 	ldhu	zero,27696(zero)
  82826c:	00000028 	cmpgeui	zero,zero,0
  828270:	00000018 	cmpnei	zero,zero,0
  828274:	0081c848 	cmpgei	r2,zero,1825
  828278:	000005dc 	xori	zero,zero,23
  82827c:	400e4400 	call	400e440 <__alt_data_end+0x300e440>
  828280:	92099170 	cmpltui	r8,r18,9797
  828284:	95079308 	cmpgei	r20,r18,7756
  828288:	97049605 	stb	fp,4696(r18)
  82828c:	90019f03 	ldbu	zero,1660(r18)
  828290:	9c06940a 	0x9c06940a
  828294:	00000002 	0x2
  828298:	00000028 	cmpgeui	zero,zero,0
  82829c:	00000044 	movi	zero,1
  8282a0:	0081ce24 	muli	r2,zero,1848
  8282a4:	000005b0 	cmpltui	zero,zero,22
  8282a8:	3c0e4400 	call	3c0e440 <__alt_data_end+0x2c0e440>
  8282ac:	92099168 	cmpgeui	r8,r18,9797
  8282b0:	95079308 	cmpgei	r20,r18,7756
  8282b4:	9c039705 	stb	r16,3676(r19)
  8282b8:	90019f02 	0x90019f02
  8282bc:	9606940a 	0x9606940a
  8282c0:	00000004 	movi	zero,0
  8282c4:	00828044 	movi	r2,2561
